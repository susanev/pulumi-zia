{
    "name": "zia",
    "displayName": "Zscaler Internet Access",
    "description": "A Pulumi package for creating and managing zia cloud resources.",
    "keywords": [
        "pulumi",
        "zia",
        "zscaler",
        "category/cloud"
    ],
    "homepage": "https://www.zscaler.com",
    "license": "MIT",
    "attribution": "This Pulumi package is based on the [`zia` Terraform Provider](https://github.com/zscaler/terraform-provider-zia).",
    "repository": "https://github.com/zscaler/pulumi-zia",
    "logoUrl": "https://raw.githubusercontent.com/zscaler/pulumi-zia/main/assets/svg/logo.svg",
    "pluginDownloadURL": "github://api.github.com/zscaler",
    "publisher": "Zscaler",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "language": {
        "csharp": {
            "compatibility": "tfbridge20",
            "namespaces": null,
            "packageReferences": {
                "Pulumi": "3.*"
            },
            "rootNamespace": "zscaler.PulumiPackage"
        },
        "go": {
            "generateExtraInputTypes": true,
            "generateResourceContainerTypes": true,
            "importBasePath": "github.com/zscaler/pulumi-zia/sdk/go/zia"
        },
        "nodejs": {
            "compatibility": "tfbridge20",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "disableUnionOutputTypes": true,
            "packageDescription": "A Pulumi package for creating and managing zia cloud resources.. Based on terraform-provider-zia: version v2.3.6",
            "packageName": "@zscaler/pulumi-zia",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/zscaler/terraform-provider-zia)\n\u003e distributed under [MIT](https://mit-license.org/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-zia` repo](https://github.com/zscaler/pulumi-zia/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-zia` repo](https://github.com/zscaler/terraform-provider-zia/issues).",
            "typescriptVersion": ""
        },
        "python": {
            "compatibility": "tfbridge20",
            "packageName": "zscaler_pulumi_zia",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/zscaler/terraform-provider-zia)\n\u003e distributed under [MIT](https://mit-license.org/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-zia` repo](https://github.com/zscaler/pulumi-zia/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-zia` repo](https://github.com/zscaler/terraform-provider-zia/issues).",
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            }
        }
    },
    "config": {
        "variables": {
            "apiKey": {
                "type": "string",
                "defaultInfo": {
                    "environment": [
                        "ZIA_API_KEY"
                    ]
                },
                "secret": true
            },
            "password": {
                "type": "string",
                "defaultInfo": {
                    "environment": [
                        "ZIA_PASSWORD"
                    ]
                },
                "secret": true
            },
            "username": {
                "type": "string",
                "defaultInfo": {
                    "environment": [
                        "ZIA_USERNAME"
                    ]
                }
            },
            "ziaCloud": {
                "type": "string",
                "defaultInfo": {
                    "environment": [
                        "ZIA_CLOUD"
                    ]
                }
            }
        },
        "defaults": [
            "apiKey",
            "password",
            "username",
            "ziaCloud"
        ]
    },
    "types": {
        "zia:AdminUsers/AdminUsersAdminScope:AdminUsersAdminScope": {
            "properties": {
                "scopeEntities": {
                    "$ref": "#/types/zia:AdminUsers/AdminUsersAdminScopeScopeEntities:AdminUsersAdminScopeScopeEntities",
                    "description": "Based on the admin scope type, the entities can be the ID/name pair of departments, locations, or location groups.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "scopeGroupMemberEntities": {
                    "$ref": "#/types/zia:AdminUsers/AdminUsersAdminScopeScopeGroupMemberEntities:AdminUsersAdminScopeScopeGroupMemberEntities",
                    "description": "Only applicable for the LOCATION_GROUP admin scope type, in which case this attribute gives the list of ID/name pairs of locations within the location group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "The admin scope type. The attribute name is subject to change.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "scopeEntities",
                        "scopeGroupMemberEntities",
                        "type"
                    ]
                }
            }
        },
        "zia:AdminUsers/AdminUsersAdminScopeScopeEntities:AdminUsersAdminScopeScopeEntities": {
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Identifier that uniquely identifies an entity\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ids"
            ]
        },
        "zia:AdminUsers/AdminUsersAdminScopeScopeGroupMemberEntities:AdminUsersAdminScopeScopeGroupMemberEntities": {
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Identifier that uniquely identifies an entity\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ids"
            ]
        },
        "zia:AdminUsers/AdminUsersRole:AdminUsersRole": {
            "properties": {
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "description": "Identifier that uniquely identifies an entity\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "isNameL10nTag": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The configured name of the entity\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "extensions",
                        "id",
                        "isNameL10nTag",
                        "name"
                    ]
                }
            }
        },
        "zia:AdminUsers/getAdminUsersAdminScope:getAdminUsersAdminScope": {
            "properties": {
                "scopeEntities": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zia:AdminUsers/getAdminUsersAdminScopeScopeEntity:getAdminUsersAdminScopeScopeEntity"
                    },
                    "description": "(String) Based on the admin scope type, the entities can be the ID/name pair of departments, locations, or location groups.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "scopeGroupMemberEntities": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zia:AdminUsers/getAdminUsersAdminScopeScopeGroupMemberEntity:getAdminUsersAdminScopeScopeGroupMemberEntity"
                    },
                    "description": "(Number) Only applicable for the LOCATION_GROUP admin scope type, in which case this attribute gives the list of ID/name pairs of locations within the location group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "(String) The admin scope type. The attribute name is subject to change.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "scopeEntities",
                "scopeGroupMemberEntities",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:AdminUsers/getAdminUsersAdminScopeScopeEntity:getAdminUsersAdminScopeScopeEntity": {
            "properties": {
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "description": "The ID of the admin user to be exported.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "(String)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "extensions",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:AdminUsers/getAdminUsersAdminScopeScopeGroupMemberEntity:getAdminUsersAdminScopeScopeGroupMemberEntity": {
            "properties": {
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "description": "The ID of the admin user to be exported.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "(String)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "extensions",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:AdminUsers/getAdminUsersExecMobileAppToken:getAdminUsersExecMobileAppToken": {
            "properties": {
                "cloud": {
                    "type": "string",
                    "description": "(String)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "createTime": {
                    "type": "integer",
                    "description": "(Number)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "deviceId": {
                    "type": "string",
                    "description": "(String)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "deviceName": {
                    "type": "string",
                    "description": "(String)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "(String)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "orgId": {
                    "type": "integer",
                    "description": "(Number)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "token": {
                    "type": "string",
                    "description": "(String)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tokenExpiry": {
                    "type": "integer",
                    "description": "(Number)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tokenId": {
                    "type": "string",
                    "description": "(String)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "cloud",
                "createTime",
                "deviceId",
                "deviceName",
                "name",
                "orgId",
                "token",
                "tokenExpiry",
                "tokenId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:AdminUsers/getAdminUsersRole:getAdminUsersRole": {
            "properties": {
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "description": "The ID of the admin user to be exported.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "(String)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "extensions",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:DLP/DLPDictionariesExactDataMatchDetail:DLPDictionariesExactDataMatchDetail": {
            "properties": {
                "dictionaryEdmMappingId": {
                    "type": "integer",
                    "description": "The unique identifier for the EDM mapping.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "primaryField": {
                    "type": "integer",
                    "description": "The EDM template's primary field.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "schemaId": {
                    "type": "integer",
                    "description": "The unique identifier for the EDM template (or schema).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "secondaryFieldMatchOn": {
                    "type": "string",
                    "description": "The EDM secondary field to match on.\n- `\"MATCHON_NONE\"`\n- `\"MATCHON_ANY_1\"`\n- `\"MATCHON_ANY_2\"`\n- `\"MATCHON_ANY_3\"`\n- `\"MATCHON_ANY_4\"`\n- `\"MATCHON_ANY_5\"`\n- `\"MATCHON_ANY_6\"`\n- `\"MATCHON_ANY_7\"`\n- `\"MATCHON_ANY_8\"`\n- `\"MATCHON_ANY_9\"`\n- `\"MATCHON_ANY_10\"`\n- `\"MATCHON_ANY_11\"`\n- `\"MATCHON_ANY_12\"`\n- `\"MATCHON_ANY_13\"`\n- `\"MATCHON_ANY_14\"`\n- `\"MATCHON_ANY_15\"`\n- `\"MATCHON_ALL\"`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "secondaryFields": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "The EDM template's secondary fields.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "dictionaryEdmMappingId",
                        "schemaId",
                        "secondaryFields"
                    ]
                }
            }
        },
        "zia:DLP/DLPDictionariesIdmProfileMatchAccuracy:DLPDictionariesIdmProfileMatchAccuracy": {
            "properties": {
                "adpIdmProfile": {
                    "$ref": "#/types/zia:DLP/DLPDictionariesIdmProfileMatchAccuracyAdpIdmProfile:DLPDictionariesIdmProfileMatchAccuracyAdpIdmProfile",
                    "description": "The IDM template reference.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "matchAccuracy": {
                    "type": "string",
                    "description": "The IDM template match accuracy.\n- `\"LOW\"`\n- `\"MEDIUM\"`\n- `\"HEAVY\"`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "zia:DLP/DLPDictionariesIdmProfileMatchAccuracyAdpIdmProfile:DLPDictionariesIdmProfileMatchAccuracyAdpIdmProfile": {
            "properties": {
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "extensions",
                        "id"
                    ]
                }
            }
        },
        "zia:DLP/DLPDictionariesPattern:DLPDictionariesPattern": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "The action applied to a DLP dictionary using patterns. The following values are supported:\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "pattern": {
                    "type": "string",
                    "description": "DLP dictionary pattern\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "zia:DLP/DLPDictionariesPhrase:DLPDictionariesPhrase": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "The action applied to a DLP dictionary using patterns. The following values are supported:\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "phrase": {
                    "type": "string",
                    "description": "DLP dictionary phrase\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "zia:DLP/DLPWebRulesAuditor:DLPWebRulesAuditor": {
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "Identifier that uniquely identifies an entity\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "zia:DLP/DLPWebRulesDepartments:DLPWebRulesDepartments": {
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Identifier that uniquely identifies an entity\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ids"
            ]
        },
        "zia:DLP/DLPWebRulesDlpEngines:DLPWebRulesDlpEngines": {
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Identifier that uniquely identifies an entity\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ids"
            ]
        },
        "zia:DLP/DLPWebRulesExcludedDepartments:DLPWebRulesExcludedDepartments": {
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Identifier that uniquely identifies an entity\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ids"
            ]
        },
        "zia:DLP/DLPWebRulesExcludedGroups:DLPWebRulesExcludedGroups": {
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Identifier that uniquely identifies an entity\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ids"
            ]
        },
        "zia:DLP/DLPWebRulesExcludedUsers:DLPWebRulesExcludedUsers": {
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Identifier that uniquely identifies an entity\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ids"
            ]
        },
        "zia:DLP/DLPWebRulesGroups:DLPWebRulesGroups": {
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Identifier that uniquely identifies an entity\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ids"
            ]
        },
        "zia:DLP/DLPWebRulesIcapServer:DLPWebRulesIcapServer": {
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "Identifier that uniquely identifies an entity\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "zia:DLP/DLPWebRulesLabels:DLPWebRulesLabels": {
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Identifier that uniquely identifies an entity\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ids"
            ]
        },
        "zia:DLP/DLPWebRulesLocationGroups:DLPWebRulesLocationGroups": {
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Identifier that uniquely identifies an entity\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ids"
            ]
        },
        "zia:DLP/DLPWebRulesLocations:DLPWebRulesLocations": {
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Identifier that uniquely identifies an entity\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ids"
            ]
        },
        "zia:DLP/DLPWebRulesNotificationTemplate:DLPWebRulesNotificationTemplate": {
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "Identifier that uniquely identifies an entity\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id"
            ]
        },
        "zia:DLP/DLPWebRulesTimeWindows:DLPWebRulesTimeWindows": {
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Identifier that uniquely identifies an entity\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ids"
            ]
        },
        "zia:DLP/DLPWebRulesUrlCategories:DLPWebRulesUrlCategories": {
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Identifier that uniquely identifies an entity\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ids"
            ]
        },
        "zia:DLP/DLPWebRulesUsers:DLPWebRulesUsers": {
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Identifier that uniquely identifies an entity\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ids"
            ]
        },
        "zia:DLP/getDLPDictionariesExactDataMatchDetail:getDLPDictionariesExactDataMatchDetail": {
            "properties": {
                "dictionaryEdmMappingId": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "primaryField": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "schemaId": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "secondaryFieldMatchOn": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "secondaryFields": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "dictionaryEdmMappingId",
                "primaryField",
                "schemaId",
                "secondaryFieldMatchOn",
                "secondaryFields"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:DLP/getDLPDictionariesIdmProfileMatchAccuracy:getDLPDictionariesIdmProfileMatchAccuracy": {
            "properties": {
                "adpIdmProfiles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zia:DLP/getDLPDictionariesIdmProfileMatchAccuracyAdpIdmProfile:getDLPDictionariesIdmProfileMatchAccuracyAdpIdmProfile"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "matchAccuracy": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "adpIdmProfiles",
                "matchAccuracy"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:DLP/getDLPDictionariesIdmProfileMatchAccuracyAdpIdmProfile:getDLPDictionariesIdmProfileMatchAccuracyAdpIdmProfile": {
            "properties": {
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "description": "Unique identifier for the DLP dictionary\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "extensions",
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:DLP/getDLPDictionariesPattern:getDLPDictionariesPattern": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "(String) The action applied to a DLP dictionary using patterns\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "pattern": {
                    "type": "string",
                    "description": "(String) DLP dictionary pattern\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "action",
                "pattern"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:DLP/getDLPDictionariesPhrase:getDLPDictionariesPhrase": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "(String) The action applied to a DLP dictionary using patterns\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "phrase": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "action",
                "phrase"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:DLP/getDLPWebRulesAuditor:getDLPWebRulesAuditor": {
            "properties": {
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "description": "Identifier that uniquely identifies an entity\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The DLP policy rule name.\nrules.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "extensions",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:DLP/getDLPWebRulesDepartment:getDLPWebRulesDepartment": {
            "properties": {
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "description": "Identifier that uniquely identifies an entity\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The DLP policy rule name.\nrules.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "extensions",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:DLP/getDLPWebRulesDlpEngine:getDLPWebRulesDlpEngine": {
            "properties": {
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "description": "Identifier that uniquely identifies an entity\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The DLP policy rule name.\nrules.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "extensions",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:DLP/getDLPWebRulesExcludedDepartment:getDLPWebRulesExcludedDepartment": {
            "properties": {
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "description": "Identifier that uniquely identifies an entity\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "extensions",
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:DLP/getDLPWebRulesExcludedGroup:getDLPWebRulesExcludedGroup": {
            "properties": {
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "description": "Identifier that uniquely identifies an entity\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "extensions",
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:DLP/getDLPWebRulesExcludedUser:getDLPWebRulesExcludedUser": {
            "properties": {
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "description": "Identifier that uniquely identifies an entity\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "extensions",
                "id"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:DLP/getDLPWebRulesGroup:getDLPWebRulesGroup": {
            "properties": {
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "description": "Identifier that uniquely identifies an entity\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The DLP policy rule name.\nrules.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "extensions",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:DLP/getDLPWebRulesIcapServer:getDLPWebRulesIcapServer": {
            "properties": {
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "description": "Identifier that uniquely identifies an entity\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The DLP policy rule name.\nrules.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "extensions",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:DLP/getDLPWebRulesLabel:getDLPWebRulesLabel": {
            "properties": {
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "description": "Identifier that uniquely identifies an entity\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The DLP policy rule name.\nrules.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "extensions",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:DLP/getDLPWebRulesLastModifiedBy:getDLPWebRulesLastModifiedBy": {
            "properties": {
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "description": "Identifier that uniquely identifies an entity\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The DLP policy rule name.\nrules.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "extensions",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:DLP/getDLPWebRulesLocation:getDLPWebRulesLocation": {
            "properties": {
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "description": "Identifier that uniquely identifies an entity\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The DLP policy rule name.\nrules.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "extensions",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:DLP/getDLPWebRulesLocationGroup:getDLPWebRulesLocationGroup": {
            "properties": {
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "description": "Identifier that uniquely identifies an entity\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The DLP policy rule name.\nrules.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "extensions",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:DLP/getDLPWebRulesNotificationTemplate:getDLPWebRulesNotificationTemplate": {
            "properties": {
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "description": "Identifier that uniquely identifies an entity\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The DLP policy rule name.\nrules.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "extensions",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:DLP/getDLPWebRulesTimeWindow:getDLPWebRulesTimeWindow": {
            "properties": {
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "description": "Identifier that uniquely identifies an entity\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The DLP policy rule name.\nrules.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "extensions",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:DLP/getDLPWebRulesUrlCategory:getDLPWebRulesUrlCategory": {
            "properties": {
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "description": "Identifier that uniquely identifies an entity\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The DLP policy rule name.\nrules.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "extensions",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:DLP/getDLPWebRulesUser:getDLPWebRulesUser": {
            "properties": {
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "description": "Identifier that uniquely identifies an entity\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The DLP policy rule name.\nrules.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "extensions",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:Firewall/FirewallFilteringNetworkServicesDestTcpPort:FirewallFilteringNetworkServicesDestTcpPort": {
            "properties": {
                "end": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "start": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "zia:Firewall/FirewallFilteringNetworkServicesDestUdpPort:FirewallFilteringNetworkServicesDestUdpPort": {
            "properties": {
                "end": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "start": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "zia:Firewall/FirewallFilteringNetworkServicesSrcTcpPort:FirewallFilteringNetworkServicesSrcTcpPort": {
            "properties": {
                "end": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "start": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "zia:Firewall/FirewallFilteringNetworkServicesSrcUdpPort:FirewallFilteringNetworkServicesSrcUdpPort": {
            "properties": {
                "end": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "start": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "zia:Firewall/FirewallFilteringRuleAppServiceGroups:FirewallFilteringRuleAppServiceGroups": {
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Identifier that uniquely identifies an entity\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ids"
            ]
        },
        "zia:Firewall/FirewallFilteringRuleAppServices:FirewallFilteringRuleAppServices": {
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Identifier that uniquely identifies an entity\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ids"
            ]
        },
        "zia:Firewall/FirewallFilteringRuleDepartments:FirewallFilteringRuleDepartments": {
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Identifier that uniquely identifies an entity\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ids"
            ]
        },
        "zia:Firewall/FirewallFilteringRuleDestIpGroups:FirewallFilteringRuleDestIpGroups": {
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Identifier that uniquely identifies an entity\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ids"
            ]
        },
        "zia:Firewall/FirewallFilteringRuleGroups:FirewallFilteringRuleGroups": {
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Identifier that uniquely identifies an entity\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ids"
            ]
        },
        "zia:Firewall/FirewallFilteringRuleLabels:FirewallFilteringRuleLabels": {
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Identifier that uniquely identifies an entity\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ids"
            ]
        },
        "zia:Firewall/FirewallFilteringRuleLastModifiedBy:FirewallFilteringRuleLastModifiedBy": {
            "properties": {
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "description": "Identifier that uniquely identifies an entity\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "zia:Firewall/FirewallFilteringRuleLocationGroups:FirewallFilteringRuleLocationGroups": {
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Identifier that uniquely identifies an entity\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ids"
            ]
        },
        "zia:Firewall/FirewallFilteringRuleLocations:FirewallFilteringRuleLocations": {
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Identifier that uniquely identifies an entity\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ids"
            ]
        },
        "zia:Firewall/FirewallFilteringRuleNwApplicationGroups:FirewallFilteringRuleNwApplicationGroups": {
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Identifier that uniquely identifies an entity\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ids"
            ]
        },
        "zia:Firewall/FirewallFilteringRuleNwServiceGroups:FirewallFilteringRuleNwServiceGroups": {
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Identifier that uniquely identifies an entity\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ids"
            ]
        },
        "zia:Firewall/FirewallFilteringRuleNwServices:FirewallFilteringRuleNwServices": {
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Identifier that uniquely identifies an entity\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ids"
            ]
        },
        "zia:Firewall/FirewallFilteringRuleSrcIpGroups:FirewallFilteringRuleSrcIpGroups": {
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Identifier that uniquely identifies an entity\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ids"
            ]
        },
        "zia:Firewall/FirewallFilteringRuleTimeWindows:FirewallFilteringRuleTimeWindows": {
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Identifier that uniquely identifies an entity\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ids"
            ]
        },
        "zia:Firewall/FirewallFilteringRuleUsers:FirewallFilteringRuleUsers": {
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Identifier that uniquely identifies an entity\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ids"
            ]
        },
        "zia:Firewall/FirewallFilteringServiceGroupsService:FirewallFilteringServiceGroupsService": {
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ids"
            ]
        },
        "zia:Firewall/getFirewallFilteringNetworkServiceGroupsService:getFirewallFilteringNetworkServiceGroupsService": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "(String)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "description": "The ID of the ip source group to be exported.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "isNameL10nTag": {
                    "type": "boolean",
                    "description": "(Bool) - Default: false\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of the ip source group to be exported.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "description",
                "id",
                "isNameL10nTag"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:Firewall/getFirewallFilteringNetworkServicesDestTcpPort:getFirewallFilteringNetworkServicesDestTcpPort": {
            "properties": {
                "end": {
                    "type": "integer",
                    "description": "(Number)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "start": {
                    "type": "integer",
                    "description": "(Number)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "end",
                "start"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:Firewall/getFirewallFilteringNetworkServicesDestUdpPort:getFirewallFilteringNetworkServicesDestUdpPort": {
            "properties": {
                "end": {
                    "type": "integer",
                    "description": "(Number)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "start": {
                    "type": "integer",
                    "description": "(Number)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "end",
                "start"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:Firewall/getFirewallFilteringNetworkServicesSrcTcpPort:getFirewallFilteringNetworkServicesSrcTcpPort": {
            "properties": {
                "end": {
                    "type": "integer",
                    "description": "(Number)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "start": {
                    "type": "integer",
                    "description": "(Number)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "end",
                "start"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:Firewall/getFirewallFilteringNetworkServicesSrcUdpPort:getFirewallFilteringNetworkServicesSrcUdpPort": {
            "properties": {
                "end": {
                    "type": "integer",
                    "description": "(Number)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "start": {
                    "type": "integer",
                    "description": "(Number)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "end",
                "start"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:Firewall/getFirewallFilteringRuleAppService:getFirewallFilteringRuleAppService": {
            "properties": {
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "(Map of String)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "description": "Unique identifier for the Firewall Filtering policy rule\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Firewall Filtering policy rule\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "extensions",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:Firewall/getFirewallFilteringRuleAppServiceGroup:getFirewallFilteringRuleAppServiceGroup": {
            "properties": {
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "(Map of String)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "description": "Unique identifier for the Firewall Filtering policy rule\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Firewall Filtering policy rule\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "extensions",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:Firewall/getFirewallFilteringRuleDepartment:getFirewallFilteringRuleDepartment": {
            "properties": {
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "(Map of String)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "description": "Unique identifier for the Firewall Filtering policy rule\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Firewall Filtering policy rule\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "extensions",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:Firewall/getFirewallFilteringRuleGroup:getFirewallFilteringRuleGroup": {
            "properties": {
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "(Map of String)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "description": "Unique identifier for the Firewall Filtering policy rule\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Firewall Filtering policy rule\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "extensions",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:Firewall/getFirewallFilteringRuleLabel:getFirewallFilteringRuleLabel": {
            "properties": {
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "(Map of String)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "description": "Unique identifier for the Firewall Filtering policy rule\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Firewall Filtering policy rule\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "extensions",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:Firewall/getFirewallFilteringRuleLastModifiedBy:getFirewallFilteringRuleLastModifiedBy": {
            "properties": {
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "(Map of String)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "description": "Unique identifier for the Firewall Filtering policy rule\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Firewall Filtering policy rule\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "extensions",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:Firewall/getFirewallFilteringRuleLocation:getFirewallFilteringRuleLocation": {
            "properties": {
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "(Map of String)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "description": "Unique identifier for the Firewall Filtering policy rule\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Firewall Filtering policy rule\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "extensions",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:Firewall/getFirewallFilteringRuleLocationGroup:getFirewallFilteringRuleLocationGroup": {
            "properties": {
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "(Map of String)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "description": "Unique identifier for the Firewall Filtering policy rule\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Firewall Filtering policy rule\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "extensions",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:Firewall/getFirewallFilteringRuleNwApplicationGroup:getFirewallFilteringRuleNwApplicationGroup": {
            "properties": {
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "(Map of String)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "description": "Unique identifier for the Firewall Filtering policy rule\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Firewall Filtering policy rule\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "extensions",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:Firewall/getFirewallFilteringRuleNwService:getFirewallFilteringRuleNwService": {
            "properties": {
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "(Map of String)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "description": "Unique identifier for the Firewall Filtering policy rule\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Firewall Filtering policy rule\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "extensions",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:Firewall/getFirewallFilteringRuleNwServiceGroup:getFirewallFilteringRuleNwServiceGroup": {
            "properties": {
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "(Map of String)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "description": "Unique identifier for the Firewall Filtering policy rule\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Firewall Filtering policy rule\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "extensions",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:Firewall/getFirewallFilteringRuleTimeWindow:getFirewallFilteringRuleTimeWindow": {
            "properties": {
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "(Map of String)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "description": "Unique identifier for the Firewall Filtering policy rule\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Firewall Filtering policy rule\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "extensions",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:Firewall/getFirewallFilteringRuleUser:getFirewallFilteringRuleUser": {
            "properties": {
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "(Map of String)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "description": "Unique identifier for the Firewall Filtering policy rule\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Firewall Filtering policy rule\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "extensions",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:LocationGroups/getLocationGroupsDynamicLocationGroupCriteria:getLocationGroupsDynamicLocationGroupCriteria": {
            "properties": {
                "cities": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zia:LocationGroups/getLocationGroupsDynamicLocationGroupCriteriaCity:getLocationGroupsDynamicLocationGroupCriteriaCity"
                    },
                    "description": "(Block List)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "countries": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "(List of String) One or more countries from a predefined set\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enableBandwidthControl": {
                    "type": "boolean",
                    "description": "(Boolean) Enable Bandwidth Control. When set to true, Bandwidth Control is enabled for the location.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enableCaution": {
                    "type": "boolean",
                    "description": "(Boolean) Enable Caution. When set to true, a caution notifcation is enabled for the location.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enableXffForwarding": {
                    "type": "boolean",
                    "description": "(Boolean) Enable `XFF` Forwarding. When set to true, traffic is passed to Zscaler Cloud via the X-Forwarded-For (XFF) header.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enforceAup": {
                    "type": "boolean",
                    "description": "(Boolean) Enable AUP. When set to true, AUP is enabled for the location.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enforceAuthentication": {
                    "type": "boolean",
                    "description": "(Boolean) Enforce Authentication. Required when ports are enabled, IP Surrogate is enabled, or Kerberos Authentication is enabled.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enforceFirewallControl": {
                    "type": "boolean",
                    "description": "(Boolean) Enable Firewall. When set to true, Firewall is enabled for the location.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "managedBies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zia:LocationGroups/getLocationGroupsDynamicLocationGroupCriteriaManagedBy:getLocationGroupsDynamicLocationGroupCriteriaManagedBy"
                    },
                    "description": "(Block List)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "names": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zia:LocationGroups/getLocationGroupsDynamicLocationGroupCriteriaName:getLocationGroupsDynamicLocationGroupCriteriaName"
                    },
                    "description": "Location group name\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "profiles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "(List of String) One or more location profiles from a predefined set\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "enableBandwidthControl",
                "enableCaution",
                "enableXffForwarding",
                "enforceAup",
                "enforceAuthentication",
                "enforceFirewallControl",
                "managedBies"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:LocationGroups/getLocationGroupsDynamicLocationGroupCriteriaCity:getLocationGroupsDynamicLocationGroupCriteriaCity": {
            "properties": {
                "matchString": {
                    "type": "string",
                    "description": "(String) String value to be matched or partially matched\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "matchType": {
                    "type": "string",
                    "description": "(String) Operator that performs match action\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "zia:LocationGroups/getLocationGroupsDynamicLocationGroupCriteriaManagedBy:getLocationGroupsDynamicLocationGroupCriteriaManagedBy": {
            "properties": {
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "(Map of String)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "description": "Unique identifier for the location group\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Location group name\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "extensions",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:LocationGroups/getLocationGroupsDynamicLocationGroupCriteriaName:getLocationGroupsDynamicLocationGroupCriteriaName": {
            "properties": {
                "matchString": {
                    "type": "string",
                    "description": "(String) String value to be matched or partially matched\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "matchType": {
                    "type": "string",
                    "description": "(String) Operator that performs match action\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "zia:LocationGroups/getLocationGroupsLastModUser:getLocationGroupsLastModUser": {
            "properties": {
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "(Map of String)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "description": "Unique identifier for the location group\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Location group name\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "extensions",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:LocationGroups/getLocationGroupsLocation:getLocationGroupsLocation": {
            "properties": {
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "(Map of String)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "description": "Unique identifier for the location group\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Location group name\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "extensions",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:LocationManagement/LocationManagementVpnCredential:LocationManagementVpnCredential": {
            "properties": {
                "comments": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fqdn": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "description": "VPN credential resource id. The value is required if `ip_addresses` are not defined.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ipAddress": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "preSharedKey": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "type": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "comments",
                        "fqdn",
                        "id",
                        "ipAddress",
                        "type"
                    ]
                }
            }
        },
        "zia:LocationManagement/getLocationManagementVpnCredential:getLocationManagementVpnCredential": {
            "properties": {
                "comments": {
                    "type": "string",
                    "description": "(String) Additional information about this VPN credential.\nAdditional information about this VPN credential.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fqdn": {
                    "type": "string",
                    "description": "(String) Fully Qualified Domain Name. Applicable only to `UFQDN` or `XAUTH` (or `HOSTED_MOBILE_USERS`) auth type.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "description": "The ID of the location to be exported.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "locations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zia:LocationManagement/getLocationManagementVpnCredentialLocation:getLocationManagementVpnCredentialLocation"
                    },
                    "description": "(List of Object)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "managedBies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zia:LocationManagement/getLocationManagementVpnCredentialManagedBy:getLocationManagementVpnCredentialManagedBy"
                    },
                    "description": "(List of Object)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "preSharedKey": {
                    "type": "string",
                    "description": "(String) Pre-shared key. This is a required field for `UFQDN` and IP auth type.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    },
                    "secret": true
                },
                "type": {
                    "type": "string",
                    "description": "(String) VPN authentication type (i.e., how the VPN credential is sent to the server). It is not modifiable after VpnCredential is created.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "comments",
                "fqdn",
                "id",
                "locations",
                "managedBies",
                "preSharedKey",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:LocationManagement/getLocationManagementVpnCredentialLocation:getLocationManagementVpnCredentialLocation": {
            "properties": {
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "(Map of String)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "description": "The ID of the location to be exported.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of the location to be exported.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "extensions",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:LocationManagement/getLocationManagementVpnCredentialManagedBy:getLocationManagementVpnCredentialManagedBy": {
            "properties": {
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "(Map of String)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "description": "The ID of the location to be exported.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of the location to be exported.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "extensions",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:RuleLabels/RuleLabelsCreatedBy:RuleLabelsCreatedBy": {
            "properties": {
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of the devices to be created.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "name"
                    ]
                }
            }
        },
        "zia:RuleLabels/RuleLabelsLastModifiedBy:RuleLabelsLastModifiedBy": {
            "properties": {
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of the devices to be created.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "name"
                    ]
                }
            }
        },
        "zia:RuleLabels/getRuleLabelsCreatedBy:getRuleLabelsCreatedBy": {
            "properties": {
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "description": "The unique identifer for the device group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of the rule label to be exported.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "extensions",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:RuleLabels/getRuleLabelsLastModifiedBy:getRuleLabelsLastModifiedBy": {
            "properties": {
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "description": "The unique identifer for the device group.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of the rule label to be exported.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "extensions",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:TrafficForwarding/TrafficForwardingGRETunnelLastModifiedBy:TrafficForwardingGRETunnelLastModifiedBy": {
            "properties": {
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "description": "Unique identifer of the GRE virtual IP address (VIP)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "extensions",
                        "id",
                        "name"
                    ]
                }
            }
        },
        "zia:TrafficForwarding/TrafficForwardingGRETunnelPrimaryDestVip:TrafficForwardingGRETunnelPrimaryDestVip": {
            "properties": {
                "datacenter": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "description": "Unique identifer of the GRE virtual IP address (VIP)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "privateServiceEdge": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "virtualIp": {
                    "type": "string",
                    "description": "GRE cluster virtual IP address (VIP)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "datacenter",
                        "id",
                        "privateServiceEdge",
                        "virtualIp"
                    ]
                }
            }
        },
        "zia:TrafficForwarding/TrafficForwardingGRETunnelSecondaryDestVip:TrafficForwardingGRETunnelSecondaryDestVip": {
            "properties": {
                "datacenter": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "description": "Unique identifer of the GRE virtual IP address (VIP)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "privateServiceEdge": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "virtualIp": {
                    "type": "string",
                    "description": "GRE cluster virtual IP address (VIP)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "datacenter",
                        "id",
                        "privateServiceEdge",
                        "virtualIp"
                    ]
                }
            }
        },
        "zia:TrafficForwarding/TrafficForwardingStaticIPLastModifiedBy:TrafficForwardingStaticIPLastModifiedBy": {
            "properties": {
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "zia:TrafficForwarding/TrafficForwardingStaticIPManagedBy:TrafficForwardingStaticIPManagedBy": {
            "properties": {
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "zia:TrafficForwarding/getTrafficForwardingGREInternalIPRangeList:getTrafficForwardingGREInternalIPRangeList": {
            "properties": {
                "endIpAddress": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "startIpAddress": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "endIpAddress",
                "startIpAddress"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:TrafficForwarding/getTrafficForwardingGRETunnelLastModifiedBy:getTrafficForwardingGRETunnelLastModifiedBy": {
            "properties": {
                "id": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:TrafficForwarding/getTrafficForwardingGRETunnelManagedBy:getTrafficForwardingGRETunnelManagedBy": {
            "properties": {
                "id": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:TrafficForwarding/getTrafficForwardingGRETunnelPrimaryDestVip:getTrafficForwardingGRETunnelPrimaryDestVip": {
            "properties": {
                "city": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "countryCode": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "datacenter": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "latitude": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "longitude": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "privateServiceEdge": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "region": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "virtualIp": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "city",
                "countryCode",
                "datacenter",
                "id",
                "latitude",
                "longitude",
                "privateServiceEdge",
                "region",
                "virtualIp"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:TrafficForwarding/getTrafficForwardingGRETunnelSecondaryDestVip:getTrafficForwardingGRETunnelSecondaryDestVip": {
            "properties": {
                "city": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "countryCode": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "datacenter": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "latitude": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "longitude": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "privateServiceEdge": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "region": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "virtualIp": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "city",
                "countryCode",
                "datacenter",
                "id",
                "latitude",
                "longitude",
                "privateServiceEdge",
                "region",
                "virtualIp"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:TrafficForwarding/getTrafficForwardingStaticIPLastModifiedBy:getTrafficForwardingStaticIPLastModifiedBy": {
            "properties": {
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "(Map of String)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "description": "The unique identifier for the static IP address\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "(String) The configured name of the entity\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "extensions",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:TrafficForwarding/getTrafficForwardingStaticIPManagedBy:getTrafficForwardingStaticIPManagedBy": {
            "properties": {
                "id": {
                    "type": "integer",
                    "description": "The unique identifier for the static IP address\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "(String) The configured name of the entity\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:TrafficForwarding/getTrafficForwardingVIPRecommendedListList:getTrafficForwardingVIPRecommendedListList": {
            "properties": {
                "datacenter": {
                    "type": "string",
                    "description": "(String) Data center information\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "description": "Unique identifer of the GRE virtual IP address (VIP)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "privateServiceEdge": {
                    "type": "boolean",
                    "description": "(Boolean) Set to true if the virtual IP address (VIP) is a ZIA Private Service Edge\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "virtualIp": {
                    "type": "string",
                    "description": "(String) GRE cluster virtual IP address (VIP)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "zia:TrafficForwarding/getTrafficForwardingVPNCredentialsLocation:getTrafficForwardingVPNCredentialsLocation": {
            "properties": {
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "(Map of String)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "description": "Unique identifer of the GRE virtual IP address (VIP)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "(String) The configured name of the entity\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "extensions",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:TrafficForwarding/getTrafficForwardingVPNCredentialsManagedBy:getTrafficForwardingVPNCredentialsManagedBy": {
            "properties": {
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "(Map of String)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "description": "Unique identifer of the GRE virtual IP address (VIP)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "(String) The configured name of the entity\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "extensions",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:URLCategory/URLCategoriesScope:URLCategoriesScope": {
            "properties": {
                "scopeEntities": {
                    "$ref": "#/types/zia:URLCategory/URLCategoriesScopeScopeEntities:URLCategoriesScopeScopeEntities",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "scopeGroupMemberEntities": {
                    "$ref": "#/types/zia:URLCategory/URLCategoriesScopeScopeGroupMemberEntities:URLCategoriesScopeScopeGroupMemberEntities",
                    "description": "Only applicable for the LOCATION_GROUP admin scope type, in which case this attribute gives the list of ID/name pairs of locations within the location group. The attribute name is subject to change.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Type of the custom categories. `URL_CATEGORY`, `TLD_CATEGORY`, `ALL`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "scopeEntities",
                        "scopeGroupMemberEntities"
                    ]
                }
            }
        },
        "zia:URLCategory/URLCategoriesScopeScopeEntities:URLCategoriesScopeScopeEntities": {
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ids"
            ]
        },
        "zia:URLCategory/URLCategoriesScopeScopeGroupMemberEntities:URLCategoriesScopeScopeGroupMemberEntities": {
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ids"
            ]
        },
        "zia:URLCategory/URLCategoriesUrlKeywordCounts:URLCategoriesUrlKeywordCounts": {
            "properties": {
                "retainParentKeywordCount": {
                    "type": "integer",
                    "description": "Count of total keywords with retain parent category.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "retainParentUrlCount": {
                    "type": "integer",
                    "description": "Count of URLs with retain parent category.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "totalKeywordCount": {
                    "type": "integer",
                    "description": "Total keyword count for the category.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "totalUrlCount": {
                    "type": "integer",
                    "description": "Custom URL count for the category.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "retainParentKeywordCount",
                        "retainParentUrlCount",
                        "totalKeywordCount",
                        "totalUrlCount"
                    ]
                }
            }
        },
        "zia:URLCategory/getURLCategoriesScope:getURLCategoriesScope": {
            "properties": {
                "scopeEntities": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zia:URLCategory/getURLCategoriesScopeScopeEntity:getURLCategoriesScopeScopeEntity"
                    },
                    "description": "(List of Object)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "scopeGroupMemberEntities": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zia:URLCategory/getURLCategoriesScopeScopeGroupMemberEntity:getURLCategoriesScopeScopeGroupMemberEntity"
                    },
                    "description": "(List of Object) Only applicable for the LOCATION_GROUP admin scope type, in which case this attribute gives the list of ID/name pairs of locations within the location group. The attribute name is subject to change.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "(String) The admin scope type. The attribute name is subject to change. `ORGANIZATION`, `DEPARTMENT`, `LOCATION`, `LOCATION_GROUP`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "scopeEntities",
                "scopeGroupMemberEntities",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:URLCategory/getURLCategoriesScopeScopeEntity:getURLCategoriesScopeScopeEntity": {
            "properties": {
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "(Map of String)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "description": "URL category\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "(String) The configured name of the entity\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "extensions",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:URLCategory/getURLCategoriesScopeScopeGroupMemberEntity:getURLCategoriesScopeScopeGroupMemberEntity": {
            "properties": {
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "(Map of String)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "description": "URL category\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "(String) The configured name of the entity\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "extensions",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:URLCategory/getURLCategoriesUrlKeywordCount:getURLCategoriesUrlKeywordCount": {
            "properties": {
                "retainParentKeywordCount": {
                    "type": "integer",
                    "description": "(Number) Count of total keywords with retain parent category.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "retainParentUrlCount": {
                    "type": "integer",
                    "description": "(Number) Count of URLs with retain parent category.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "totalKeywordCount": {
                    "type": "integer",
                    "description": "(Number) Total keyword count for the category.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "totalUrlCount": {
                    "type": "integer",
                    "description": "(Number) Custom URL count for the category.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "retainParentKeywordCount",
                "retainParentUrlCount",
                "totalKeywordCount",
                "totalUrlCount"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:URLFiltering/URLFilteringRulesDepartments:URLFilteringRulesDepartments": {
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Identifier that uniquely identifies an entity\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ids"
            ]
        },
        "zia:URLFiltering/URLFilteringRulesDeviceGroups:URLFilteringRulesDeviceGroups": {
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Identifier that uniquely identifies an entity\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ids"
            ]
        },
        "zia:URLFiltering/URLFilteringRulesDevices:URLFilteringRulesDevices": {
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Identifier that uniquely identifies an entity\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ids"
            ]
        },
        "zia:URLFiltering/URLFilteringRulesGroups:URLFilteringRulesGroups": {
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Identifier that uniquely identifies an entity\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ids"
            ]
        },
        "zia:URLFiltering/URLFilteringRulesLabels:URLFilteringRulesLabels": {
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Identifier that uniquely identifies an entity\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ids"
            ]
        },
        "zia:URLFiltering/URLFilteringRulesLastModifiedBy:URLFilteringRulesLastModifiedBy": {
            "properties": {
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "description": "Identifier that uniquely identifies an entity\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Firewall Filtering policy rule\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "name"
                    ]
                }
            }
        },
        "zia:URLFiltering/URLFilteringRulesLocationGroups:URLFilteringRulesLocationGroups": {
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Identifier that uniquely identifies an entity\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ids"
            ]
        },
        "zia:URLFiltering/URLFilteringRulesLocations:URLFilteringRulesLocations": {
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Identifier that uniquely identifies an entity\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ids"
            ]
        },
        "zia:URLFiltering/URLFilteringRulesOverrideGroups:URLFilteringRulesOverrideGroups": {
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Identifier that uniquely identifies an entity\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ids"
            ]
        },
        "zia:URLFiltering/URLFilteringRulesOverrideUsers:URLFilteringRulesOverrideUsers": {
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Identifier that uniquely identifies an entity\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ids"
            ]
        },
        "zia:URLFiltering/URLFilteringRulesTimeWindows:URLFilteringRulesTimeWindows": {
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Identifier that uniquely identifies an entity\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ids"
            ]
        },
        "zia:URLFiltering/URLFilteringRulesUsers:URLFilteringRulesUsers": {
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Identifier that uniquely identifies an entity\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ids"
            ]
        },
        "zia:URLFiltering/getURLFilteringRulesDepartment:getURLFilteringRulesDepartment": {
            "properties": {
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "(Map of String)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "description": "URL Filtering Rule ID\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Name of the URL Filtering policy rule\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "extensions",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:URLFiltering/getURLFilteringRulesDevice:getURLFilteringRulesDevice": {
            "properties": {
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "(Map of String)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "description": "URL Filtering Rule ID\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Name of the URL Filtering policy rule\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "extensions",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:URLFiltering/getURLFilteringRulesDeviceGroup:getURLFilteringRulesDeviceGroup": {
            "properties": {
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "(Map of String)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "description": "URL Filtering Rule ID\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Name of the URL Filtering policy rule\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "extensions",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:URLFiltering/getURLFilteringRulesGroup:getURLFilteringRulesGroup": {
            "properties": {
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "(Map of String)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "description": "URL Filtering Rule ID\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Name of the URL Filtering policy rule\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "extensions",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:URLFiltering/getURLFilteringRulesLabel:getURLFilteringRulesLabel": {
            "properties": {
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "(Map of String)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "description": "URL Filtering Rule ID\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Name of the URL Filtering policy rule\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "extensions",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:URLFiltering/getURLFilteringRulesLastModifiedBy:getURLFilteringRulesLastModifiedBy": {
            "properties": {
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "(Map of String)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "description": "URL Filtering Rule ID\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Name of the URL Filtering policy rule\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "extensions",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:URLFiltering/getURLFilteringRulesLocation:getURLFilteringRulesLocation": {
            "properties": {
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "(Map of String)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "description": "URL Filtering Rule ID\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Name of the URL Filtering policy rule\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "extensions",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:URLFiltering/getURLFilteringRulesLocationGroup:getURLFilteringRulesLocationGroup": {
            "properties": {
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "(Map of String)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "description": "URL Filtering Rule ID\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Name of the URL Filtering policy rule\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "extensions",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:URLFiltering/getURLFilteringRulesOverrideGroup:getURLFilteringRulesOverrideGroup": {
            "properties": {
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "(Map of String)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "description": "URL Filtering Rule ID\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Name of the URL Filtering policy rule\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "extensions",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:URLFiltering/getURLFilteringRulesOverrideUser:getURLFilteringRulesOverrideUser": {
            "properties": {
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "(Map of String)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "description": "URL Filtering Rule ID\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Name of the URL Filtering policy rule\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "extensions",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:URLFiltering/getURLFilteringRulesTimeWindow:getURLFilteringRulesTimeWindow": {
            "properties": {
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "(Map of String)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "description": "URL Filtering Rule ID\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Name of the URL Filtering policy rule\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "extensions",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:URLFiltering/getURLFilteringRulesUser:getURLFilteringRulesUser": {
            "properties": {
                "extensions": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    },
                    "description": "(Map of String)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "description": "URL Filtering Rule ID\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "Name of the URL Filtering policy rule\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "extensions",
                "id",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:Users/UserManagementDepartment:UserManagementDepartment": {
            "properties": {
                "comments": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "deleted": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "description": "Department ID\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "idpId": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "User name. This appears when choosing users for policies.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "comments",
                        "deleted",
                        "idpId",
                        "name"
                    ]
                }
            }
        },
        "zia:Users/UserManagementGroups:UserManagementGroups": {
            "properties": {
                "ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Department ID\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ids"
            ]
        },
        "zia:Users/getUserManagementDepartment:getUserManagementDepartment": {
            "properties": {
                "comments": {
                    "type": "string",
                    "description": "(String) Additional information about the group\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "deleted": {
                    "type": "boolean",
                    "description": "(Boolean) default: `false`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "description": "The ID of the time window resource.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "idpId": {
                    "type": "integer",
                    "description": "(Number) Unique identfier for the identity provider (IdP)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "User name. This appears when choosing users for policies.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "comments",
                "deleted",
                "id",
                "idpId",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "zia:Users/getUserManagementGroup:getUserManagementGroup": {
            "properties": {
                "comments": {
                    "type": "string",
                    "description": "(String) Additional information about the group\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "description": "The ID of the time window resource.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "idpId": {
                    "type": "integer",
                    "description": "(Number) Unique identfier for the identity provider (IdP)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "User name. This appears when choosing users for policies.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "comments",
                "id",
                "idpId",
                "name"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        }
    },
    "provider": {
        "description": "The provider type for the zia package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "apiKey": {
                "type": "string",
                "secret": true
            },
            "password": {
                "type": "string",
                "secret": true
            },
            "username": {
                "type": "string"
            },
            "ziaCloud": {
                "type": "string"
            }
        },
        "inputProperties": {
            "apiKey": {
                "type": "string",
                "defaultInfo": {
                    "environment": [
                        "ZIA_API_KEY"
                    ]
                },
                "secret": true
            },
            "password": {
                "type": "string",
                "defaultInfo": {
                    "environment": [
                        "ZIA_PASSWORD"
                    ]
                },
                "secret": true
            },
            "username": {
                "type": "string",
                "defaultInfo": {
                    "environment": [
                        "ZIA_USERNAME"
                    ]
                }
            },
            "ziaCloud": {
                "type": "string",
                "defaultInfo": {
                    "environment": [
                        "ZIA_CLOUD"
                    ]
                }
            }
        }
    },
    "resources": {
        "zia:Activation/activationStatus:ActivationStatus": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@pulumi/zia\";\nimport * as zia from \"@zscaler/pulumi-zia\";\n\nconst activationActivationStatus = zia.Activation.getActivationStatus({});\nconst activationActivation_activationStatusActivationStatus = new zia.activation.ActivationStatus(\"activationActivation/activationStatusActivationStatus\", {status: \"ACTIVE\"});\n```\n```python\nimport pulumi\nimport pulumi_zia as zia\nimport zscaler_pulumi_zia as zia\n\nactivation_activation_status = zia.Activation.get_activation_status()\nactivation_activation_activation_status_activation_status = zia.activation.ActivationStatus(\"activationActivation/activationStatusActivationStatus\", status=\"ACTIVE\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Zia = Pulumi.Zia;\nusing Zia = zscaler.PulumiPackage.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var activationActivationStatus = Zia.Activation.GetActivationStatus.Invoke();\n\n    var activationActivation_activationStatusActivationStatus = new Zia.Activation.ActivationStatus(\"activationActivation/activationStatusActivationStatus\", new()\n    {\n        Status = \"ACTIVE\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia/Activation\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Activation.GetActivationStatus(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = Activation.NewActivationStatus(ctx, \"activationActivation/activationStatusActivationStatus\", \u0026Activation.ActivationStatusArgs{\n\t\t\tStatus: pulumi.String(\"ACTIVE\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zia.Activation.ActivationFunctions;\nimport com.pulumi.zia.Activation.ActivationStatus;\nimport com.pulumi.zia.Activation.ActivationStatusArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var activationActivationStatus = ActivationFunctions.getActivationStatus();\n\n        var activationActivation_activationStatusActivationStatus = new ActivationStatus(\"activationActivation/activationStatusActivationStatus\", ActivationStatusArgs.builder()        \n            .status(\"ACTIVE\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  activationActivation/activationStatusActivationStatus:\n    type: zia:Activation:ActivationStatus\n    properties:\n      status: ACTIVE\nvariables:\n  activationActivationStatus:\n    fn::invoke:\n      Function: zia:Activation:getActivationStatus\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nActivation is not an importable resource. ",
            "properties": {
                "status": {
                    "type": "string",
                    "description": "Activates configuration changes.\n"
                }
            },
            "required": [
                "status"
            ],
            "inputProperties": {
                "status": {
                    "type": "string",
                    "description": "Activates configuration changes.\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "status"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ActivationStatus resources.\n",
                "properties": {
                    "status": {
                        "type": "string",
                        "description": "Activates configuration changes.\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "zia:AdminUsers/adminUsers:AdminUsers": {
            "description": "The **zia_admin_users** resource allows the creation and management of ZIA admin user account created in the Zscaler Internet Access cloud or via the API.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@pulumi/zia\";\nimport * as zia from \"@zscaler/pulumi-zia\";\n\nconst superAdmin = zia.AdminRoles.getAdminRoles({\n    name: \"Super Admin\",\n});\nconst engineering = zia.Departments.getDepartmentManagement({\n    name: \"Engineering\",\n});\nconst johnSmith = new zia.adminusers.AdminUsers(\"johnSmith\", {\n    loginName: \"john.smith@acme.com\",\n    userName: \"John Smith\",\n    email: \"john.smith@acme.com\",\n    isPasswordLoginAllowed: true,\n    password: `AeQ9E5w8B$`,\n    isSecurityReportCommEnabled: true,\n    isServiceUpdateCommEnabled: true,\n    isProductUpdateCommEnabled: true,\n    comments: \"Administrator User\",\n    roles: [{\n        id: superAdmin.then(superAdmin =\u003e superAdmin.id),\n    }],\n    adminScopes: [{\n        type: \"DEPARTMENT\",\n        scopeEntities: {\n            ids: [engineering.then(engineering =\u003e engineering.id)],\n        },\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_zia as zia\nimport zscaler_pulumi_zia as zia\n\nsuper_admin = zia.AdminRoles.get_admin_roles(name=\"Super Admin\")\nengineering = zia.Departments.get_department_management(name=\"Engineering\")\njohn_smith = zia.admin_users.AdminUsers(\"johnSmith\",\n    login_name=\"john.smith@acme.com\",\n    user_name=\"John Smith\",\n    email=\"john.smith@acme.com\",\n    is_password_login_allowed=True,\n    password=\"AeQ9E5w8B$\",\n    is_security_report_comm_enabled=True,\n    is_service_update_comm_enabled=True,\n    is_product_update_comm_enabled=True,\n    comments=\"Administrator User\",\n    roles=[zia.admin_users.AdminUsersRoleArgs(\n        id=super_admin.id,\n    )],\n    admin_scopes=[zia.admin_users.AdminUsersAdminScopeArgs(\n        type=\"DEPARTMENT\",\n        scope_entities=zia.admin_users.AdminUsersAdminScopeScopeEntitiesArgs(\n            ids=[engineering.id],\n        ),\n    )])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Zia = Pulumi.Zia;\nusing Zia = zscaler.PulumiPackage.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var superAdmin = Zia.AdminRoles.GetAdminRoles.Invoke(new()\n    {\n        Name = \"Super Admin\",\n    });\n\n    var engineering = Zia.Departments.GetDepartmentManagement.Invoke(new()\n    {\n        Name = \"Engineering\",\n    });\n\n    var johnSmith = new Zia.AdminUsers.AdminUsers(\"johnSmith\", new()\n    {\n        LoginName = \"john.smith@acme.com\",\n        UserName = \"John Smith\",\n        Email = \"john.smith@acme.com\",\n        IsPasswordLoginAllowed = true,\n        Password = \"AeQ9E5w8B$\",\n        IsSecurityReportCommEnabled = true,\n        IsServiceUpdateCommEnabled = true,\n        IsProductUpdateCommEnabled = true,\n        Comments = \"Administrator User\",\n        Roles = new[]\n        {\n            new Zia.AdminUsers.Inputs.AdminUsersRoleArgs\n            {\n                Id = superAdmin.Apply(getAdminRolesResult =\u003e getAdminRolesResult.Id),\n            },\n        },\n        AdminScopes = new[]\n        {\n            new Zia.AdminUsers.Inputs.AdminUsersAdminScopeArgs\n            {\n                Type = \"DEPARTMENT\",\n                ScopeEntities = new Zia.AdminUsers.Inputs.AdminUsersAdminScopeScopeEntitiesArgs\n                {\n                    Ids = new[]\n                    {\n                        engineering.Apply(getDepartmentManagementResult =\u003e getDepartmentManagementResult.Id),\n                    },\n                },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia/AdminRoles\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia/AdminUsers\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia/Departments\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tsuperAdmin, err := AdminRoles.GetAdminRoles(ctx, \u0026adminroles.GetAdminRolesArgs{\n\t\t\tName: pulumi.StringRef(\"Super Admin\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tengineering, err := Departments.GetDepartmentManagement(ctx, \u0026departments.GetDepartmentManagementArgs{\n\t\t\tName: pulumi.StringRef(\"Engineering\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = AdminUsers.NewAdminUsers(ctx, \"johnSmith\", \u0026AdminUsers.AdminUsersArgs{\n\t\t\tLoginName:                   pulumi.String(\"john.smith@acme.com\"),\n\t\t\tUserName:                    pulumi.String(\"John Smith\"),\n\t\t\tEmail:                       pulumi.String(\"john.smith@acme.com\"),\n\t\t\tIsPasswordLoginAllowed:      pulumi.Bool(true),\n\t\t\tPassword:                    pulumi.String(fmt.Sprintf(\"AeQ9E5w8B$\")),\n\t\t\tIsSecurityReportCommEnabled: pulumi.Bool(true),\n\t\t\tIsServiceUpdateCommEnabled:  pulumi.Bool(true),\n\t\t\tIsProductUpdateCommEnabled:  pulumi.Bool(true),\n\t\t\tComments:                    pulumi.String(\"Administrator User\"),\n\t\t\tRoles: adminusers.AdminUsersRoleArray{\n\t\t\t\t\u0026adminusers.AdminUsersRoleArgs{\n\t\t\t\t\tId: *pulumi.Int(superAdmin.Id),\n\t\t\t\t},\n\t\t\t},\n\t\t\tAdminScopes: adminusers.AdminUsersAdminScopeArray{\n\t\t\t\t\u0026adminusers.AdminUsersAdminScopeArgs{\n\t\t\t\t\tType: pulumi.String(\"DEPARTMENT\"),\n\t\t\t\t\tScopeEntities: \u0026adminusers.AdminUsersAdminScopeScopeEntitiesArgs{\n\t\t\t\t\t\tIds: pulumi.IntArray{\n\t\t\t\t\t\t\t*pulumi.Int(engineering.Id),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zia.AdminRoles.AdminRolesFunctions;\nimport com.pulumi.zia.AdminRoles.inputs.GetAdminRolesArgs;\nimport com.pulumi.zia.Departments.DepartmentsFunctions;\nimport com.pulumi.zia.Departments.inputs.GetDepartmentManagementArgs;\nimport com.pulumi.zia.AdminUsers.AdminUsers;\nimport com.pulumi.zia.AdminUsers.AdminUsersArgs;\nimport com.pulumi.zia.AdminUsers.inputs.AdminUsersRoleArgs;\nimport com.pulumi.zia.AdminUsers.inputs.AdminUsersAdminScopeArgs;\nimport com.pulumi.zia.AdminUsers.inputs.AdminUsersAdminScopeScopeEntitiesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var superAdmin = AdminRolesFunctions.getAdminRoles(GetAdminRolesArgs.builder()\n            .name(\"Super Admin\")\n            .build());\n\n        final var engineering = DepartmentsFunctions.getDepartmentManagement(GetDepartmentManagementArgs.builder()\n            .name(\"Engineering\")\n            .build());\n\n        var johnSmith = new AdminUsers(\"johnSmith\", AdminUsersArgs.builder()        \n            .loginName(\"john.smith@acme.com\")\n            .userName(\"John Smith\")\n            .email(\"john.smith@acme.com\")\n            .isPasswordLoginAllowed(true)\n            .password(\"AeQ9E5w8B$\")\n            .isSecurityReportCommEnabled(true)\n            .isServiceUpdateCommEnabled(true)\n            .isProductUpdateCommEnabled(true)\n            .comments(\"Administrator User\")\n            .roles(AdminUsersRoleArgs.builder()\n                .id(superAdmin.applyValue(getAdminRolesResult -\u003e getAdminRolesResult.id()))\n                .build())\n            .adminScopes(AdminUsersAdminScopeArgs.builder()\n                .type(\"DEPARTMENT\")\n                .scopeEntities(AdminUsersAdminScopeScopeEntitiesArgs.builder()\n                    .ids(engineering.applyValue(getDepartmentManagementResult -\u003e getDepartmentManagementResult.id()))\n                    .build())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  johnSmith:\n    type: zia:AdminUsers:AdminUsers\n    properties:\n      loginName: john.smith@acme.com\n      userName: John Smith\n      email: john.smith@acme.com\n      isPasswordLoginAllowed: true\n      password: AeQ9E5w8B$\n      isSecurityReportCommEnabled: true\n      isServiceUpdateCommEnabled: true\n      isProductUpdateCommEnabled: true\n      comments: Administrator User\n      roles:\n        - id: ${superAdmin.id}\n      adminScopes:\n        - type: DEPARTMENT\n          scopeEntities:\n            ids:\n              - ${engineering.id}\nvariables:\n  superAdmin:\n    fn::invoke:\n      Function: zia:AdminRoles:getAdminRoles\n      Arguments:\n        name: Super Admin\n  engineering:\n    fn::invoke:\n      Function: zia:Departments:getDepartmentManagement\n      Arguments:\n        name: Engineering\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "adminId": {
                    "type": "integer"
                },
                "adminScopes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zia:AdminUsers/AdminUsersAdminScope:AdminUsersAdminScope"
                    },
                    "description": "The admin's scope. A scope is required for admins, but not applicable to auditors. This attribute is subject to change.\n"
                },
                "comments": {
                    "type": "string",
                    "description": "Additional information about the admin or auditor.\n"
                },
                "disabled": {
                    "type": "boolean",
                    "description": "Indicates whether or not the admin account is disabled.\n"
                },
                "email": {
                    "type": "string",
                    "description": "Admin or auditor's email address.\n"
                },
                "isAuditor": {
                    "type": "boolean",
                    "description": "Indicates whether the user is an auditor. This attribute is subject to change.\n"
                },
                "isExecMobileAppEnabled": {
                    "type": "boolean",
                    "description": "Indicates whether or not Executive Insights App access is enabled for the admin.\n"
                },
                "isNonEditable": {
                    "type": "boolean",
                    "description": "Indicates whether or not the admin can be edited or deleted.\n"
                },
                "isPasswordExpired": {
                    "type": "boolean",
                    "description": "Indicates whether or not an admin's password has expired.\n"
                },
                "isPasswordLoginAllowed": {
                    "type": "boolean",
                    "description": "The default is true when SAML Authentication is disabled. When SAML Authentication is enabled, this can be set to false in order to force the admin to login via SSO only.\n"
                },
                "isProductUpdateCommEnabled": {
                    "type": "boolean",
                    "description": "Communication setting for Product Update.\n"
                },
                "isSecurityReportCommEnabled": {
                    "type": "boolean",
                    "description": "Communication for Security Report is enabled.\n"
                },
                "isServiceUpdateCommEnabled": {
                    "type": "boolean",
                    "description": "Communication setting for Service Update.\n"
                },
                "loginName": {
                    "type": "string",
                    "description": "The email address of the admin user to be exported.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The username of the admin user to be exported.\n",
                    "secret": true
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zia:AdminUsers/AdminUsersRole:AdminUsersRole"
                    },
                    "description": "Role of the admin. This is not required for an auditor.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username of the admin user to be exported.\n"
                }
            },
            "required": [
                "adminId",
                "adminScopes",
                "disabled",
                "email",
                "isAuditor",
                "isExecMobileAppEnabled",
                "isNonEditable",
                "isPasswordExpired",
                "isPasswordLoginAllowed",
                "isProductUpdateCommEnabled",
                "isSecurityReportCommEnabled",
                "isServiceUpdateCommEnabled",
                "loginName",
                "roles",
                "username"
            ],
            "inputProperties": {
                "adminScopes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zia:AdminUsers/AdminUsersAdminScope:AdminUsersAdminScope"
                    },
                    "description": "The admin's scope. A scope is required for admins, but not applicable to auditors. This attribute is subject to change.\n"
                },
                "comments": {
                    "type": "string",
                    "description": "Additional information about the admin or auditor.\n"
                },
                "disabled": {
                    "type": "boolean",
                    "description": "Indicates whether or not the admin account is disabled.\n"
                },
                "email": {
                    "type": "string",
                    "description": "Admin or auditor's email address.\n"
                },
                "isAuditor": {
                    "type": "boolean",
                    "description": "Indicates whether the user is an auditor. This attribute is subject to change.\n"
                },
                "isExecMobileAppEnabled": {
                    "type": "boolean",
                    "description": "Indicates whether or not Executive Insights App access is enabled for the admin.\n"
                },
                "isNonEditable": {
                    "type": "boolean",
                    "description": "Indicates whether or not the admin can be edited or deleted.\n"
                },
                "isPasswordExpired": {
                    "type": "boolean",
                    "description": "Indicates whether or not an admin's password has expired.\n"
                },
                "isPasswordLoginAllowed": {
                    "type": "boolean",
                    "description": "The default is true when SAML Authentication is disabled. When SAML Authentication is enabled, this can be set to false in order to force the admin to login via SSO only.\n"
                },
                "isProductUpdateCommEnabled": {
                    "type": "boolean",
                    "description": "Communication setting for Product Update.\n"
                },
                "isSecurityReportCommEnabled": {
                    "type": "boolean",
                    "description": "Communication for Security Report is enabled.\n"
                },
                "isServiceUpdateCommEnabled": {
                    "type": "boolean",
                    "description": "Communication setting for Service Update.\n"
                },
                "loginName": {
                    "type": "string",
                    "description": "The email address of the admin user to be exported.\n"
                },
                "password": {
                    "type": "string",
                    "description": "The username of the admin user to be exported.\n",
                    "secret": true
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zia:AdminUsers/AdminUsersRole:AdminUsersRole"
                    },
                    "description": "Role of the admin. This is not required for an auditor.\n"
                },
                "username": {
                    "type": "string",
                    "description": "The username of the admin user to be exported.\n"
                }
            },
            "requiredInputs": [
                "email",
                "loginName",
                "username"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AdminUsers resources.\n",
                "properties": {
                    "adminId": {
                        "type": "integer"
                    },
                    "adminScopes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:AdminUsers/AdminUsersAdminScope:AdminUsersAdminScope"
                        },
                        "description": "The admin's scope. A scope is required for admins, but not applicable to auditors. This attribute is subject to change.\n"
                    },
                    "comments": {
                        "type": "string",
                        "description": "Additional information about the admin or auditor.\n"
                    },
                    "disabled": {
                        "type": "boolean",
                        "description": "Indicates whether or not the admin account is disabled.\n"
                    },
                    "email": {
                        "type": "string",
                        "description": "Admin or auditor's email address.\n"
                    },
                    "isAuditor": {
                        "type": "boolean",
                        "description": "Indicates whether the user is an auditor. This attribute is subject to change.\n"
                    },
                    "isExecMobileAppEnabled": {
                        "type": "boolean",
                        "description": "Indicates whether or not Executive Insights App access is enabled for the admin.\n"
                    },
                    "isNonEditable": {
                        "type": "boolean",
                        "description": "Indicates whether or not the admin can be edited or deleted.\n"
                    },
                    "isPasswordExpired": {
                        "type": "boolean",
                        "description": "Indicates whether or not an admin's password has expired.\n"
                    },
                    "isPasswordLoginAllowed": {
                        "type": "boolean",
                        "description": "The default is true when SAML Authentication is disabled. When SAML Authentication is enabled, this can be set to false in order to force the admin to login via SSO only.\n"
                    },
                    "isProductUpdateCommEnabled": {
                        "type": "boolean",
                        "description": "Communication setting for Product Update.\n"
                    },
                    "isSecurityReportCommEnabled": {
                        "type": "boolean",
                        "description": "Communication for Security Report is enabled.\n"
                    },
                    "isServiceUpdateCommEnabled": {
                        "type": "boolean",
                        "description": "Communication setting for Service Update.\n"
                    },
                    "loginName": {
                        "type": "string",
                        "description": "The email address of the admin user to be exported.\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "The username of the admin user to be exported.\n",
                        "secret": true
                    },
                    "roles": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:AdminUsers/AdminUsersRole:AdminUsersRole"
                        },
                        "description": "Role of the admin. This is not required for an auditor.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "The username of the admin user to be exported.\n"
                    }
                },
                "type": "object"
            }
        },
        "zia:AuthSettingsUrls/authSettingsURLs:AuthSettingsURLs": {
            "description": "The **zia_auth_settings_urls** resource alows you to add or remove a URL from the cookie authentication exempt list in the Zscaler Internet Access cloud or via the API. To learn more see [URL Format Guidelines](https://help.zscaler.com/zia/url-format-guidelines)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@zscaler/pulumi-zia\";\n\n// ZIA User Auth Settings Data Source\nconst example = new zia.authsettingsurls.AuthSettingsURLs(\"example\", {urls: [\n    \".okta.com\",\n    \".oktacdn.com\",\n    \".mtls.oktapreview.com\",\n    \".mtls.okta.com\",\n    \"d3l44rcogcb7iv.cloudfront.net\",\n    \"pac.zdxcloud.net\",\n    \".windowsazure.com\",\n    \".fedoraproject.org\",\n    \"login.windows.net\",\n    \"d32a6ru7mhaq0c.cloudfront.net\",\n    \".kerberos.oktapreview.com\",\n    \".oktapreview.com\",\n    \"login.zdxcloud.net\",\n    \"login.microsoftonline.com\",\n    \"smres.zdxcloud.net\",\n    \".kerberos.okta.com\",\n]});\n```\n```python\nimport pulumi\nimport zscaler_pulumi_zia as zia\n\n# ZIA User Auth Settings Data Source\nexample = zia.auth_settings_urls.AuthSettingsURLs(\"example\", urls=[\n    \".okta.com\",\n    \".oktacdn.com\",\n    \".mtls.oktapreview.com\",\n    \".mtls.okta.com\",\n    \"d3l44rcogcb7iv.cloudfront.net\",\n    \"pac.zdxcloud.net\",\n    \".windowsazure.com\",\n    \".fedoraproject.org\",\n    \"login.windows.net\",\n    \"d32a6ru7mhaq0c.cloudfront.net\",\n    \".kerberos.oktapreview.com\",\n    \".oktapreview.com\",\n    \"login.zdxcloud.net\",\n    \"login.microsoftonline.com\",\n    \"smres.zdxcloud.net\",\n    \".kerberos.okta.com\",\n])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Zia = zscaler.PulumiPackage.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // ZIA User Auth Settings Data Source\n    var example = new Zia.AuthSettingsUrls.AuthSettingsURLs(\"example\", new()\n    {\n        Urls = new[]\n        {\n            \".okta.com\",\n            \".oktacdn.com\",\n            \".mtls.oktapreview.com\",\n            \".mtls.okta.com\",\n            \"d3l44rcogcb7iv.cloudfront.net\",\n            \"pac.zdxcloud.net\",\n            \".windowsazure.com\",\n            \".fedoraproject.org\",\n            \"login.windows.net\",\n            \"d32a6ru7mhaq0c.cloudfront.net\",\n            \".kerberos.oktapreview.com\",\n            \".oktapreview.com\",\n            \"login.zdxcloud.net\",\n            \"login.microsoftonline.com\",\n            \"smres.zdxcloud.net\",\n            \".kerberos.okta.com\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia/AuthSettingsUrls\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := AuthSettingsUrls.NewAuthSettingsURLs(ctx, \"example\", \u0026AuthSettingsUrls.AuthSettingsURLsArgs{\n\t\t\tUrls: pulumi.StringArray{\n\t\t\t\tpulumi.String(\".okta.com\"),\n\t\t\t\tpulumi.String(\".oktacdn.com\"),\n\t\t\t\tpulumi.String(\".mtls.oktapreview.com\"),\n\t\t\t\tpulumi.String(\".mtls.okta.com\"),\n\t\t\t\tpulumi.String(\"d3l44rcogcb7iv.cloudfront.net\"),\n\t\t\t\tpulumi.String(\"pac.zdxcloud.net\"),\n\t\t\t\tpulumi.String(\".windowsazure.com\"),\n\t\t\t\tpulumi.String(\".fedoraproject.org\"),\n\t\t\t\tpulumi.String(\"login.windows.net\"),\n\t\t\t\tpulumi.String(\"d32a6ru7mhaq0c.cloudfront.net\"),\n\t\t\t\tpulumi.String(\".kerberos.oktapreview.com\"),\n\t\t\t\tpulumi.String(\".oktapreview.com\"),\n\t\t\t\tpulumi.String(\"login.zdxcloud.net\"),\n\t\t\t\tpulumi.String(\"login.microsoftonline.com\"),\n\t\t\t\tpulumi.String(\"smres.zdxcloud.net\"),\n\t\t\t\tpulumi.String(\".kerberos.okta.com\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zia.AuthSettingsUrls.AuthSettingsURLs;\nimport com.pulumi.zia.AuthSettingsUrls.AuthSettingsURLsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new AuthSettingsURLs(\"example\", AuthSettingsURLsArgs.builder()        \n            .urls(            \n                \".okta.com\",\n                \".oktacdn.com\",\n                \".mtls.oktapreview.com\",\n                \".mtls.okta.com\",\n                \"d3l44rcogcb7iv.cloudfront.net\",\n                \"pac.zdxcloud.net\",\n                \".windowsazure.com\",\n                \".fedoraproject.org\",\n                \"login.windows.net\",\n                \"d32a6ru7mhaq0c.cloudfront.net\",\n                \".kerberos.oktapreview.com\",\n                \".oktapreview.com\",\n                \"login.zdxcloud.net\",\n                \"login.microsoftonline.com\",\n                \"smres.zdxcloud.net\",\n                \".kerberos.okta.com\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # ZIA User Auth Settings Data Source\n  example:\n    type: zia:AuthSettingsUrls:AuthSettingsURLs\n    properties:\n      urls:\n        - .okta.com\n        - .oktacdn.com\n        - .mtls.oktapreview.com\n        - .mtls.okta.com\n        - d3l44rcogcb7iv.cloudfront.net\n        - pac.zdxcloud.net\n        - .windowsazure.com\n        - .fedoraproject.org\n        - login.windows.net\n        - d32a6ru7mhaq0c.cloudfront.net\n        - .kerberos.oktapreview.com\n        - .oktapreview.com\n        - login.zdxcloud.net\n        - login.microsoftonline.com\n        - smres.zdxcloud.net\n        - .kerberos.okta.com\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "urls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The email address of the admin user to be exported.\n"
                }
            },
            "required": [
                "urls"
            ],
            "inputProperties": {
                "urls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The email address of the admin user to be exported.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AuthSettingsURLs resources.\n",
                "properties": {
                    "urls": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The email address of the admin user to be exported.\n"
                    }
                },
                "type": "object"
            }
        },
        "zia:DLP/dLPDictionaries:DLPDictionaries": {
            "description": "The **zia_dlp_dictionaries** resource allows the creation and management of ZIA DLP dictionaries in the Zscaler Internet Access cloud or via the API.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@zscaler/pulumi-zia\";\n\nconst example = new zia.dlp.DLPDictionaries(\"example\", {\n    customPhraseMatchType: \"MATCH_ALL_CUSTOM_PHRASE_PATTERN_DICTIONARY\",\n    description: \"Your Description\",\n    dictionaryType: \"PATTERNS_AND_PHRASES\",\n    patterns: [{\n        action: \"PATTERN_COUNT_TYPE_UNIQUE\",\n        pattern: \"YourPattern\",\n    }],\n    phrases: [{\n        action: \"PHRASE_COUNT_TYPE_ALL\",\n        phrase: \"YourPhrase\",\n    }],\n});\n```\n```python\nimport pulumi\nimport zscaler_pulumi_zia as zia\n\nexample = zia.dlp.DLPDictionaries(\"example\",\n    custom_phrase_match_type=\"MATCH_ALL_CUSTOM_PHRASE_PATTERN_DICTIONARY\",\n    description=\"Your Description\",\n    dictionary_type=\"PATTERNS_AND_PHRASES\",\n    patterns=[zia.dlp.DLPDictionariesPatternArgs(\n        action=\"PATTERN_COUNT_TYPE_UNIQUE\",\n        pattern=\"YourPattern\",\n    )],\n    phrases=[zia.dlp.DLPDictionariesPhraseArgs(\n        action=\"PHRASE_COUNT_TYPE_ALL\",\n        phrase=\"YourPhrase\",\n    )])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Zia = zscaler.PulumiPackage.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Zia.DLP.DLPDictionaries(\"example\", new()\n    {\n        CustomPhraseMatchType = \"MATCH_ALL_CUSTOM_PHRASE_PATTERN_DICTIONARY\",\n        Description = \"Your Description\",\n        DictionaryType = \"PATTERNS_AND_PHRASES\",\n        Patterns = new[]\n        {\n            new Zia.DLP.Inputs.DLPDictionariesPatternArgs\n            {\n                Action = \"PATTERN_COUNT_TYPE_UNIQUE\",\n                Pattern = \"YourPattern\",\n            },\n        },\n        Phrases = new[]\n        {\n            new Zia.DLP.Inputs.DLPDictionariesPhraseArgs\n            {\n                Action = \"PHRASE_COUNT_TYPE_ALL\",\n                Phrase = \"YourPhrase\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia/DLP\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := DLP.NewDLPDictionaries(ctx, \"example\", \u0026DLP.DLPDictionariesArgs{\n\t\t\tCustomPhraseMatchType: pulumi.String(\"MATCH_ALL_CUSTOM_PHRASE_PATTERN_DICTIONARY\"),\n\t\t\tDescription:           pulumi.String(\"Your Description\"),\n\t\t\tDictionaryType:        pulumi.String(\"PATTERNS_AND_PHRASES\"),\n\t\t\tPatterns: dlp.DLPDictionariesPatternArray{\n\t\t\t\t\u0026dlp.DLPDictionariesPatternArgs{\n\t\t\t\t\tAction:  pulumi.String(\"PATTERN_COUNT_TYPE_UNIQUE\"),\n\t\t\t\t\tPattern: pulumi.String(\"YourPattern\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tPhrases: dlp.DLPDictionariesPhraseArray{\n\t\t\t\t\u0026dlp.DLPDictionariesPhraseArgs{\n\t\t\t\t\tAction: pulumi.String(\"PHRASE_COUNT_TYPE_ALL\"),\n\t\t\t\t\tPhrase: pulumi.String(\"YourPhrase\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zia.DLP.DLPDictionaries;\nimport com.pulumi.zia.DLP.DLPDictionariesArgs;\nimport com.pulumi.zia.DLP.inputs.DLPDictionariesPatternArgs;\nimport com.pulumi.zia.DLP.inputs.DLPDictionariesPhraseArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new DLPDictionaries(\"example\", DLPDictionariesArgs.builder()        \n            .customPhraseMatchType(\"MATCH_ALL_CUSTOM_PHRASE_PATTERN_DICTIONARY\")\n            .description(\"Your Description\")\n            .dictionaryType(\"PATTERNS_AND_PHRASES\")\n            .patterns(DLPDictionariesPatternArgs.builder()\n                .action(\"PATTERN_COUNT_TYPE_UNIQUE\")\n                .pattern(\"YourPattern\")\n                .build())\n            .phrases(DLPDictionariesPhraseArgs.builder()\n                .action(\"PHRASE_COUNT_TYPE_ALL\")\n                .phrase(\"YourPhrase\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: zia:DLP:DLPDictionaries\n    properties:\n      customPhraseMatchType: MATCH_ALL_CUSTOM_PHRASE_PATTERN_DICTIONARY\n      description: Your Description\n      dictionaryType: PATTERNS_AND_PHRASES\n      patterns:\n        - action: PATTERN_COUNT_TYPE_UNIQUE\n          pattern: YourPattern\n      phrases:\n        - action: PHRASE_COUNT_TYPE_ALL\n          phrase: YourPhrase\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "confidenceThreshold": {
                    "type": "string",
                    "description": "The DLP confidence threshold. The following values are supported:\n"
                },
                "customPhraseMatchType": {
                    "type": "string",
                    "description": "The DLP custom phrase match type. Supported values are:\n"
                },
                "description": {
                    "type": "string",
                    "description": "The desciption of the DLP dictionary\n"
                },
                "dictionaryId": {
                    "type": "integer"
                },
                "dictionaryType": {
                    "type": "string",
                    "description": "The DLP dictionary type. The following values are supported:\n"
                },
                "exactDataMatchDetails": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zia:DLP/DLPDictionariesExactDataMatchDetail:DLPDictionariesExactDataMatchDetail"
                    },
                    "description": "Exact Data Match (EDM) related information for custom DLP dictionaries.\n"
                },
                "idmProfileMatchAccuracies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zia:DLP/DLPDictionariesIdmProfileMatchAccuracy:DLPDictionariesIdmProfileMatchAccuracy"
                    },
                    "description": "List of Indexed Document Match (IDM) profiles and their corresponding match accuracy for custom DLP dictionaries.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The DLP dictionary's name\n"
                },
                "nameL10nTag": {
                    "type": "boolean",
                    "description": "Indicates whether the name is localized or not. This is always set to True for predefined DLP dictionaries.\n"
                },
                "patterns": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zia:DLP/DLPDictionariesPattern:DLPDictionariesPattern"
                    },
                    "description": "List containing the patterns used within a custom DLP dictionary. This attribute is not applicable to predefined DLP dictionaries. Required when `dictionary_type` is `PATTERNS_AND_PHRASES`\n"
                },
                "phrases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zia:DLP/DLPDictionariesPhrase:DLPDictionariesPhrase"
                    },
                    "description": "List containing the phrases used within a custom DLP dictionary. This attribute is not applicable to predefined DLP dictionaries. Required when `dictionary_type` is `PATTERNS_AND_PHRASES`\n"
                },
                "proximity": {
                    "type": "integer",
                    "description": "The DLP dictionary proximity length.\n"
                },
                "thresholdType": {
                    "type": "string",
                    "description": "The DLP threshold type. The following values are supported:\n"
                }
            },
            "required": [
                "dictionaryId",
                "idmProfileMatchAccuracies",
                "name",
                "nameL10nTag",
                "thresholdType"
            ],
            "inputProperties": {
                "confidenceThreshold": {
                    "type": "string",
                    "description": "The DLP confidence threshold. The following values are supported:\n"
                },
                "customPhraseMatchType": {
                    "type": "string",
                    "description": "The DLP custom phrase match type. Supported values are:\n"
                },
                "description": {
                    "type": "string",
                    "description": "The desciption of the DLP dictionary\n"
                },
                "dictionaryType": {
                    "type": "string",
                    "description": "The DLP dictionary type. The following values are supported:\n"
                },
                "exactDataMatchDetails": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zia:DLP/DLPDictionariesExactDataMatchDetail:DLPDictionariesExactDataMatchDetail"
                    },
                    "description": "Exact Data Match (EDM) related information for custom DLP dictionaries.\n"
                },
                "idmProfileMatchAccuracies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zia:DLP/DLPDictionariesIdmProfileMatchAccuracy:DLPDictionariesIdmProfileMatchAccuracy"
                    },
                    "description": "List of Indexed Document Match (IDM) profiles and their corresponding match accuracy for custom DLP dictionaries.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The DLP dictionary's name\n"
                },
                "patterns": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zia:DLP/DLPDictionariesPattern:DLPDictionariesPattern"
                    },
                    "description": "List containing the patterns used within a custom DLP dictionary. This attribute is not applicable to predefined DLP dictionaries. Required when `dictionary_type` is `PATTERNS_AND_PHRASES`\n"
                },
                "phrases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zia:DLP/DLPDictionariesPhrase:DLPDictionariesPhrase"
                    },
                    "description": "List containing the phrases used within a custom DLP dictionary. This attribute is not applicable to predefined DLP dictionaries. Required when `dictionary_type` is `PATTERNS_AND_PHRASES`\n"
                },
                "proximity": {
                    "type": "integer",
                    "description": "The DLP dictionary proximity length.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DLPDictionaries resources.\n",
                "properties": {
                    "confidenceThreshold": {
                        "type": "string",
                        "description": "The DLP confidence threshold. The following values are supported:\n"
                    },
                    "customPhraseMatchType": {
                        "type": "string",
                        "description": "The DLP custom phrase match type. Supported values are:\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The desciption of the DLP dictionary\n"
                    },
                    "dictionaryId": {
                        "type": "integer"
                    },
                    "dictionaryType": {
                        "type": "string",
                        "description": "The DLP dictionary type. The following values are supported:\n"
                    },
                    "exactDataMatchDetails": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:DLP/DLPDictionariesExactDataMatchDetail:DLPDictionariesExactDataMatchDetail"
                        },
                        "description": "Exact Data Match (EDM) related information for custom DLP dictionaries.\n"
                    },
                    "idmProfileMatchAccuracies": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:DLP/DLPDictionariesIdmProfileMatchAccuracy:DLPDictionariesIdmProfileMatchAccuracy"
                        },
                        "description": "List of Indexed Document Match (IDM) profiles and their corresponding match accuracy for custom DLP dictionaries.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The DLP dictionary's name\n"
                    },
                    "nameL10nTag": {
                        "type": "boolean",
                        "description": "Indicates whether the name is localized or not. This is always set to True for predefined DLP dictionaries.\n"
                    },
                    "patterns": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:DLP/DLPDictionariesPattern:DLPDictionariesPattern"
                        },
                        "description": "List containing the patterns used within a custom DLP dictionary. This attribute is not applicable to predefined DLP dictionaries. Required when `dictionary_type` is `PATTERNS_AND_PHRASES`\n"
                    },
                    "phrases": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:DLP/DLPDictionariesPhrase:DLPDictionariesPhrase"
                        },
                        "description": "List containing the phrases used within a custom DLP dictionary. This attribute is not applicable to predefined DLP dictionaries. Required when `dictionary_type` is `PATTERNS_AND_PHRASES`\n"
                    },
                    "proximity": {
                        "type": "integer",
                        "description": "The DLP dictionary proximity length.\n"
                    },
                    "thresholdType": {
                        "type": "string",
                        "description": "The DLP threshold type. The following values are supported:\n"
                    }
                },
                "type": "object"
            }
        },
        "zia:DLP/dLPNotificationTemplates:DLPNotificationTemplates": {
            "description": "The **zia_dlp_notification_templates** resource allows the creation and management of ZIA DLP Notification Templates in the Zscaler Internet Access cloud or via the API.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as fs from \"fs\";\nimport * as zia from \"@zscaler/pulumi-zia\";\n\nconst example = new zia.dlp.DLPNotificationTemplates(\"example\", {\n    subject: `DLP Violation: ${TRANSACTION_ID} ${ENGINES}`,\n    attachContent: true,\n    tlsEnabled: true,\n    htmlMessage: fs.readFileSync(\"./index.html\"),\n    plainTextMessage: fs.readFileSync(\"./dlp.txt\"),\n});\n```\n```python\nimport pulumi\nimport zscaler_pulumi_zia as zia\n\nexample = zia.dlp.DLPNotificationTemplates(\"example\",\n    subject=f\"DLP Violation: {transactio_n__id} {engines}\",\n    attach_content=True,\n    tls_enabled=True,\n    html_message=(lambda path: open(path).read())(\"./index.html\"),\n    plain_text_message=(lambda path: open(path).read())(\"./dlp.txt\"))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.IO;\nusing Pulumi;\nusing Zia = zscaler.PulumiPackage.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Zia.DLP.DLPNotificationTemplates(\"example\", new()\n    {\n        Subject = $\"DLP Violation: {TRANSACTION_ID} {ENGINES}\",\n        AttachContent = true,\n        TlsEnabled = true,\n        HtmlMessage = File.ReadAllText(\"./index.html\"),\n        PlainTextMessage = File.ReadAllText(\"./dlp.txt\"),\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia/DLP\"\n)\n\nfunc readFileOrPanic(path string) pulumi.StringPtrInput {\n\tdata, err := ioutil.ReadFile(path)\n\tif err != nil {\n\t\tpanic(err.Error())\n\t}\n\treturn pulumi.String(string(data))\n}\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := DLP.NewDLPNotificationTemplates(ctx, \"example\", \u0026DLP.DLPNotificationTemplatesArgs{\n\t\t\tSubject:          pulumi.String(fmt.Sprintf(\"DLP Violation: %v %v\", TRANSACTION_ID, ENGINES)),\n\t\t\tAttachContent:    pulumi.Bool(true),\n\t\t\tTlsEnabled:       pulumi.Bool(true),\n\t\t\tHtmlMessage:      readFileOrPanic(\"./index.html\"),\n\t\t\tPlainTextMessage: readFileOrPanic(\"./dlp.txt\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zia.DLP.DLPNotificationTemplates;\nimport com.pulumi.zia.DLP.DLPNotificationTemplatesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new DLPNotificationTemplates(\"example\", DLPNotificationTemplatesArgs.builder()        \n            .subject(String.format(\"DLP Violation: %s %s\", TRANSACTION_ID,ENGINES))\n            .attachContent(true)\n            .tlsEnabled(true)\n            .htmlMessage(Files.readString(Paths.get(\"./index.html\")))\n            .plainTextMessage(Files.readString(Paths.get(\"./dlp.txt\")))\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: zia:DLP:DLPNotificationTemplates\n    properties:\n      subject: 'DLP Violation: ${TRANSACTION_ID} ${ENGINES}'\n      attachContent: true\n      tlsEnabled: true\n      htmlMessage:\n        fn::readFile: ./index.html\n      plainTextMessage:\n        fn::readFile: ./dlp.txt\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "attachContent": {
                    "type": "boolean",
                    "description": "If set to true, the content that is violation is attached to the DLP notification email.\n"
                },
                "htmlMessage": {
                    "type": "string",
                    "description": "The template for the HTML message body that must be displayed in the DLP notification email.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The DLP policy rule name.\n"
                },
                "plainTextMessage": {
                    "type": "string",
                    "description": "The template for the plain text UTF-8 message body that must be displayed in the DLP notification email.\n"
                },
                "subject": {
                    "type": "string",
                    "description": "The Subject line that is displayed within the DLP notification email.\n"
                },
                "templateId": {
                    "type": "integer"
                },
                "tlsEnabled": {
                    "type": "boolean",
                    "description": "If set to true, the content that is violation is attached to the DLP notification email.\n"
                }
            },
            "required": [
                "htmlMessage",
                "name",
                "plainTextMessage",
                "templateId"
            ],
            "inputProperties": {
                "attachContent": {
                    "type": "boolean",
                    "description": "If set to true, the content that is violation is attached to the DLP notification email.\n"
                },
                "htmlMessage": {
                    "type": "string",
                    "description": "The template for the HTML message body that must be displayed in the DLP notification email.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The DLP policy rule name.\n"
                },
                "plainTextMessage": {
                    "type": "string",
                    "description": "The template for the plain text UTF-8 message body that must be displayed in the DLP notification email.\n"
                },
                "subject": {
                    "type": "string",
                    "description": "The Subject line that is displayed within the DLP notification email.\n"
                },
                "tlsEnabled": {
                    "type": "boolean",
                    "description": "If set to true, the content that is violation is attached to the DLP notification email.\n"
                }
            },
            "requiredInputs": [
                "htmlMessage",
                "plainTextMessage"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DLPNotificationTemplates resources.\n",
                "properties": {
                    "attachContent": {
                        "type": "boolean",
                        "description": "If set to true, the content that is violation is attached to the DLP notification email.\n"
                    },
                    "htmlMessage": {
                        "type": "string",
                        "description": "The template for the HTML message body that must be displayed in the DLP notification email.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The DLP policy rule name.\n"
                    },
                    "plainTextMessage": {
                        "type": "string",
                        "description": "The template for the plain text UTF-8 message body that must be displayed in the DLP notification email.\n"
                    },
                    "subject": {
                        "type": "string",
                        "description": "The Subject line that is displayed within the DLP notification email.\n"
                    },
                    "templateId": {
                        "type": "integer"
                    },
                    "tlsEnabled": {
                        "type": "boolean",
                        "description": "If set to true, the content that is violation is attached to the DLP notification email.\n"
                    }
                },
                "type": "object"
            }
        },
        "zia:DLP/dLPWebRules:DLPWebRules": {
            "description": "The **zia_dlp_web_rules** resource allows the creation and management of ZIA DLP Web Rules in the Zscaler Internet Access cloud or via the API.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@zscaler/pulumi-zia\";\n\nconst test = new zia.dlp.DLPWebRules(\"test\", {\n    action: \"ALLOW\",\n    cloudApplications: [\n        \"ZENDESK\",\n        \"LUCKY_ORANGE\",\n        \"MICROSOFT_POWERAPPS\",\n        \"MICROSOFTLIVEMEETING\",\n    ],\n    description: \"Test\",\n    fileTypes: [],\n    matchOnly: false,\n    minSize: 20,\n    ocrEnabled: false,\n    order: 1,\n    protocols: [\n        \"HTTPS_RULE\",\n        \"HTTP_RULE\",\n    ],\n    rank: 7,\n    state: \"ENABLED\",\n    withoutContentInspection: false,\n    zscalerIncidentReciever: true,\n});\n```\n```python\nimport pulumi\nimport zscaler_pulumi_zia as zia\n\ntest = zia.dlp.DLPWebRules(\"test\",\n    action=\"ALLOW\",\n    cloud_applications=[\n        \"ZENDESK\",\n        \"LUCKY_ORANGE\",\n        \"MICROSOFT_POWERAPPS\",\n        \"MICROSOFTLIVEMEETING\",\n    ],\n    description=\"Test\",\n    file_types=[],\n    match_only=False,\n    min_size=20,\n    ocr_enabled=False,\n    order=1,\n    protocols=[\n        \"HTTPS_RULE\",\n        \"HTTP_RULE\",\n    ],\n    rank=7,\n    state=\"ENABLED\",\n    without_content_inspection=False,\n    zscaler_incident_reciever=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Zia = zscaler.PulumiPackage.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var test = new Zia.DLP.DLPWebRules(\"test\", new()\n    {\n        Action = \"ALLOW\",\n        CloudApplications = new[]\n        {\n            \"ZENDESK\",\n            \"LUCKY_ORANGE\",\n            \"MICROSOFT_POWERAPPS\",\n            \"MICROSOFTLIVEMEETING\",\n        },\n        Description = \"Test\",\n        FileTypes = new[] {},\n        MatchOnly = false,\n        MinSize = 20,\n        OcrEnabled = false,\n        Order = 1,\n        Protocols = new[]\n        {\n            \"HTTPS_RULE\",\n            \"HTTP_RULE\",\n        },\n        Rank = 7,\n        State = \"ENABLED\",\n        WithoutContentInspection = false,\n        ZscalerIncidentReciever = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia/DLP\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := DLP.NewDLPWebRules(ctx, \"test\", \u0026DLP.DLPWebRulesArgs{\n\t\t\tAction: pulumi.String(\"ALLOW\"),\n\t\t\tCloudApplications: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"ZENDESK\"),\n\t\t\t\tpulumi.String(\"LUCKY_ORANGE\"),\n\t\t\t\tpulumi.String(\"MICROSOFT_POWERAPPS\"),\n\t\t\t\tpulumi.String(\"MICROSOFTLIVEMEETING\"),\n\t\t\t},\n\t\t\tDescription: pulumi.String(\"Test\"),\n\t\t\tFileTypes:   pulumi.StringArray{},\n\t\t\tMatchOnly:   pulumi.Bool(false),\n\t\t\tMinSize:     pulumi.Int(20),\n\t\t\tOcrEnabled:  pulumi.Bool(false),\n\t\t\tOrder:       pulumi.Int(1),\n\t\t\tProtocols: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"HTTPS_RULE\"),\n\t\t\t\tpulumi.String(\"HTTP_RULE\"),\n\t\t\t},\n\t\t\tRank:                     pulumi.Int(7),\n\t\t\tState:                    pulumi.String(\"ENABLED\"),\n\t\t\tWithoutContentInspection: pulumi.Bool(false),\n\t\t\tZscalerIncidentReciever:  pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zia.DLP.DLPWebRules;\nimport com.pulumi.zia.DLP.DLPWebRulesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var test = new DLPWebRules(\"test\", DLPWebRulesArgs.builder()        \n            .action(\"ALLOW\")\n            .cloudApplications(            \n                \"ZENDESK\",\n                \"LUCKY_ORANGE\",\n                \"MICROSOFT_POWERAPPS\",\n                \"MICROSOFTLIVEMEETING\")\n            .description(\"Test\")\n            .fileTypes()\n            .matchOnly(false)\n            .minSize(20)\n            .ocrEnabled(false)\n            .order(1)\n            .protocols(            \n                \"HTTPS_RULE\",\n                \"HTTP_RULE\")\n            .rank(7)\n            .state(\"ENABLED\")\n            .withoutContentInspection(false)\n            .zscalerIncidentReciever(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  test:\n    type: zia:DLP:DLPWebRules\n    properties:\n      action: ALLOW\n      cloudApplications:\n        - ZENDESK\n        - LUCKY_ORANGE\n        - MICROSOFT_POWERAPPS\n        - MICROSOFTLIVEMEETING\n      description: Test\n      fileTypes: []\n      matchOnly: false\n      minSize: 20\n      ocrEnabled: false\n      order: 1\n      protocols:\n        - HTTPS_RULE\n        - HTTP_RULE\n      rank: 7\n      state: ENABLED\n      withoutContentInspection: false\n      zscalerIncidentReciever: true\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "accessControl": {
                    "type": "string",
                    "description": "The access privilege for this DLP policy rule based on the admin's state. The supported values are:\n"
                },
                "action": {
                    "type": "string",
                    "description": "The action taken when traffic matches the DLP policy rule criteria. The supported values are:\n"
                },
                "auditor": {
                    "$ref": "#/types/zia:DLP/DLPWebRulesAuditor:DLPWebRulesAuditor",
                    "description": "The auditor to which the DLP policy rule must be applied.\n"
                },
                "cloudApplications": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of cloud applications to which the DLP policy rule must be applied. For the complete list of supported cloud applications refer to the  [ZIA API documentation](https://help.zscaler.com/zia/data-loss-prevention#/webDlpRules-post)\n"
                },
                "departments": {
                    "$ref": "#/types/zia:DLP/DLPWebRulesDepartments:DLPWebRulesDepartments",
                    "description": "The name-ID pairs of the departments that are excluded from the DLP policy rule.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the DLP policy rule.\n"
                },
                "dlpEngines": {
                    "$ref": "#/types/zia:DLP/DLPWebRulesDlpEngines:DLPWebRulesDlpEngines",
                    "description": "The list of DLP engines to which the DLP policy rule must be applied.\n"
                },
                "excludedDepartments": {
                    "$ref": "#/types/zia:DLP/DLPWebRulesExcludedDepartments:DLPWebRulesExcludedDepartments",
                    "description": "The name-ID pairs of the groups that are excluded from the DLP policy rule. Maximum of up to `256` departments.\n"
                },
                "excludedGroups": {
                    "$ref": "#/types/zia:DLP/DLPWebRulesExcludedGroups:DLPWebRulesExcludedGroups",
                    "description": "The name-ID pairs of the groups that are excluded from the DLP policy rule. Maximum of up to `256` groups.\n"
                },
                "excludedUsers": {
                    "$ref": "#/types/zia:DLP/DLPWebRulesExcludedUsers:DLPWebRulesExcludedUsers",
                    "description": "The name-ID pairs of the users that are excluded from the DLP policy rule. Maximum of up to `256` users.\n"
                },
                "externalAuditorEmail": {
                    "type": "string",
                    "description": "The email address of an external auditor to whom DLP email notifications are sent.\n"
                },
                "fileTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of file types to which the DLP policy rule must be applied. For the complete list of supported file types refer to the  [ZIA API documentation](https://help.zscaler.com/zia/data-loss-prevention#/webDlpRules-post)\n"
                },
                "groups": {
                    "$ref": "#/types/zia:DLP/DLPWebRulesGroups:DLPWebRulesGroups",
                    "description": "The Name-ID pairs of groups to which the DLP policy rule must be applied. Maximum of up to `8` groups. When not used it implies `Any` to apply the rule to all groups.\n"
                },
                "icapServer": {
                    "$ref": "#/types/zia:DLP/DLPWebRulesIcapServer:DLPWebRulesIcapServer",
                    "description": "The DLP server, using ICAP, to which the transaction content is forwarded.\n"
                },
                "labels": {
                    "$ref": "#/types/zia:DLP/DLPWebRulesLabels:DLPWebRulesLabels",
                    "description": "The Name-ID pairs of rule labels associated to the DLP policy rule.\n"
                },
                "locationGroups": {
                    "$ref": "#/types/zia:DLP/DLPWebRulesLocationGroups:DLPWebRulesLocationGroups",
                    "description": "The Name-ID pairs of locations groups to which the DLP policy rule must be applied. Maximum of up to `32` location groups. When not used it implies `Any` to apply the rule to all location groups.\n"
                },
                "locations": {
                    "$ref": "#/types/zia:DLP/DLPWebRulesLocations:DLPWebRulesLocations",
                    "description": "The Name-ID pairs of locations to which the DLP policy rule must be applied. Maximum of up to `8` locations. When not used it implies `Any` to apply the rule to all locations.\n"
                },
                "matchOnly": {
                    "type": "boolean",
                    "description": "The match only criteria for DLP engines.\n"
                },
                "minSize": {
                    "type": "integer",
                    "description": "The minimum file size (in KB) used for evaluation of the DLP policy rule.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The DLP policy rule name.\n"
                },
                "notificationTemplate": {
                    "$ref": "#/types/zia:DLP/DLPWebRulesNotificationTemplate:DLPWebRulesNotificationTemplate",
                    "description": "The template used for DLP notification emails.\n"
                },
                "ocrEnabled": {
                    "type": "boolean",
                    "description": "Enables or disables image file scanning.\n"
                },
                "order": {
                    "type": "integer",
                    "description": "The rule order of execution for the DLP policy rule with respect to other rules.\n"
                },
                "protocols": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The protocol criteria specified for the DLP policy rule.\n"
                },
                "rank": {
                    "type": "integer",
                    "description": "Admin rank of the admin who creates this rule\n"
                },
                "ruleId": {
                    "type": "integer"
                },
                "state": {
                    "type": "string",
                    "description": "Enables or disables the DLP policy rule.. The supported values are:\n"
                },
                "timeWindows": {
                    "$ref": "#/types/zia:DLP/DLPWebRulesTimeWindows:DLPWebRulesTimeWindows",
                    "description": "The Name-ID pairs of time windows to which the DLP policy rule must be applied. Maximum of up to `2` time intervals. When not used it implies `always` to apply the rule to all time intervals.\n"
                },
                "urlCategories": {
                    "$ref": "#/types/zia:DLP/DLPWebRulesUrlCategories:DLPWebRulesUrlCategories",
                    "description": "The list of URL categories to which the DLP policy rule must be applied.\n"
                },
                "users": {
                    "$ref": "#/types/zia:DLP/DLPWebRulesUsers:DLPWebRulesUsers",
                    "description": "The Name-ID pairs of users to which the DLP policy rule must be applied. Maximum of up to `4` users. When not used it implies `Any` to apply the rule to all users.\n"
                },
                "withoutContentInspection": {
                    "type": "boolean",
                    "description": "Indicates a DLP policy rule without content inspection, when the value is set to true.\n"
                },
                "zscalerIncidentReciever": {
                    "type": "boolean",
                    "description": "Indicates whether a Zscaler Incident Receiver is associated to the DLP policy rule.\n"
                }
            },
            "required": [
                "accessControl",
                "action",
                "auditor",
                "cloudApplications",
                "departments",
                "description",
                "dlpEngines",
                "excludedDepartments",
                "excludedGroups",
                "excludedUsers",
                "externalAuditorEmail",
                "fileTypes",
                "groups",
                "icapServer",
                "labels",
                "locationGroups",
                "locations",
                "matchOnly",
                "minSize",
                "name",
                "notificationTemplate",
                "ocrEnabled",
                "order",
                "protocols",
                "ruleId",
                "state",
                "timeWindows",
                "urlCategories",
                "users",
                "withoutContentInspection",
                "zscalerIncidentReciever"
            ],
            "inputProperties": {
                "accessControl": {
                    "type": "string",
                    "description": "The access privilege for this DLP policy rule based on the admin's state. The supported values are:\n"
                },
                "action": {
                    "type": "string",
                    "description": "The action taken when traffic matches the DLP policy rule criteria. The supported values are:\n"
                },
                "auditor": {
                    "$ref": "#/types/zia:DLP/DLPWebRulesAuditor:DLPWebRulesAuditor",
                    "description": "The auditor to which the DLP policy rule must be applied.\n"
                },
                "cloudApplications": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of cloud applications to which the DLP policy rule must be applied. For the complete list of supported cloud applications refer to the  [ZIA API documentation](https://help.zscaler.com/zia/data-loss-prevention#/webDlpRules-post)\n"
                },
                "departments": {
                    "$ref": "#/types/zia:DLP/DLPWebRulesDepartments:DLPWebRulesDepartments",
                    "description": "The name-ID pairs of the departments that are excluded from the DLP policy rule.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the DLP policy rule.\n"
                },
                "dlpEngines": {
                    "$ref": "#/types/zia:DLP/DLPWebRulesDlpEngines:DLPWebRulesDlpEngines",
                    "description": "The list of DLP engines to which the DLP policy rule must be applied.\n"
                },
                "excludedDepartments": {
                    "$ref": "#/types/zia:DLP/DLPWebRulesExcludedDepartments:DLPWebRulesExcludedDepartments",
                    "description": "The name-ID pairs of the groups that are excluded from the DLP policy rule. Maximum of up to `256` departments.\n"
                },
                "excludedGroups": {
                    "$ref": "#/types/zia:DLP/DLPWebRulesExcludedGroups:DLPWebRulesExcludedGroups",
                    "description": "The name-ID pairs of the groups that are excluded from the DLP policy rule. Maximum of up to `256` groups.\n"
                },
                "excludedUsers": {
                    "$ref": "#/types/zia:DLP/DLPWebRulesExcludedUsers:DLPWebRulesExcludedUsers",
                    "description": "The name-ID pairs of the users that are excluded from the DLP policy rule. Maximum of up to `256` users.\n"
                },
                "externalAuditorEmail": {
                    "type": "string",
                    "description": "The email address of an external auditor to whom DLP email notifications are sent.\n"
                },
                "fileTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The list of file types to which the DLP policy rule must be applied. For the complete list of supported file types refer to the  [ZIA API documentation](https://help.zscaler.com/zia/data-loss-prevention#/webDlpRules-post)\n"
                },
                "groups": {
                    "$ref": "#/types/zia:DLP/DLPWebRulesGroups:DLPWebRulesGroups",
                    "description": "The Name-ID pairs of groups to which the DLP policy rule must be applied. Maximum of up to `8` groups. When not used it implies `Any` to apply the rule to all groups.\n"
                },
                "icapServer": {
                    "$ref": "#/types/zia:DLP/DLPWebRulesIcapServer:DLPWebRulesIcapServer",
                    "description": "The DLP server, using ICAP, to which the transaction content is forwarded.\n"
                },
                "labels": {
                    "$ref": "#/types/zia:DLP/DLPWebRulesLabels:DLPWebRulesLabels",
                    "description": "The Name-ID pairs of rule labels associated to the DLP policy rule.\n"
                },
                "locationGroups": {
                    "$ref": "#/types/zia:DLP/DLPWebRulesLocationGroups:DLPWebRulesLocationGroups",
                    "description": "The Name-ID pairs of locations groups to which the DLP policy rule must be applied. Maximum of up to `32` location groups. When not used it implies `Any` to apply the rule to all location groups.\n"
                },
                "locations": {
                    "$ref": "#/types/zia:DLP/DLPWebRulesLocations:DLPWebRulesLocations",
                    "description": "The Name-ID pairs of locations to which the DLP policy rule must be applied. Maximum of up to `8` locations. When not used it implies `Any` to apply the rule to all locations.\n"
                },
                "matchOnly": {
                    "type": "boolean",
                    "description": "The match only criteria for DLP engines.\n"
                },
                "minSize": {
                    "type": "integer",
                    "description": "The minimum file size (in KB) used for evaluation of the DLP policy rule.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The DLP policy rule name.\n"
                },
                "notificationTemplate": {
                    "$ref": "#/types/zia:DLP/DLPWebRulesNotificationTemplate:DLPWebRulesNotificationTemplate",
                    "description": "The template used for DLP notification emails.\n"
                },
                "ocrEnabled": {
                    "type": "boolean",
                    "description": "Enables or disables image file scanning.\n"
                },
                "order": {
                    "type": "integer",
                    "description": "The rule order of execution for the DLP policy rule with respect to other rules.\n"
                },
                "protocols": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The protocol criteria specified for the DLP policy rule.\n"
                },
                "rank": {
                    "type": "integer",
                    "description": "Admin rank of the admin who creates this rule\n"
                },
                "state": {
                    "type": "string",
                    "description": "Enables or disables the DLP policy rule.. The supported values are:\n"
                },
                "timeWindows": {
                    "$ref": "#/types/zia:DLP/DLPWebRulesTimeWindows:DLPWebRulesTimeWindows",
                    "description": "The Name-ID pairs of time windows to which the DLP policy rule must be applied. Maximum of up to `2` time intervals. When not used it implies `always` to apply the rule to all time intervals.\n"
                },
                "urlCategories": {
                    "$ref": "#/types/zia:DLP/DLPWebRulesUrlCategories:DLPWebRulesUrlCategories",
                    "description": "The list of URL categories to which the DLP policy rule must be applied.\n"
                },
                "users": {
                    "$ref": "#/types/zia:DLP/DLPWebRulesUsers:DLPWebRulesUsers",
                    "description": "The Name-ID pairs of users to which the DLP policy rule must be applied. Maximum of up to `4` users. When not used it implies `Any` to apply the rule to all users.\n"
                },
                "withoutContentInspection": {
                    "type": "boolean",
                    "description": "Indicates a DLP policy rule without content inspection, when the value is set to true.\n"
                },
                "zscalerIncidentReciever": {
                    "type": "boolean",
                    "description": "Indicates whether a Zscaler Incident Receiver is associated to the DLP policy rule.\n"
                }
            },
            "requiredInputs": [
                "order"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DLPWebRules resources.\n",
                "properties": {
                    "accessControl": {
                        "type": "string",
                        "description": "The access privilege for this DLP policy rule based on the admin's state. The supported values are:\n"
                    },
                    "action": {
                        "type": "string",
                        "description": "The action taken when traffic matches the DLP policy rule criteria. The supported values are:\n"
                    },
                    "auditor": {
                        "$ref": "#/types/zia:DLP/DLPWebRulesAuditor:DLPWebRulesAuditor",
                        "description": "The auditor to which the DLP policy rule must be applied.\n"
                    },
                    "cloudApplications": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of cloud applications to which the DLP policy rule must be applied. For the complete list of supported cloud applications refer to the  [ZIA API documentation](https://help.zscaler.com/zia/data-loss-prevention#/webDlpRules-post)\n"
                    },
                    "departments": {
                        "$ref": "#/types/zia:DLP/DLPWebRulesDepartments:DLPWebRulesDepartments",
                        "description": "The name-ID pairs of the departments that are excluded from the DLP policy rule.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the DLP policy rule.\n"
                    },
                    "dlpEngines": {
                        "$ref": "#/types/zia:DLP/DLPWebRulesDlpEngines:DLPWebRulesDlpEngines",
                        "description": "The list of DLP engines to which the DLP policy rule must be applied.\n"
                    },
                    "excludedDepartments": {
                        "$ref": "#/types/zia:DLP/DLPWebRulesExcludedDepartments:DLPWebRulesExcludedDepartments",
                        "description": "The name-ID pairs of the groups that are excluded from the DLP policy rule. Maximum of up to `256` departments.\n"
                    },
                    "excludedGroups": {
                        "$ref": "#/types/zia:DLP/DLPWebRulesExcludedGroups:DLPWebRulesExcludedGroups",
                        "description": "The name-ID pairs of the groups that are excluded from the DLP policy rule. Maximum of up to `256` groups.\n"
                    },
                    "excludedUsers": {
                        "$ref": "#/types/zia:DLP/DLPWebRulesExcludedUsers:DLPWebRulesExcludedUsers",
                        "description": "The name-ID pairs of the users that are excluded from the DLP policy rule. Maximum of up to `256` users.\n"
                    },
                    "externalAuditorEmail": {
                        "type": "string",
                        "description": "The email address of an external auditor to whom DLP email notifications are sent.\n"
                    },
                    "fileTypes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The list of file types to which the DLP policy rule must be applied. For the complete list of supported file types refer to the  [ZIA API documentation](https://help.zscaler.com/zia/data-loss-prevention#/webDlpRules-post)\n"
                    },
                    "groups": {
                        "$ref": "#/types/zia:DLP/DLPWebRulesGroups:DLPWebRulesGroups",
                        "description": "The Name-ID pairs of groups to which the DLP policy rule must be applied. Maximum of up to `8` groups. When not used it implies `Any` to apply the rule to all groups.\n"
                    },
                    "icapServer": {
                        "$ref": "#/types/zia:DLP/DLPWebRulesIcapServer:DLPWebRulesIcapServer",
                        "description": "The DLP server, using ICAP, to which the transaction content is forwarded.\n"
                    },
                    "labels": {
                        "$ref": "#/types/zia:DLP/DLPWebRulesLabels:DLPWebRulesLabels",
                        "description": "The Name-ID pairs of rule labels associated to the DLP policy rule.\n"
                    },
                    "locationGroups": {
                        "$ref": "#/types/zia:DLP/DLPWebRulesLocationGroups:DLPWebRulesLocationGroups",
                        "description": "The Name-ID pairs of locations groups to which the DLP policy rule must be applied. Maximum of up to `32` location groups. When not used it implies `Any` to apply the rule to all location groups.\n"
                    },
                    "locations": {
                        "$ref": "#/types/zia:DLP/DLPWebRulesLocations:DLPWebRulesLocations",
                        "description": "The Name-ID pairs of locations to which the DLP policy rule must be applied. Maximum of up to `8` locations. When not used it implies `Any` to apply the rule to all locations.\n"
                    },
                    "matchOnly": {
                        "type": "boolean",
                        "description": "The match only criteria for DLP engines.\n"
                    },
                    "minSize": {
                        "type": "integer",
                        "description": "The minimum file size (in KB) used for evaluation of the DLP policy rule.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The DLP policy rule name.\n"
                    },
                    "notificationTemplate": {
                        "$ref": "#/types/zia:DLP/DLPWebRulesNotificationTemplate:DLPWebRulesNotificationTemplate",
                        "description": "The template used for DLP notification emails.\n"
                    },
                    "ocrEnabled": {
                        "type": "boolean",
                        "description": "Enables or disables image file scanning.\n"
                    },
                    "order": {
                        "type": "integer",
                        "description": "The rule order of execution for the DLP policy rule with respect to other rules.\n"
                    },
                    "protocols": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The protocol criteria specified for the DLP policy rule.\n"
                    },
                    "rank": {
                        "type": "integer",
                        "description": "Admin rank of the admin who creates this rule\n"
                    },
                    "ruleId": {
                        "type": "integer"
                    },
                    "state": {
                        "type": "string",
                        "description": "Enables or disables the DLP policy rule.. The supported values are:\n"
                    },
                    "timeWindows": {
                        "$ref": "#/types/zia:DLP/DLPWebRulesTimeWindows:DLPWebRulesTimeWindows",
                        "description": "The Name-ID pairs of time windows to which the DLP policy rule must be applied. Maximum of up to `2` time intervals. When not used it implies `always` to apply the rule to all time intervals.\n"
                    },
                    "urlCategories": {
                        "$ref": "#/types/zia:DLP/DLPWebRulesUrlCategories:DLPWebRulesUrlCategories",
                        "description": "The list of URL categories to which the DLP policy rule must be applied.\n"
                    },
                    "users": {
                        "$ref": "#/types/zia:DLP/DLPWebRulesUsers:DLPWebRulesUsers",
                        "description": "The Name-ID pairs of users to which the DLP policy rule must be applied. Maximum of up to `4` users. When not used it implies `Any` to apply the rule to all users.\n"
                    },
                    "withoutContentInspection": {
                        "type": "boolean",
                        "description": "Indicates a DLP policy rule without content inspection, when the value is set to true.\n"
                    },
                    "zscalerIncidentReciever": {
                        "type": "boolean",
                        "description": "Indicates whether a Zscaler Incident Receiver is associated to the DLP policy rule.\n"
                    }
                },
                "type": "object"
            }
        },
        "zia:Firewall/firewallFilteringApplicationGroups:FirewallFilteringApplicationGroups": {
            "description": "The **zia_firewall_filtering_network_application_groups** resource allows the creation and management of ZIA Cloud Firewall IP source groups in the Zscaler Internet Access. This resource can then be associated with a ZIA cloud firewall filtering rule.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@zscaler/pulumi-zia\";\n\n// Add applications to a network application group\nconst example = new zia.firewall.FirewallFilteringApplicationGroups(\"example\", {\n    description: \"Example\",\n    networkApplications: [\n        \"LDAP\",\n        \"LDAPS\",\n        \"SRVLOC\",\n    ],\n});\n```\n```python\nimport pulumi\nimport zscaler_pulumi_zia as zia\n\n# Add applications to a network application group\nexample = zia.firewall.FirewallFilteringApplicationGroups(\"example\",\n    description=\"Example\",\n    network_applications=[\n        \"LDAP\",\n        \"LDAPS\",\n        \"SRVLOC\",\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Zia = zscaler.PulumiPackage.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Add applications to a network application group\n    var example = new Zia.Firewall.FirewallFilteringApplicationGroups(\"example\", new()\n    {\n        Description = \"Example\",\n        NetworkApplications = new[]\n        {\n            \"LDAP\",\n            \"LDAPS\",\n            \"SRVLOC\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia/Firewall\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Firewall.NewFirewallFilteringApplicationGroups(ctx, \"example\", \u0026Firewall.FirewallFilteringApplicationGroupsArgs{\n\t\t\tDescription: pulumi.String(\"Example\"),\n\t\t\tNetworkApplications: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"LDAP\"),\n\t\t\t\tpulumi.String(\"LDAPS\"),\n\t\t\t\tpulumi.String(\"SRVLOC\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zia.Firewall.FirewallFilteringApplicationGroups;\nimport com.pulumi.zia.Firewall.FirewallFilteringApplicationGroupsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new FirewallFilteringApplicationGroups(\"example\", FirewallFilteringApplicationGroupsArgs.builder()        \n            .description(\"Example\")\n            .networkApplications(            \n                \"LDAP\",\n                \"LDAPS\",\n                \"SRVLOC\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Add applications to a network application group\n  example:\n    type: zia:Firewall:FirewallFilteringApplicationGroups\n    properties:\n      description: Example\n      networkApplications:\n        - LDAP\n        - LDAPS\n        - SRVLOC\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "appId": {
                    "type": "integer"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the network application group\n"
                },
                "name": {
                    "type": "string",
                    "description": "Network application group name\n"
                },
                "networkApplications": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Any number of applications to be added to the group\n* Refer to the Zscaler API Swagger for the complete list of applications [ZIA API Guide](https://help.zscaler.com/zia/firewall-policies#/networkApplicationGroups-get)\n"
                }
            },
            "required": [
                "appId",
                "name"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of the network application group\n"
                },
                "name": {
                    "type": "string",
                    "description": "Network application group name\n"
                },
                "networkApplications": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Any number of applications to be added to the group\n* Refer to the Zscaler API Swagger for the complete list of applications [ZIA API Guide](https://help.zscaler.com/zia/firewall-policies#/networkApplicationGroups-get)\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering FirewallFilteringApplicationGroups resources.\n",
                "properties": {
                    "appId": {
                        "type": "integer"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the network application group\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Network application group name\n"
                    },
                    "networkApplications": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Any number of applications to be added to the group\n* Refer to the Zscaler API Swagger for the complete list of applications [ZIA API Guide](https://help.zscaler.com/zia/firewall-policies#/networkApplicationGroups-get)\n"
                    }
                },
                "type": "object"
            }
        },
        "zia:Firewall/firewallFilteringDestinationGroups:FirewallFilteringDestinationGroups": {
            "properties": {
                "addresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Destination IP addresses within the group\n"
                },
                "countries": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Destination countries for which the rule is applicable. If not set, the rule is not restricted to specific destination\ncountries.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Additional information about the destination IP group\n"
                },
                "ipCategories": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of URL categories for which rule must be applied\n"
                },
                "ipDestinationId": {
                    "type": "integer",
                    "description": "Unique identifer for the destination IP group\n"
                },
                "name": {
                    "type": "string",
                    "description": "Destination IP group name\n"
                },
                "type": {
                    "type": "string",
                    "description": "Destination IP group type (i.e., the group can contain destination IP addresses or FQDNs)\n"
                }
            },
            "required": [
                "addresses",
                "countries",
                "ipDestinationId",
                "name",
                "type"
            ],
            "inputProperties": {
                "addresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Destination IP addresses within the group\n"
                },
                "countries": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Destination countries for which the rule is applicable. If not set, the rule is not restricted to specific destination\ncountries.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Additional information about the destination IP group\n"
                },
                "ipCategories": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of URL categories for which rule must be applied\n"
                },
                "name": {
                    "type": "string",
                    "description": "Destination IP group name\n"
                },
                "type": {
                    "type": "string",
                    "description": "Destination IP group type (i.e., the group can contain destination IP addresses or FQDNs)\n",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering FirewallFilteringDestinationGroups resources.\n",
                "properties": {
                    "addresses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Destination IP addresses within the group\n"
                    },
                    "countries": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Destination countries for which the rule is applicable. If not set, the rule is not restricted to specific destination\ncountries.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Additional information about the destination IP group\n"
                    },
                    "ipCategories": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of URL categories for which rule must be applied\n"
                    },
                    "ipDestinationId": {
                        "type": "integer",
                        "description": "Unique identifer for the destination IP group\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Destination IP group name\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Destination IP group type (i.e., the group can contain destination IP addresses or FQDNs)\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "zia:Firewall/firewallFilteringNetworkServices:FirewallFilteringNetworkServices": {
            "description": "The **zia_firewall_filtering_network_service** resource allows the creation and management of ZIA Cloud Firewall IP network services in the Zscaler Internet Access. This resource can then be associated with a ZIA cloud firewall filtering rule and network service group resources.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@zscaler/pulumi-zia\";\n\nconst example = new zia.firewall.FirewallFilteringNetworkServices(\"example\", {\n    description: \"example\",\n    destTcpPorts: [\n        {\n            start: 5000,\n        },\n        {\n            start: 5001,\n        },\n        {\n            end: 5005,\n            start: 5003,\n        },\n    ],\n    srcTcpPorts: [\n        {\n            start: 5000,\n        },\n        {\n            start: 5001,\n        },\n        {\n            end: 5005,\n            start: 5002,\n        },\n    ],\n    type: \"CUSTOM\",\n});\n```\n```python\nimport pulumi\nimport zscaler_pulumi_zia as zia\n\nexample = zia.firewall.FirewallFilteringNetworkServices(\"example\",\n    description=\"example\",\n    dest_tcp_ports=[\n        zia.firewall.FirewallFilteringNetworkServicesDestTcpPortArgs(\n            start=5000,\n        ),\n        zia.firewall.FirewallFilteringNetworkServicesDestTcpPortArgs(\n            start=5001,\n        ),\n        zia.firewall.FirewallFilteringNetworkServicesDestTcpPortArgs(\n            end=5005,\n            start=5003,\n        ),\n    ],\n    src_tcp_ports=[\n        zia.firewall.FirewallFilteringNetworkServicesSrcTcpPortArgs(\n            start=5000,\n        ),\n        zia.firewall.FirewallFilteringNetworkServicesSrcTcpPortArgs(\n            start=5001,\n        ),\n        zia.firewall.FirewallFilteringNetworkServicesSrcTcpPortArgs(\n            end=5005,\n            start=5002,\n        ),\n    ],\n    type=\"CUSTOM\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Zia = zscaler.PulumiPackage.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Zia.Firewall.FirewallFilteringNetworkServices(\"example\", new()\n    {\n        Description = \"example\",\n        DestTcpPorts = new[]\n        {\n            new Zia.Firewall.Inputs.FirewallFilteringNetworkServicesDestTcpPortArgs\n            {\n                Start = 5000,\n            },\n            new Zia.Firewall.Inputs.FirewallFilteringNetworkServicesDestTcpPortArgs\n            {\n                Start = 5001,\n            },\n            new Zia.Firewall.Inputs.FirewallFilteringNetworkServicesDestTcpPortArgs\n            {\n                End = 5005,\n                Start = 5003,\n            },\n        },\n        SrcTcpPorts = new[]\n        {\n            new Zia.Firewall.Inputs.FirewallFilteringNetworkServicesSrcTcpPortArgs\n            {\n                Start = 5000,\n            },\n            new Zia.Firewall.Inputs.FirewallFilteringNetworkServicesSrcTcpPortArgs\n            {\n                Start = 5001,\n            },\n            new Zia.Firewall.Inputs.FirewallFilteringNetworkServicesSrcTcpPortArgs\n            {\n                End = 5005,\n                Start = 5002,\n            },\n        },\n        Type = \"CUSTOM\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia/Firewall\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Firewall.NewFirewallFilteringNetworkServices(ctx, \"example\", \u0026Firewall.FirewallFilteringNetworkServicesArgs{\n\t\t\tDescription: pulumi.String(\"example\"),\n\t\t\tDestTcpPorts: firewall.FirewallFilteringNetworkServicesDestTcpPortArray{\n\t\t\t\t\u0026firewall.FirewallFilteringNetworkServicesDestTcpPortArgs{\n\t\t\t\t\tStart: pulumi.Int(5000),\n\t\t\t\t},\n\t\t\t\t\u0026firewall.FirewallFilteringNetworkServicesDestTcpPortArgs{\n\t\t\t\t\tStart: pulumi.Int(5001),\n\t\t\t\t},\n\t\t\t\t\u0026firewall.FirewallFilteringNetworkServicesDestTcpPortArgs{\n\t\t\t\t\tEnd:   pulumi.Int(5005),\n\t\t\t\t\tStart: pulumi.Int(5003),\n\t\t\t\t},\n\t\t\t},\n\t\t\tSrcTcpPorts: firewall.FirewallFilteringNetworkServicesSrcTcpPortArray{\n\t\t\t\t\u0026firewall.FirewallFilteringNetworkServicesSrcTcpPortArgs{\n\t\t\t\t\tStart: pulumi.Int(5000),\n\t\t\t\t},\n\t\t\t\t\u0026firewall.FirewallFilteringNetworkServicesSrcTcpPortArgs{\n\t\t\t\t\tStart: pulumi.Int(5001),\n\t\t\t\t},\n\t\t\t\t\u0026firewall.FirewallFilteringNetworkServicesSrcTcpPortArgs{\n\t\t\t\t\tEnd:   pulumi.Int(5005),\n\t\t\t\t\tStart: pulumi.Int(5002),\n\t\t\t\t},\n\t\t\t},\n\t\t\tType: pulumi.String(\"CUSTOM\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zia.Firewall.FirewallFilteringNetworkServices;\nimport com.pulumi.zia.Firewall.FirewallFilteringNetworkServicesArgs;\nimport com.pulumi.zia.Firewall.inputs.FirewallFilteringNetworkServicesDestTcpPortArgs;\nimport com.pulumi.zia.Firewall.inputs.FirewallFilteringNetworkServicesSrcTcpPortArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new FirewallFilteringNetworkServices(\"example\", FirewallFilteringNetworkServicesArgs.builder()        \n            .description(\"example\")\n            .destTcpPorts(            \n                FirewallFilteringNetworkServicesDestTcpPortArgs.builder()\n                    .start(5000)\n                    .build(),\n                FirewallFilteringNetworkServicesDestTcpPortArgs.builder()\n                    .start(5001)\n                    .build(),\n                FirewallFilteringNetworkServicesDestTcpPortArgs.builder()\n                    .end(5005)\n                    .start(5003)\n                    .build())\n            .srcTcpPorts(            \n                FirewallFilteringNetworkServicesSrcTcpPortArgs.builder()\n                    .start(5000)\n                    .build(),\n                FirewallFilteringNetworkServicesSrcTcpPortArgs.builder()\n                    .start(5001)\n                    .build(),\n                FirewallFilteringNetworkServicesSrcTcpPortArgs.builder()\n                    .end(5005)\n                    .start(5002)\n                    .build())\n            .type(\"CUSTOM\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: zia:Firewall:FirewallFilteringNetworkServices\n    properties:\n      description: example\n      destTcpPorts:\n        - start: 5000\n        - start: 5001\n        - end: 5005\n          start: 5003\n      srcTcpPorts:\n        - start: 5000\n        - start: 5001\n        - end: 5005\n          start: 5002\n      type: CUSTOM\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of the service\n"
                },
                "destTcpPorts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zia:Firewall/FirewallFilteringNetworkServicesDestTcpPort:FirewallFilteringNetworkServicesDestTcpPort"
                    },
                    "description": "The TCP destination port number (example: 50) or port number range (example: 1000-1050), if any, that is used by the network service.\n"
                },
                "destUdpPorts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zia:Firewall/FirewallFilteringNetworkServicesDestUdpPort:FirewallFilteringNetworkServicesDestUdpPort"
                    },
                    "description": "The UDP source port number (example: 50) or port number range (example: 1000-1050), if any, that is used by the network service.\n"
                },
                "isNameL10nTag": {
                    "type": "boolean",
                    "description": "(Optional\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the service\n"
                },
                "networkServiceId": {
                    "type": "integer"
                },
                "srcTcpPorts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zia:Firewall/FirewallFilteringNetworkServicesSrcTcpPort:FirewallFilteringNetworkServicesSrcTcpPort"
                    },
                    "description": "The TCP source port number (example: 50) or port number range (example: 1000-1050), if any, that is used by the network service\n"
                },
                "srcUdpPorts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zia:Firewall/FirewallFilteringNetworkServicesSrcUdpPort:FirewallFilteringNetworkServicesSrcUdpPort"
                    },
                    "description": "The UDP source port number (example: 50) or port number range (example: 1000-1050), if any, that is used by the network service.\n"
                },
                "tag": {
                    "type": "string",
                    "description": "The following values are supported: `\"ICMP_ANY`, `\"UDP_ANY\"`, `\"TCP_ANY\"`, `\"OTHER_NETWORK_SERVICE\"`, `\"DNS\"`, `\"NETBIOS\"`, `\"FTP\"`, `\"GNUTELLA\"`, `\"H_323\"`, `\"HTTP\"`, `\"HTTPS\"`, `\"IKE\"`, `\"IMAP\"`, `\"ILS\"`, `\"IKE_NAT\"`, `\"IRC\"`, `\"LDAP\"`, `\"QUIC\"`, `\"TDS\"`, `\"NETMEETING\"`, `\"NFS\"`, `\"NTP\"`, `\"SIP\"`, `\"SNMP\"`, `\"SMB\"`, `\"SMTP\"`, `\"SSH\"`, `\"SYSLOG\"`, `\"TELNET\"`, `\"TRACEROUTE\"`, `\"POP3\"`, `\"PPTP\"`, `\"RADIUS\"`, `\"REAL_MEDIA\"`, `\"RTSP\"`, `\"VNC\"`, `\"WHOIS\"`, `\"KERBEROS_SEC\"`, `\"TACACS\"`, `\"SNMPTRAP\"`, `\"NMAP\"`, `\"RSYNC\"`, `\"L2TP\"`, `\"HTTP_PROXY\"`, `\"PC_ANYWHERE\"`, `\"MSN\"`, `\"ECHO\"`, `\"AIM\"`, `\"IDENT\"`, `\"YMSG\"`, `\"SCCP\"`, `\"MGCP_UA\"`, `\"MGCP_CA\"`, `\"VDO_LIVE\"`, `\"OPENVPN\"`, `\"TFTP\"`, `\"FTPS_IMPLICIT\"`, `\"ZSCALER_PROXY_NW_SERVICES\"`, `\"GRE_PROTOCOL\"`, `\"ESP_PROTOCOL\"`, `\"DHCP\"`\n"
                },
                "type": {
                    "type": "string",
                    "description": "Supported values: `STANDARD`, `PREDEFINED`, `CUSTOM`\n"
                }
            },
            "required": [
                "name",
                "networkServiceId",
                "tag"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of the service\n"
                },
                "destTcpPorts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zia:Firewall/FirewallFilteringNetworkServicesDestTcpPort:FirewallFilteringNetworkServicesDestTcpPort"
                    },
                    "description": "The TCP destination port number (example: 50) or port number range (example: 1000-1050), if any, that is used by the network service.\n"
                },
                "destUdpPorts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zia:Firewall/FirewallFilteringNetworkServicesDestUdpPort:FirewallFilteringNetworkServicesDestUdpPort"
                    },
                    "description": "The UDP source port number (example: 50) or port number range (example: 1000-1050), if any, that is used by the network service.\n"
                },
                "isNameL10nTag": {
                    "type": "boolean",
                    "description": "(Optional\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the service\n"
                },
                "srcTcpPorts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zia:Firewall/FirewallFilteringNetworkServicesSrcTcpPort:FirewallFilteringNetworkServicesSrcTcpPort"
                    },
                    "description": "The TCP source port number (example: 50) or port number range (example: 1000-1050), if any, that is used by the network service\n"
                },
                "srcUdpPorts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zia:Firewall/FirewallFilteringNetworkServicesSrcUdpPort:FirewallFilteringNetworkServicesSrcUdpPort"
                    },
                    "description": "The UDP source port number (example: 50) or port number range (example: 1000-1050), if any, that is used by the network service.\n"
                },
                "tag": {
                    "type": "string",
                    "description": "The following values are supported: `\"ICMP_ANY`, `\"UDP_ANY\"`, `\"TCP_ANY\"`, `\"OTHER_NETWORK_SERVICE\"`, `\"DNS\"`, `\"NETBIOS\"`, `\"FTP\"`, `\"GNUTELLA\"`, `\"H_323\"`, `\"HTTP\"`, `\"HTTPS\"`, `\"IKE\"`, `\"IMAP\"`, `\"ILS\"`, `\"IKE_NAT\"`, `\"IRC\"`, `\"LDAP\"`, `\"QUIC\"`, `\"TDS\"`, `\"NETMEETING\"`, `\"NFS\"`, `\"NTP\"`, `\"SIP\"`, `\"SNMP\"`, `\"SMB\"`, `\"SMTP\"`, `\"SSH\"`, `\"SYSLOG\"`, `\"TELNET\"`, `\"TRACEROUTE\"`, `\"POP3\"`, `\"PPTP\"`, `\"RADIUS\"`, `\"REAL_MEDIA\"`, `\"RTSP\"`, `\"VNC\"`, `\"WHOIS\"`, `\"KERBEROS_SEC\"`, `\"TACACS\"`, `\"SNMPTRAP\"`, `\"NMAP\"`, `\"RSYNC\"`, `\"L2TP\"`, `\"HTTP_PROXY\"`, `\"PC_ANYWHERE\"`, `\"MSN\"`, `\"ECHO\"`, `\"AIM\"`, `\"IDENT\"`, `\"YMSG\"`, `\"SCCP\"`, `\"MGCP_UA\"`, `\"MGCP_CA\"`, `\"VDO_LIVE\"`, `\"OPENVPN\"`, `\"TFTP\"`, `\"FTPS_IMPLICIT\"`, `\"ZSCALER_PROXY_NW_SERVICES\"`, `\"GRE_PROTOCOL\"`, `\"ESP_PROTOCOL\"`, `\"DHCP\"`\n"
                },
                "type": {
                    "type": "string",
                    "description": "Supported values: `STANDARD`, `PREDEFINED`, `CUSTOM`\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering FirewallFilteringNetworkServices resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the service\n"
                    },
                    "destTcpPorts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:Firewall/FirewallFilteringNetworkServicesDestTcpPort:FirewallFilteringNetworkServicesDestTcpPort"
                        },
                        "description": "The TCP destination port number (example: 50) or port number range (example: 1000-1050), if any, that is used by the network service.\n"
                    },
                    "destUdpPorts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:Firewall/FirewallFilteringNetworkServicesDestUdpPort:FirewallFilteringNetworkServicesDestUdpPort"
                        },
                        "description": "The UDP source port number (example: 50) or port number range (example: 1000-1050), if any, that is used by the network service.\n"
                    },
                    "isNameL10nTag": {
                        "type": "boolean",
                        "description": "(Optional\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the service\n"
                    },
                    "networkServiceId": {
                        "type": "integer"
                    },
                    "srcTcpPorts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:Firewall/FirewallFilteringNetworkServicesSrcTcpPort:FirewallFilteringNetworkServicesSrcTcpPort"
                        },
                        "description": "The TCP source port number (example: 50) or port number range (example: 1000-1050), if any, that is used by the network service\n"
                    },
                    "srcUdpPorts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:Firewall/FirewallFilteringNetworkServicesSrcUdpPort:FirewallFilteringNetworkServicesSrcUdpPort"
                        },
                        "description": "The UDP source port number (example: 50) or port number range (example: 1000-1050), if any, that is used by the network service.\n"
                    },
                    "tag": {
                        "type": "string",
                        "description": "The following values are supported: `\"ICMP_ANY`, `\"UDP_ANY\"`, `\"TCP_ANY\"`, `\"OTHER_NETWORK_SERVICE\"`, `\"DNS\"`, `\"NETBIOS\"`, `\"FTP\"`, `\"GNUTELLA\"`, `\"H_323\"`, `\"HTTP\"`, `\"HTTPS\"`, `\"IKE\"`, `\"IMAP\"`, `\"ILS\"`, `\"IKE_NAT\"`, `\"IRC\"`, `\"LDAP\"`, `\"QUIC\"`, `\"TDS\"`, `\"NETMEETING\"`, `\"NFS\"`, `\"NTP\"`, `\"SIP\"`, `\"SNMP\"`, `\"SMB\"`, `\"SMTP\"`, `\"SSH\"`, `\"SYSLOG\"`, `\"TELNET\"`, `\"TRACEROUTE\"`, `\"POP3\"`, `\"PPTP\"`, `\"RADIUS\"`, `\"REAL_MEDIA\"`, `\"RTSP\"`, `\"VNC\"`, `\"WHOIS\"`, `\"KERBEROS_SEC\"`, `\"TACACS\"`, `\"SNMPTRAP\"`, `\"NMAP\"`, `\"RSYNC\"`, `\"L2TP\"`, `\"HTTP_PROXY\"`, `\"PC_ANYWHERE\"`, `\"MSN\"`, `\"ECHO\"`, `\"AIM\"`, `\"IDENT\"`, `\"YMSG\"`, `\"SCCP\"`, `\"MGCP_UA\"`, `\"MGCP_CA\"`, `\"VDO_LIVE\"`, `\"OPENVPN\"`, `\"TFTP\"`, `\"FTPS_IMPLICIT\"`, `\"ZSCALER_PROXY_NW_SERVICES\"`, `\"GRE_PROTOCOL\"`, `\"ESP_PROTOCOL\"`, `\"DHCP\"`\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Supported values: `STANDARD`, `PREDEFINED`, `CUSTOM`\n"
                    }
                },
                "type": "object"
            }
        },
        "zia:Firewall/firewallFilteringRule:FirewallFilteringRule": {
            "description": "The **zia_firewall_filtering_rule** resource allows the creation and management of ZIA Cloud Firewall filtering rules in the Zscaler Internet Access.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@pulumi/zia\";\nimport * as zia from \"@zscaler/pulumi-zia\";\n\nconst zscalerProxyNwServices = zia.Firewall.getFirewallFilteringNetworkServices({\n    name: \"ZSCALER_PROXY_NW_SERVICES\",\n});\nconst engineering = zia.Departments.getDepartmentManagement({\n    name: \"Engineering\",\n});\nconst normalInternet = zia.Groups.getGroupManagement({\n    name: \"Normal_Internet\",\n});\nconst workHours = zia.TimeWindow.getTimeWindow({\n    name: \"Work hours\",\n});\nconst example = new zia.firewall.FirewallFilteringRule(\"example\", {\n    description: \"Example\",\n    action: \"ALLOW\",\n    state: \"ENABLED\",\n    order: 1,\n    enableFullLogging: true,\n    nwServices: {\n        ids: [zscalerProxyNwServices.then(zscalerProxyNwServices =\u003e zscalerProxyNwServices.id)],\n    },\n    departments: {\n        ids: [engineering.then(engineering =\u003e engineering.id)],\n    },\n    groups: {\n        ids: [normalInternet.then(normalInternet =\u003e normalInternet.id)],\n    },\n    timeWindows: {\n        ids: [workHours.then(workHours =\u003e workHours.id)],\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_zia as zia\nimport zscaler_pulumi_zia as zia\n\nzscaler_proxy_nw_services = zia.Firewall.get_firewall_filtering_network_services(name=\"ZSCALER_PROXY_NW_SERVICES\")\nengineering = zia.Departments.get_department_management(name=\"Engineering\")\nnormal_internet = zia.Groups.get_group_management(name=\"Normal_Internet\")\nwork_hours = zia.TimeWindow.get_time_window(name=\"Work hours\")\nexample = zia.firewall.FirewallFilteringRule(\"example\",\n    description=\"Example\",\n    action=\"ALLOW\",\n    state=\"ENABLED\",\n    order=1,\n    enable_full_logging=True,\n    nw_services=zia.firewall.FirewallFilteringRuleNwServicesArgs(\n        ids=[zscaler_proxy_nw_services.id],\n    ),\n    departments=zia.firewall.FirewallFilteringRuleDepartmentsArgs(\n        ids=[engineering.id],\n    ),\n    groups=zia.firewall.FirewallFilteringRuleGroupsArgs(\n        ids=[normal_internet.id],\n    ),\n    time_windows=zia.firewall.FirewallFilteringRuleTimeWindowsArgs(\n        ids=[work_hours.id],\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Zia = Pulumi.Zia;\nusing Zia = zscaler.PulumiPackage.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var zscalerProxyNwServices = Zia.Firewall.GetFirewallFilteringNetworkServices.Invoke(new()\n    {\n        Name = \"ZSCALER_PROXY_NW_SERVICES\",\n    });\n\n    var engineering = Zia.Departments.GetDepartmentManagement.Invoke(new()\n    {\n        Name = \"Engineering\",\n    });\n\n    var normalInternet = Zia.Groups.GetGroupManagement.Invoke(new()\n    {\n        Name = \"Normal_Internet\",\n    });\n\n    var workHours = Zia.TimeWindow.GetTimeWindow.Invoke(new()\n    {\n        Name = \"Work hours\",\n    });\n\n    var example = new Zia.Firewall.FirewallFilteringRule(\"example\", new()\n    {\n        Description = \"Example\",\n        Action = \"ALLOW\",\n        State = \"ENABLED\",\n        Order = 1,\n        EnableFullLogging = true,\n        NwServices = new Zia.Firewall.Inputs.FirewallFilteringRuleNwServicesArgs\n        {\n            Ids = new[]\n            {\n                zscalerProxyNwServices.Apply(getFirewallFilteringNetworkServicesResult =\u003e getFirewallFilteringNetworkServicesResult.Id),\n            },\n        },\n        Departments = new Zia.Firewall.Inputs.FirewallFilteringRuleDepartmentsArgs\n        {\n            Ids = new[]\n            {\n                engineering.Apply(getDepartmentManagementResult =\u003e getDepartmentManagementResult.Id),\n            },\n        },\n        Groups = new Zia.Firewall.Inputs.FirewallFilteringRuleGroupsArgs\n        {\n            Ids = new[]\n            {\n                normalInternet.Apply(getGroupManagementResult =\u003e getGroupManagementResult.Id),\n            },\n        },\n        TimeWindows = new Zia.Firewall.Inputs.FirewallFilteringRuleTimeWindowsArgs\n        {\n            Ids = new[]\n            {\n                workHours.Apply(getTimeWindowResult =\u003e getTimeWindowResult.Id),\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia/Departments\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia/Firewall\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia/Groups\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia/TimeWindow\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tzscalerProxyNwServices, err := Firewall.GetFirewallFilteringNetworkServices(ctx, \u0026firewall.GetFirewallFilteringNetworkServicesArgs{\n\t\t\tName: pulumi.StringRef(\"ZSCALER_PROXY_NW_SERVICES\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tengineering, err := Departments.GetDepartmentManagement(ctx, \u0026departments.GetDepartmentManagementArgs{\n\t\t\tName: pulumi.StringRef(\"Engineering\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tnormalInternet, err := Groups.GetGroupManagement(ctx, \u0026groups.GetGroupManagementArgs{\n\t\t\tName: pulumi.StringRef(\"Normal_Internet\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tworkHours, err := TimeWindow.GetTimeWindow(ctx, \u0026timewindow.GetTimeWindowArgs{\n\t\t\tName: pulumi.StringRef(\"Work hours\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = Firewall.NewFirewallFilteringRule(ctx, \"example\", \u0026Firewall.FirewallFilteringRuleArgs{\n\t\t\tDescription:       pulumi.String(\"Example\"),\n\t\t\tAction:            pulumi.String(\"ALLOW\"),\n\t\t\tState:             pulumi.String(\"ENABLED\"),\n\t\t\tOrder:             pulumi.Int(1),\n\t\t\tEnableFullLogging: pulumi.Bool(true),\n\t\t\tNwServices: \u0026firewall.FirewallFilteringRuleNwServicesArgs{\n\t\t\t\tIds: pulumi.IntArray{\n\t\t\t\t\t*pulumi.Int(zscalerProxyNwServices.Id),\n\t\t\t\t},\n\t\t\t},\n\t\t\tDepartments: \u0026firewall.FirewallFilteringRuleDepartmentsArgs{\n\t\t\t\tIds: pulumi.IntArray{\n\t\t\t\t\t*pulumi.Int(engineering.Id),\n\t\t\t\t},\n\t\t\t},\n\t\t\tGroups: \u0026firewall.FirewallFilteringRuleGroupsArgs{\n\t\t\t\tIds: pulumi.IntArray{\n\t\t\t\t\t*pulumi.Int(normalInternet.Id),\n\t\t\t\t},\n\t\t\t},\n\t\t\tTimeWindows: \u0026firewall.FirewallFilteringRuleTimeWindowsArgs{\n\t\t\t\tIds: pulumi.IntArray{\n\t\t\t\t\t*pulumi.Int(workHours.Id),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zia.Firewall.FirewallFunctions;\nimport com.pulumi.zia.Firewall.inputs.GetFirewallFilteringNetworkServicesArgs;\nimport com.pulumi.zia.Departments.DepartmentsFunctions;\nimport com.pulumi.zia.Departments.inputs.GetDepartmentManagementArgs;\nimport com.pulumi.zia.Groups.GroupsFunctions;\nimport com.pulumi.zia.Groups.inputs.GetGroupManagementArgs;\nimport com.pulumi.zia.TimeWindow.TimeWindowFunctions;\nimport com.pulumi.zia.TimeWindow.inputs.GetTimeWindowArgs;\nimport com.pulumi.zia.Firewall.FirewallFilteringRule;\nimport com.pulumi.zia.Firewall.FirewallFilteringRuleArgs;\nimport com.pulumi.zia.Firewall.inputs.FirewallFilteringRuleNwServicesArgs;\nimport com.pulumi.zia.Firewall.inputs.FirewallFilteringRuleDepartmentsArgs;\nimport com.pulumi.zia.Firewall.inputs.FirewallFilteringRuleGroupsArgs;\nimport com.pulumi.zia.Firewall.inputs.FirewallFilteringRuleTimeWindowsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var zscalerProxyNwServices = FirewallFunctions.getFirewallFilteringNetworkServices(GetFirewallFilteringNetworkServicesArgs.builder()\n            .name(\"ZSCALER_PROXY_NW_SERVICES\")\n            .build());\n\n        final var engineering = DepartmentsFunctions.getDepartmentManagement(GetDepartmentManagementArgs.builder()\n            .name(\"Engineering\")\n            .build());\n\n        final var normalInternet = GroupsFunctions.getGroupManagement(GetGroupManagementArgs.builder()\n            .name(\"Normal_Internet\")\n            .build());\n\n        final var workHours = TimeWindowFunctions.getTimeWindow(GetTimeWindowArgs.builder()\n            .name(\"Work hours\")\n            .build());\n\n        var example = new FirewallFilteringRule(\"example\", FirewallFilteringRuleArgs.builder()        \n            .description(\"Example\")\n            .action(\"ALLOW\")\n            .state(\"ENABLED\")\n            .order(1)\n            .enableFullLogging(true)\n            .nwServices(FirewallFilteringRuleNwServicesArgs.builder()\n                .ids(zscalerProxyNwServices.applyValue(getFirewallFilteringNetworkServicesResult -\u003e getFirewallFilteringNetworkServicesResult.id()))\n                .build())\n            .departments(FirewallFilteringRuleDepartmentsArgs.builder()\n                .ids(engineering.applyValue(getDepartmentManagementResult -\u003e getDepartmentManagementResult.id()))\n                .build())\n            .groups(FirewallFilteringRuleGroupsArgs.builder()\n                .ids(normalInternet.applyValue(getGroupManagementResult -\u003e getGroupManagementResult.id()))\n                .build())\n            .timeWindows(FirewallFilteringRuleTimeWindowsArgs.builder()\n                .ids(workHours.applyValue(getTimeWindowResult -\u003e getTimeWindowResult.id()))\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: zia:Firewall:FirewallFilteringRule\n    properties:\n      description: Example\n      action: ALLOW\n      state: ENABLED\n      order: 1\n      enableFullLogging: true\n      nwServices:\n        ids:\n          - ${zscalerProxyNwServices.id}\n      departments:\n        ids:\n          - ${engineering.id}\n      groups:\n        ids:\n          - ${normalInternet.id}\n      timeWindows:\n        ids:\n          - ${workHours.id}\nvariables:\n  zscalerProxyNwServices:\n    fn::invoke:\n      Function: zia:Firewall:getFirewallFilteringNetworkServices\n      Arguments:\n        name: ZSCALER_PROXY_NW_SERVICES\n  engineering:\n    fn::invoke:\n      Function: zia:Departments:getDepartmentManagement\n      Arguments:\n        name: Engineering\n  normalInternet:\n    fn::invoke:\n      Function: zia:Groups:getGroupManagement\n      Arguments:\n        name: Normal_Internet\n  workHours:\n    fn::invoke:\n      Function: zia:TimeWindow:getTimeWindow\n      Arguments:\n        name: Work hours\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "accessControl": {
                    "type": "string"
                },
                "action": {
                    "type": "string",
                    "description": "Choose the action of the service when packets match the rule. The following actions are accepted: `ALLOW`, `BLOCK_DROP`, `BLOCK_RESET`, `BLOCK_ICMP`, `EVAL_NWAPP`\n"
                },
                "appServiceGroups": {
                    "$ref": "#/types/zia:Firewall/FirewallFilteringRuleAppServiceGroups:FirewallFilteringRuleAppServiceGroups",
                    "description": "Application service groups on which this rule is applied\n"
                },
                "appServices": {
                    "$ref": "#/types/zia:Firewall/FirewallFilteringRuleAppServices:FirewallFilteringRuleAppServices",
                    "description": "Application services on which this rule is applied\n"
                },
                "defaultRule": {
                    "type": "boolean",
                    "description": "If set to true, the default rule is applied\n"
                },
                "departments": {
                    "$ref": "#/types/zia:Firewall/FirewallFilteringRuleDepartments:FirewallFilteringRuleDepartments",
                    "description": "Apply to any number of departments When not used it implies `Any` to apply the rule to all departments.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Enter additional notes or information. The description cannot exceed 10,240 characters.\n"
                },
                "destAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "** - (Optional) -  IP addresses and fully qualified domain names (FQDNs), if the domain has multiple destination IP addresses or if its IP addresses may change. For IP addresses, you can enter individual IP addresses, subnets, or address ranges. If adding multiple items, hit Enter after each entry.\n"
                },
                "destCountries": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "** - (Optional) Identify destinations based on the location of a server, select Any to apply the rule to all countries or select the countries to which you want to control traffic.\n"
                },
                "destIpCategories": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "** - (Optional) identify destinations based on the URL category of the domain, select Any to apply the rule to all categories or select the specific categories you want to control.\n"
                },
                "destIpGroups": {
                    "$ref": "#/types/zia:Firewall/FirewallFilteringRuleDestIpGroups:FirewallFilteringRuleDestIpGroups",
                    "description": "** - (Optional) Any number of destination IP address groups that you want to control with this rule.\n"
                },
                "enableFullLogging": {
                    "type": "boolean"
                },
                "groups": {
                    "$ref": "#/types/zia:Firewall/FirewallFilteringRuleGroups:FirewallFilteringRuleGroups",
                    "description": "You can manually select up to `8` groups. When not used it implies `Any` to apply the rule to all groups.\n"
                },
                "labels": {
                    "$ref": "#/types/zia:Firewall/FirewallFilteringRuleLabels:FirewallFilteringRuleLabels",
                    "description": "Labels that are applicable to the rule.\n"
                },
                "lastModifiedBies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zia:Firewall/FirewallFilteringRuleLastModifiedBy:FirewallFilteringRuleLastModifiedBy"
                    }
                },
                "lastModifiedTime": {
                    "type": "integer"
                },
                "locationGroups": {
                    "$ref": "#/types/zia:Firewall/FirewallFilteringRuleLocationGroups:FirewallFilteringRuleLocationGroups",
                    "description": "You can manually select up to `32` location groups. When not used it implies `Any` to apply the rule to all location groups.\n"
                },
                "locations": {
                    "$ref": "#/types/zia:Firewall/FirewallFilteringRuleLocations:FirewallFilteringRuleLocations",
                    "description": "You can manually select up to `8` locations. When not used it implies `Any` to apply the rule to all groups.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the network service group\n"
                },
                "nwApplicationGroups": {
                    "$ref": "#/types/zia:Firewall/FirewallFilteringRuleNwApplicationGroups:FirewallFilteringRuleNwApplicationGroups",
                    "description": "Any number of application groups that you want to control with this rule. The service provides predefined applications that you can group, but not modify\n"
                },
                "nwApplications": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "When not used it applies the rule to all applications. The service provides predefined applications, which you can group, but not modify.\n"
                },
                "nwServiceGroups": {
                    "$ref": "#/types/zia:Firewall/FirewallFilteringRuleNwServiceGroups:FirewallFilteringRuleNwServiceGroups",
                    "description": "Any number of predefined or custom network service groups to which the rule applies.\n"
                },
                "nwServices": {
                    "$ref": "#/types/zia:Firewall/FirewallFilteringRuleNwServices:FirewallFilteringRuleNwServices",
                    "description": "When not used it applies the rule to all network services or you can select specific network services. The Zscaler firewall has predefined services and you can configure up to `1,024` additional custom services.\n"
                },
                "order": {
                    "type": "integer",
                    "description": "Policy rules are evaluated in ascending numerical order (Rule 1 before Rule 2, and so on), and the Rule Order reflects this rule's place in the order.\n"
                },
                "predefined": {
                    "type": "boolean",
                    "description": "If set to true, a predefined rule is applied\n"
                },
                "rank": {
                    "type": "integer",
                    "description": "By default, the admin ranking is disabled. To use this feature, you must enable admin rank. The default value is `7`.\n"
                },
                "ruleId": {
                    "type": "integer"
                },
                "srcIpGroups": {
                    "$ref": "#/types/zia:Firewall/FirewallFilteringRuleSrcIpGroups:FirewallFilteringRuleSrcIpGroups",
                    "description": "Any number of source IP address groups that you want to control with this rule.\n"
                },
                "srcIps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "You can enter individual IP addresses, subnets, or address ranges.\n"
                },
                "state": {
                    "type": "string",
                    "description": "An enabled rule is actively enforced. A disabled rule is not actively enforced but does not lose its place in the Rule Order. The service skips it and moves to the next rule.\n"
                },
                "timeWindows": {
                    "$ref": "#/types/zia:Firewall/FirewallFilteringRuleTimeWindows:FirewallFilteringRuleTimeWindows",
                    "description": "You can manually select up to `2` time intervals. When not used it implies `always` to apply the rule to all time intervals.\n"
                },
                "users": {
                    "$ref": "#/types/zia:Firewall/FirewallFilteringRuleUsers:FirewallFilteringRuleUsers",
                    "description": "You can manually select up to `4` general and/or special users. When not used it implies `Any` to apply the rule to all users.\n"
                }
            },
            "required": [
                "accessControl",
                "action",
                "appServiceGroups",
                "appServices",
                "defaultRule",
                "departments",
                "destAddresses",
                "destCountries",
                "destIpGroups",
                "groups",
                "labels",
                "lastModifiedBies",
                "lastModifiedTime",
                "locationGroups",
                "locations",
                "name",
                "nwApplicationGroups",
                "nwApplications",
                "nwServiceGroups",
                "nwServices",
                "order",
                "predefined",
                "rank",
                "ruleId",
                "srcIpGroups",
                "state",
                "timeWindows",
                "users"
            ],
            "inputProperties": {
                "accessControl": {
                    "type": "string"
                },
                "action": {
                    "type": "string",
                    "description": "Choose the action of the service when packets match the rule. The following actions are accepted: `ALLOW`, `BLOCK_DROP`, `BLOCK_RESET`, `BLOCK_ICMP`, `EVAL_NWAPP`\n"
                },
                "appServiceGroups": {
                    "$ref": "#/types/zia:Firewall/FirewallFilteringRuleAppServiceGroups:FirewallFilteringRuleAppServiceGroups",
                    "description": "Application service groups on which this rule is applied\n"
                },
                "appServices": {
                    "$ref": "#/types/zia:Firewall/FirewallFilteringRuleAppServices:FirewallFilteringRuleAppServices",
                    "description": "Application services on which this rule is applied\n"
                },
                "defaultRule": {
                    "type": "boolean",
                    "description": "If set to true, the default rule is applied\n"
                },
                "departments": {
                    "$ref": "#/types/zia:Firewall/FirewallFilteringRuleDepartments:FirewallFilteringRuleDepartments",
                    "description": "Apply to any number of departments When not used it implies `Any` to apply the rule to all departments.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Enter additional notes or information. The description cannot exceed 10,240 characters.\n"
                },
                "destAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "** - (Optional) -  IP addresses and fully qualified domain names (FQDNs), if the domain has multiple destination IP addresses or if its IP addresses may change. For IP addresses, you can enter individual IP addresses, subnets, or address ranges. If adding multiple items, hit Enter after each entry.\n"
                },
                "destCountries": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "** - (Optional) Identify destinations based on the location of a server, select Any to apply the rule to all countries or select the countries to which you want to control traffic.\n"
                },
                "destIpCategories": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "** - (Optional) identify destinations based on the URL category of the domain, select Any to apply the rule to all categories or select the specific categories you want to control.\n"
                },
                "destIpGroups": {
                    "$ref": "#/types/zia:Firewall/FirewallFilteringRuleDestIpGroups:FirewallFilteringRuleDestIpGroups",
                    "description": "** - (Optional) Any number of destination IP address groups that you want to control with this rule.\n"
                },
                "enableFullLogging": {
                    "type": "boolean"
                },
                "groups": {
                    "$ref": "#/types/zia:Firewall/FirewallFilteringRuleGroups:FirewallFilteringRuleGroups",
                    "description": "You can manually select up to `8` groups. When not used it implies `Any` to apply the rule to all groups.\n"
                },
                "labels": {
                    "$ref": "#/types/zia:Firewall/FirewallFilteringRuleLabels:FirewallFilteringRuleLabels",
                    "description": "Labels that are applicable to the rule.\n"
                },
                "lastModifiedBies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zia:Firewall/FirewallFilteringRuleLastModifiedBy:FirewallFilteringRuleLastModifiedBy"
                    }
                },
                "lastModifiedTime": {
                    "type": "integer"
                },
                "locationGroups": {
                    "$ref": "#/types/zia:Firewall/FirewallFilteringRuleLocationGroups:FirewallFilteringRuleLocationGroups",
                    "description": "You can manually select up to `32` location groups. When not used it implies `Any` to apply the rule to all location groups.\n"
                },
                "locations": {
                    "$ref": "#/types/zia:Firewall/FirewallFilteringRuleLocations:FirewallFilteringRuleLocations",
                    "description": "You can manually select up to `8` locations. When not used it implies `Any` to apply the rule to all groups.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the network service group\n"
                },
                "nwApplicationGroups": {
                    "$ref": "#/types/zia:Firewall/FirewallFilteringRuleNwApplicationGroups:FirewallFilteringRuleNwApplicationGroups",
                    "description": "Any number of application groups that you want to control with this rule. The service provides predefined applications that you can group, but not modify\n"
                },
                "nwApplications": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "When not used it applies the rule to all applications. The service provides predefined applications, which you can group, but not modify.\n"
                },
                "nwServiceGroups": {
                    "$ref": "#/types/zia:Firewall/FirewallFilteringRuleNwServiceGroups:FirewallFilteringRuleNwServiceGroups",
                    "description": "Any number of predefined or custom network service groups to which the rule applies.\n"
                },
                "nwServices": {
                    "$ref": "#/types/zia:Firewall/FirewallFilteringRuleNwServices:FirewallFilteringRuleNwServices",
                    "description": "When not used it applies the rule to all network services or you can select specific network services. The Zscaler firewall has predefined services and you can configure up to `1,024` additional custom services.\n"
                },
                "order": {
                    "type": "integer",
                    "description": "Policy rules are evaluated in ascending numerical order (Rule 1 before Rule 2, and so on), and the Rule Order reflects this rule's place in the order.\n"
                },
                "predefined": {
                    "type": "boolean",
                    "description": "If set to true, a predefined rule is applied\n"
                },
                "rank": {
                    "type": "integer",
                    "description": "By default, the admin ranking is disabled. To use this feature, you must enable admin rank. The default value is `7`.\n"
                },
                "srcIpGroups": {
                    "$ref": "#/types/zia:Firewall/FirewallFilteringRuleSrcIpGroups:FirewallFilteringRuleSrcIpGroups",
                    "description": "Any number of source IP address groups that you want to control with this rule.\n"
                },
                "srcIps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "You can enter individual IP addresses, subnets, or address ranges.\n"
                },
                "state": {
                    "type": "string",
                    "description": "An enabled rule is actively enforced. A disabled rule is not actively enforced but does not lose its place in the Rule Order. The service skips it and moves to the next rule.\n"
                },
                "timeWindows": {
                    "$ref": "#/types/zia:Firewall/FirewallFilteringRuleTimeWindows:FirewallFilteringRuleTimeWindows",
                    "description": "You can manually select up to `2` time intervals. When not used it implies `always` to apply the rule to all time intervals.\n"
                },
                "users": {
                    "$ref": "#/types/zia:Firewall/FirewallFilteringRuleUsers:FirewallFilteringRuleUsers",
                    "description": "You can manually select up to `4` general and/or special users. When not used it implies `Any` to apply the rule to all users.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering FirewallFilteringRule resources.\n",
                "properties": {
                    "accessControl": {
                        "type": "string"
                    },
                    "action": {
                        "type": "string",
                        "description": "Choose the action of the service when packets match the rule. The following actions are accepted: `ALLOW`, `BLOCK_DROP`, `BLOCK_RESET`, `BLOCK_ICMP`, `EVAL_NWAPP`\n"
                    },
                    "appServiceGroups": {
                        "$ref": "#/types/zia:Firewall/FirewallFilteringRuleAppServiceGroups:FirewallFilteringRuleAppServiceGroups",
                        "description": "Application service groups on which this rule is applied\n"
                    },
                    "appServices": {
                        "$ref": "#/types/zia:Firewall/FirewallFilteringRuleAppServices:FirewallFilteringRuleAppServices",
                        "description": "Application services on which this rule is applied\n"
                    },
                    "defaultRule": {
                        "type": "boolean",
                        "description": "If set to true, the default rule is applied\n"
                    },
                    "departments": {
                        "$ref": "#/types/zia:Firewall/FirewallFilteringRuleDepartments:FirewallFilteringRuleDepartments",
                        "description": "Apply to any number of departments When not used it implies `Any` to apply the rule to all departments.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Enter additional notes or information. The description cannot exceed 10,240 characters.\n"
                    },
                    "destAddresses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "** - (Optional) -  IP addresses and fully qualified domain names (FQDNs), if the domain has multiple destination IP addresses or if its IP addresses may change. For IP addresses, you can enter individual IP addresses, subnets, or address ranges. If adding multiple items, hit Enter after each entry.\n"
                    },
                    "destCountries": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "** - (Optional) Identify destinations based on the location of a server, select Any to apply the rule to all countries or select the countries to which you want to control traffic.\n"
                    },
                    "destIpCategories": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "** - (Optional) identify destinations based on the URL category of the domain, select Any to apply the rule to all categories or select the specific categories you want to control.\n"
                    },
                    "destIpGroups": {
                        "$ref": "#/types/zia:Firewall/FirewallFilteringRuleDestIpGroups:FirewallFilteringRuleDestIpGroups",
                        "description": "** - (Optional) Any number of destination IP address groups that you want to control with this rule.\n"
                    },
                    "enableFullLogging": {
                        "type": "boolean"
                    },
                    "groups": {
                        "$ref": "#/types/zia:Firewall/FirewallFilteringRuleGroups:FirewallFilteringRuleGroups",
                        "description": "You can manually select up to `8` groups. When not used it implies `Any` to apply the rule to all groups.\n"
                    },
                    "labels": {
                        "$ref": "#/types/zia:Firewall/FirewallFilteringRuleLabels:FirewallFilteringRuleLabels",
                        "description": "Labels that are applicable to the rule.\n"
                    },
                    "lastModifiedBies": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:Firewall/FirewallFilteringRuleLastModifiedBy:FirewallFilteringRuleLastModifiedBy"
                        }
                    },
                    "lastModifiedTime": {
                        "type": "integer"
                    },
                    "locationGroups": {
                        "$ref": "#/types/zia:Firewall/FirewallFilteringRuleLocationGroups:FirewallFilteringRuleLocationGroups",
                        "description": "You can manually select up to `32` location groups. When not used it implies `Any` to apply the rule to all location groups.\n"
                    },
                    "locations": {
                        "$ref": "#/types/zia:Firewall/FirewallFilteringRuleLocations:FirewallFilteringRuleLocations",
                        "description": "You can manually select up to `8` locations. When not used it implies `Any` to apply the rule to all groups.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the network service group\n"
                    },
                    "nwApplicationGroups": {
                        "$ref": "#/types/zia:Firewall/FirewallFilteringRuleNwApplicationGroups:FirewallFilteringRuleNwApplicationGroups",
                        "description": "Any number of application groups that you want to control with this rule. The service provides predefined applications that you can group, but not modify\n"
                    },
                    "nwApplications": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "When not used it applies the rule to all applications. The service provides predefined applications, which you can group, but not modify.\n"
                    },
                    "nwServiceGroups": {
                        "$ref": "#/types/zia:Firewall/FirewallFilteringRuleNwServiceGroups:FirewallFilteringRuleNwServiceGroups",
                        "description": "Any number of predefined or custom network service groups to which the rule applies.\n"
                    },
                    "nwServices": {
                        "$ref": "#/types/zia:Firewall/FirewallFilteringRuleNwServices:FirewallFilteringRuleNwServices",
                        "description": "When not used it applies the rule to all network services or you can select specific network services. The Zscaler firewall has predefined services and you can configure up to `1,024` additional custom services.\n"
                    },
                    "order": {
                        "type": "integer",
                        "description": "Policy rules are evaluated in ascending numerical order (Rule 1 before Rule 2, and so on), and the Rule Order reflects this rule's place in the order.\n"
                    },
                    "predefined": {
                        "type": "boolean",
                        "description": "If set to true, a predefined rule is applied\n"
                    },
                    "rank": {
                        "type": "integer",
                        "description": "By default, the admin ranking is disabled. To use this feature, you must enable admin rank. The default value is `7`.\n"
                    },
                    "ruleId": {
                        "type": "integer"
                    },
                    "srcIpGroups": {
                        "$ref": "#/types/zia:Firewall/FirewallFilteringRuleSrcIpGroups:FirewallFilteringRuleSrcIpGroups",
                        "description": "Any number of source IP address groups that you want to control with this rule.\n"
                    },
                    "srcIps": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "You can enter individual IP addresses, subnets, or address ranges.\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "An enabled rule is actively enforced. A disabled rule is not actively enforced but does not lose its place in the Rule Order. The service skips it and moves to the next rule.\n"
                    },
                    "timeWindows": {
                        "$ref": "#/types/zia:Firewall/FirewallFilteringRuleTimeWindows:FirewallFilteringRuleTimeWindows",
                        "description": "You can manually select up to `2` time intervals. When not used it implies `always` to apply the rule to all time intervals.\n"
                    },
                    "users": {
                        "$ref": "#/types/zia:Firewall/FirewallFilteringRuleUsers:FirewallFilteringRuleUsers",
                        "description": "You can manually select up to `4` general and/or special users. When not used it implies `Any` to apply the rule to all users.\n"
                    }
                },
                "type": "object"
            }
        },
        "zia:Firewall/firewallFilteringServiceGroups:FirewallFilteringServiceGroups": {
            "description": "The **zia_firewall_filtering_network_service_groups** resource allows the creation and management of ZIA Cloud Firewall IP network service groups in the Zscaler Internet Access. This resource can then be associated with a ZIA cloud firewall filtering rule.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@pulumi/zia\";\nimport * as zia from \"@zscaler/pulumi-zia\";\n\nconst example1 = zia.Firewall.getFirewallFilteringNetworkServices({\n    name: \"FTP\",\n});\nconst example2 = zia.Firewall.getFirewallFilteringNetworkServices({\n    name: \"NETBIOS\",\n});\nconst example3 = zia.Firewall.getFirewallFilteringNetworkServices({\n    name: \"DNS\",\n});\n// Add network services to a network services group\nconst example = new zia.firewall.FirewallFilteringServiceGroups(\"example\", {\n    description: \"example\",\n    services: [{\n        ids: [\n            example1.then(example1 =\u003e example1.id),\n            example2.then(example2 =\u003e example2.id),\n            example3.then(example3 =\u003e example3.id),\n        ],\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_zia as zia\nimport zscaler_pulumi_zia as zia\n\nexample1 = zia.Firewall.get_firewall_filtering_network_services(name=\"FTP\")\nexample2 = zia.Firewall.get_firewall_filtering_network_services(name=\"NETBIOS\")\nexample3 = zia.Firewall.get_firewall_filtering_network_services(name=\"DNS\")\n# Add network services to a network services group\nexample = zia.firewall.FirewallFilteringServiceGroups(\"example\",\n    description=\"example\",\n    services=[zia.firewall.FirewallFilteringServiceGroupsServiceArgs(\n        ids=[\n            example1.id,\n            example2.id,\n            example3.id,\n        ],\n    )])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Zia = Pulumi.Zia;\nusing Zia = zscaler.PulumiPackage.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example1 = Zia.Firewall.GetFirewallFilteringNetworkServices.Invoke(new()\n    {\n        Name = \"FTP\",\n    });\n\n    var example2 = Zia.Firewall.GetFirewallFilteringNetworkServices.Invoke(new()\n    {\n        Name = \"NETBIOS\",\n    });\n\n    var example3 = Zia.Firewall.GetFirewallFilteringNetworkServices.Invoke(new()\n    {\n        Name = \"DNS\",\n    });\n\n    // Add network services to a network services group\n    var example = new Zia.Firewall.FirewallFilteringServiceGroups(\"example\", new()\n    {\n        Description = \"example\",\n        Services = new[]\n        {\n            new Zia.Firewall.Inputs.FirewallFilteringServiceGroupsServiceArgs\n            {\n                Ids = new[]\n                {\n                    example1.Apply(getFirewallFilteringNetworkServicesResult =\u003e getFirewallFilteringNetworkServicesResult.Id),\n                    example2.Apply(getFirewallFilteringNetworkServicesResult =\u003e getFirewallFilteringNetworkServicesResult.Id),\n                    example3.Apply(getFirewallFilteringNetworkServicesResult =\u003e getFirewallFilteringNetworkServicesResult.Id),\n                },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia/Firewall\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample1, err := Firewall.GetFirewallFilteringNetworkServices(ctx, \u0026firewall.GetFirewallFilteringNetworkServicesArgs{\n\t\t\tName: pulumi.StringRef(\"FTP\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texample2, err := Firewall.GetFirewallFilteringNetworkServices(ctx, \u0026firewall.GetFirewallFilteringNetworkServicesArgs{\n\t\t\tName: pulumi.StringRef(\"NETBIOS\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\texample3, err := Firewall.GetFirewallFilteringNetworkServices(ctx, \u0026firewall.GetFirewallFilteringNetworkServicesArgs{\n\t\t\tName: pulumi.StringRef(\"DNS\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = Firewall.NewFirewallFilteringServiceGroups(ctx, \"example\", \u0026Firewall.FirewallFilteringServiceGroupsArgs{\n\t\t\tDescription: pulumi.String(\"example\"),\n\t\t\tServices: firewall.FirewallFilteringServiceGroupsServiceArray{\n\t\t\t\t\u0026firewall.FirewallFilteringServiceGroupsServiceArgs{\n\t\t\t\t\tIds: pulumi.IntArray{\n\t\t\t\t\t\t*pulumi.Int(example1.Id),\n\t\t\t\t\t\t*pulumi.Int(example2.Id),\n\t\t\t\t\t\t*pulumi.Int(example3.Id),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zia.Firewall.FirewallFunctions;\nimport com.pulumi.zia.Firewall.inputs.GetFirewallFilteringNetworkServicesArgs;\nimport com.pulumi.zia.Firewall.FirewallFilteringServiceGroups;\nimport com.pulumi.zia.Firewall.FirewallFilteringServiceGroupsArgs;\nimport com.pulumi.zia.Firewall.inputs.FirewallFilteringServiceGroupsServiceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example1 = FirewallFunctions.getFirewallFilteringNetworkServices(GetFirewallFilteringNetworkServicesArgs.builder()\n            .name(\"FTP\")\n            .build());\n\n        final var example2 = FirewallFunctions.getFirewallFilteringNetworkServices(GetFirewallFilteringNetworkServicesArgs.builder()\n            .name(\"NETBIOS\")\n            .build());\n\n        final var example3 = FirewallFunctions.getFirewallFilteringNetworkServices(GetFirewallFilteringNetworkServicesArgs.builder()\n            .name(\"DNS\")\n            .build());\n\n        var example = new FirewallFilteringServiceGroups(\"example\", FirewallFilteringServiceGroupsArgs.builder()        \n            .description(\"example\")\n            .services(FirewallFilteringServiceGroupsServiceArgs.builder()\n                .ids(                \n                    example1.applyValue(getFirewallFilteringNetworkServicesResult -\u003e getFirewallFilteringNetworkServicesResult.id()),\n                    example2.applyValue(getFirewallFilteringNetworkServicesResult -\u003e getFirewallFilteringNetworkServicesResult.id()),\n                    example3.applyValue(getFirewallFilteringNetworkServicesResult -\u003e getFirewallFilteringNetworkServicesResult.id()))\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Add network services to a network services group\n  example:\n    type: zia:Firewall:FirewallFilteringServiceGroups\n    properties:\n      description: example\n      services:\n        - ids:\n            - ${example1.id}\n            - ${example2.id}\n            - ${example3.id}\nvariables:\n  example1:\n    fn::invoke:\n      Function: zia:Firewall:getFirewallFilteringNetworkServices\n      Arguments:\n        name: FTP\n  example2:\n    fn::invoke:\n      Function: zia:Firewall:getFirewallFilteringNetworkServices\n      Arguments:\n        name: NETBIOS\n  example3:\n    fn::invoke:\n      Function: zia:Firewall:getFirewallFilteringNetworkServices\n      Arguments:\n        name: DNS\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of the network services group\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the network service group\n"
                },
                "networkServiceGroupId": {
                    "type": "integer"
                },
                "services": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zia:Firewall/FirewallFilteringServiceGroupsService:FirewallFilteringServiceGroupsService"
                    },
                    "description": "Any number of network services ID to be added to the group\n"
                }
            },
            "required": [
                "name",
                "networkServiceGroupId",
                "services"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of the network services group\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the network service group\n"
                },
                "services": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zia:Firewall/FirewallFilteringServiceGroupsService:FirewallFilteringServiceGroupsService"
                    },
                    "description": "Any number of network services ID to be added to the group\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering FirewallFilteringServiceGroups resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the network services group\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the network service group\n"
                    },
                    "networkServiceGroupId": {
                        "type": "integer"
                    },
                    "services": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:Firewall/FirewallFilteringServiceGroupsService:FirewallFilteringServiceGroupsService"
                        },
                        "description": "Any number of network services ID to be added to the group\n"
                    }
                },
                "type": "object"
            }
        },
        "zia:Firewall/firewallFilteringSourceGroups:FirewallFilteringSourceGroups": {
            "description": "The **zia_firewall_filtering_ip_source_groups** resource allows the creation and management of ZIA Cloud Firewall IP source groups in the Zscaler Internet Access. This resource can then be associated with a ZIA cloud firewall filtering rule.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@zscaler/pulumi-zia\";\n\n// Add an IP address or addresses to a new IP Source Group\nconst example = new zia.firewall.FirewallFilteringSourceGroups(\"example\", {\n    description: \"Example\",\n    ipAddresses: [\n        \"192.168.100.1\",\n        \"192.168.100.2\",\n        \"192.168.100.3\",\n    ],\n});\n```\n```python\nimport pulumi\nimport zscaler_pulumi_zia as zia\n\n# Add an IP address or addresses to a new IP Source Group\nexample = zia.firewall.FirewallFilteringSourceGroups(\"example\",\n    description=\"Example\",\n    ip_addresses=[\n        \"192.168.100.1\",\n        \"192.168.100.2\",\n        \"192.168.100.3\",\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Zia = zscaler.PulumiPackage.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Add an IP address or addresses to a new IP Source Group\n    var example = new Zia.Firewall.FirewallFilteringSourceGroups(\"example\", new()\n    {\n        Description = \"Example\",\n        IpAddresses = new[]\n        {\n            \"192.168.100.1\",\n            \"192.168.100.2\",\n            \"192.168.100.3\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia/Firewall\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Firewall.NewFirewallFilteringSourceGroups(ctx, \"example\", \u0026Firewall.FirewallFilteringSourceGroupsArgs{\n\t\t\tDescription: pulumi.String(\"Example\"),\n\t\t\tIpAddresses: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"192.168.100.1\"),\n\t\t\t\tpulumi.String(\"192.168.100.2\"),\n\t\t\t\tpulumi.String(\"192.168.100.3\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zia.Firewall.FirewallFilteringSourceGroups;\nimport com.pulumi.zia.Firewall.FirewallFilteringSourceGroupsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new FirewallFilteringSourceGroups(\"example\", FirewallFilteringSourceGroupsArgs.builder()        \n            .description(\"Example\")\n            .ipAddresses(            \n                \"192.168.100.1\",\n                \"192.168.100.2\",\n                \"192.168.100.3\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Add an IP address or addresses to a new IP Source Group\n  example:\n    type: zia:Firewall:FirewallFilteringSourceGroups\n    properties:\n      description: Example\n      ipAddresses:\n        - 192.168.100.1\n        - 192.168.100.2\n        - 192.168.100.3\n```\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@zscaler/pulumi-zia\";\n\n// Add an IP address range(s) to a new IP Source Group\nconst example = new zia.firewall.FirewallFilteringSourceGroups(\"example\", {\n    description: \"Example\",\n    ipAddresses: [\"192.0.2.1-192.0.2.10\"],\n});\n```\n```python\nimport pulumi\nimport zscaler_pulumi_zia as zia\n\n# Add an IP address range(s) to a new IP Source Group\nexample = zia.firewall.FirewallFilteringSourceGroups(\"example\",\n    description=\"Example\",\n    ip_addresses=[\"192.0.2.1-192.0.2.10\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Zia = zscaler.PulumiPackage.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Add an IP address range(s) to a new IP Source Group\n    var example = new Zia.Firewall.FirewallFilteringSourceGroups(\"example\", new()\n    {\n        Description = \"Example\",\n        IpAddresses = new[]\n        {\n            \"192.0.2.1-192.0.2.10\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia/Firewall\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Firewall.NewFirewallFilteringSourceGroups(ctx, \"example\", \u0026Firewall.FirewallFilteringSourceGroupsArgs{\n\t\t\tDescription: pulumi.String(\"Example\"),\n\t\t\tIpAddresses: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"192.0.2.1-192.0.2.10\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zia.Firewall.FirewallFilteringSourceGroups;\nimport com.pulumi.zia.Firewall.FirewallFilteringSourceGroupsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new FirewallFilteringSourceGroups(\"example\", FirewallFilteringSourceGroupsArgs.builder()        \n            .description(\"Example\")\n            .ipAddresses(\"192.0.2.1-192.0.2.10\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Add an IP address range(s) to a new IP Source Group\n  example:\n    type: zia:Firewall:FirewallFilteringSourceGroups\n    properties:\n      description: Example\n      ipAddresses:\n        - 192.0.2.1-192.0.2.10\n```\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@zscaler/pulumi-zia\";\n\n// Add subnet to a new IP Source Group\nconst example = new zia.firewall.FirewallFilteringSourceGroups(\"example\", {\n    description: \"Example\",\n    ipAddresses: [\"203.0.113.0/24\"],\n});\n```\n```python\nimport pulumi\nimport zscaler_pulumi_zia as zia\n\n# Add subnet to a new IP Source Group\nexample = zia.firewall.FirewallFilteringSourceGroups(\"example\",\n    description=\"Example\",\n    ip_addresses=[\"203.0.113.0/24\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Zia = zscaler.PulumiPackage.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // Add subnet to a new IP Source Group\n    var example = new Zia.Firewall.FirewallFilteringSourceGroups(\"example\", new()\n    {\n        Description = \"Example\",\n        IpAddresses = new[]\n        {\n            \"203.0.113.0/24\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia/Firewall\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Firewall.NewFirewallFilteringSourceGroups(ctx, \"example\", \u0026Firewall.FirewallFilteringSourceGroupsArgs{\n\t\t\tDescription: pulumi.String(\"Example\"),\n\t\t\tIpAddresses: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"203.0.113.0/24\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zia.Firewall.FirewallFilteringSourceGroups;\nimport com.pulumi.zia.Firewall.FirewallFilteringSourceGroupsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new FirewallFilteringSourceGroups(\"example\", FirewallFilteringSourceGroupsArgs.builder()        \n            .description(\"Example\")\n            .ipAddresses(\"203.0.113.0/24\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # Add subnet to a new IP Source Group\n  example:\n    type: zia:Firewall:FirewallFilteringSourceGroups\n    properties:\n      description: Example\n      ipAddresses:\n        - 203.0.113.0/24\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of the source IP group\n"
                },
                "ipAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Source IP addresses to be added to the group. Enter any number of IP addresses. You can enter:\n* An IP address (198.51.100.100)\n* A range of IP addresses 192.0.2.1-192.0.2.10\n* An IP address with a netmask 203.0.113.0/24\n"
                },
                "ipSourceGroupId": {
                    "type": "integer"
                },
                "name": {
                    "type": "string",
                    "description": "Source IP group name\n"
                }
            },
            "required": [
                "ipAddresses",
                "ipSourceGroupId",
                "name"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "Description of the source IP group\n"
                },
                "ipAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Source IP addresses to be added to the group. Enter any number of IP addresses. You can enter:\n* An IP address (198.51.100.100)\n* A range of IP addresses 192.0.2.1-192.0.2.10\n* An IP address with a netmask 203.0.113.0/24\n"
                },
                "name": {
                    "type": "string",
                    "description": "Source IP group name\n"
                }
            },
            "requiredInputs": [
                "ipAddresses"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering FirewallFilteringSourceGroups resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "Description of the source IP group\n"
                    },
                    "ipAddresses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Source IP addresses to be added to the group. Enter any number of IP addresses. You can enter:\n* An IP address (198.51.100.100)\n* A range of IP addresses 192.0.2.1-192.0.2.10\n* An IP address with a netmask 203.0.113.0/24\n"
                    },
                    "ipSourceGroupId": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string",
                        "description": "Source IP group name\n"
                    }
                },
                "type": "object"
            }
        },
        "zia:LocationManagement/locationManagement:LocationManagement": {
            "description": "The **zia_location_management** resource allows the creation and management of ZIA locations in the Zscaler Internet Access. This resource can then be associated with a:\n\n* Static IP resource\n* GRE Tunnel resource\n* VPN credentials resource\n* URL filtering and firewall filtering rules\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@zscaler/pulumi-zia\";\n\nconst usaSjc37TrafficForwardingVPNCredentials = new zia.trafficforwarding.TrafficForwardingVPNCredentials(\"usaSjc37TrafficForwardingVPNCredentials\", {\n    type: \"UFQDN\",\n    fqdn: \"usa_sjc37@acme.com\",\n    comments: \"USA - San Jose IPSec Tunnel\",\n    preSharedKey: \"P@ass0rd123!\",\n});\nconst usaSjc37TrafficForwardingStaticIP = new zia.trafficforwarding.TrafficForwardingStaticIP(\"usaSjc37TrafficForwardingStaticIP\", {\n    ipAddress: \"1.1.1.1\",\n    routableIp: true,\n    comment: \"SJC37 - Static IP\",\n    geoOverride: false,\n});\n// ZIA Location Management\nconst usaSjc37LocationManagement = new zia.locationmanagement.LocationManagement(\"usaSjc37LocationManagement\", {\n    description: \"Created with Terraform\",\n    country: \"UNITED_STATES\",\n    tz: \"UNITED_STATES_AMERICA_LOS_ANGELES\",\n    authRequired: true,\n    idleTimeInMinutes: 720,\n    displayTimeUnit: \"HOUR\",\n    surrogateIp: true,\n    xffForwardEnabled: true,\n    ofwEnabled: true,\n    ipsControl: true,\n    ipAddresses: [usaSjc37TrafficForwardingStaticIP.ipAddress],\n    vpnCredentials: [{\n        id: usaSjc37TrafficForwardingVPNCredentials.vpnCredentalId,\n        type: usaSjc37TrafficForwardingVPNCredentials.type,\n    }],\n}, {\n    dependsOn: [\n        usaSjc37TrafficForwardingVPNCredentials,\n        usaSjc37TrafficForwardingStaticIP,\n    ],\n});\n```\n```python\nimport pulumi\nimport zscaler_pulumi_zia as zia\n\nusa_sjc37_traffic_forwarding_vpn_credentials = zia.traffic_forwarding.TrafficForwardingVPNCredentials(\"usaSjc37TrafficForwardingVPNCredentials\",\n    type=\"UFQDN\",\n    fqdn=\"usa_sjc37@acme.com\",\n    comments=\"USA - San Jose IPSec Tunnel\",\n    pre_shared_key=\"P@ass0rd123!\")\nusa_sjc37_traffic_forwarding_static_ip = zia.traffic_forwarding.TrafficForwardingStaticIP(\"usaSjc37TrafficForwardingStaticIP\",\n    ip_address=\"1.1.1.1\",\n    routable_ip=True,\n    comment=\"SJC37 - Static IP\",\n    geo_override=False)\n# ZIA Location Management\nusa_sjc37_location_management = zia.location_management.LocationManagement(\"usaSjc37LocationManagement\",\n    description=\"Created with Terraform\",\n    country=\"UNITED_STATES\",\n    tz=\"UNITED_STATES_AMERICA_LOS_ANGELES\",\n    auth_required=True,\n    idle_time_in_minutes=720,\n    display_time_unit=\"HOUR\",\n    surrogate_ip=True,\n    xff_forward_enabled=True,\n    ofw_enabled=True,\n    ips_control=True,\n    ip_addresses=[usa_sjc37_traffic_forwarding_static_ip.ip_address],\n    vpn_credentials=[zia.location_management.LocationManagementVpnCredentialArgs(\n        id=usa_sjc37_traffic_forwarding_vpn_credentials.vpn_credental_id,\n        type=usa_sjc37_traffic_forwarding_vpn_credentials.type,\n    )],\n    opts=pulumi.ResourceOptions(depends_on=[\n            usa_sjc37_traffic_forwarding_vpn_credentials,\n            usa_sjc37_traffic_forwarding_static_ip,\n        ]))\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Zia = zscaler.PulumiPackage.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var usaSjc37TrafficForwardingVPNCredentials = new Zia.TrafficForwarding.TrafficForwardingVPNCredentials(\"usaSjc37TrafficForwardingVPNCredentials\", new()\n    {\n        Type = \"UFQDN\",\n        Fqdn = \"usa_sjc37@acme.com\",\n        Comments = \"USA - San Jose IPSec Tunnel\",\n        PreSharedKey = \"P@ass0rd123!\",\n    });\n\n    var usaSjc37TrafficForwardingStaticIP = new Zia.TrafficForwarding.TrafficForwardingStaticIP(\"usaSjc37TrafficForwardingStaticIP\", new()\n    {\n        IpAddress = \"1.1.1.1\",\n        RoutableIp = true,\n        Comment = \"SJC37 - Static IP\",\n        GeoOverride = false,\n    });\n\n    // ZIA Location Management\n    var usaSjc37LocationManagement = new Zia.LocationManagement.LocationManagement(\"usaSjc37LocationManagement\", new()\n    {\n        Description = \"Created with Terraform\",\n        Country = \"UNITED_STATES\",\n        Tz = \"UNITED_STATES_AMERICA_LOS_ANGELES\",\n        AuthRequired = true,\n        IdleTimeInMinutes = 720,\n        DisplayTimeUnit = \"HOUR\",\n        SurrogateIp = true,\n        XffForwardEnabled = true,\n        OfwEnabled = true,\n        IpsControl = true,\n        IpAddresses = new[]\n        {\n            usaSjc37TrafficForwardingStaticIP.IpAddress,\n        },\n        VpnCredentials = new[]\n        {\n            new Zia.LocationManagement.Inputs.LocationManagementVpnCredentialArgs\n            {\n                Id = usaSjc37TrafficForwardingVPNCredentials.VpnCredentalId,\n                Type = usaSjc37TrafficForwardingVPNCredentials.Type,\n            },\n        },\n    }, new CustomResourceOptions\n    {\n        DependsOn = new[]\n        {\n            usaSjc37TrafficForwardingVPNCredentials,\n            usaSjc37TrafficForwardingStaticIP,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia/LocationManagement\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia/TrafficForwarding\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tusaSjc37TrafficForwardingVPNCredentials, err := TrafficForwarding.NewTrafficForwardingVPNCredentials(ctx, \"usaSjc37TrafficForwardingVPNCredentials\", \u0026TrafficForwarding.TrafficForwardingVPNCredentialsArgs{\n\t\t\tType:         pulumi.String(\"UFQDN\"),\n\t\t\tFqdn:         pulumi.String(\"usa_sjc37@acme.com\"),\n\t\t\tComments:     pulumi.String(\"USA - San Jose IPSec Tunnel\"),\n\t\t\tPreSharedKey: pulumi.String(\"P@ass0rd123!\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tusaSjc37TrafficForwardingStaticIP, err := TrafficForwarding.NewTrafficForwardingStaticIP(ctx, \"usaSjc37TrafficForwardingStaticIP\", \u0026TrafficForwarding.TrafficForwardingStaticIPArgs{\n\t\t\tIpAddress:   pulumi.String(\"1.1.1.1\"),\n\t\t\tRoutableIp:  pulumi.Bool(true),\n\t\t\tComment:     pulumi.String(\"SJC37 - Static IP\"),\n\t\t\tGeoOverride: pulumi.Bool(false),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = LocationManagement.NewLocationManagement(ctx, \"usaSjc37LocationManagement\", \u0026LocationManagement.LocationManagementArgs{\n\t\t\tDescription:       pulumi.String(\"Created with Terraform\"),\n\t\t\tCountry:           pulumi.String(\"UNITED_STATES\"),\n\t\t\tTz:                pulumi.String(\"UNITED_STATES_AMERICA_LOS_ANGELES\"),\n\t\t\tAuthRequired:      pulumi.Bool(true),\n\t\t\tIdleTimeInMinutes: pulumi.Int(720),\n\t\t\tDisplayTimeUnit:   pulumi.String(\"HOUR\"),\n\t\t\tSurrogateIp:       pulumi.Bool(true),\n\t\t\tXffForwardEnabled: pulumi.Bool(true),\n\t\t\tOfwEnabled:        pulumi.Bool(true),\n\t\t\tIpsControl:        pulumi.Bool(true),\n\t\t\tIpAddresses: pulumi.StringArray{\n\t\t\t\tusaSjc37TrafficForwardingStaticIP.IpAddress,\n\t\t\t},\n\t\t\tVpnCredentials: locationmanagement.LocationManagementVpnCredentialArray{\n\t\t\t\t\u0026locationmanagement.LocationManagementVpnCredentialArgs{\n\t\t\t\t\tId:   usaSjc37TrafficForwardingVPNCredentials.VpnCredentalId,\n\t\t\t\t\tType: usaSjc37TrafficForwardingVPNCredentials.Type,\n\t\t\t\t},\n\t\t\t},\n\t\t}, pulumi.DependsOn([]pulumi.Resource{\n\t\t\tusaSjc37TrafficForwardingVPNCredentials,\n\t\t\tusaSjc37TrafficForwardingStaticIP,\n\t\t}))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zia.TrafficForwarding.TrafficForwardingVPNCredentials;\nimport com.pulumi.zia.TrafficForwarding.TrafficForwardingVPNCredentialsArgs;\nimport com.pulumi.zia.TrafficForwarding.TrafficForwardingStaticIP;\nimport com.pulumi.zia.TrafficForwarding.TrafficForwardingStaticIPArgs;\nimport com.pulumi.zia.LocationManagement.LocationManagement;\nimport com.pulumi.zia.LocationManagement.LocationManagementArgs;\nimport com.pulumi.zia.LocationManagement.inputs.LocationManagementVpnCredentialArgs;\nimport com.pulumi.resources.CustomResourceOptions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var usaSjc37TrafficForwardingVPNCredentials = new TrafficForwardingVPNCredentials(\"usaSjc37TrafficForwardingVPNCredentials\", TrafficForwardingVPNCredentialsArgs.builder()        \n            .type(\"UFQDN\")\n            .fqdn(\"usa_sjc37@acme.com\")\n            .comments(\"USA - San Jose IPSec Tunnel\")\n            .preSharedKey(\"P@ass0rd123!\")\n            .build());\n\n        var usaSjc37TrafficForwardingStaticIP = new TrafficForwardingStaticIP(\"usaSjc37TrafficForwardingStaticIP\", TrafficForwardingStaticIPArgs.builder()        \n            .ipAddress(\"1.1.1.1\")\n            .routableIp(true)\n            .comment(\"SJC37 - Static IP\")\n            .geoOverride(false)\n            .build());\n\n        var usaSjc37LocationManagement = new LocationManagement(\"usaSjc37LocationManagement\", LocationManagementArgs.builder()        \n            .description(\"Created with Terraform\")\n            .country(\"UNITED_STATES\")\n            .tz(\"UNITED_STATES_AMERICA_LOS_ANGELES\")\n            .authRequired(true)\n            .idleTimeInMinutes(720)\n            .displayTimeUnit(\"HOUR\")\n            .surrogateIp(true)\n            .xffForwardEnabled(true)\n            .ofwEnabled(true)\n            .ipsControl(true)\n            .ipAddresses(usaSjc37TrafficForwardingStaticIP.ipAddress())\n            .vpnCredentials(LocationManagementVpnCredentialArgs.builder()\n                .id(usaSjc37TrafficForwardingVPNCredentials.vpnCredentalId())\n                .type(usaSjc37TrafficForwardingVPNCredentials.type())\n                .build())\n            .build(), CustomResourceOptions.builder()\n                .dependsOn(                \n                    usaSjc37TrafficForwardingVPNCredentials,\n                    usaSjc37TrafficForwardingStaticIP)\n                .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # ZIA Location Management\n  usaSjc37LocationManagement:\n    type: zia:LocationManagement:LocationManagement\n    properties:\n      description: Created with Terraform\n      country: UNITED_STATES\n      tz: UNITED_STATES_AMERICA_LOS_ANGELES\n      authRequired: true\n      idleTimeInMinutes: 720\n      displayTimeUnit: HOUR\n      surrogateIp: true\n      xffForwardEnabled: true\n      ofwEnabled: true\n      ipsControl: true\n      ipAddresses:\n        - ${usaSjc37TrafficForwardingStaticIP.ipAddress}\n      vpnCredentials:\n        - id: ${usaSjc37TrafficForwardingVPNCredentials.vpnCredentalId}\n          type: ${usaSjc37TrafficForwardingVPNCredentials.type}\n    options:\n      dependson:\n        - ${usaSjc37TrafficForwardingVPNCredentials}\n        - ${usaSjc37TrafficForwardingStaticIP}\n  usaSjc37TrafficForwardingVPNCredentials:\n    type: zia:TrafficForwarding:TrafficForwardingVPNCredentials\n    properties:\n      type: UFQDN\n      fqdn: usa_sjc37@acme.com\n      comments: USA - San Jose IPSec Tunnel\n      preSharedKey: P@ass0rd123!\n  usaSjc37TrafficForwardingStaticIP:\n    type: zia:TrafficForwarding:TrafficForwardingStaticIP\n    properties:\n      ipAddress: 1.1.1.1\n      routableIp: true\n      comment: SJC37 - Static IP\n      geoOverride: false\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "aupBlockInternetUntilAccepted": {
                    "type": "boolean",
                    "description": "For First Time AUP Behavior, Block Internet Access. When set, all internet access (including non-HTTP traffic) is disabled until the user accepts the AUP.\n"
                },
                "aupEnabled": {
                    "type": "boolean",
                    "description": "Enable AUP. When set to true, AUP is enabled for the location.\n"
                },
                "aupForceSslInspection": {
                    "type": "boolean",
                    "description": "For First Time AUP Behavior, Force SSL Inspection. When set, Zscaler will force SSL Inspection in order to enforce AUP for HTTPS traffic.\n"
                },
                "aupTimeoutInDays": {
                    "type": "integer",
                    "description": "Custom AUP Frequency. Refresh time (in days) to re-validate the AUP.\n"
                },
                "authRequired": {
                    "type": "boolean",
                    "description": "Enforce Authentication. Required when ports are enabled, IP Surrogate is enabled, or Kerberos Authentication is enabled.\n"
                },
                "cautionEnabled": {
                    "type": "boolean",
                    "description": "Enable Caution. When set to true, a caution notifcation is enabled for the location.\n"
                },
                "country": {
                    "type": "string",
                    "description": "Country\n"
                },
                "description": {
                    "type": "string",
                    "description": "Additional notes or information regarding the location or sub-location. The description cannot exceed 1024 characters.\n"
                },
                "displayTimeUnit": {
                    "type": "string",
                    "description": "Display Time Unit. The time unit to display for IP Surrogate idle time to disassociation.\n"
                },
                "dnBandwidth": {
                    "type": "integer",
                    "description": "Download bandwidth in bytes. The value `0` implies no Bandwidth Control enforcement.\n"
                },
                "idleTimeInMinutes": {
                    "type": "integer",
                    "description": "Idle Time to Disassociation. The user mapping idle time (in minutes) is required if a Surrogate IP is enabled.\n"
                },
                "ipAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "For locations: IP addresses of the egress points that are provisioned in the Zscaler Cloud. Each entry is a single IP address (e.g., `238.10.33.9`). For sub-locations: Egress, internal, or GRE tunnel IP addresses. Each entry is either a single IP address, CIDR (e.g., `10.10.33.0/24`), or range (e.g., `10.10.33.1-10.10.33.10`)). The value is required if `vpn_credentials` are not defined.\n"
                },
                "ipsControl": {
                    "type": "boolean",
                    "description": "Enable IPS Control. When set to true, IPS Control is enabled for the location if Firewall is enabled.\n"
                },
                "locationId": {
                    "type": "integer"
                },
                "name": {
                    "type": "string",
                    "description": "Location Name.\n"
                },
                "ofwEnabled": {
                    "type": "boolean",
                    "description": "Enable Firewall. When set to true, Firewall is enabled for the location.\n"
                },
                "parentId": {
                    "type": "integer",
                    "description": "Parent Location ID. If this ID does not exist or is `0`, it is implied that it is a parent location. Otherwise, it is a sub-location whose parent has this ID. x-applicableTo: `SUB`\n"
                },
                "ports": {
                    "type": "string",
                    "description": "IP ports that are associated with the location.\n"
                },
                "profile": {
                    "type": "string",
                    "description": "Profile tag that specifies the location traffic type. If not specified, this tag defaults to `Unassigned`. The supported options are: `NONE`, `CORPORATE`, `SERVER`, `GUESTWIFI`, `IOT`.\n"
                },
                "sslScanEnabled": {
                    "type": "boolean",
                    "description": "This parameter was deprecated and no longer has an effect on SSL policy. It remains supported in the API payload in order to maintain backwards compatibility with existing scripts, but it will be removed in future.\n"
                },
                "surrogateIp": {
                    "type": "boolean",
                    "description": "Enable Surrogate IP. When set to true, users are mapped to internal device IP addresses.\n"
                },
                "surrogateIpEnforcedForKnownBrowsers": {
                    "type": "boolean",
                    "description": "Enforce Surrogate IP for Known Browsers. When set to true, IP Surrogate is enforced for all known browsers.\n"
                },
                "surrogateRefreshTimeInMinutes": {
                    "type": "integer",
                    "description": "Refresh Time for re-validation of Surrogacy. The surrogate refresh time (in minutes) to re-validate the IP surrogates.\n"
                },
                "surrogateRefreshTimeUnit": {
                    "type": "string",
                    "description": "Display Refresh Time Unit. The time unit to display for refresh time for re-validation of surrogacy.\n"
                },
                "tz": {
                    "type": "string",
                    "description": "Timezone of the location. If not specified, it defaults to GMT.\n"
                },
                "upBandwidth": {
                    "type": "integer",
                    "description": "Upload bandwidth in bytes. The value `0` implies no Bandwidth Control enforcement.\n"
                },
                "vpnCredentials": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zia:LocationManagement/LocationManagementVpnCredential:LocationManagementVpnCredential"
                    }
                },
                "xffForwardEnabled": {
                    "type": "boolean",
                    "description": "Enable XFF Forwarding. When set to true, traffic is passed to Zscaler Cloud via the X-Forwarded-For (XFF) header.\n"
                },
                "zappSslScanEnabled": {
                    "type": "boolean",
                    "description": "This parameter was deprecated and no longer has an effect on SSL policy. It remains supported in the API payload in order to maintain backwards compatibility with existing scripts, but it will be removed in future.\n"
                }
            },
            "required": [
                "aupBlockInternetUntilAccepted",
                "aupEnabled",
                "aupForceSslInspection",
                "authRequired",
                "cautionEnabled",
                "country",
                "ipsControl",
                "locationId",
                "name",
                "ofwEnabled",
                "profile",
                "sslScanEnabled",
                "surrogateIp",
                "surrogateIpEnforcedForKnownBrowsers",
                "tz",
                "xffForwardEnabled",
                "zappSslScanEnabled"
            ],
            "inputProperties": {
                "aupBlockInternetUntilAccepted": {
                    "type": "boolean",
                    "description": "For First Time AUP Behavior, Block Internet Access. When set, all internet access (including non-HTTP traffic) is disabled until the user accepts the AUP.\n"
                },
                "aupEnabled": {
                    "type": "boolean",
                    "description": "Enable AUP. When set to true, AUP is enabled for the location.\n"
                },
                "aupForceSslInspection": {
                    "type": "boolean",
                    "description": "For First Time AUP Behavior, Force SSL Inspection. When set, Zscaler will force SSL Inspection in order to enforce AUP for HTTPS traffic.\n"
                },
                "aupTimeoutInDays": {
                    "type": "integer",
                    "description": "Custom AUP Frequency. Refresh time (in days) to re-validate the AUP.\n"
                },
                "authRequired": {
                    "type": "boolean",
                    "description": "Enforce Authentication. Required when ports are enabled, IP Surrogate is enabled, or Kerberos Authentication is enabled.\n"
                },
                "cautionEnabled": {
                    "type": "boolean",
                    "description": "Enable Caution. When set to true, a caution notifcation is enabled for the location.\n"
                },
                "country": {
                    "type": "string",
                    "description": "Country\n"
                },
                "description": {
                    "type": "string",
                    "description": "Additional notes or information regarding the location or sub-location. The description cannot exceed 1024 characters.\n"
                },
                "displayTimeUnit": {
                    "type": "string",
                    "description": "Display Time Unit. The time unit to display for IP Surrogate idle time to disassociation.\n"
                },
                "dnBandwidth": {
                    "type": "integer",
                    "description": "Download bandwidth in bytes. The value `0` implies no Bandwidth Control enforcement.\n"
                },
                "idleTimeInMinutes": {
                    "type": "integer",
                    "description": "Idle Time to Disassociation. The user mapping idle time (in minutes) is required if a Surrogate IP is enabled.\n"
                },
                "ipAddresses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "For locations: IP addresses of the egress points that are provisioned in the Zscaler Cloud. Each entry is a single IP address (e.g., `238.10.33.9`). For sub-locations: Egress, internal, or GRE tunnel IP addresses. Each entry is either a single IP address, CIDR (e.g., `10.10.33.0/24`), or range (e.g., `10.10.33.1-10.10.33.10`)). The value is required if `vpn_credentials` are not defined.\n"
                },
                "ipsControl": {
                    "type": "boolean",
                    "description": "Enable IPS Control. When set to true, IPS Control is enabled for the location if Firewall is enabled.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Location Name.\n"
                },
                "ofwEnabled": {
                    "type": "boolean",
                    "description": "Enable Firewall. When set to true, Firewall is enabled for the location.\n"
                },
                "parentId": {
                    "type": "integer",
                    "description": "Parent Location ID. If this ID does not exist or is `0`, it is implied that it is a parent location. Otherwise, it is a sub-location whose parent has this ID. x-applicableTo: `SUB`\n"
                },
                "ports": {
                    "type": "string",
                    "description": "IP ports that are associated with the location.\n"
                },
                "profile": {
                    "type": "string",
                    "description": "Profile tag that specifies the location traffic type. If not specified, this tag defaults to `Unassigned`. The supported options are: `NONE`, `CORPORATE`, `SERVER`, `GUESTWIFI`, `IOT`.\n"
                },
                "sslScanEnabled": {
                    "type": "boolean",
                    "description": "This parameter was deprecated and no longer has an effect on SSL policy. It remains supported in the API payload in order to maintain backwards compatibility with existing scripts, but it will be removed in future.\n"
                },
                "surrogateIp": {
                    "type": "boolean",
                    "description": "Enable Surrogate IP. When set to true, users are mapped to internal device IP addresses.\n"
                },
                "surrogateIpEnforcedForKnownBrowsers": {
                    "type": "boolean",
                    "description": "Enforce Surrogate IP for Known Browsers. When set to true, IP Surrogate is enforced for all known browsers.\n"
                },
                "surrogateRefreshTimeInMinutes": {
                    "type": "integer",
                    "description": "Refresh Time for re-validation of Surrogacy. The surrogate refresh time (in minutes) to re-validate the IP surrogates.\n"
                },
                "surrogateRefreshTimeUnit": {
                    "type": "string",
                    "description": "Display Refresh Time Unit. The time unit to display for refresh time for re-validation of surrogacy.\n"
                },
                "tz": {
                    "type": "string",
                    "description": "Timezone of the location. If not specified, it defaults to GMT.\n"
                },
                "upBandwidth": {
                    "type": "integer",
                    "description": "Upload bandwidth in bytes. The value `0` implies no Bandwidth Control enforcement.\n"
                },
                "vpnCredentials": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zia:LocationManagement/LocationManagementVpnCredential:LocationManagementVpnCredential"
                    }
                },
                "xffForwardEnabled": {
                    "type": "boolean",
                    "description": "Enable XFF Forwarding. When set to true, traffic is passed to Zscaler Cloud via the X-Forwarded-For (XFF) header.\n"
                },
                "zappSslScanEnabled": {
                    "type": "boolean",
                    "description": "This parameter was deprecated and no longer has an effect on SSL policy. It remains supported in the API payload in order to maintain backwards compatibility with existing scripts, but it will be removed in future.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering LocationManagement resources.\n",
                "properties": {
                    "aupBlockInternetUntilAccepted": {
                        "type": "boolean",
                        "description": "For First Time AUP Behavior, Block Internet Access. When set, all internet access (including non-HTTP traffic) is disabled until the user accepts the AUP.\n"
                    },
                    "aupEnabled": {
                        "type": "boolean",
                        "description": "Enable AUP. When set to true, AUP is enabled for the location.\n"
                    },
                    "aupForceSslInspection": {
                        "type": "boolean",
                        "description": "For First Time AUP Behavior, Force SSL Inspection. When set, Zscaler will force SSL Inspection in order to enforce AUP for HTTPS traffic.\n"
                    },
                    "aupTimeoutInDays": {
                        "type": "integer",
                        "description": "Custom AUP Frequency. Refresh time (in days) to re-validate the AUP.\n"
                    },
                    "authRequired": {
                        "type": "boolean",
                        "description": "Enforce Authentication. Required when ports are enabled, IP Surrogate is enabled, or Kerberos Authentication is enabled.\n"
                    },
                    "cautionEnabled": {
                        "type": "boolean",
                        "description": "Enable Caution. When set to true, a caution notifcation is enabled for the location.\n"
                    },
                    "country": {
                        "type": "string",
                        "description": "Country\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Additional notes or information regarding the location or sub-location. The description cannot exceed 1024 characters.\n"
                    },
                    "displayTimeUnit": {
                        "type": "string",
                        "description": "Display Time Unit. The time unit to display for IP Surrogate idle time to disassociation.\n"
                    },
                    "dnBandwidth": {
                        "type": "integer",
                        "description": "Download bandwidth in bytes. The value `0` implies no Bandwidth Control enforcement.\n"
                    },
                    "idleTimeInMinutes": {
                        "type": "integer",
                        "description": "Idle Time to Disassociation. The user mapping idle time (in minutes) is required if a Surrogate IP is enabled.\n"
                    },
                    "ipAddresses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "For locations: IP addresses of the egress points that are provisioned in the Zscaler Cloud. Each entry is a single IP address (e.g., `238.10.33.9`). For sub-locations: Egress, internal, or GRE tunnel IP addresses. Each entry is either a single IP address, CIDR (e.g., `10.10.33.0/24`), or range (e.g., `10.10.33.1-10.10.33.10`)). The value is required if `vpn_credentials` are not defined.\n"
                    },
                    "ipsControl": {
                        "type": "boolean",
                        "description": "Enable IPS Control. When set to true, IPS Control is enabled for the location if Firewall is enabled.\n"
                    },
                    "locationId": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string",
                        "description": "Location Name.\n"
                    },
                    "ofwEnabled": {
                        "type": "boolean",
                        "description": "Enable Firewall. When set to true, Firewall is enabled for the location.\n"
                    },
                    "parentId": {
                        "type": "integer",
                        "description": "Parent Location ID. If this ID does not exist or is `0`, it is implied that it is a parent location. Otherwise, it is a sub-location whose parent has this ID. x-applicableTo: `SUB`\n"
                    },
                    "ports": {
                        "type": "string",
                        "description": "IP ports that are associated with the location.\n"
                    },
                    "profile": {
                        "type": "string",
                        "description": "Profile tag that specifies the location traffic type. If not specified, this tag defaults to `Unassigned`. The supported options are: `NONE`, `CORPORATE`, `SERVER`, `GUESTWIFI`, `IOT`.\n"
                    },
                    "sslScanEnabled": {
                        "type": "boolean",
                        "description": "This parameter was deprecated and no longer has an effect on SSL policy. It remains supported in the API payload in order to maintain backwards compatibility with existing scripts, but it will be removed in future.\n"
                    },
                    "surrogateIp": {
                        "type": "boolean",
                        "description": "Enable Surrogate IP. When set to true, users are mapped to internal device IP addresses.\n"
                    },
                    "surrogateIpEnforcedForKnownBrowsers": {
                        "type": "boolean",
                        "description": "Enforce Surrogate IP for Known Browsers. When set to true, IP Surrogate is enforced for all known browsers.\n"
                    },
                    "surrogateRefreshTimeInMinutes": {
                        "type": "integer",
                        "description": "Refresh Time for re-validation of Surrogacy. The surrogate refresh time (in minutes) to re-validate the IP surrogates.\n"
                    },
                    "surrogateRefreshTimeUnit": {
                        "type": "string",
                        "description": "Display Refresh Time Unit. The time unit to display for refresh time for re-validation of surrogacy.\n"
                    },
                    "tz": {
                        "type": "string",
                        "description": "Timezone of the location. If not specified, it defaults to GMT.\n"
                    },
                    "upBandwidth": {
                        "type": "integer",
                        "description": "Upload bandwidth in bytes. The value `0` implies no Bandwidth Control enforcement.\n"
                    },
                    "vpnCredentials": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:LocationManagement/LocationManagementVpnCredential:LocationManagementVpnCredential"
                        }
                    },
                    "xffForwardEnabled": {
                        "type": "boolean",
                        "description": "Enable XFF Forwarding. When set to true, traffic is passed to Zscaler Cloud via the X-Forwarded-For (XFF) header.\n"
                    },
                    "zappSslScanEnabled": {
                        "type": "boolean",
                        "description": "This parameter was deprecated and no longer has an effect on SSL policy. It remains supported in the API payload in order to maintain backwards compatibility with existing scripts, but it will be removed in future.\n"
                    }
                },
                "type": "object"
            }
        },
        "zia:RuleLabels/ruleLabels:RuleLabels": {
            "description": "The **zia_rule_labels** resource allows the creation and management of rule labels in the Zscaler Internet Access cloud or via the API. This resource can then be associated with resources such as: Firewall Rules and URL filtering rules\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@zscaler/pulumi-zia\";\n\n// ZIA Rule Labels Resource\nconst example = new zia.rulelabels.RuleLabels(\"example\", {description: \"Example\"});\n```\n```python\nimport pulumi\nimport zscaler_pulumi_zia as zia\n\n# ZIA Rule Labels Resource\nexample = zia.rule_labels.RuleLabels(\"example\", description=\"Example\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Zia = zscaler.PulumiPackage.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // ZIA Rule Labels Resource\n    var example = new Zia.RuleLabels.RuleLabels(\"example\", new()\n    {\n        Description = \"Example\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia/RuleLabels\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := RuleLabels.NewRuleLabels(ctx, \"example\", \u0026RuleLabels.RuleLabelsArgs{\n\t\t\tDescription: pulumi.String(\"Example\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zia.RuleLabels.RuleLabels;\nimport com.pulumi.zia.RuleLabels.RuleLabelsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new RuleLabels(\"example\", RuleLabelsArgs.builder()        \n            .description(\"Example\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # ZIA Rule Labels Resource\n  example:\n    type: zia:RuleLabels:RuleLabels\n    properties:\n      description: Example\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "createdBies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zia:RuleLabels/RuleLabelsCreatedBy:RuleLabelsCreatedBy"
                    },
                    "description": "The admin that created the rule label. This is a read-only field. Ignored by PUT requests.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The rule label description.\n"
                },
                "lastModifiedBies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zia:RuleLabels/RuleLabelsLastModifiedBy:RuleLabelsLastModifiedBy"
                    },
                    "description": "The admin that modified the rule label last. This is a read-only field. Ignored by PUT requests.\n"
                },
                "lastModifiedTime": {
                    "type": "integer",
                    "description": "Timestamp when the rule lable was last modified. This is a read-only field. Ignored by PUT and DELETE requests.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the devices to be created.\n"
                },
                "referencedRuleCount": {
                    "type": "integer"
                },
                "ruleLabelId": {
                    "type": "integer"
                }
            },
            "required": [
                "createdBies",
                "lastModifiedBies",
                "lastModifiedTime",
                "name",
                "referencedRuleCount",
                "ruleLabelId"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The rule label description.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the devices to be created.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RuleLabels resources.\n",
                "properties": {
                    "createdBies": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:RuleLabels/RuleLabelsCreatedBy:RuleLabelsCreatedBy"
                        },
                        "description": "The admin that created the rule label. This is a read-only field. Ignored by PUT requests.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The rule label description.\n"
                    },
                    "lastModifiedBies": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:RuleLabels/RuleLabelsLastModifiedBy:RuleLabelsLastModifiedBy"
                        },
                        "description": "The admin that modified the rule label last. This is a read-only field. Ignored by PUT requests.\n"
                    },
                    "lastModifiedTime": {
                        "type": "integer",
                        "description": "Timestamp when the rule lable was last modified. This is a read-only field. Ignored by PUT and DELETE requests.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the devices to be created.\n"
                    },
                    "referencedRuleCount": {
                        "type": "integer"
                    },
                    "ruleLabelId": {
                        "type": "integer"
                    }
                },
                "type": "object"
            }
        },
        "zia:SecuritySettings/securitySettings:SecuritySettings": {
            "properties": {
                "blacklistUrls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "URLs on the denylist for your organization. Allow up to 25000 URLs.\n"
                },
                "whitelistUrls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Allowlist URLs whose contents will not be scanned. Allows up to 255 URLs.\n"
                }
            },
            "required": [
                "blacklistUrls",
                "whitelistUrls"
            ],
            "inputProperties": {
                "blacklistUrls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "URLs on the denylist for your organization. Allow up to 25000 URLs.\n"
                },
                "whitelistUrls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Allowlist URLs whose contents will not be scanned. Allows up to 255 URLs.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering SecuritySettings resources.\n",
                "properties": {
                    "blacklistUrls": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "URLs on the denylist for your organization. Allow up to 25000 URLs.\n"
                    },
                    "whitelistUrls": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Allowlist URLs whose contents will not be scanned. Allows up to 255 URLs.\n"
                    }
                },
                "type": "object"
            }
        },
        "zia:TrafficForwarding/trafficForwardingGRETunnel:TrafficForwardingGRETunnel": {
            "description": "The **zia_traffic_forwarding_gre_tunnel** resource allows the creation and management of GRE tunnel configuration in the Zscaler Internet Access (ZIA) portal.\n\n\u003e **Note:** The provider automatically query the Zscaler cloud for the primary and secondary destination datacenter and virtual IP address (VIP) of the GRE tunnel. The parameter can be overriden if needed by setting the parameters: `primary_dest_vip` and `secondary_dest_vip`.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@zscaler/pulumi-zia\";\n\n// ZIA Traffic Forwarding - Static IP\nconst exampleTrafficForwardingStaticIP = new zia.trafficforwarding.TrafficForwardingStaticIP(\"exampleTrafficForwardingStaticIP\", {\n    ipAddress: \"1.1.1.1\",\n    routableIp: true,\n    comment: \"Example\",\n    geoOverride: true,\n    latitude: 37.418171,\n    longitude: -121.95314,\n});\n// Creates a numbered GRE Tunnel\nconst exampleTrafficForwardingGRETunnel = new zia.trafficforwarding.TrafficForwardingGRETunnel(\"exampleTrafficForwardingGRETunnel\", {\n    sourceIp: exampleTrafficForwardingStaticIP.ipAddress,\n    comment: \"Example\",\n    withinCountry: true,\n    countryCode: \"US\",\n    ipUnnumbered: false,\n}, {\n    dependsOn: [exampleTrafficForwardingStaticIP],\n});\n```\n```python\nimport pulumi\nimport zscaler_pulumi_zia as zia\n\n# ZIA Traffic Forwarding - Static IP\nexample_traffic_forwarding_static_ip = zia.traffic_forwarding.TrafficForwardingStaticIP(\"exampleTrafficForwardingStaticIP\",\n    ip_address=\"1.1.1.1\",\n    routable_ip=True,\n    comment=\"Example\",\n    geo_override=True,\n    latitude=37.418171,\n    longitude=-121.95314)\n# Creates a numbered GRE Tunnel\nexample_traffic_forwarding_gre_tunnel = zia.traffic_forwarding.TrafficForwardingGRETunnel(\"exampleTrafficForwardingGRETunnel\",\n    source_ip=example_traffic_forwarding_static_ip.ip_address,\n    comment=\"Example\",\n    within_country=True,\n    country_code=\"US\",\n    ip_unnumbered=False,\n    opts=pulumi.ResourceOptions(depends_on=[example_traffic_forwarding_static_ip]))\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Zia = zscaler.PulumiPackage.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // ZIA Traffic Forwarding - Static IP\n    var exampleTrafficForwardingStaticIP = new Zia.TrafficForwarding.TrafficForwardingStaticIP(\"exampleTrafficForwardingStaticIP\", new()\n    {\n        IpAddress = \"1.1.1.1\",\n        RoutableIp = true,\n        Comment = \"Example\",\n        GeoOverride = true,\n        Latitude = 37.418171,\n        Longitude = -121.95314,\n    });\n\n    // Creates a numbered GRE Tunnel\n    var exampleTrafficForwardingGRETunnel = new Zia.TrafficForwarding.TrafficForwardingGRETunnel(\"exampleTrafficForwardingGRETunnel\", new()\n    {\n        SourceIp = exampleTrafficForwardingStaticIP.IpAddress,\n        Comment = \"Example\",\n        WithinCountry = true,\n        CountryCode = \"US\",\n        IpUnnumbered = false,\n    }, new CustomResourceOptions\n    {\n        DependsOn = new[]\n        {\n            exampleTrafficForwardingStaticIP,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia/TrafficForwarding\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleTrafficForwardingStaticIP, err := TrafficForwarding.NewTrafficForwardingStaticIP(ctx, \"exampleTrafficForwardingStaticIP\", \u0026TrafficForwarding.TrafficForwardingStaticIPArgs{\n\t\t\tIpAddress:   pulumi.String(\"1.1.1.1\"),\n\t\t\tRoutableIp:  pulumi.Bool(true),\n\t\t\tComment:     pulumi.String(\"Example\"),\n\t\t\tGeoOverride: pulumi.Bool(true),\n\t\t\tLatitude:    pulumi.Float64(37.418171),\n\t\t\tLongitude:   -121.95314,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = TrafficForwarding.NewTrafficForwardingGRETunnel(ctx, \"exampleTrafficForwardingGRETunnel\", \u0026TrafficForwarding.TrafficForwardingGRETunnelArgs{\n\t\t\tSourceIp:      exampleTrafficForwardingStaticIP.IpAddress,\n\t\t\tComment:       pulumi.String(\"Example\"),\n\t\t\tWithinCountry: pulumi.Bool(true),\n\t\t\tCountryCode:   pulumi.String(\"US\"),\n\t\t\tIpUnnumbered:  pulumi.Bool(false),\n\t\t}, pulumi.DependsOn([]pulumi.Resource{\n\t\t\texampleTrafficForwardingStaticIP,\n\t\t}))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\n\u003e **Note:** The provider will automatically query and set the Zscaler cloud for the next available `/29` internal IP range to be used in a numbered GRE tunnel.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@zscaler/pulumi-zia\";\n\n// ZIA Traffic Forwarding - Static IP\nconst example = new zia.trafficforwarding.TrafficForwardingStaticIP(\"example\", {\n    ipAddress: \"1.1.1.1\",\n    routableIp: true,\n    comment: \"Example\",\n    geoOverride: true,\n    latitude: 37.418171,\n    longitude: -121.95314,\n});\n// Creates an unnumbered GRE Tunnel\nconst telusHomeInternet01Gre01 = new zia.trafficforwarding.TrafficForwardingGRETunnel(\"telusHomeInternet01Gre01\", {\n    sourceIp: example.ipAddress,\n    comment: \"Example\",\n    withinCountry: true,\n    countryCode: \"CA\",\n    ipUnnumbered: true,\n}, {\n    dependsOn: [example],\n});\n```\n```python\nimport pulumi\nimport zscaler_pulumi_zia as zia\n\n# ZIA Traffic Forwarding - Static IP\nexample = zia.traffic_forwarding.TrafficForwardingStaticIP(\"example\",\n    ip_address=\"1.1.1.1\",\n    routable_ip=True,\n    comment=\"Example\",\n    geo_override=True,\n    latitude=37.418171,\n    longitude=-121.95314)\n# Creates an unnumbered GRE Tunnel\ntelus_home_internet01_gre01 = zia.traffic_forwarding.TrafficForwardingGRETunnel(\"telusHomeInternet01Gre01\",\n    source_ip=example.ip_address,\n    comment=\"Example\",\n    within_country=True,\n    country_code=\"CA\",\n    ip_unnumbered=True,\n    opts=pulumi.ResourceOptions(depends_on=[example]))\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Zia = zscaler.PulumiPackage.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // ZIA Traffic Forwarding - Static IP\n    var example = new Zia.TrafficForwarding.TrafficForwardingStaticIP(\"example\", new()\n    {\n        IpAddress = \"1.1.1.1\",\n        RoutableIp = true,\n        Comment = \"Example\",\n        GeoOverride = true,\n        Latitude = 37.418171,\n        Longitude = -121.95314,\n    });\n\n    // Creates an unnumbered GRE Tunnel\n    var telusHomeInternet01Gre01 = new Zia.TrafficForwarding.TrafficForwardingGRETunnel(\"telusHomeInternet01Gre01\", new()\n    {\n        SourceIp = example.IpAddress,\n        Comment = \"Example\",\n        WithinCountry = true,\n        CountryCode = \"CA\",\n        IpUnnumbered = true,\n    }, new CustomResourceOptions\n    {\n        DependsOn = new[]\n        {\n            example,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia/TrafficForwarding\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texample, err := TrafficForwarding.NewTrafficForwardingStaticIP(ctx, \"example\", \u0026TrafficForwarding.TrafficForwardingStaticIPArgs{\n\t\t\tIpAddress:   pulumi.String(\"1.1.1.1\"),\n\t\t\tRoutableIp:  pulumi.Bool(true),\n\t\t\tComment:     pulumi.String(\"Example\"),\n\t\t\tGeoOverride: pulumi.Bool(true),\n\t\t\tLatitude:    pulumi.Float64(37.418171),\n\t\t\tLongitude:   -121.95314,\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = TrafficForwarding.NewTrafficForwardingGRETunnel(ctx, \"telusHomeInternet01Gre01\", \u0026TrafficForwarding.TrafficForwardingGRETunnelArgs{\n\t\t\tSourceIp:      example.IpAddress,\n\t\t\tComment:       pulumi.String(\"Example\"),\n\t\t\tWithinCountry: pulumi.Bool(true),\n\t\t\tCountryCode:   pulumi.String(\"CA\"),\n\t\t\tIpUnnumbered:  pulumi.Bool(true),\n\t\t}, pulumi.DependsOn([]pulumi.Resource{\n\t\t\texample,\n\t\t}))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "comment": {
                    "type": "string",
                    "description": "Additional information about this GRE tunnel\n"
                },
                "countryCode": {
                    "type": "string",
                    "description": "When within_country is enabled, you must set this to the country code.\n"
                },
                "internalIpRange": {
                    "type": "string",
                    "description": "The start of the internal IP address in /29 CIDR range. Automatically set by the provider if `ip_unnumbered` is set to `false`.\n"
                },
                "ipUnnumbered": {
                    "type": "boolean",
                    "description": "This is required to support the automated SD-WAN provisioning of GRE tunnels, when set to true gre_tun_ip and gre_tun_id are set to null\n"
                },
                "lastModificationTime": {
                    "type": "integer"
                },
                "lastModifiedBies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zia:TrafficForwarding/TrafficForwardingGRETunnelLastModifiedBy:TrafficForwardingGRETunnelLastModifiedBy"
                    }
                },
                "primaryDestVips": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zia:TrafficForwarding/TrafficForwardingGRETunnelPrimaryDestVip:TrafficForwardingGRETunnelPrimaryDestVip"
                    },
                    "description": "**` (Optional) The primary destination data center and virtual IP address (VIP) of the GRE tunnel.\n"
                },
                "secondaryDestVips": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zia:TrafficForwarding/TrafficForwardingGRETunnelSecondaryDestVip:TrafficForwardingGRETunnelSecondaryDestVip"
                    },
                    "description": "The secondary destination data center and virtual IP address (VIP) of the GRE tunnel.\n"
                },
                "sourceIp": {
                    "type": "string",
                    "description": "The source IP address of the GRE tunnel. This is typically a static IP address in the organization or SD-WAN. This IP address must be provisioned within the Zscaler service using the /staticIP endpoint.\n"
                },
                "tunnelId": {
                    "type": "integer",
                    "description": "The ID of the GRE tunnel.\n"
                },
                "withinCountry": {
                    "type": "boolean",
                    "description": "Restrict the data center virtual IP addresses (VIPs) only to those within the same country as the source IP address\n"
                }
            },
            "required": [
                "countryCode",
                "internalIpRange",
                "ipUnnumbered",
                "lastModificationTime",
                "lastModifiedBies",
                "primaryDestVips",
                "secondaryDestVips",
                "sourceIp",
                "tunnelId",
                "withinCountry"
            ],
            "inputProperties": {
                "comment": {
                    "type": "string",
                    "description": "Additional information about this GRE tunnel\n"
                },
                "countryCode": {
                    "type": "string",
                    "description": "When within_country is enabled, you must set this to the country code.\n"
                },
                "internalIpRange": {
                    "type": "string",
                    "description": "The start of the internal IP address in /29 CIDR range. Automatically set by the provider if `ip_unnumbered` is set to `false`.\n"
                },
                "ipUnnumbered": {
                    "type": "boolean",
                    "description": "This is required to support the automated SD-WAN provisioning of GRE tunnels, when set to true gre_tun_ip and gre_tun_id are set to null\n"
                },
                "primaryDestVips": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zia:TrafficForwarding/TrafficForwardingGRETunnelPrimaryDestVip:TrafficForwardingGRETunnelPrimaryDestVip"
                    },
                    "description": "**` (Optional) The primary destination data center and virtual IP address (VIP) of the GRE tunnel.\n"
                },
                "secondaryDestVips": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zia:TrafficForwarding/TrafficForwardingGRETunnelSecondaryDestVip:TrafficForwardingGRETunnelSecondaryDestVip"
                    },
                    "description": "The secondary destination data center and virtual IP address (VIP) of the GRE tunnel.\n"
                },
                "sourceIp": {
                    "type": "string",
                    "description": "The source IP address of the GRE tunnel. This is typically a static IP address in the organization or SD-WAN. This IP address must be provisioned within the Zscaler service using the /staticIP endpoint.\n"
                },
                "withinCountry": {
                    "type": "boolean",
                    "description": "Restrict the data center virtual IP addresses (VIPs) only to those within the same country as the source IP address\n"
                }
            },
            "requiredInputs": [
                "sourceIp"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering TrafficForwardingGRETunnel resources.\n",
                "properties": {
                    "comment": {
                        "type": "string",
                        "description": "Additional information about this GRE tunnel\n"
                    },
                    "countryCode": {
                        "type": "string",
                        "description": "When within_country is enabled, you must set this to the country code.\n"
                    },
                    "internalIpRange": {
                        "type": "string",
                        "description": "The start of the internal IP address in /29 CIDR range. Automatically set by the provider if `ip_unnumbered` is set to `false`.\n"
                    },
                    "ipUnnumbered": {
                        "type": "boolean",
                        "description": "This is required to support the automated SD-WAN provisioning of GRE tunnels, when set to true gre_tun_ip and gre_tun_id are set to null\n"
                    },
                    "lastModificationTime": {
                        "type": "integer"
                    },
                    "lastModifiedBies": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:TrafficForwarding/TrafficForwardingGRETunnelLastModifiedBy:TrafficForwardingGRETunnelLastModifiedBy"
                        }
                    },
                    "primaryDestVips": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:TrafficForwarding/TrafficForwardingGRETunnelPrimaryDestVip:TrafficForwardingGRETunnelPrimaryDestVip"
                        },
                        "description": "**` (Optional) The primary destination data center and virtual IP address (VIP) of the GRE tunnel.\n"
                    },
                    "secondaryDestVips": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:TrafficForwarding/TrafficForwardingGRETunnelSecondaryDestVip:TrafficForwardingGRETunnelSecondaryDestVip"
                        },
                        "description": "The secondary destination data center and virtual IP address (VIP) of the GRE tunnel.\n"
                    },
                    "sourceIp": {
                        "type": "string",
                        "description": "The source IP address of the GRE tunnel. This is typically a static IP address in the organization or SD-WAN. This IP address must be provisioned within the Zscaler service using the /staticIP endpoint.\n"
                    },
                    "tunnelId": {
                        "type": "integer",
                        "description": "The ID of the GRE tunnel.\n"
                    },
                    "withinCountry": {
                        "type": "boolean",
                        "description": "Restrict the data center virtual IP addresses (VIPs) only to those within the same country as the source IP address\n"
                    }
                },
                "type": "object"
            }
        },
        "zia:TrafficForwarding/trafficForwardingStaticIP:TrafficForwardingStaticIP": {
            "description": "The **zia_traffic_forwarding_static_ip** resource allows the creation and management of static ip addresses in the Zscaler Internet Access cloud. The resource, can then be associated with other resources such as:\n\n* VPN Credentials of type `IP`\n* Location Management\n* GRE Tunnel\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@zscaler/pulumi-zia\";\n\n// ZIA Traffic Forwarding - Static IP\nconst example = new zia.trafficforwarding.TrafficForwardingStaticIP(\"example\", {\n    comment: \"Example\",\n    geoOverride: true,\n    ipAddress: \"1.1.1.1\",\n    latitude: -36.848461,\n    longitude: 174.763336,\n    routableIp: true,\n});\n```\n```python\nimport pulumi\nimport zscaler_pulumi_zia as zia\n\n# ZIA Traffic Forwarding - Static IP\nexample = zia.traffic_forwarding.TrafficForwardingStaticIP(\"example\",\n    comment=\"Example\",\n    geo_override=True,\n    ip_address=\"1.1.1.1\",\n    latitude=-36.848461,\n    longitude=174.763336,\n    routable_ip=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Zia = zscaler.PulumiPackage.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // ZIA Traffic Forwarding - Static IP\n    var example = new Zia.TrafficForwarding.TrafficForwardingStaticIP(\"example\", new()\n    {\n        Comment = \"Example\",\n        GeoOverride = true,\n        IpAddress = \"1.1.1.1\",\n        Latitude = -36.848461,\n        Longitude = 174.763336,\n        RoutableIp = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia/TrafficForwarding\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := TrafficForwarding.NewTrafficForwardingStaticIP(ctx, \"example\", \u0026TrafficForwarding.TrafficForwardingStaticIPArgs{\n\t\t\tComment:     pulumi.String(\"Example\"),\n\t\t\tGeoOverride: pulumi.Bool(true),\n\t\t\tIpAddress:   pulumi.String(\"1.1.1.1\"),\n\t\t\tLatitude:    -36.848461,\n\t\t\tLongitude:   pulumi.Float64(174.763336),\n\t\t\tRoutableIp:  pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nStatic IP resources can be imported by using `\u003cSTATIC IP ID\u003e` or `\u003cIP ADDRESS\u003e`as the import ID.\n\n```sh\n $ pulumi import zia:TrafficForwarding/trafficForwardingStaticIP:TrafficForwardingStaticIP example \u003cstatic_ip_id\u003e\n```\n\n or\n\n```sh\n $ pulumi import zia:TrafficForwarding/trafficForwardingStaticIP:TrafficForwardingStaticIP example \u003cip_address\u003e\n```\n\n ",
            "properties": {
                "comment": {
                    "type": "string",
                    "description": "Additional information about this static IP address\n"
                },
                "geoOverride": {
                    "type": "boolean",
                    "description": "If not set, geographic coordinates and city are automatically determined from the IP address. Otherwise, the latitude and longitude coordinates must be provided.\n"
                },
                "ipAddress": {
                    "type": "string",
                    "description": "The static IP address\n"
                },
                "lastModifiedBies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zia:TrafficForwarding/TrafficForwardingStaticIPLastModifiedBy:TrafficForwardingStaticIPLastModifiedBy"
                    },
                    "description": "This is an immutable reference to an entity. which mainly consists of id and name\n"
                },
                "latitude": {
                    "type": "number",
                    "description": "Required only if the geoOverride attribute is set. Latitude with 7 digit precision after decimal point, ranges between -90 and 90 degrees.\n"
                },
                "longitude": {
                    "type": "number",
                    "description": "Required only if the geoOverride attribute is set. Longitude with 7 digit precision after decimal point, ranges between -180 and 180 degrees.\n"
                },
                "managedBies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zia:TrafficForwarding/TrafficForwardingStaticIPManagedBy:TrafficForwardingStaticIPManagedBy"
                    },
                    "description": "This is an immutable reference to an entity. which mainly consists of id and name\n"
                },
                "routableIp": {
                    "type": "boolean",
                    "description": "Indicates whether a non-RFC 1918 IP address is publicly routable. This attribute is ignored if there is no ZIA Private Service Edge associated to the organization.\n"
                },
                "staticIpId": {
                    "type": "integer",
                    "description": "The ID of the Static IP.\n"
                }
            },
            "required": [
                "geoOverride",
                "ipAddress",
                "lastModifiedBies",
                "latitude",
                "longitude",
                "managedBies",
                "routableIp",
                "staticIpId"
            ],
            "inputProperties": {
                "comment": {
                    "type": "string",
                    "description": "Additional information about this static IP address\n"
                },
                "geoOverride": {
                    "type": "boolean",
                    "description": "If not set, geographic coordinates and city are automatically determined from the IP address. Otherwise, the latitude and longitude coordinates must be provided.\n"
                },
                "ipAddress": {
                    "type": "string",
                    "description": "The static IP address\n",
                    "willReplaceOnChanges": true
                },
                "lastModifiedBies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zia:TrafficForwarding/TrafficForwardingStaticIPLastModifiedBy:TrafficForwardingStaticIPLastModifiedBy"
                    },
                    "description": "This is an immutable reference to an entity. which mainly consists of id and name\n"
                },
                "latitude": {
                    "type": "number",
                    "description": "Required only if the geoOverride attribute is set. Latitude with 7 digit precision after decimal point, ranges between -90 and 90 degrees.\n"
                },
                "longitude": {
                    "type": "number",
                    "description": "Required only if the geoOverride attribute is set. Longitude with 7 digit precision after decimal point, ranges between -180 and 180 degrees.\n"
                },
                "managedBies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zia:TrafficForwarding/TrafficForwardingStaticIPManagedBy:TrafficForwardingStaticIPManagedBy"
                    },
                    "description": "This is an immutable reference to an entity. which mainly consists of id and name\n"
                },
                "routableIp": {
                    "type": "boolean",
                    "description": "Indicates whether a non-RFC 1918 IP address is publicly routable. This attribute is ignored if there is no ZIA Private Service Edge associated to the organization.\n"
                }
            },
            "requiredInputs": [
                "ipAddress"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering TrafficForwardingStaticIP resources.\n",
                "properties": {
                    "comment": {
                        "type": "string",
                        "description": "Additional information about this static IP address\n"
                    },
                    "geoOverride": {
                        "type": "boolean",
                        "description": "If not set, geographic coordinates and city are automatically determined from the IP address. Otherwise, the latitude and longitude coordinates must be provided.\n"
                    },
                    "ipAddress": {
                        "type": "string",
                        "description": "The static IP address\n",
                        "willReplaceOnChanges": true
                    },
                    "lastModifiedBies": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:TrafficForwarding/TrafficForwardingStaticIPLastModifiedBy:TrafficForwardingStaticIPLastModifiedBy"
                        },
                        "description": "This is an immutable reference to an entity. which mainly consists of id and name\n"
                    },
                    "latitude": {
                        "type": "number",
                        "description": "Required only if the geoOverride attribute is set. Latitude with 7 digit precision after decimal point, ranges between -90 and 90 degrees.\n"
                    },
                    "longitude": {
                        "type": "number",
                        "description": "Required only if the geoOverride attribute is set. Longitude with 7 digit precision after decimal point, ranges between -180 and 180 degrees.\n"
                    },
                    "managedBies": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:TrafficForwarding/TrafficForwardingStaticIPManagedBy:TrafficForwardingStaticIPManagedBy"
                        },
                        "description": "This is an immutable reference to an entity. which mainly consists of id and name\n"
                    },
                    "routableIp": {
                        "type": "boolean",
                        "description": "Indicates whether a non-RFC 1918 IP address is publicly routable. This attribute is ignored if there is no ZIA Private Service Edge associated to the organization.\n"
                    },
                    "staticIpId": {
                        "type": "integer",
                        "description": "The ID of the Static IP.\n"
                    }
                },
                "type": "object"
            }
        },
        "zia:TrafficForwarding/trafficForwardingVPNCredentials:TrafficForwardingVPNCredentials": {
            "description": "The **zia_traffic_forwarding_vpn_credentials** creates and manages VPN credentials that can be associated to locations. VPN is one way to route traffic from customer locations to the cloud. Site-to-site IPSec VPN credentials can be identified by the cloud through one of the following methods:\n\n* Common Name (CN) of IPSec Certificate\n* VPN User FQDN - requires VPN_SITE_TO_SITE subscription\n* VPN IP Address - requires VPN_SITE_TO_SITE subscription\n* Extended Authentication (XAUTH) or hosted mobile UserID - requires VPN_MOBILE subscription\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@zscaler/pulumi-zia\";\n\n// ZIA Traffic Forwarding - VPN Credentials (UFQDN)\nconst example = new zia.trafficforwarding.TrafficForwardingVPNCredentials(\"example\", {\n    comments: \"Example\",\n    fqdn: \"sjc-1-37@acme.com\",\n    preSharedKey: \"newPassword123!\",\n    type: \"UFQDN\",\n});\n```\n```python\nimport pulumi\nimport zscaler_pulumi_zia as zia\n\n# ZIA Traffic Forwarding - VPN Credentials (UFQDN)\nexample = zia.traffic_forwarding.TrafficForwardingVPNCredentials(\"example\",\n    comments=\"Example\",\n    fqdn=\"sjc-1-37@acme.com\",\n    pre_shared_key=\"newPassword123!\",\n    type=\"UFQDN\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Zia = zscaler.PulumiPackage.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // ZIA Traffic Forwarding - VPN Credentials (UFQDN)\n    var example = new Zia.TrafficForwarding.TrafficForwardingVPNCredentials(\"example\", new()\n    {\n        Comments = \"Example\",\n        Fqdn = \"sjc-1-37@acme.com\",\n        PreSharedKey = \"newPassword123!\",\n        Type = \"UFQDN\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia/TrafficForwarding\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := TrafficForwarding.NewTrafficForwardingVPNCredentials(ctx, \"example\", \u0026TrafficForwarding.TrafficForwardingVPNCredentialsArgs{\n\t\t\tComments:     pulumi.String(\"Example\"),\n\t\t\tFqdn:         pulumi.String(\"sjc-1-37@acme.com\"),\n\t\t\tPreSharedKey: pulumi.String(\"newPassword123!\"),\n\t\t\tType:         pulumi.String(\"UFQDN\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zia.TrafficForwarding.TrafficForwardingVPNCredentials;\nimport com.pulumi.zia.TrafficForwarding.TrafficForwardingVPNCredentialsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new TrafficForwardingVPNCredentials(\"example\", TrafficForwardingVPNCredentialsArgs.builder()        \n            .comments(\"Example\")\n            .fqdn(\"sjc-1-37@acme.com\")\n            .preSharedKey(\"newPassword123!\")\n            .type(\"UFQDN\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # ZIA Traffic Forwarding - VPN Credentials (UFQDN)\n  example:\n    type: zia:TrafficForwarding:TrafficForwardingVPNCredentials\n    properties:\n      comments: Example\n      fqdn: sjc-1-37@acme.com\n      preSharedKey: newPassword123!\n      type: UFQDN\n```\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@zscaler/pulumi-zia\";\n\nconst exampleTrafficForwardingStaticIP = new zia.trafficforwarding.TrafficForwardingStaticIP(\"exampleTrafficForwardingStaticIP\", {\n    ipAddress: \"1.1.1.1\",\n    routableIp: true,\n    comment: \"Example\",\n    geoOverride: true,\n    latitude: -36.848461,\n    longitude: 174.763336,\n});\n// ZIA Traffic Forwarding - VPN Credentials (IP)\nconst exampleTrafficForwardingVPNCredentials = new zia.trafficforwarding.TrafficForwardingVPNCredentials(\"exampleTrafficForwardingVPNCredentials\", {\n    type: \"IP\",\n    ipAddress: exampleTrafficForwardingStaticIP.ipAddress,\n    comments: \"Example\",\n    preSharedKey: \"newPassword123!\",\n}, {\n    dependsOn: [exampleTrafficForwardingStaticIP],\n});\n```\n```python\nimport pulumi\nimport zscaler_pulumi_zia as zia\n\nexample_traffic_forwarding_static_ip = zia.traffic_forwarding.TrafficForwardingStaticIP(\"exampleTrafficForwardingStaticIP\",\n    ip_address=\"1.1.1.1\",\n    routable_ip=True,\n    comment=\"Example\",\n    geo_override=True,\n    latitude=-36.848461,\n    longitude=174.763336)\n# ZIA Traffic Forwarding - VPN Credentials (IP)\nexample_traffic_forwarding_vpn_credentials = zia.traffic_forwarding.TrafficForwardingVPNCredentials(\"exampleTrafficForwardingVPNCredentials\",\n    type=\"IP\",\n    ip_address=example_traffic_forwarding_static_ip.ip_address,\n    comments=\"Example\",\n    pre_shared_key=\"newPassword123!\",\n    opts=pulumi.ResourceOptions(depends_on=[example_traffic_forwarding_static_ip]))\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Zia = zscaler.PulumiPackage.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var exampleTrafficForwardingStaticIP = new Zia.TrafficForwarding.TrafficForwardingStaticIP(\"exampleTrafficForwardingStaticIP\", new()\n    {\n        IpAddress = \"1.1.1.1\",\n        RoutableIp = true,\n        Comment = \"Example\",\n        GeoOverride = true,\n        Latitude = -36.848461,\n        Longitude = 174.763336,\n    });\n\n    // ZIA Traffic Forwarding - VPN Credentials (IP)\n    var exampleTrafficForwardingVPNCredentials = new Zia.TrafficForwarding.TrafficForwardingVPNCredentials(\"exampleTrafficForwardingVPNCredentials\", new()\n    {\n        Type = \"IP\",\n        IpAddress = exampleTrafficForwardingStaticIP.IpAddress,\n        Comments = \"Example\",\n        PreSharedKey = \"newPassword123!\",\n    }, new CustomResourceOptions\n    {\n        DependsOn = new[]\n        {\n            exampleTrafficForwardingStaticIP,\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia/TrafficForwarding\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\texampleTrafficForwardingStaticIP, err := TrafficForwarding.NewTrafficForwardingStaticIP(ctx, \"exampleTrafficForwardingStaticIP\", \u0026TrafficForwarding.TrafficForwardingStaticIPArgs{\n\t\t\tIpAddress:   pulumi.String(\"1.1.1.1\"),\n\t\t\tRoutableIp:  pulumi.Bool(true),\n\t\t\tComment:     pulumi.String(\"Example\"),\n\t\t\tGeoOverride: pulumi.Bool(true),\n\t\t\tLatitude:    -36.848461,\n\t\t\tLongitude:   pulumi.Float64(174.763336),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = TrafficForwarding.NewTrafficForwardingVPNCredentials(ctx, \"exampleTrafficForwardingVPNCredentials\", \u0026TrafficForwarding.TrafficForwardingVPNCredentialsArgs{\n\t\t\tType:         pulumi.String(\"IP\"),\n\t\t\tIpAddress:    exampleTrafficForwardingStaticIP.IpAddress,\n\t\t\tComments:     pulumi.String(\"Example\"),\n\t\t\tPreSharedKey: pulumi.String(\"newPassword123!\"),\n\t\t}, pulumi.DependsOn([]pulumi.Resource{\n\t\t\texampleTrafficForwardingStaticIP,\n\t\t}))\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n\n\u003e **NOTE** For VPN Credentials of Type `IP` a static IP resource must be created first.\n{{% /example %}}\n{{% /examples %}}\n\n## Import\n\nStatic IP resources can be imported by using `\u003cSTATIC IP ID\u003e` or `\u003cIP ADDRESS\u003e`as the import ID.\n\n```sh\n $ pulumi import zia:TrafficForwarding/trafficForwardingVPNCredentials:TrafficForwardingVPNCredentials example \u003cstatic_ip_id\u003e\n```\n\n or\n\n```sh\n $ pulumi import zia:TrafficForwarding/trafficForwardingVPNCredentials:TrafficForwardingVPNCredentials example \u003cip_address\u003e\n```\n\n ",
            "properties": {
                "comments": {
                    "type": "string",
                    "description": "Additional information about this VPN credential.\n"
                },
                "fqdn": {
                    "type": "string",
                    "description": "Fully Qualified Domain Name. Applicable only to `UFQDN` or `XAUTH` (or `HOSTED_MOBILE_USERS`) auth type.\n"
                },
                "ipAddress": {
                    "type": "string",
                    "description": "IP Address for the VON credentials. The parameter becomes required if `type = IP`\n"
                },
                "preSharedKey": {
                    "type": "string",
                    "description": "Pre-shared key. This is a required field for UFQDN and IP auth type.\n",
                    "secret": true
                },
                "type": {
                    "type": "string",
                    "description": "VPN authentication type (i.e., how the VPN credential is sent to the server). It is not modifiable after VpnCredential is created. The supported values are: `UFQDN` and `IP`\n"
                },
                "vpnCredentalId": {
                    "type": "integer"
                }
            },
            "required": [
                "vpnCredentalId"
            ],
            "inputProperties": {
                "comments": {
                    "type": "string",
                    "description": "Additional information about this VPN credential.\n"
                },
                "fqdn": {
                    "type": "string",
                    "description": "Fully Qualified Domain Name. Applicable only to `UFQDN` or `XAUTH` (or `HOSTED_MOBILE_USERS`) auth type.\n",
                    "willReplaceOnChanges": true
                },
                "ipAddress": {
                    "type": "string",
                    "description": "IP Address for the VON credentials. The parameter becomes required if `type = IP`\n",
                    "willReplaceOnChanges": true
                },
                "preSharedKey": {
                    "type": "string",
                    "description": "Pre-shared key. This is a required field for UFQDN and IP auth type.\n",
                    "secret": true,
                    "willReplaceOnChanges": true
                },
                "type": {
                    "type": "string",
                    "description": "VPN authentication type (i.e., how the VPN credential is sent to the server). It is not modifiable after VpnCredential is created. The supported values are: `UFQDN` and `IP`\n",
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering TrafficForwardingVPNCredentials resources.\n",
                "properties": {
                    "comments": {
                        "type": "string",
                        "description": "Additional information about this VPN credential.\n"
                    },
                    "fqdn": {
                        "type": "string",
                        "description": "Fully Qualified Domain Name. Applicable only to `UFQDN` or `XAUTH` (or `HOSTED_MOBILE_USERS`) auth type.\n",
                        "willReplaceOnChanges": true
                    },
                    "ipAddress": {
                        "type": "string",
                        "description": "IP Address for the VON credentials. The parameter becomes required if `type = IP`\n",
                        "willReplaceOnChanges": true
                    },
                    "preSharedKey": {
                        "type": "string",
                        "description": "Pre-shared key. This is a required field for UFQDN and IP auth type.\n",
                        "secret": true,
                        "willReplaceOnChanges": true
                    },
                    "type": {
                        "type": "string",
                        "description": "VPN authentication type (i.e., how the VPN credential is sent to the server). It is not modifiable after VpnCredential is created. The supported values are: `UFQDN` and `IP`\n",
                        "willReplaceOnChanges": true
                    },
                    "vpnCredentalId": {
                        "type": "integer",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "zia:URLCategory/uRLCategories:URLCategories": {
            "description": "The **zia_url_categories** resource creates and manages a new custom URL category. If keywords are included within the request, they will be added to the new category.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@zscaler/pulumi-zia\";\n\nconst example = new zia.urlcategory.URLCategories(\"example\", {\n    superCategory: \"USER_DEFINED\",\n    configuredName: \"MCAS Unsanctioned Apps\",\n    description: \"MCAS Unsanctioned Apps\",\n    keywords: [\"microsoft\"],\n    customCategory: true,\n    type: \"URL_CATEGORY\",\n    scopes: [{\n        type: \"LOCATION\",\n        scopeEntities: {\n            ids: [data.zpa_location_management.nyc_site.id],\n        },\n        scopeGroupMemberEntities: {\n            ids: [data.zia_group_management.engineering.id],\n        },\n    }],\n    urls: [\n        \".coupons.com\",\n        \".resource.alaskaair.net\",\n        \".techrepublic.com\",\n        \".dailymotion.com\",\n        \".osiriscomm.com\",\n        \".uefa.com\",\n        \".Logz.io\",\n        \".alexa.com\",\n        \".baidu.com\",\n        \".cnn.com\",\n        \".level3.com\",\n    ],\n});\n```\n```python\nimport pulumi\nimport zscaler_pulumi_zia as zia\n\nexample = zia.url_category.URLCategories(\"example\",\n    super_category=\"USER_DEFINED\",\n    configured_name=\"MCAS Unsanctioned Apps\",\n    description=\"MCAS Unsanctioned Apps\",\n    keywords=[\"microsoft\"],\n    custom_category=True,\n    type=\"URL_CATEGORY\",\n    scopes=[zia.url_category.URLCategoriesScopeArgs(\n        type=\"LOCATION\",\n        scope_entities=zia.url_category.URLCategoriesScopeScopeEntitiesArgs(\n            ids=[data[\"zpa_location_management\"][\"nyc_site\"][\"id\"]],\n        ),\n        scope_group_member_entities=zia.url_category.URLCategoriesScopeScopeGroupMemberEntitiesArgs(\n            ids=[data[\"zia_group_management\"][\"engineering\"][\"id\"]],\n        ),\n    )],\n    urls=[\n        \".coupons.com\",\n        \".resource.alaskaair.net\",\n        \".techrepublic.com\",\n        \".dailymotion.com\",\n        \".osiriscomm.com\",\n        \".uefa.com\",\n        \".Logz.io\",\n        \".alexa.com\",\n        \".baidu.com\",\n        \".cnn.com\",\n        \".level3.com\",\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Zia = zscaler.PulumiPackage.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = new Zia.URLCategory.URLCategories(\"example\", new()\n    {\n        SuperCategory = \"USER_DEFINED\",\n        ConfiguredName = \"MCAS Unsanctioned Apps\",\n        Description = \"MCAS Unsanctioned Apps\",\n        Keywords = new[]\n        {\n            \"microsoft\",\n        },\n        CustomCategory = true,\n        Type = \"URL_CATEGORY\",\n        Scopes = new[]\n        {\n            new Zia.URLCategory.Inputs.URLCategoriesScopeArgs\n            {\n                Type = \"LOCATION\",\n                ScopeEntities = new Zia.URLCategory.Inputs.URLCategoriesScopeScopeEntitiesArgs\n                {\n                    Ids = new[]\n                    {\n                        data.Zpa_location_management.Nyc_site.Id,\n                    },\n                },\n                ScopeGroupMemberEntities = new Zia.URLCategory.Inputs.URLCategoriesScopeScopeGroupMemberEntitiesArgs\n                {\n                    Ids = new[]\n                    {\n                        data.Zia_group_management.Engineering.Id,\n                    },\n                },\n            },\n        },\n        Urls = new[]\n        {\n            \".coupons.com\",\n            \".resource.alaskaair.net\",\n            \".techrepublic.com\",\n            \".dailymotion.com\",\n            \".osiriscomm.com\",\n            \".uefa.com\",\n            \".Logz.io\",\n            \".alexa.com\",\n            \".baidu.com\",\n            \".cnn.com\",\n            \".level3.com\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia/URLCategory\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := URLCategory.NewURLCategories(ctx, \"example\", \u0026URLCategory.URLCategoriesArgs{\n\t\t\tSuperCategory:  pulumi.String(\"USER_DEFINED\"),\n\t\t\tConfiguredName: pulumi.String(\"MCAS Unsanctioned Apps\"),\n\t\t\tDescription:    pulumi.String(\"MCAS Unsanctioned Apps\"),\n\t\t\tKeywords: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"microsoft\"),\n\t\t\t},\n\t\t\tCustomCategory: pulumi.Bool(true),\n\t\t\tType:           pulumi.String(\"URL_CATEGORY\"),\n\t\t\tScopes: urlcategory.URLCategoriesScopeArray{\n\t\t\t\t\u0026urlcategory.URLCategoriesScopeArgs{\n\t\t\t\t\tType: pulumi.String(\"LOCATION\"),\n\t\t\t\t\tScopeEntities: \u0026urlcategory.URLCategoriesScopeScopeEntitiesArgs{\n\t\t\t\t\t\tIds: pulumi.IntArray{\n\t\t\t\t\t\t\tdata.Zpa_location_management.Nyc_site.Id,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tScopeGroupMemberEntities: \u0026urlcategory.URLCategoriesScopeScopeGroupMemberEntitiesArgs{\n\t\t\t\t\t\tIds: pulumi.IntArray{\n\t\t\t\t\t\t\tdata.Zia_group_management.Engineering.Id,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t\tUrls: pulumi.StringArray{\n\t\t\t\tpulumi.String(\".coupons.com\"),\n\t\t\t\tpulumi.String(\".resource.alaskaair.net\"),\n\t\t\t\tpulumi.String(\".techrepublic.com\"),\n\t\t\t\tpulumi.String(\".dailymotion.com\"),\n\t\t\t\tpulumi.String(\".osiriscomm.com\"),\n\t\t\t\tpulumi.String(\".uefa.com\"),\n\t\t\t\tpulumi.String(\".Logz.io\"),\n\t\t\t\tpulumi.String(\".alexa.com\"),\n\t\t\t\tpulumi.String(\".baidu.com\"),\n\t\t\t\tpulumi.String(\".cnn.com\"),\n\t\t\t\tpulumi.String(\".level3.com\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zia.URLCategory.URLCategories;\nimport com.pulumi.zia.URLCategory.URLCategoriesArgs;\nimport com.pulumi.zia.URLCategory.inputs.URLCategoriesScopeArgs;\nimport com.pulumi.zia.URLCategory.inputs.URLCategoriesScopeScopeEntitiesArgs;\nimport com.pulumi.zia.URLCategory.inputs.URLCategoriesScopeScopeGroupMemberEntitiesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var example = new URLCategories(\"example\", URLCategoriesArgs.builder()        \n            .superCategory(\"USER_DEFINED\")\n            .configuredName(\"MCAS Unsanctioned Apps\")\n            .description(\"MCAS Unsanctioned Apps\")\n            .keywords(\"microsoft\")\n            .customCategory(true)\n            .type(\"URL_CATEGORY\")\n            .scopes(URLCategoriesScopeArgs.builder()\n                .type(\"LOCATION\")\n                .scopeEntities(URLCategoriesScopeScopeEntitiesArgs.builder()\n                    .ids(data.zpa_location_management().nyc_site().id())\n                    .build())\n                .scopeGroupMemberEntities(URLCategoriesScopeScopeGroupMemberEntitiesArgs.builder()\n                    .ids(data.zia_group_management().engineering().id())\n                    .build())\n                .build())\n            .urls(            \n                \".coupons.com\",\n                \".resource.alaskaair.net\",\n                \".techrepublic.com\",\n                \".dailymotion.com\",\n                \".osiriscomm.com\",\n                \".uefa.com\",\n                \".Logz.io\",\n                \".alexa.com\",\n                \".baidu.com\",\n                \".cnn.com\",\n                \".level3.com\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  example:\n    type: zia:URLCategory:URLCategories\n    properties:\n      superCategory: USER_DEFINED\n      configuredName: MCAS Unsanctioned Apps\n      description: MCAS Unsanctioned Apps\n      keywords:\n        - microsoft\n      customCategory: true\n      type: URL_CATEGORY\n      scopes:\n        - type: LOCATION\n          scopeEntities:\n            ids:\n              - ${data.zpa_location_management.nyc_site.id}\n          scopeGroupMemberEntities:\n            ids:\n              - ${data.zia_group_management.engineering.id}\n      urls:\n        - .coupons.com\n        - .resource.alaskaair.net\n        - .techrepublic.com\n        - .dailymotion.com\n        - .osiriscomm.com\n        - .uefa.com\n        - .Logz.io\n        - .alexa.com\n        - .baidu.com\n        - .cnn.com\n        - .level3.com\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "configuredName": {
                    "type": "string",
                    "description": "Name of the URL category. This is only required for custom URL categories.\n"
                },
                "customCategory": {
                    "type": "boolean",
                    "description": "Set to true for custom URL category. Up to 48 custom URL categories can be added per organization.\n"
                },
                "customIpRangesCount": {
                    "type": "integer",
                    "description": "The number of custom IP address ranges associated to the URL category.\n"
                },
                "customUrlsCount": {
                    "type": "integer",
                    "description": "The number of custom URLs associated to the URL category.\n"
                },
                "dbCategorizedUrls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "URLs added to a custom URL category are also retained under the original parent URL category (i.e., the predefined category the URL previously belonged to).\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the category.\n"
                },
                "editable": {
                    "type": "boolean",
                    "description": "Value is set to false for custom URL category when due to scope user does not have edit permission\n"
                },
                "ipRanges": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Custom IP address ranges associated to a URL category. Up to 2000 custom IP address ranges and retaining parent custom IP address ranges can be added, per organization, across all categories.\n"
                },
                "ipRangesRetainingParentCategories": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The retaining parent custom IP address ranges associated to a URL category. Up to 2000 custom IP ranges and retaining parent custom IP address ranges can be added, per organization, across all categories.\n"
                },
                "ipRangesRetainingParentCategoryCount": {
                    "type": "integer",
                    "description": "The number of custom IP address ranges associated to the URL category, that also need to be retained under the original parent category.\n"
                },
                "keywords": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Custom keywords associated to a URL category. Up to 2048 custom keywords can be added per organization across all categories (including bandwidth classes).\n"
                },
                "keywordsRetainingParentCategories": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zia:URLCategory/URLCategoriesScope:URLCategoriesScope"
                    },
                    "description": "Scope of the custom categories.\n"
                },
                "superCategory": {
                    "type": "string",
                    "description": "Super Category of the URL category. This field is required when creating custom URL categories.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of the custom categories. `URL_CATEGORY`, `TLD_CATEGORY`, `ALL`\n"
                },
                "urlCategoryId": {
                    "type": "string"
                },
                "urlKeywordCounts": {
                    "$ref": "#/types/zia:URLCategory/URLCategoriesUrlKeywordCounts:URLCategoriesUrlKeywordCounts",
                    "description": "URL and keyword counts for the category.\n"
                },
                "urls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Custom URLs to add to a URL category. Up to 25,000 custom URLs can be added per organization across all categories (including bandwidth classes).\n"
                },
                "urlsRetainingParentCategoryCount": {
                    "type": "integer",
                    "description": "The number of custom IP address ranges associated to the URL category, that also need to be retained under the original parent category.\n"
                }
            },
            "required": [
                "customIpRangesCount",
                "customUrlsCount",
                "ipRangesRetainingParentCategoryCount",
                "urlCategoryId",
                "urlKeywordCounts",
                "urlsRetainingParentCategoryCount"
            ],
            "inputProperties": {
                "configuredName": {
                    "type": "string",
                    "description": "Name of the URL category. This is only required for custom URL categories.\n"
                },
                "customCategory": {
                    "type": "boolean",
                    "description": "Set to true for custom URL category. Up to 48 custom URL categories can be added per organization.\n"
                },
                "customIpRangesCount": {
                    "type": "integer",
                    "description": "The number of custom IP address ranges associated to the URL category.\n"
                },
                "customUrlsCount": {
                    "type": "integer",
                    "description": "The number of custom URLs associated to the URL category.\n"
                },
                "dbCategorizedUrls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "URLs added to a custom URL category are also retained under the original parent URL category (i.e., the predefined category the URL previously belonged to).\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the category.\n"
                },
                "editable": {
                    "type": "boolean",
                    "description": "Value is set to false for custom URL category when due to scope user does not have edit permission\n"
                },
                "ipRanges": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Custom IP address ranges associated to a URL category. Up to 2000 custom IP address ranges and retaining parent custom IP address ranges can be added, per organization, across all categories.\n"
                },
                "ipRangesRetainingParentCategories": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The retaining parent custom IP address ranges associated to a URL category. Up to 2000 custom IP ranges and retaining parent custom IP address ranges can be added, per organization, across all categories.\n"
                },
                "ipRangesRetainingParentCategoryCount": {
                    "type": "integer",
                    "description": "The number of custom IP address ranges associated to the URL category, that also need to be retained under the original parent category.\n"
                },
                "keywords": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Custom keywords associated to a URL category. Up to 2048 custom keywords can be added per organization across all categories (including bandwidth classes).\n"
                },
                "keywordsRetainingParentCategories": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "scopes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zia:URLCategory/URLCategoriesScope:URLCategoriesScope"
                    },
                    "description": "Scope of the custom categories.\n"
                },
                "superCategory": {
                    "type": "string",
                    "description": "Super Category of the URL category. This field is required when creating custom URL categories.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Type of the custom categories. `URL_CATEGORY`, `TLD_CATEGORY`, `ALL`\n"
                },
                "urlKeywordCounts": {
                    "$ref": "#/types/zia:URLCategory/URLCategoriesUrlKeywordCounts:URLCategoriesUrlKeywordCounts",
                    "description": "URL and keyword counts for the category.\n"
                },
                "urls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Custom URLs to add to a URL category. Up to 25,000 custom URLs can be added per organization across all categories (including bandwidth classes).\n"
                },
                "urlsRetainingParentCategoryCount": {
                    "type": "integer",
                    "description": "The number of custom IP address ranges associated to the URL category, that also need to be retained under the original parent category.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering URLCategories resources.\n",
                "properties": {
                    "configuredName": {
                        "type": "string",
                        "description": "Name of the URL category. This is only required for custom URL categories.\n"
                    },
                    "customCategory": {
                        "type": "boolean",
                        "description": "Set to true for custom URL category. Up to 48 custom URL categories can be added per organization.\n"
                    },
                    "customIpRangesCount": {
                        "type": "integer",
                        "description": "The number of custom IP address ranges associated to the URL category.\n"
                    },
                    "customUrlsCount": {
                        "type": "integer",
                        "description": "The number of custom URLs associated to the URL category.\n"
                    },
                    "dbCategorizedUrls": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "URLs added to a custom URL category are also retained under the original parent URL category (i.e., the predefined category the URL previously belonged to).\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the category.\n"
                    },
                    "editable": {
                        "type": "boolean",
                        "description": "Value is set to false for custom URL category when due to scope user does not have edit permission\n"
                    },
                    "ipRanges": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Custom IP address ranges associated to a URL category. Up to 2000 custom IP address ranges and retaining parent custom IP address ranges can be added, per organization, across all categories.\n"
                    },
                    "ipRangesRetainingParentCategories": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The retaining parent custom IP address ranges associated to a URL category. Up to 2000 custom IP ranges and retaining parent custom IP address ranges can be added, per organization, across all categories.\n"
                    },
                    "ipRangesRetainingParentCategoryCount": {
                        "type": "integer",
                        "description": "The number of custom IP address ranges associated to the URL category, that also need to be retained under the original parent category.\n"
                    },
                    "keywords": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Custom keywords associated to a URL category. Up to 2048 custom keywords can be added per organization across all categories (including bandwidth classes).\n"
                    },
                    "keywordsRetainingParentCategories": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "scopes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:URLCategory/URLCategoriesScope:URLCategoriesScope"
                        },
                        "description": "Scope of the custom categories.\n"
                    },
                    "superCategory": {
                        "type": "string",
                        "description": "Super Category of the URL category. This field is required when creating custom URL categories.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Type of the custom categories. `URL_CATEGORY`, `TLD_CATEGORY`, `ALL`\n"
                    },
                    "urlCategoryId": {
                        "type": "string"
                    },
                    "urlKeywordCounts": {
                        "$ref": "#/types/zia:URLCategory/URLCategoriesUrlKeywordCounts:URLCategoriesUrlKeywordCounts",
                        "description": "URL and keyword counts for the category.\n"
                    },
                    "urls": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Custom URLs to add to a URL category. Up to 25,000 custom URLs can be added per organization across all categories (including bandwidth classes).\n"
                    },
                    "urlsRetainingParentCategoryCount": {
                        "type": "integer",
                        "description": "The number of custom IP address ranges associated to the URL category, that also need to be retained under the original parent category.\n"
                    }
                },
                "type": "object"
            }
        },
        "zia:URLFiltering/uRLFilteringRules:URLFilteringRules": {
            "description": "The **zia_url_filtering_rules** resource creates and manages a URL filtering rules within the Zscaler Internet Access cloud.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@zscaler/pulumi-zia\";\n\n// URL filtering rules\nconst blockStreaming = new zia.urlfiltering.URLFilteringRules(\"blockStreaming\", {\n    action: \"BLOCK\",\n    description: \"Block Video Streaming.\",\n    deviceTrustLevels: [\n        \"UNKNOWN_DEVICETRUSTLEVEL\",\n        \"LOW_TRUST\",\n        \"MEDIUM_TRUST\",\n        \"HIGH_TRUST\",\n    ],\n    order: 2,\n    protocols: [\"ANY_RULE\"],\n    requestMethods: [\n        \"CONNECT\",\n        \"DELETE\",\n        \"GET\",\n        \"HEAD\",\n        \"OPTIONS\",\n        \"OTHER\",\n        \"POST\",\n        \"PUT\",\n        \"TRACE\",\n    ],\n    state: \"ENABLED\",\n    urlCategories: [\"ANY\"],\n});\n```\n```python\nimport pulumi\nimport zscaler_pulumi_zia as zia\n\n# URL filtering rules\nblock_streaming = zia.url_filtering.URLFilteringRules(\"blockStreaming\",\n    action=\"BLOCK\",\n    description=\"Block Video Streaming.\",\n    device_trust_levels=[\n        \"UNKNOWN_DEVICETRUSTLEVEL\",\n        \"LOW_TRUST\",\n        \"MEDIUM_TRUST\",\n        \"HIGH_TRUST\",\n    ],\n    order=2,\n    protocols=[\"ANY_RULE\"],\n    request_methods=[\n        \"CONNECT\",\n        \"DELETE\",\n        \"GET\",\n        \"HEAD\",\n        \"OPTIONS\",\n        \"OTHER\",\n        \"POST\",\n        \"PUT\",\n        \"TRACE\",\n    ],\n    state=\"ENABLED\",\n    url_categories=[\"ANY\"])\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Zia = zscaler.PulumiPackage.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    // URL filtering rules\n    var blockStreaming = new Zia.URLFiltering.URLFilteringRules(\"blockStreaming\", new()\n    {\n        Action = \"BLOCK\",\n        Description = \"Block Video Streaming.\",\n        DeviceTrustLevels = new[]\n        {\n            \"UNKNOWN_DEVICETRUSTLEVEL\",\n            \"LOW_TRUST\",\n            \"MEDIUM_TRUST\",\n            \"HIGH_TRUST\",\n        },\n        Order = 2,\n        Protocols = new[]\n        {\n            \"ANY_RULE\",\n        },\n        RequestMethods = new[]\n        {\n            \"CONNECT\",\n            \"DELETE\",\n            \"GET\",\n            \"HEAD\",\n            \"OPTIONS\",\n            \"OTHER\",\n            \"POST\",\n            \"PUT\",\n            \"TRACE\",\n        },\n        State = \"ENABLED\",\n        UrlCategories = new[]\n        {\n            \"ANY\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia/URLFiltering\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := URLFiltering.NewURLFilteringRules(ctx, \"blockStreaming\", \u0026URLFiltering.URLFilteringRulesArgs{\n\t\t\tAction:      pulumi.String(\"BLOCK\"),\n\t\t\tDescription: pulumi.String(\"Block Video Streaming.\"),\n\t\t\tDeviceTrustLevels: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"UNKNOWN_DEVICETRUSTLEVEL\"),\n\t\t\t\tpulumi.String(\"LOW_TRUST\"),\n\t\t\t\tpulumi.String(\"MEDIUM_TRUST\"),\n\t\t\t\tpulumi.String(\"HIGH_TRUST\"),\n\t\t\t},\n\t\t\tOrder: pulumi.Int(2),\n\t\t\tProtocols: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"ANY_RULE\"),\n\t\t\t},\n\t\t\tRequestMethods: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"CONNECT\"),\n\t\t\t\tpulumi.String(\"DELETE\"),\n\t\t\t\tpulumi.String(\"GET\"),\n\t\t\t\tpulumi.String(\"HEAD\"),\n\t\t\t\tpulumi.String(\"OPTIONS\"),\n\t\t\t\tpulumi.String(\"OTHER\"),\n\t\t\t\tpulumi.String(\"POST\"),\n\t\t\t\tpulumi.String(\"PUT\"),\n\t\t\t\tpulumi.String(\"TRACE\"),\n\t\t\t},\n\t\t\tState: pulumi.String(\"ENABLED\"),\n\t\t\tUrlCategories: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"ANY\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zia.URLFiltering.URLFilteringRules;\nimport com.pulumi.zia.URLFiltering.URLFilteringRulesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var blockStreaming = new URLFilteringRules(\"blockStreaming\", URLFilteringRulesArgs.builder()        \n            .action(\"BLOCK\")\n            .description(\"Block Video Streaming.\")\n            .deviceTrustLevels(            \n                \"UNKNOWN_DEVICETRUSTLEVEL\",\n                \"LOW_TRUST\",\n                \"MEDIUM_TRUST\",\n                \"HIGH_TRUST\")\n            .order(2)\n            .protocols(\"ANY_RULE\")\n            .requestMethods(            \n                \"CONNECT\",\n                \"DELETE\",\n                \"GET\",\n                \"HEAD\",\n                \"OPTIONS\",\n                \"OTHER\",\n                \"POST\",\n                \"PUT\",\n                \"TRACE\")\n            .state(\"ENABLED\")\n            .urlCategories(\"ANY\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # URL filtering rules\n  blockStreaming:\n    type: zia:URLFiltering:URLFilteringRules\n    properties:\n      action: BLOCK\n      description: Block Video Streaming.\n      deviceTrustLevels:\n        - UNKNOWN_DEVICETRUSTLEVEL\n        - LOW_TRUST\n        - MEDIUM_TRUST\n        - HIGH_TRUST\n      order: 2\n      protocols:\n        - ANY_RULE\n      requestMethods:\n        - CONNECT\n        - DELETE\n        - GET\n        - HEAD\n        - OPTIONS\n        - OTHER\n        - POST\n        - PUT\n        - TRACE\n      state: ENABLED\n      urlCategories:\n        - ANY\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "action": {
                    "type": "string",
                    "description": "Action taken when traffic matches rule criteria. Supported values: `ANY`, `NONE`, `BLOCK`, `CAUTION`, `ALLOW`, `ICAP_RESPONSE`\n"
                },
                "blockOverride": {
                    "type": "boolean",
                    "description": "When set to true, a `BLOCK` action triggered by the rule could be overridden. If true and both overrideGroup and overrideUsers are not set, the `BLOCK` triggered by this rule could be overridden for any users. If block)Override is not set, `BLOCK` action cannot be overridden.\n"
                },
                "ciparule": {
                    "type": "boolean",
                    "description": "If set to true, the CIPA Compliance rule is enabled\n"
                },
                "departments": {
                    "$ref": "#/types/zia:URLFiltering/URLFilteringRulesDepartments:URLFilteringRulesDepartments",
                    "description": "The departments to which the Firewall Filtering policy rule applies\n"
                },
                "description": {
                    "type": "string",
                    "description": "Additional information about the rule\n"
                },
                "deviceGroups": {
                    "$ref": "#/types/zia:URLFiltering/URLFilteringRulesDeviceGroups:URLFilteringRulesDeviceGroups",
                    "description": "list of device groups\n"
                },
                "deviceTrustLevels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of device trust levels for which the rule must be applied. This field is applicable for devices that are managed using Zscaler Client Connector. The trust levels are assigned to the devices based on your posture configurations in the Zscaler Client Connector Portal. If no value is set, this field is ignored during the policy evaluation. Supported values: `ANY`, `UNKNOWN_DEVICETRUSTLEVEL`, `LOW_TRUST`, `MEDIUM_TRUST`, `HIGH_TRUST`\n"
                },
                "devices": {
                    "$ref": "#/types/zia:URLFiltering/URLFilteringRulesDevices:URLFilteringRulesDevices",
                    "description": "list of devices\n"
                },
                "endUserNotificationUrl": {
                    "type": "string",
                    "description": "URL of end user notification page to be displayed when the rule is matched. Not applicable if either 'overrideUsers' or 'overrideGroups' is specified.\n"
                },
                "enforceTimeValidity": {
                    "type": "boolean",
                    "description": "Enforce a set a validity time period for the URL Filtering rule.\n"
                },
                "groups": {
                    "$ref": "#/types/zia:URLFiltering/URLFilteringRulesGroups:URLFilteringRulesGroups",
                    "description": "The groups to which the Firewall Filtering policy rule applies\n"
                },
                "labels": {
                    "$ref": "#/types/zia:URLFiltering/URLFilteringRulesLabels:URLFilteringRulesLabels",
                    "description": "list of labels\n"
                },
                "lastModifiedBies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zia:URLFiltering/URLFilteringRulesLastModifiedBy:URLFilteringRulesLastModifiedBy"
                    },
                    "description": "Who modified the rule last\n"
                },
                "lastModifiedTime": {
                    "type": "integer",
                    "description": "When the rule was last modified\n"
                },
                "locationGroups": {
                    "$ref": "#/types/zia:URLFiltering/URLFilteringRulesLocationGroups:URLFilteringRulesLocationGroups",
                    "description": "The location groups to which the Firewall Filtering policy rule applies\n"
                },
                "locations": {
                    "$ref": "#/types/zia:URLFiltering/URLFilteringRulesLocations:URLFilteringRulesLocations",
                    "description": "The locations to which the Firewall Filtering policy rule applies\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Firewall Filtering policy rule\n"
                },
                "order": {
                    "type": "integer",
                    "description": "Order of execution of rule with respect to other URL Filtering rules\n"
                },
                "overrideGroups": {
                    "$ref": "#/types/zia:URLFiltering/URLFilteringRulesOverrideGroups:URLFilteringRulesOverrideGroups",
                    "description": "Name-ID pairs of users for which this rule can be overridden. Applicable only if blockOverride is set to `true`, action is `BLOCK` and overrideGroups is not set.If this overrideUsers is not set, `BLOCK` action can be overridden for any group.\n"
                },
                "overrideUsers": {
                    "$ref": "#/types/zia:URLFiltering/URLFilteringRulesOverrideUsers:URLFilteringRulesOverrideUsers",
                    "description": "Name-ID pairs of users for which this rule can be overridden. Applicable only if blockOverride is set to `true`, action is `BLOCK` and overrideGroups is not set.If this overrideUsers is not set, `BLOCK` action can be overridden for any user.\n"
                },
                "protocols": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Protocol criteria. Supported values: `SMRULEF_ZPA_BROKERS_RULE`, `ANY_RULE`, `TCP_RULE`, `UDP_RULE`, `DOHTTPS_RULE`, `TUNNELSSL_RULE`, `HTTP_PROXY`, `FOHTTP_RULE`, `FTP_RULE`, `HTTPS_RULE`, `HTTP_RULE`, `SSL_RULE`, `TUNNEL_RULE`.\n"
                },
                "rank": {
                    "type": "integer",
                    "description": "Admin rank of the admin who creates this rule\n"
                },
                "requestMethods": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Request method for which the rule must be applied. If not set, rule will be applied to all methods\n"
                },
                "ruleId": {
                    "type": "integer",
                    "description": "URL Filtering Rule ID\n"
                },
                "sizeQuota": {
                    "type": "integer",
                    "description": "Size quota in KB beyond which the URL Filtering rule is applied. If not set, no quota is enforced. If a policy rule action is set to `BLOCK`, this field is not applicable.\n"
                },
                "state": {
                    "type": "string",
                    "description": "Rule State\n"
                },
                "timeQuota": {
                    "type": "integer",
                    "description": "Time quota in minutes, after which the URL Filtering rule is applied. If not set, no quota is enforced. If a policy rule action is set to `BLOCK`, this field is not applicable.\n"
                },
                "timeWindows": {
                    "$ref": "#/types/zia:URLFiltering/URLFilteringRulesTimeWindows:URLFilteringRulesTimeWindows",
                    "description": "The time interval in which the Firewall Filtering policy rule applies\n"
                },
                "urlCategories": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of URL categories for which rule must be applied\n"
                },
                "userAgentTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "users": {
                    "$ref": "#/types/zia:URLFiltering/URLFilteringRulesUsers:URLFilteringRulesUsers",
                    "description": "The users to which the Firewall Filtering policy rule applies\n"
                },
                "validityEndTime": {
                    "type": "integer",
                    "description": "If `enforceTimeValidity` is set to true, the URL Filtering rule will cease to be valid on this end date and time.\n"
                },
                "validityStartTime": {
                    "type": "integer",
                    "description": "If enforceTimeValidity is set to true, the URL Filtering rule will be valid starting on this date and time.\n"
                },
                "validityTimeZoneId": {
                    "type": "string",
                    "description": "If `enforceTimeValidity` is set to true, the URL Filtering rule date and time will be valid based on this time zone ID.\n"
                }
            },
            "required": [
                "blockOverride",
                "ciparule",
                "departments",
                "deviceGroups",
                "devices",
                "enforceTimeValidity",
                "groups",
                "labels",
                "lastModifiedBies",
                "locationGroups",
                "locations",
                "name",
                "order",
                "overrideGroups",
                "overrideUsers",
                "protocols",
                "ruleId",
                "timeWindows",
                "users"
            ],
            "inputProperties": {
                "action": {
                    "type": "string",
                    "description": "Action taken when traffic matches rule criteria. Supported values: `ANY`, `NONE`, `BLOCK`, `CAUTION`, `ALLOW`, `ICAP_RESPONSE`\n"
                },
                "blockOverride": {
                    "type": "boolean",
                    "description": "When set to true, a `BLOCK` action triggered by the rule could be overridden. If true and both overrideGroup and overrideUsers are not set, the `BLOCK` triggered by this rule could be overridden for any users. If block)Override is not set, `BLOCK` action cannot be overridden.\n"
                },
                "ciparule": {
                    "type": "boolean",
                    "description": "If set to true, the CIPA Compliance rule is enabled\n"
                },
                "departments": {
                    "$ref": "#/types/zia:URLFiltering/URLFilteringRulesDepartments:URLFilteringRulesDepartments",
                    "description": "The departments to which the Firewall Filtering policy rule applies\n"
                },
                "description": {
                    "type": "string",
                    "description": "Additional information about the rule\n"
                },
                "deviceGroups": {
                    "$ref": "#/types/zia:URLFiltering/URLFilteringRulesDeviceGroups:URLFilteringRulesDeviceGroups",
                    "description": "list of device groups\n"
                },
                "deviceTrustLevels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of device trust levels for which the rule must be applied. This field is applicable for devices that are managed using Zscaler Client Connector. The trust levels are assigned to the devices based on your posture configurations in the Zscaler Client Connector Portal. If no value is set, this field is ignored during the policy evaluation. Supported values: `ANY`, `UNKNOWN_DEVICETRUSTLEVEL`, `LOW_TRUST`, `MEDIUM_TRUST`, `HIGH_TRUST`\n",
                    "willReplaceOnChanges": true
                },
                "devices": {
                    "$ref": "#/types/zia:URLFiltering/URLFilteringRulesDevices:URLFilteringRulesDevices",
                    "description": "list of devices\n"
                },
                "endUserNotificationUrl": {
                    "type": "string",
                    "description": "URL of end user notification page to be displayed when the rule is matched. Not applicable if either 'overrideUsers' or 'overrideGroups' is specified.\n"
                },
                "enforceTimeValidity": {
                    "type": "boolean",
                    "description": "Enforce a set a validity time period for the URL Filtering rule.\n"
                },
                "groups": {
                    "$ref": "#/types/zia:URLFiltering/URLFilteringRulesGroups:URLFilteringRulesGroups",
                    "description": "The groups to which the Firewall Filtering policy rule applies\n"
                },
                "labels": {
                    "$ref": "#/types/zia:URLFiltering/URLFilteringRulesLabels:URLFilteringRulesLabels",
                    "description": "list of labels\n"
                },
                "lastModifiedBies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/zia:URLFiltering/URLFilteringRulesLastModifiedBy:URLFilteringRulesLastModifiedBy"
                    },
                    "description": "Who modified the rule last\n"
                },
                "lastModifiedTime": {
                    "type": "integer",
                    "description": "When the rule was last modified\n"
                },
                "locationGroups": {
                    "$ref": "#/types/zia:URLFiltering/URLFilteringRulesLocationGroups:URLFilteringRulesLocationGroups",
                    "description": "The location groups to which the Firewall Filtering policy rule applies\n"
                },
                "locations": {
                    "$ref": "#/types/zia:URLFiltering/URLFilteringRulesLocations:URLFilteringRulesLocations",
                    "description": "The locations to which the Firewall Filtering policy rule applies\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the Firewall Filtering policy rule\n"
                },
                "order": {
                    "type": "integer",
                    "description": "Order of execution of rule with respect to other URL Filtering rules\n"
                },
                "overrideGroups": {
                    "$ref": "#/types/zia:URLFiltering/URLFilteringRulesOverrideGroups:URLFilteringRulesOverrideGroups",
                    "description": "Name-ID pairs of users for which this rule can be overridden. Applicable only if blockOverride is set to `true`, action is `BLOCK` and overrideGroups is not set.If this overrideUsers is not set, `BLOCK` action can be overridden for any group.\n"
                },
                "overrideUsers": {
                    "$ref": "#/types/zia:URLFiltering/URLFilteringRulesOverrideUsers:URLFilteringRulesOverrideUsers",
                    "description": "Name-ID pairs of users for which this rule can be overridden. Applicable only if blockOverride is set to `true`, action is `BLOCK` and overrideGroups is not set.If this overrideUsers is not set, `BLOCK` action can be overridden for any user.\n"
                },
                "protocols": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Protocol criteria. Supported values: `SMRULEF_ZPA_BROKERS_RULE`, `ANY_RULE`, `TCP_RULE`, `UDP_RULE`, `DOHTTPS_RULE`, `TUNNELSSL_RULE`, `HTTP_PROXY`, `FOHTTP_RULE`, `FTP_RULE`, `HTTPS_RULE`, `HTTP_RULE`, `SSL_RULE`, `TUNNEL_RULE`.\n"
                },
                "rank": {
                    "type": "integer",
                    "description": "Admin rank of the admin who creates this rule\n"
                },
                "requestMethods": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Request method for which the rule must be applied. If not set, rule will be applied to all methods\n"
                },
                "sizeQuota": {
                    "type": "integer",
                    "description": "Size quota in KB beyond which the URL Filtering rule is applied. If not set, no quota is enforced. If a policy rule action is set to `BLOCK`, this field is not applicable.\n"
                },
                "state": {
                    "type": "string",
                    "description": "Rule State\n"
                },
                "timeQuota": {
                    "type": "integer",
                    "description": "Time quota in minutes, after which the URL Filtering rule is applied. If not set, no quota is enforced. If a policy rule action is set to `BLOCK`, this field is not applicable.\n"
                },
                "timeWindows": {
                    "$ref": "#/types/zia:URLFiltering/URLFilteringRulesTimeWindows:URLFilteringRulesTimeWindows",
                    "description": "The time interval in which the Firewall Filtering policy rule applies\n"
                },
                "urlCategories": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "List of URL categories for which rule must be applied\n"
                },
                "userAgentTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "users": {
                    "$ref": "#/types/zia:URLFiltering/URLFilteringRulesUsers:URLFilteringRulesUsers",
                    "description": "The users to which the Firewall Filtering policy rule applies\n"
                },
                "validityEndTime": {
                    "type": "integer",
                    "description": "If `enforceTimeValidity` is set to true, the URL Filtering rule will cease to be valid on this end date and time.\n"
                },
                "validityStartTime": {
                    "type": "integer",
                    "description": "If enforceTimeValidity is set to true, the URL Filtering rule will be valid starting on this date and time.\n"
                },
                "validityTimeZoneId": {
                    "type": "string",
                    "description": "If `enforceTimeValidity` is set to true, the URL Filtering rule date and time will be valid based on this time zone ID.\n"
                }
            },
            "requiredInputs": [
                "order",
                "protocols"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering URLFilteringRules resources.\n",
                "properties": {
                    "action": {
                        "type": "string",
                        "description": "Action taken when traffic matches rule criteria. Supported values: `ANY`, `NONE`, `BLOCK`, `CAUTION`, `ALLOW`, `ICAP_RESPONSE`\n"
                    },
                    "blockOverride": {
                        "type": "boolean",
                        "description": "When set to true, a `BLOCK` action triggered by the rule could be overridden. If true and both overrideGroup and overrideUsers are not set, the `BLOCK` triggered by this rule could be overridden for any users. If block)Override is not set, `BLOCK` action cannot be overridden.\n"
                    },
                    "ciparule": {
                        "type": "boolean",
                        "description": "If set to true, the CIPA Compliance rule is enabled\n"
                    },
                    "departments": {
                        "$ref": "#/types/zia:URLFiltering/URLFilteringRulesDepartments:URLFilteringRulesDepartments",
                        "description": "The departments to which the Firewall Filtering policy rule applies\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Additional information about the rule\n"
                    },
                    "deviceGroups": {
                        "$ref": "#/types/zia:URLFiltering/URLFilteringRulesDeviceGroups:URLFilteringRulesDeviceGroups",
                        "description": "list of device groups\n"
                    },
                    "deviceTrustLevels": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of device trust levels for which the rule must be applied. This field is applicable for devices that are managed using Zscaler Client Connector. The trust levels are assigned to the devices based on your posture configurations in the Zscaler Client Connector Portal. If no value is set, this field is ignored during the policy evaluation. Supported values: `ANY`, `UNKNOWN_DEVICETRUSTLEVEL`, `LOW_TRUST`, `MEDIUM_TRUST`, `HIGH_TRUST`\n",
                        "willReplaceOnChanges": true
                    },
                    "devices": {
                        "$ref": "#/types/zia:URLFiltering/URLFilteringRulesDevices:URLFilteringRulesDevices",
                        "description": "list of devices\n"
                    },
                    "endUserNotificationUrl": {
                        "type": "string",
                        "description": "URL of end user notification page to be displayed when the rule is matched. Not applicable if either 'overrideUsers' or 'overrideGroups' is specified.\n"
                    },
                    "enforceTimeValidity": {
                        "type": "boolean",
                        "description": "Enforce a set a validity time period for the URL Filtering rule.\n"
                    },
                    "groups": {
                        "$ref": "#/types/zia:URLFiltering/URLFilteringRulesGroups:URLFilteringRulesGroups",
                        "description": "The groups to which the Firewall Filtering policy rule applies\n"
                    },
                    "labels": {
                        "$ref": "#/types/zia:URLFiltering/URLFilteringRulesLabels:URLFilteringRulesLabels",
                        "description": "list of labels\n"
                    },
                    "lastModifiedBies": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:URLFiltering/URLFilteringRulesLastModifiedBy:URLFilteringRulesLastModifiedBy"
                        },
                        "description": "Who modified the rule last\n"
                    },
                    "lastModifiedTime": {
                        "type": "integer",
                        "description": "When the rule was last modified\n"
                    },
                    "locationGroups": {
                        "$ref": "#/types/zia:URLFiltering/URLFilteringRulesLocationGroups:URLFilteringRulesLocationGroups",
                        "description": "The location groups to which the Firewall Filtering policy rule applies\n"
                    },
                    "locations": {
                        "$ref": "#/types/zia:URLFiltering/URLFilteringRulesLocations:URLFilteringRulesLocations",
                        "description": "The locations to which the Firewall Filtering policy rule applies\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Firewall Filtering policy rule\n"
                    },
                    "order": {
                        "type": "integer",
                        "description": "Order of execution of rule with respect to other URL Filtering rules\n"
                    },
                    "overrideGroups": {
                        "$ref": "#/types/zia:URLFiltering/URLFilteringRulesOverrideGroups:URLFilteringRulesOverrideGroups",
                        "description": "Name-ID pairs of users for which this rule can be overridden. Applicable only if blockOverride is set to `true`, action is `BLOCK` and overrideGroups is not set.If this overrideUsers is not set, `BLOCK` action can be overridden for any group.\n"
                    },
                    "overrideUsers": {
                        "$ref": "#/types/zia:URLFiltering/URLFilteringRulesOverrideUsers:URLFilteringRulesOverrideUsers",
                        "description": "Name-ID pairs of users for which this rule can be overridden. Applicable only if blockOverride is set to `true`, action is `BLOCK` and overrideGroups is not set.If this overrideUsers is not set, `BLOCK` action can be overridden for any user.\n"
                    },
                    "protocols": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Protocol criteria. Supported values: `SMRULEF_ZPA_BROKERS_RULE`, `ANY_RULE`, `TCP_RULE`, `UDP_RULE`, `DOHTTPS_RULE`, `TUNNELSSL_RULE`, `HTTP_PROXY`, `FOHTTP_RULE`, `FTP_RULE`, `HTTPS_RULE`, `HTTP_RULE`, `SSL_RULE`, `TUNNEL_RULE`.\n"
                    },
                    "rank": {
                        "type": "integer",
                        "description": "Admin rank of the admin who creates this rule\n"
                    },
                    "requestMethods": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Request method for which the rule must be applied. If not set, rule will be applied to all methods\n"
                    },
                    "ruleId": {
                        "type": "integer",
                        "description": "URL Filtering Rule ID\n"
                    },
                    "sizeQuota": {
                        "type": "integer",
                        "description": "Size quota in KB beyond which the URL Filtering rule is applied. If not set, no quota is enforced. If a policy rule action is set to `BLOCK`, this field is not applicable.\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "Rule State\n"
                    },
                    "timeQuota": {
                        "type": "integer",
                        "description": "Time quota in minutes, after which the URL Filtering rule is applied. If not set, no quota is enforced. If a policy rule action is set to `BLOCK`, this field is not applicable.\n"
                    },
                    "timeWindows": {
                        "$ref": "#/types/zia:URLFiltering/URLFilteringRulesTimeWindows:URLFilteringRulesTimeWindows",
                        "description": "The time interval in which the Firewall Filtering policy rule applies\n"
                    },
                    "urlCategories": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of URL categories for which rule must be applied\n"
                    },
                    "userAgentTypes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "users": {
                        "$ref": "#/types/zia:URLFiltering/URLFilteringRulesUsers:URLFilteringRulesUsers",
                        "description": "The users to which the Firewall Filtering policy rule applies\n"
                    },
                    "validityEndTime": {
                        "type": "integer",
                        "description": "If `enforceTimeValidity` is set to true, the URL Filtering rule will cease to be valid on this end date and time.\n"
                    },
                    "validityStartTime": {
                        "type": "integer",
                        "description": "If enforceTimeValidity is set to true, the URL Filtering rule will be valid starting on this date and time.\n"
                    },
                    "validityTimeZoneId": {
                        "type": "string",
                        "description": "If `enforceTimeValidity` is set to true, the URL Filtering rule date and time will be valid based on this time zone ID.\n"
                    }
                },
                "type": "object"
            }
        },
        "zia:Users/userManagement:UserManagement": {
            "description": "The **zia_user_management** resource allows the creation and management of local user account in the Zscaler Internet Access cloud. The user account resource can then be associated with several different types of resource within the ZIA tenant.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@pulumi/zia\";\nimport * as zia from \"@zscaler/pulumi-zia\";\n\nconst normalInternet = zia.Groups.getGroupManagement({\n    name: \"Normal_Internet\",\n});\nconst engineering = zia.Departments.getDepartmentManagement({\n    name: \"Engineering\",\n});\n// ZIA Local User Account\nconst johnAshcroft = new zia.users.UserManagement(\"johnAshcroft\", {\n    email: \"john.ashcroft@acme.com\",\n    password: \"P@ssw0rd123*\",\n    groups: {\n        ids: normalInternet.then(normalInternet =\u003e normalInternet.id),\n    },\n    department: {\n        id: engineering.then(engineering =\u003e engineering.id),\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_zia as zia\nimport zscaler_pulumi_zia as zia\n\nnormal_internet = zia.Groups.get_group_management(name=\"Normal_Internet\")\nengineering = zia.Departments.get_department_management(name=\"Engineering\")\n# ZIA Local User Account\njohn_ashcroft = zia.users.UserManagement(\"johnAshcroft\",\n    email=\"john.ashcroft@acme.com\",\n    password=\"P@ssw0rd123*\",\n    groups=zia.users.UserManagementGroupsArgs(\n        ids=normal_internet.id,\n    ),\n    department=zia.users.UserManagementDepartmentArgs(\n        id=engineering.id,\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Zia = Pulumi.Zia;\nusing Zia = zscaler.PulumiPackage.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var normalInternet = Zia.Groups.GetGroupManagement.Invoke(new()\n    {\n        Name = \"Normal_Internet\",\n    });\n\n    var engineering = Zia.Departments.GetDepartmentManagement.Invoke(new()\n    {\n        Name = \"Engineering\",\n    });\n\n    // ZIA Local User Account\n    var johnAshcroft = new Zia.Users.UserManagement(\"johnAshcroft\", new()\n    {\n        Email = \"john.ashcroft@acme.com\",\n        Password = \"P@ssw0rd123*\",\n        Groups = new Zia.Users.Inputs.UserManagementGroupsArgs\n        {\n            Ids = normalInternet.Apply(getGroupManagementResult =\u003e getGroupManagementResult.Id),\n        },\n        Department = new Zia.Users.Inputs.UserManagementDepartmentArgs\n        {\n            Id = engineering.Apply(getDepartmentManagementResult =\u003e getDepartmentManagementResult.Id),\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia/Departments\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia/Groups\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia/Users\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tnormalInternet, err := Groups.GetGroupManagement(ctx, \u0026groups.GetGroupManagementArgs{\n\t\t\tName: pulumi.StringRef(\"Normal_Internet\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tengineering, err := Departments.GetDepartmentManagement(ctx, \u0026departments.GetDepartmentManagementArgs{\n\t\t\tName: pulumi.StringRef(\"Engineering\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = Users.NewUserManagement(ctx, \"johnAshcroft\", \u0026Users.UserManagementArgs{\n\t\t\tEmail:    pulumi.String(\"john.ashcroft@acme.com\"),\n\t\t\tPassword: pulumi.String(\"P@ssw0rd123*\"),\n\t\t\tGroups: \u0026users.UserManagementGroupsArgs{\n\t\t\t\tIds: *pulumi.Int(normalInternet.Id),\n\t\t\t},\n\t\t\tDepartment: \u0026users.UserManagementDepartmentArgs{\n\t\t\t\tId: *pulumi.Int(engineering.Id),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zia.Groups.GroupsFunctions;\nimport com.pulumi.zia.Groups.inputs.GetGroupManagementArgs;\nimport com.pulumi.zia.Departments.DepartmentsFunctions;\nimport com.pulumi.zia.Departments.inputs.GetDepartmentManagementArgs;\nimport com.pulumi.zia.Users.UserManagement;\nimport com.pulumi.zia.Users.UserManagementArgs;\nimport com.pulumi.zia.Users.inputs.UserManagementGroupsArgs;\nimport com.pulumi.zia.Users.inputs.UserManagementDepartmentArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var normalInternet = GroupsFunctions.getGroupManagement(GetGroupManagementArgs.builder()\n            .name(\"Normal_Internet\")\n            .build());\n\n        final var engineering = DepartmentsFunctions.getDepartmentManagement(GetDepartmentManagementArgs.builder()\n            .name(\"Engineering\")\n            .build());\n\n        var johnAshcroft = new UserManagement(\"johnAshcroft\", UserManagementArgs.builder()        \n            .email(\"john.ashcroft@acme.com\")\n            .password(\"P@ssw0rd123*\")\n            .groups(UserManagementGroupsArgs.builder()\n                .ids(normalInternet.applyValue(getGroupManagementResult -\u003e getGroupManagementResult.id()))\n                .build())\n            .department(UserManagementDepartmentArgs.builder()\n                .id(engineering.applyValue(getDepartmentManagementResult -\u003e getDepartmentManagementResult.id()))\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  # ZIA Local User Account\n  johnAshcroft:\n    type: zia:Users:UserManagement\n    properties:\n      email: john.ashcroft@acme.com\n      password: P@ssw0rd123*\n      groups:\n        ids: ${normalInternet.id}\n      department:\n        id: ${engineering.id}\nvariables:\n  normalInternet:\n    fn::invoke:\n      Function: zia:Groups:getGroupManagement\n      Arguments:\n        name: Normal_Internet\n  engineering:\n    fn::invoke:\n      Function: zia:Departments:getDepartmentManagement\n      Arguments:\n        name: Engineering\n```\n{{% /example %}}\n{{% /examples %}}\n## Optional\n\nThe following attributes are supported:\n\n* `comments` - (Optional) Additional information about this user.\n* `temp_auth_email` - (Optional) Temporary Authentication Email. If you enabled one-time tokens or links, enter the email address to which the Zscaler service sends the tokens or links. If this is empty, the service will send the email to the User email.\n",
            "properties": {
                "comments": {
                    "type": "string",
                    "description": "Additional information about this user.\n"
                },
                "department": {
                    "$ref": "#/types/zia:Users/UserManagementDepartment:UserManagementDepartment",
                    "description": "Department a user belongs to\n"
                },
                "email": {
                    "type": "string",
                    "description": "User email consists of a user name and domain name. It does not have to be a valid email address, but it must be unique and its domain must belong to the organization.\n"
                },
                "groups": {
                    "$ref": "#/types/zia:Users/UserManagementGroups:UserManagementGroups",
                    "description": "List of Groups a user belongs to. Groups are used in policies.\n"
                },
                "name": {
                    "type": "string",
                    "description": "User name. This appears when choosing users for policies.\n"
                },
                "password": {
                    "type": "string",
                    "description": "User's password. Applicable only when authentication type is Hosted DB. Password strength must follow what is defined in the auth settings.\n",
                    "secret": true
                },
                "tempAuthEmail": {
                    "type": "string",
                    "description": "Temporary Authentication Email. If you enabled one-time tokens or links, enter the email address to which the Zscaler\nservice sends the tokens or links. If this is empty, the service will send the email to the User email.\n"
                },
                "userId": {
                    "type": "integer"
                }
            },
            "required": [
                "email",
                "groups",
                "name",
                "password",
                "userId"
            ],
            "inputProperties": {
                "comments": {
                    "type": "string",
                    "description": "Additional information about this user.\n"
                },
                "department": {
                    "$ref": "#/types/zia:Users/UserManagementDepartment:UserManagementDepartment",
                    "description": "Department a user belongs to\n"
                },
                "email": {
                    "type": "string",
                    "description": "User email consists of a user name and domain name. It does not have to be a valid email address, but it must be unique and its domain must belong to the organization.\n"
                },
                "groups": {
                    "$ref": "#/types/zia:Users/UserManagementGroups:UserManagementGroups",
                    "description": "List of Groups a user belongs to. Groups are used in policies.\n"
                },
                "name": {
                    "type": "string",
                    "description": "User name. This appears when choosing users for policies.\n"
                },
                "password": {
                    "type": "string",
                    "description": "User's password. Applicable only when authentication type is Hosted DB. Password strength must follow what is defined in the auth settings.\n",
                    "secret": true
                },
                "tempAuthEmail": {
                    "type": "string",
                    "description": "Temporary Authentication Email. If you enabled one-time tokens or links, enter the email address to which the Zscaler\nservice sends the tokens or links. If this is empty, the service will send the email to the User email.\n"
                }
            },
            "requiredInputs": [
                "email",
                "password"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering UserManagement resources.\n",
                "properties": {
                    "comments": {
                        "type": "string",
                        "description": "Additional information about this user.\n"
                    },
                    "department": {
                        "$ref": "#/types/zia:Users/UserManagementDepartment:UserManagementDepartment",
                        "description": "Department a user belongs to\n"
                    },
                    "email": {
                        "type": "string",
                        "description": "User email consists of a user name and domain name. It does not have to be a valid email address, but it must be unique and its domain must belong to the organization.\n"
                    },
                    "groups": {
                        "$ref": "#/types/zia:Users/UserManagementGroups:UserManagementGroups",
                        "description": "List of Groups a user belongs to. Groups are used in policies.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "User name. This appears when choosing users for policies.\n"
                    },
                    "password": {
                        "type": "string",
                        "description": "User's password. Applicable only when authentication type is Hosted DB. Password strength must follow what is defined in the auth settings.\n",
                        "secret": true
                    },
                    "tempAuthEmail": {
                        "type": "string",
                        "description": "Temporary Authentication Email. If you enabled one-time tokens or links, enter the email address to which the Zscaler\nservice sends the tokens or links. If this is empty, the service will send the email to the User email.\n"
                    },
                    "userId": {
                        "type": "integer"
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "zia:Activation/getActivationStatus:getActivationStatus": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@pulumi/zia\";\n\nconst activation = zia.Activation.getActivationStatus({});\n```\n```python\nimport pulumi\nimport pulumi_zia as zia\n\nactivation = zia.Activation.get_activation_status()\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Zia = Pulumi.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var activation = Zia.Activation.GetActivationStatus.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia/Activation\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Activation.GetActivationStatus(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zia.Activation.ActivationFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var activation = ActivationFunctions.getActivationStatus();\n\n    }\n}\n```\n```yaml\nvariables:\n  activation:\n    fn::invoke:\n      Function: zia:Activation:getActivationStatus\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by getActivationStatus.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "status": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "status",
                    "id"
                ]
            }
        },
        "zia:AdminRoles/getAdminRoles:getAdminRoles": {
            "description": "Use the **zia_admin_roles** data source to get information about an admin role created in the Zscaler Internet Access cloud or via the API. This data source can then be associated with a ZIA administrator account.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@pulumi/zia\";\n\nconst example = zia.AdminRoles.getAdminRoles({\n    name: \"Super Admin\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zia as zia\n\nexample = zia.AdminRoles.get_admin_roles(name=\"Super Admin\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Zia = Pulumi.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Zia.AdminRoles.GetAdminRoles.Invoke(new()\n    {\n        Name = \"Super Admin\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia/AdminRoles\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := AdminRoles.GetAdminRoles(ctx, \u0026adminroles.GetAdminRolesArgs{\n\t\t\tName: pulumi.StringRef(\"Super Admin\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zia.AdminRoles.AdminRolesFunctions;\nimport com.pulumi.zia.AdminRoles.inputs.GetAdminRolesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = AdminRolesFunctions.getAdminRoles(GetAdminRolesArgs.builder()\n            .name(\"Super Admin\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: zia:AdminRoles:getAdminRoles\n      Arguments:\n        name: Super Admin\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getAdminRoles.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the Admin role to be exported.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getAdminRoles.\n",
                "properties": {
                    "adminAcctAccess": {
                        "type": "string",
                        "description": "(String)\n"
                    },
                    "analysisAccess": {
                        "type": "string",
                        "description": "(String)\n"
                    },
                    "dashboardAccess": {
                        "type": "string",
                        "description": "(String) Dashboard access permission. Supported values are: `NONE`, `READ_ONLY`\n"
                    },
                    "id": {
                        "type": "integer"
                    },
                    "isAuditor": {
                        "type": "boolean",
                        "description": "(Boolean) Indicates whether this is an auditor role.\n"
                    },
                    "isNonEditable": {
                        "type": "boolean",
                        "description": "(Boolean) Indicates whether or not this admin user is editable/deletable.\n"
                    },
                    "logsLimit": {
                        "type": "string",
                        "description": "(String) Log range limit. Returned values are: `UNRESTRICTED`, `MONTH_1`, `MONTH_2`, `MONTH_3`, `MONTH_4`, `MONTH_5`, `MONTH_6`\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "permissions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(List of String) List of functional areas to which this role has access. This attribute is subject to change.\n"
                    },
                    "policyAccess": {
                        "type": "string",
                        "description": "(String) Policy access permission. Returned values are: `NONE`, `READ_ONLY`,`READ_WRITE`\n"
                    },
                    "rank": {
                        "type": "integer",
                        "description": "(Number) Admin rank of this admin role. This is applicable only when admin rank is enabled in the advanced settings. Default value is 7 (the lowest rank). The assigned admin rank determines the roles or admin users this user can manage, and which rule orders this admin can access.\n"
                    },
                    "reportAccess": {
                        "type": "string",
                        "description": "(String) Report access permission. Returned values are: `NONE`, `READ_ONLY`,`READ_WRITE`\n"
                    },
                    "roleType": {
                        "type": "string",
                        "description": "(String) The admin role type. ()This attribute is subject to change.) Supported values are:  `ORG_ADMIN`, `EXEC_INSIGHT`, `EXEC_INSIGHT_AND_ORG_ADMIN`, `SDWAN`\n"
                    },
                    "usernameAccess": {
                        "type": "string",
                        "description": "(String) Username access permission. When set to NONE, the username will be obfuscated. Supported values are: `NONE|READ_ONLY`\n"
                    }
                },
                "type": "object",
                "required": [
                    "adminAcctAccess",
                    "analysisAccess",
                    "dashboardAccess",
                    "id",
                    "isAuditor",
                    "isNonEditable",
                    "logsLimit",
                    "permissions",
                    "policyAccess",
                    "rank",
                    "reportAccess",
                    "roleType",
                    "usernameAccess"
                ]
            }
        },
        "zia:AdminUsers/getAdminUsers:getAdminUsers": {
            "description": "Use the **zia_admin_users** data source to get information about an admin user account created in the Zscaler Internet Access cloud or via the API. This data source can then be associated with a ZIA administrator role.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@pulumi/zia\";\n\nconst johnDoe = zia.AdminUsers.getAdminUsers({\n    loginName: \"john.doe@example.com\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zia as zia\n\njohn_doe = zia.AdminUsers.get_admin_users(login_name=\"john.doe@example.com\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Zia = Pulumi.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var johnDoe = Zia.AdminUsers.GetAdminUsers.Invoke(new()\n    {\n        LoginName = \"john.doe@example.com\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia/AdminUsers\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := AdminUsers.GetAdminUsers(ctx, \u0026adminusers.GetAdminUsersArgs{\n\t\t\tLoginName: pulumi.StringRef(\"john.doe@example.com\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zia.AdminUsers.AdminUsersFunctions;\nimport com.pulumi.zia.AdminUsers.inputs.GetAdminUsersArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var johnDoe = AdminUsersFunctions.getAdminUsers(GetAdminUsersArgs.builder()\n            .loginName(\"john.doe@example.com\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  johnDoe:\n    fn::invoke:\n      Function: zia:AdminUsers:getAdminUsers\n      Arguments:\n        loginName: john.doe@example.com\n```\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@pulumi/zia\";\n\nconst johnDoe = zia.AdminUsers.getAdminUsers({\n    username: \"John Doe\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zia as zia\n\njohn_doe = zia.AdminUsers.get_admin_users(username=\"John Doe\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Zia = Pulumi.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var johnDoe = Zia.AdminUsers.GetAdminUsers.Invoke(new()\n    {\n        Username = \"John Doe\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia/AdminUsers\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := AdminUsers.GetAdminUsers(ctx, \u0026adminusers.GetAdminUsersArgs{\n\t\t\tUsername: pulumi.StringRef(\"John Doe\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zia.AdminUsers.AdminUsersFunctions;\nimport com.pulumi.zia.AdminUsers.inputs.GetAdminUsersArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var johnDoe = AdminUsersFunctions.getAdminUsers(GetAdminUsersArgs.builder()\n            .username(\"John Doe\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  johnDoe:\n    fn::invoke:\n      Function: zia:AdminUsers:getAdminUsers\n      Arguments:\n        username: John Doe\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getAdminUsers.\n",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "The ID of the admin user to be exported.\n"
                    },
                    "loginName": {
                        "type": "string",
                        "description": "The email address of the admin user to be exported.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "The username of the admin user to be exported.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getAdminUsers.\n",
                "properties": {
                    "adminScopes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:AdminUsers/getAdminUsersAdminScope:getAdminUsersAdminScope"
                        },
                        "description": "(Set of Object) The admin's scope. Only applicable for the LOCATION_GROUP admin scope type, in which case this attribute gives the list of ID/name pairs of locations within the location group.\n"
                    },
                    "comments": {
                        "type": "string",
                        "description": "(String) Additional information about the admin or auditor.\n"
                    },
                    "disabled": {
                        "type": "boolean",
                        "description": "(Boolean) Indicates whether or not the admin account is disabled.\n"
                    },
                    "email": {
                        "type": "string",
                        "description": "(String) Admin or auditor's email address.\n"
                    },
                    "execMobileAppTokens": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:AdminUsers/getAdminUsersExecMobileAppToken:getAdminUsersExecMobileAppToken"
                        },
                        "description": "(List of Object)\n"
                    },
                    "id": {
                        "type": "integer",
                        "description": "(Number) Identifier that uniquely identifies an entity\n"
                    },
                    "isAuditor": {
                        "type": "boolean",
                        "description": "(Boolean) Indicates whether the user is an auditor. This attribute is subject to change.\n"
                    },
                    "isExecMobileAppEnabled": {
                        "type": "boolean",
                        "description": "(Boolean) Indicates whether or not Executive Insights App access is enabled for the admin.\n"
                    },
                    "isNonEditable": {
                        "type": "boolean",
                        "description": "(Boolean) Indicates whether or not the admin can be edited or deleted.\n"
                    },
                    "isPasswordExpired": {
                        "type": "boolean",
                        "description": "(Boolean) Indicates whether or not an admin's password has expired.\n"
                    },
                    "isPasswordLoginAllowed": {
                        "type": "boolean",
                        "description": "(Boolean) The default is true when SAML Authentication is disabled. When SAML Authentication is enabled, this can be set to false in order to force the admin to login via SSO only.\n"
                    },
                    "isProductUpdateCommEnabled": {
                        "type": "boolean",
                        "description": "(Boolean) Communication setting for Product Update.\n"
                    },
                    "isSecurityReportCommEnabled": {
                        "type": "boolean",
                        "description": "(Boolean) Communication for Security Report is enabled.\n"
                    },
                    "isServiceUpdateCommEnabled": {
                        "type": "boolean",
                        "description": "(Boolean) Communication setting for Service Update.\n"
                    },
                    "loginName": {
                        "type": "string"
                    },
                    "pwdLastModifiedTime": {
                        "type": "integer"
                    },
                    "roles": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:AdminUsers/getAdminUsersRole:getAdminUsersRole"
                        },
                        "description": "(Set of Object) Role of the admin. This is not required for an auditor.\n"
                    },
                    "username": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "adminScopes",
                    "comments",
                    "disabled",
                    "email",
                    "execMobileAppTokens",
                    "id",
                    "isAuditor",
                    "isExecMobileAppEnabled",
                    "isNonEditable",
                    "isPasswordExpired",
                    "isPasswordLoginAllowed",
                    "isProductUpdateCommEnabled",
                    "isSecurityReportCommEnabled",
                    "isServiceUpdateCommEnabled",
                    "loginName",
                    "pwdLastModifiedTime",
                    "roles",
                    "username"
                ]
            }
        },
        "zia:AuthSettingsUrls/getAuthSettingsURLs:getAuthSettingsURLs": {
            "description": "Use the **zia_auth_settings_urls** data source to get a list of URLs that were exempted from cookie authentiation and SSL Inspection in the Zscaler Internet Access cloud or via the API. To learn more see [URL Format Guidelines](https://help.zscaler.com/zia/url-format-guidelines)\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@pulumi/zia\";\n\nconst foo = zia.AuthSettingsUrls.getAuthSettingsURLs({});\n```\n```python\nimport pulumi\nimport pulumi_zia as zia\n\nfoo = zia.AuthSettingsUrls.get_auth_settings_urls()\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Zia = Pulumi.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var foo = Zia.AuthSettingsUrls.GetAuthSettingsURLs.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia/AuthSettingsUrls\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := AuthSettingsUrls.GetAuthSettingsURLs(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zia.AuthSettingsUrls.AuthSettingsUrlsFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var foo = AuthSettingsUrlsFunctions.getAuthSettingsURLs();\n\n    }\n}\n```\n```yaml\nvariables:\n  foo:\n    fn::invoke:\n      Function: zia:AuthSettingsUrls:getAuthSettingsURLs\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by getAuthSettingsURLs.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "urls": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "urls",
                    "id"
                ]
            }
        },
        "zia:DLP/getDLPDictionaries:getDLPDictionaries": {
            "description": "Use the **zia_dlp_dictionaries** data source to get information about a DLP dictionary option available in the Zscaler Internet Access.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@pulumi/zia\";\n\nconst example = zia.DLP.getDLPDictionaries({\n    name: \"SALESFORCE_REPORT_LEAKAGE\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zia as zia\n\nexample = zia.DLP.get_dlp_dictionaries(name=\"SALESFORCE_REPORT_LEAKAGE\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Zia = Pulumi.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Zia.DLP.GetDLPDictionaries.Invoke(new()\n    {\n        Name = \"SALESFORCE_REPORT_LEAKAGE\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia/DLP\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := DLP.GetDLPDictionaries(ctx, \u0026dlp.GetDLPDictionariesArgs{\n\t\t\tName: pulumi.StringRef(\"SALESFORCE_REPORT_LEAKAGE\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zia.DLP.DLPFunctions;\nimport com.pulumi.zia.DLP.inputs.GetDLPDictionariesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = DLPFunctions.getDLPDictionaries(GetDLPDictionariesArgs.builder()\n            .name(\"SALESFORCE_REPORT_LEAKAGE\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: zia:DLP:getDLPDictionaries\n      Arguments:\n        name: SALESFORCE_REPORT_LEAKAGE\n```\n",
            "inputs": {
                "description": "A collection of arguments for invoking getDLPDictionaries.\n",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "Unique identifier for the DLP dictionary\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "DLP dictionary name\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getDLPDictionaries.\n",
                "properties": {
                    "confidenceThreshold": {
                        "type": "string",
                        "description": "(String) he DLP confidence threshold. [`CONFIDENCE_LEVEL_LOW`, `CONFIDENCE_LEVEL_MEDIUM` `CONFIDENCE_LEVEL_HIGH` ]\n"
                    },
                    "customPhraseMatchType": {
                        "type": "string",
                        "description": "(String) The DLP custom phrase match type. [ `MATCH_ALL_CUSTOM_PHRASE_PATTERN_DICTIONARY`, `MATCH_ANY_CUSTOM_PHRASE_PATTERN_DICTIONARY` ]\n"
                    },
                    "description": {
                        "type": "string"
                    },
                    "dictionaryType": {
                        "type": "string",
                        "description": "(String) The DLP dictionary type. The cloud service API only supports custom DLP dictionaries that are using the `PATTERNS_AND_PHRASES` type.\n"
                    },
                    "exactDataMatchDetails": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:DLP/getDLPDictionariesExactDataMatchDetail:getDLPDictionariesExactDataMatchDetail"
                        }
                    },
                    "id": {
                        "type": "integer"
                    },
                    "idmProfileMatchAccuracies": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:DLP/getDLPDictionariesIdmProfileMatchAccuracy:getDLPDictionariesIdmProfileMatchAccuracy"
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "nameL10nTag": {
                        "type": "boolean",
                        "description": "(Boolean) Indicates whether the name is localized or not. This is always set to True for predefined DLP dictionaries.\n"
                    },
                    "patterns": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:DLP/getDLPDictionariesPattern:getDLPDictionariesPattern"
                        }
                    },
                    "phrases": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:DLP/getDLPDictionariesPhrase:getDLPDictionariesPhrase"
                        }
                    },
                    "proximity": {
                        "type": "integer"
                    },
                    "thresholdType": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "confidenceThreshold",
                    "customPhraseMatchType",
                    "description",
                    "dictionaryType",
                    "exactDataMatchDetails",
                    "id",
                    "idmProfileMatchAccuracies",
                    "name",
                    "nameL10nTag",
                    "patterns",
                    "phrases",
                    "proximity",
                    "thresholdType"
                ]
            }
        },
        "zia:DLP/getDLPEngines:getDLPEngines": {
            "description": "Use the **zia_dlp_engines** data source to get information about a ZIA DLP Engines in the Zscaler Internet Access cloud or via the API.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@pulumi/zia\";\n\nconst example = zia.DLP.getDLPEngines({\n    name: \"Example\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zia as zia\n\nexample = zia.DLP.get_dlp_engines(name=\"Example\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Zia = Pulumi.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Zia.DLP.GetDLPEngines.Invoke(new()\n    {\n        Name = \"Example\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia/DLP\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := DLP.GetDLPEngines(ctx, \u0026dlp.GetDLPEnginesArgs{\n\t\t\tName: pulumi.StringRef(\"Example\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zia.DLP.DLPFunctions;\nimport com.pulumi.zia.DLP.inputs.GetDLPEnginesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = DLPFunctions.getDLPEngines(GetDLPEnginesArgs.builder()\n            .name(\"Example\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: zia:DLP:getDLPEngines\n      Arguments:\n        name: Example\n```\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zia.DLP.DLPFunctions;\nimport com.pulumi.zia.DLP.inputs.GetDLPEnginesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = DLPFunctions.getDLPEngines(GetDLPEnginesArgs.builder()\n            .id(1234567890)\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: zia:DLP:getDLPEngines\n      Arguments:\n        id: 1.23456789e+09\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getDLPEngines.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The DLP engine name as configured by the admin. This attribute is required in POST and PUT requests for custom DLP engines.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getDLPEngines.\n",
                "properties": {
                    "customDlpEngine": {
                        "type": "boolean"
                    },
                    "description": {
                        "type": "string"
                    },
                    "engineExpression": {
                        "type": "string"
                    },
                    "id": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string"
                    },
                    "predefinedEngineName": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "customDlpEngine",
                    "description",
                    "engineExpression",
                    "id",
                    "predefinedEngineName"
                ]
            }
        },
        "zia:DLP/getDLPNotificationTemplates:getDLPNotificationTemplates": {
            "description": "Use the **zia_dlp_notification_templates** data source to get information about a ZIA DLP Notification Templates in the Zscaler Internet Access cloud or via the API.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@pulumi/zia\";\n\nconst example = zia.DLP.getDLPNotificationTemplates({\n    name: \"DLP Auditor Template Test\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zia as zia\n\nexample = zia.DLP.get_dlp_notification_templates(name=\"DLP Auditor Template Test\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Zia = Pulumi.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Zia.DLP.GetDLPNotificationTemplates.Invoke(new()\n    {\n        Name = \"DLP Auditor Template Test\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia/DLP\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := DLP.GetDLPNotificationTemplates(ctx, \u0026dlp.GetDLPNotificationTemplatesArgs{\n\t\t\tName: pulumi.StringRef(\"DLP Auditor Template Test\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zia.DLP.DLPFunctions;\nimport com.pulumi.zia.DLP.inputs.GetDLPNotificationTemplatesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = DLPFunctions.getDLPNotificationTemplates(GetDLPNotificationTemplatesArgs.builder()\n            .name(\"DLP Auditor Template Test\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: zia:DLP:getDLPNotificationTemplates\n      Arguments:\n        name: DLP Auditor Template Test\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getDLPNotificationTemplates.\n",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "The unique identifier for a DLP notification template.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The DLP policy rule name.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getDLPNotificationTemplates.\n",
                "properties": {
                    "attachContent": {
                        "type": "boolean"
                    },
                    "htmlMessage": {
                        "type": "string"
                    },
                    "id": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string"
                    },
                    "plainTestMessage": {
                        "type": "string"
                    },
                    "subject": {
                        "type": "string"
                    },
                    "tlsEnabled": {
                        "type": "boolean"
                    }
                },
                "type": "object",
                "required": [
                    "attachContent",
                    "htmlMessage",
                    "id",
                    "name",
                    "plainTestMessage",
                    "subject",
                    "tlsEnabled"
                ]
            }
        },
        "zia:DLP/getDLPWebRules:getDLPWebRules": {
            "description": "Use the **zia_dlp_web_rules** data source to get information about a ZIA DLP Web Rules in the Zscaler Internet Access cloud or via the API.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@pulumi/zia\";\n\nconst example = zia.DLP.getDLPWebRules({\n    name: \"Example\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zia as zia\n\nexample = zia.DLP.get_dlp_web_rules(name=\"Example\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Zia = Pulumi.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Zia.DLP.GetDLPWebRules.Invoke(new()\n    {\n        Name = \"Example\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia/DLP\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := DLP.GetDLPWebRules(ctx, \u0026dlp.GetDLPWebRulesArgs{\n\t\t\tName: pulumi.StringRef(\"Example\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zia.DLP.DLPFunctions;\nimport com.pulumi.zia.DLP.inputs.GetDLPWebRulesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = DLPFunctions.getDLPWebRules(GetDLPWebRulesArgs.builder()\n            .name(\"Example\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: zia:DLP:getDLPWebRules\n      Arguments:\n        name: Example\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getDLPWebRules.\n",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "Identifier that uniquely identifies an entity\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The DLP policy rule name.\nrules.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getDLPWebRules.\n",
                "properties": {
                    "accessControl": {
                        "type": "string"
                    },
                    "action": {
                        "type": "string"
                    },
                    "auditors": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:DLP/getDLPWebRulesAuditor:getDLPWebRulesAuditor"
                        }
                    },
                    "cloudApplications": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "departments": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:DLP/getDLPWebRulesDepartment:getDLPWebRulesDepartment"
                        }
                    },
                    "description": {
                        "type": "string"
                    },
                    "dlpEngines": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:DLP/getDLPWebRulesDlpEngine:getDLPWebRulesDlpEngine"
                        }
                    },
                    "excludedDepartments": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:DLP/getDLPWebRulesExcludedDepartment:getDLPWebRulesExcludedDepartment"
                        }
                    },
                    "excludedGroups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:DLP/getDLPWebRulesExcludedGroup:getDLPWebRulesExcludedGroup"
                        }
                    },
                    "excludedUsers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:DLP/getDLPWebRulesExcludedUser:getDLPWebRulesExcludedUser"
                        }
                    },
                    "externalAuditorEmail": {
                        "type": "string"
                    },
                    "fileTypes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "groups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:DLP/getDLPWebRulesGroup:getDLPWebRulesGroup"
                        }
                    },
                    "icapServers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:DLP/getDLPWebRulesIcapServer:getDLPWebRulesIcapServer"
                        }
                    },
                    "id": {
                        "type": "integer"
                    },
                    "labels": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:DLP/getDLPWebRulesLabel:getDLPWebRulesLabel"
                        }
                    },
                    "lastModifiedBies": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:DLP/getDLPWebRulesLastModifiedBy:getDLPWebRulesLastModifiedBy"
                        }
                    },
                    "lastModifiedTime": {
                        "type": "integer"
                    },
                    "locationGroups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:DLP/getDLPWebRulesLocationGroup:getDLPWebRulesLocationGroup"
                        }
                    },
                    "locations": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:DLP/getDLPWebRulesLocation:getDLPWebRulesLocation"
                        }
                    },
                    "matchOnly": {
                        "type": "boolean"
                    },
                    "minSize": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string"
                    },
                    "notificationTemplates": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:DLP/getDLPWebRulesNotificationTemplate:getDLPWebRulesNotificationTemplate"
                        }
                    },
                    "ocrEnabled": {
                        "type": "boolean"
                    },
                    "order": {
                        "type": "integer"
                    },
                    "protocols": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "rank": {
                        "type": "integer"
                    },
                    "state": {
                        "type": "string"
                    },
                    "timeWindows": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:DLP/getDLPWebRulesTimeWindow:getDLPWebRulesTimeWindow"
                        }
                    },
                    "urlCategories": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:DLP/getDLPWebRulesUrlCategory:getDLPWebRulesUrlCategory"
                        }
                    },
                    "users": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:DLP/getDLPWebRulesUser:getDLPWebRulesUser"
                        }
                    },
                    "withoutContentInspection": {
                        "type": "boolean"
                    },
                    "zscalerIncidentReciever": {
                        "type": "boolean"
                    }
                },
                "type": "object",
                "required": [
                    "accessControl",
                    "action",
                    "auditors",
                    "cloudApplications",
                    "departments",
                    "description",
                    "dlpEngines",
                    "excludedDepartments",
                    "excludedGroups",
                    "excludedUsers",
                    "externalAuditorEmail",
                    "fileTypes",
                    "groups",
                    "icapServers",
                    "id",
                    "labels",
                    "lastModifiedBies",
                    "lastModifiedTime",
                    "locationGroups",
                    "locations",
                    "matchOnly",
                    "minSize",
                    "name",
                    "notificationTemplates",
                    "ocrEnabled",
                    "order",
                    "protocols",
                    "rank",
                    "state",
                    "timeWindows",
                    "urlCategories",
                    "users",
                    "withoutContentInspection",
                    "zscalerIncidentReciever"
                ]
            }
        },
        "zia:Departments/getDepartmentManagement:getDepartmentManagement": {
            "inputs": {
                "description": "A collection of arguments for invoking getDepartmentManagement.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getDepartmentManagement.\n",
                "properties": {
                    "comments": {
                        "type": "string"
                    },
                    "deleted": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "integer"
                    },
                    "idpId": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "comments",
                    "deleted",
                    "id",
                    "idpId"
                ]
            }
        },
        "zia:DeviceGroups/getDeviceGroups:getDeviceGroups": {
            "description": "Use the **zia_device_groups** data source to get information about a device group in the Zscaler Internet Access cloud or via the API. This data source can then be associated with resources such as: URL Filtering Rules\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@pulumi/zia\";\n\nconst ios = zia.DeviceGroups.getDeviceGroups({\n    name: \"IOS\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zia as zia\n\nios = zia.DeviceGroups.get_device_groups(name=\"IOS\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Zia = Pulumi.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var ios = Zia.DeviceGroups.GetDeviceGroups.Invoke(new()\n    {\n        Name = \"IOS\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia/DeviceGroups\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := DeviceGroups.GetDeviceGroups(ctx, \u0026devicegroups.GetDeviceGroupsArgs{\n\t\t\tName: pulumi.StringRef(\"IOS\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zia.DeviceGroups.DeviceGroupsFunctions;\nimport com.pulumi.zia.DeviceGroups.inputs.GetDeviceGroupsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var ios = DeviceGroupsFunctions.getDeviceGroups(GetDeviceGroupsArgs.builder()\n            .name(\"IOS\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  ios:\n    fn::invoke:\n      Function: zia:DeviceGroups:getDeviceGroups\n      Arguments:\n        name: IOS\n```\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@pulumi/zia\";\n\nconst android = zia.DeviceGroups.getDeviceGroups({\n    name: \"Android\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zia as zia\n\nandroid = zia.DeviceGroups.get_device_groups(name=\"Android\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Zia = Pulumi.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var android = Zia.DeviceGroups.GetDeviceGroups.Invoke(new()\n    {\n        Name = \"Android\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia/DeviceGroups\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := DeviceGroups.GetDeviceGroups(ctx, \u0026devicegroups.GetDeviceGroupsArgs{\n\t\t\tName: pulumi.StringRef(\"Android\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zia.DeviceGroups.DeviceGroupsFunctions;\nimport com.pulumi.zia.DeviceGroups.inputs.GetDeviceGroupsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var android = DeviceGroupsFunctions.getDeviceGroups(GetDeviceGroupsArgs.builder()\n            .name(\"Android\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  android:\n    fn::invoke:\n      Function: zia:DeviceGroups:getDeviceGroups\n      Arguments:\n        name: Android\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getDeviceGroups.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the device group to be exported.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getDeviceGroups.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "(String) The device group's description.\n"
                    },
                    "deviceCount": {
                        "type": "integer",
                        "description": "(int) The number of devices within the group.\n"
                    },
                    "deviceNames": {
                        "type": "string",
                        "description": "(String) The names of devices that belong to the device group. The device names are comma-separated.\n"
                    },
                    "groupType": {
                        "type": "string",
                        "description": "(String) The device group type. i.e ``ZCC_OS``, ``NON_ZCC``, ``CBI``\n"
                    },
                    "id": {
                        "type": "integer",
                        "description": "(String) The unique identifer for the device group.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "(String) The device group name.\n"
                    },
                    "osType": {
                        "type": "string",
                        "description": "(String) The operating system (OS).\n"
                    },
                    "predefined": {
                        "type": "boolean",
                        "description": "(Boolean) Indicates whether this is a predefined device group. If this value is set to true, the group is predefined.\n"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "deviceCount",
                    "deviceNames",
                    "groupType",
                    "id",
                    "osType",
                    "predefined"
                ]
            }
        },
        "zia:Devices/getDevices:getDevices": {
            "description": "Use the **zia_devices** data source to get information about a device in the Zscaler Internet Access cloud or via the API. This data source can then be associated with resources such as: URL Filtering Rules\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@pulumi/zia\";\n\nconst device = zia.Devices.getDevices({\n    name: \"administrator\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zia as zia\n\ndevice = zia.Devices.get_devices(name=\"administrator\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Zia = Pulumi.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var device = Zia.Devices.GetDevices.Invoke(new()\n    {\n        Name = \"administrator\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia/Devices\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Devices.GetDevices(ctx, \u0026devices.GetDevicesArgs{\n\t\t\tName: pulumi.StringRef(\"administrator\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zia.Devices.DevicesFunctions;\nimport com.pulumi.zia.Devices.inputs.GetDevicesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var device = DevicesFunctions.getDevices(GetDevicesArgs.builder()\n            .name(\"administrator\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  device:\n    fn::invoke:\n      Function: zia:Devices:getDevices\n      Arguments:\n        name: administrator\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getDevices.\n",
                "properties": {
                    "deviceGroupType": {
                        "type": "string",
                        "description": "(String) The device group type. i.e ``ZCC_OS``, ``NON_ZCC``, ``CBI``\n"
                    },
                    "deviceModel": {
                        "type": "string",
                        "description": "(String) The device model.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the devices to be exported.\n"
                    },
                    "osType": {
                        "type": "string",
                        "description": "(String) The operating system (OS). ``ANY``, ``OTHER_OS``, ``IOS``, ``ANDROID_OS``, ``WINDOWS_OS``, ``MAC_OS``, ``LINUX``\n"
                    },
                    "osVersion": {
                        "type": "string",
                        "description": "(String) The operating system version.\n"
                    },
                    "ownerName": {
                        "type": "string",
                        "description": "(String) The device owner's user name.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getDevices.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "(String) The device's description.\n"
                    },
                    "deviceGroupType": {
                        "type": "string",
                        "description": "(String) The device group type. i.e ``ZCC_OS``, ``NON_ZCC``, ``CBI``\n"
                    },
                    "deviceModel": {
                        "type": "string",
                        "description": "(String) The device model.\n"
                    },
                    "id": {
                        "type": "integer",
                        "description": "(String) The unique identifer for the device group.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "(String) The device name.\n"
                    },
                    "osType": {
                        "type": "string",
                        "description": "(String) The operating system (OS). ``ANY``, ``OTHER_OS``, ``IOS``, ``ANDROID_OS``, ``WINDOWS_OS``, ``MAC_OS``, ``LINUX``\n"
                    },
                    "osVersion": {
                        "type": "string",
                        "description": "(String) The operating system version.\n"
                    },
                    "ownerName": {
                        "type": "string",
                        "description": "(String) The device owner's user name.\n"
                    },
                    "ownerUserId": {
                        "type": "integer",
                        "description": "(int) The unique identifier of the device owner (i.e., user).\n"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "deviceGroupType",
                    "deviceModel",
                    "id",
                    "name",
                    "osType",
                    "osVersion",
                    "ownerName",
                    "ownerUserId"
                ]
            }
        },
        "zia:Firewall/getFirewallFilteringApplication:getFirewallFilteringApplication": {
            "description": "Use the **zia_firewall_filtering_network_application** data source to get information about a network application available in the Zscaler Internet Access cloud firewall. This data source can then be associated with a ZIA firewall filtering network application rule.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@pulumi/zia\";\n\nconst apns = zia.Firewall.getFirewallFilteringApplication({\n    id: \"APNS\",\n    locale: \"en-US\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zia as zia\n\napns = zia.Firewall.get_firewall_filtering_application(id=\"APNS\",\n    locale=\"en-US\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Zia = Pulumi.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var apns = Zia.Firewall.GetFirewallFilteringApplication.Invoke(new()\n    {\n        Id = \"APNS\",\n        Locale = \"en-US\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia/Firewall\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Firewall.GetFirewallFilteringApplication(ctx, \u0026firewall.GetFirewallFilteringApplicationArgs{\n\t\t\tId:     pulumi.StringRef(\"APNS\"),\n\t\t\tLocale: pulumi.StringRef(\"en-US\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zia.Firewall.FirewallFunctions;\nimport com.pulumi.zia.Firewall.inputs.GetFirewallFilteringApplicationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var apns = FirewallFunctions.getFirewallFilteringApplication(GetFirewallFilteringApplicationArgs.builder()\n            .id(\"APNS\")\n            .locale(\"en-US\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  apns:\n    fn::invoke:\n      Function: zia:Firewall:getFirewallFilteringApplication\n      Arguments:\n        id: APNS\n        locale: en-US\n```\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@pulumi/zia\";\n\nconst dict = zia.Firewall.getFirewallFilteringApplication({\n    id: \"DICT\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zia as zia\n\ndict = zia.Firewall.get_firewall_filtering_application(id=\"DICT\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Zia = Pulumi.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var dict = Zia.Firewall.GetFirewallFilteringApplication.Invoke(new()\n    {\n        Id = \"DICT\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia/Firewall\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Firewall.GetFirewallFilteringApplication(ctx, \u0026firewall.GetFirewallFilteringApplicationArgs{\n\t\t\tId: pulumi.StringRef(\"DICT\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zia.Firewall.FirewallFunctions;\nimport com.pulumi.zia.Firewall.inputs.GetFirewallFilteringApplicationArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var dict = FirewallFunctions.getFirewallFilteringApplication(GetFirewallFilteringApplicationArgs.builder()\n            .id(\"DICT\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  dict:\n    fn::invoke:\n      Function: zia:Firewall:getFirewallFilteringApplication\n      Arguments:\n        id: DICT\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getFirewallFilteringApplication.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The name of the ip source group to be exported.\n"
                    },
                    "locale": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getFirewallFilteringApplication.\n",
                "properties": {
                    "deprecated": {
                        "type": "boolean",
                        "description": "(Boolean)\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "(String)\n"
                    },
                    "id": {
                        "type": "string"
                    },
                    "locale": {
                        "type": "string"
                    },
                    "parentCategory": {
                        "type": "string",
                        "description": "(String)\n"
                    }
                },
                "type": "object",
                "required": [
                    "deprecated",
                    "description",
                    "parentCategory"
                ]
            }
        },
        "zia:Firewall/getFirewallFilteringApplicationGroups:getFirewallFilteringApplicationGroups": {
            "description": "Use the **zia_firewall_filtering_network_application_groups** data source to get information about a network application group available in the Zscaler Internet Access cloud firewall. This data source can then be associated with a ZIA firewall filtering network application rule.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@pulumi/zia\";\n\nconst example = zia.Firewall.getFirewallFilteringApplicationGroups({\n    name: \"example\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zia as zia\n\nexample = zia.Firewall.get_firewall_filtering_application_groups(name=\"example\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Zia = Pulumi.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Zia.Firewall.GetFirewallFilteringApplicationGroups.Invoke(new()\n    {\n        Name = \"example\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia/Firewall\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Firewall.GetFirewallFilteringApplicationGroups(ctx, \u0026firewall.GetFirewallFilteringApplicationGroupsArgs{\n\t\t\tName: pulumi.StringRef(\"example\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zia.Firewall.FirewallFunctions;\nimport com.pulumi.zia.Firewall.inputs.GetFirewallFilteringApplicationGroupsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = FirewallFunctions.getFirewallFilteringApplicationGroups(GetFirewallFilteringApplicationGroupsArgs.builder()\n            .name(\"example\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: zia:Firewall:getFirewallFilteringApplicationGroups\n      Arguments:\n        name: example\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getFirewallFilteringApplicationGroups.\n",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "The ID of the ip source group resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the ip source group to be exported.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getFirewallFilteringApplicationGroups.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "(String)\n"
                    },
                    "id": {
                        "type": "integer",
                        "description": "The ID of this resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "networkApplications": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(List of String)\n"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "id",
                    "name",
                    "networkApplications"
                ]
            }
        },
        "zia:Firewall/getFirewallFilteringDestinationGroups:getFirewallFilteringDestinationGroups": {
            "description": "Use the **zia_firewall_filtering_destination_groups** data source to get information about IP destination groups option available in the Zscaler Internet Access cloud firewall. This data source can then be associated with a ZIA firewall filtering rule.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@pulumi/zia\";\n\nconst example = zia.Firewall.getFirewallFilteringDestinationGroups({\n    name: \"example\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zia as zia\n\nexample = zia.Firewall.get_firewall_filtering_destination_groups(name=\"example\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Zia = Pulumi.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Zia.Firewall.GetFirewallFilteringDestinationGroups.Invoke(new()\n    {\n        Name = \"example\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia/Firewall\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Firewall.GetFirewallFilteringDestinationGroups(ctx, \u0026firewall.GetFirewallFilteringDestinationGroupsArgs{\n\t\t\tName: pulumi.StringRef(\"example\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zia.Firewall.FirewallFunctions;\nimport com.pulumi.zia.Firewall.inputs.GetFirewallFilteringDestinationGroupsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = FirewallFunctions.getFirewallFilteringDestinationGroups(GetFirewallFilteringDestinationGroupsArgs.builder()\n            .name(\"example\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: zia:Firewall:getFirewallFilteringDestinationGroups\n      Arguments:\n        name: example\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getFirewallFilteringDestinationGroups.\n",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "The ID of the destination group resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the destination group to be exported.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getFirewallFilteringDestinationGroups.\n",
                "properties": {
                    "addresses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(List of String) Destination IP addresses within the group\n"
                    },
                    "countries": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(List of String) Destination IP address counties. You can identify destinations based on the location of a server.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "(String) Additional information about the destination IP group\n"
                    },
                    "id": {
                        "type": "integer"
                    },
                    "ipCategories": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(List of String) Destination IP address URL categories. You can identify destinations based on the URL category of the domain.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string",
                        "description": "(String) Destination IP group type (i.e., the group can contain destination IP addresses or FQDNs)\n"
                    }
                },
                "type": "object",
                "required": [
                    "addresses",
                    "countries",
                    "description",
                    "id",
                    "ipCategories",
                    "name",
                    "type"
                ]
            }
        },
        "zia:Firewall/getFirewallFilteringNetworkServiceGroups:getFirewallFilteringNetworkServiceGroups": {
            "description": "Use the **zia_firewall_filtering_network_service_groups** data source to get information about a network service groups available in the Zscaler Internet Access cloud firewall. This data source can then be associated with a ZIA firewall filtering network service rule.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@pulumi/zia\";\n\nconst example = zia.Firewall.getFirewallFilteringNetworkServiceGroups({\n    name: \"Corporate Custom SSH TCP_10022\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zia as zia\n\nexample = zia.Firewall.get_firewall_filtering_network_service_groups(name=\"Corporate Custom SSH TCP_10022\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Zia = Pulumi.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Zia.Firewall.GetFirewallFilteringNetworkServiceGroups.Invoke(new()\n    {\n        Name = \"Corporate Custom SSH TCP_10022\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia/Firewall\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Firewall.GetFirewallFilteringNetworkServiceGroups(ctx, \u0026firewall.GetFirewallFilteringNetworkServiceGroupsArgs{\n\t\t\tName: pulumi.StringRef(\"Corporate Custom SSH TCP_10022\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zia.Firewall.FirewallFunctions;\nimport com.pulumi.zia.Firewall.inputs.GetFirewallFilteringNetworkServiceGroupsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = FirewallFunctions.getFirewallFilteringNetworkServiceGroups(GetFirewallFilteringNetworkServiceGroupsArgs.builder()\n            .name(\"Corporate Custom SSH TCP_10022\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: zia:Firewall:getFirewallFilteringNetworkServiceGroups\n      Arguments:\n        name: Corporate Custom SSH TCP_10022\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getFirewallFilteringNetworkServiceGroups.\n",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "The ID of the ip source group to be exported.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the ip source group to be exported.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getFirewallFilteringNetworkServiceGroups.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "(String)\n"
                    },
                    "id": {
                        "type": "integer",
                        "description": "(Number)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "(String)\n"
                    },
                    "services": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:Firewall/getFirewallFilteringNetworkServiceGroupsService:getFirewallFilteringNetworkServiceGroupsService"
                        },
                        "description": "(Number) The ID of this resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "id",
                    "name",
                    "services"
                ]
            }
        },
        "zia:Firewall/getFirewallFilteringNetworkServices:getFirewallFilteringNetworkServices": {
            "description": "The **zia_firewall_filtering_network_service** data source to get information about a network service available in the Zscaler Internet Access cloud firewall. This data source can then be associated with a ZIA firewall filtering network service rule.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@pulumi/zia\";\n\nconst example = zia.Firewall.getFirewallFilteringNetworkServices({\n    name: \"ICMP_ANY\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zia as zia\n\nexample = zia.Firewall.get_firewall_filtering_network_services(name=\"ICMP_ANY\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Zia = Pulumi.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Zia.Firewall.GetFirewallFilteringNetworkServices.Invoke(new()\n    {\n        Name = \"ICMP_ANY\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia/Firewall\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Firewall.GetFirewallFilteringNetworkServices(ctx, \u0026firewall.GetFirewallFilteringNetworkServicesArgs{\n\t\t\tName: pulumi.StringRef(\"ICMP_ANY\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zia.Firewall.FirewallFunctions;\nimport com.pulumi.zia.Firewall.inputs.GetFirewallFilteringNetworkServicesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = FirewallFunctions.getFirewallFilteringNetworkServices(GetFirewallFilteringNetworkServicesArgs.builder()\n            .name(\"ICMP_ANY\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: zia:Firewall:getFirewallFilteringNetworkServices\n      Arguments:\n        name: ICMP_ANY\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getFirewallFilteringNetworkServices.\n",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "The ID of the application layer service to be exported.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the application layer service that you want to control. It can include any character and spaces.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getFirewallFilteringNetworkServices.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "(String) (Optional) Enter additional notes or information. The description cannot exceed 10240 characters.\n"
                    },
                    "destTcpPorts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:Firewall/getFirewallFilteringNetworkServicesDestTcpPort:getFirewallFilteringNetworkServicesDestTcpPort"
                        },
                        "description": "(Required) The TCP destination port number (example: 50) or port number range (example: 1000-1050), if any, that is used by the network service.\n"
                    },
                    "destUdpPorts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:Firewall/getFirewallFilteringNetworkServicesDestUdpPort:getFirewallFilteringNetworkServicesDestUdpPort"
                        },
                        "description": "The UDP source port number (example: 50) or port number range (example: 1000-1050), if any, that is used by the network service.\n"
                    },
                    "id": {
                        "type": "integer"
                    },
                    "isNameL10nTag": {
                        "type": "boolean",
                        "description": "(Bool) - Default: false\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "srcTcpPorts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:Firewall/getFirewallFilteringNetworkServicesSrcTcpPort:getFirewallFilteringNetworkServicesSrcTcpPort"
                        },
                        "description": "(Optional) The TCP source port number (example: 50) or port number range (example: 1000-1050), if any, that is used by the network service\n"
                    },
                    "srcUdpPorts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:Firewall/getFirewallFilteringNetworkServicesSrcUdpPort:getFirewallFilteringNetworkServicesSrcUdpPort"
                        },
                        "description": "The UDP source port number (example: 50) or port number range (example: 1000-1050), if any, that is used by the network service.\n"
                    },
                    "tag": {
                        "type": "string"
                    },
                    "type": {
                        "type": "string",
                        "description": "(String) - Supported values are: `STANDARD`, `PREDEFINED` and `CUSTOM`\n"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "destTcpPorts",
                    "destUdpPorts",
                    "id",
                    "isNameL10nTag",
                    "name",
                    "srcTcpPorts",
                    "srcUdpPorts",
                    "tag",
                    "type"
                ]
            }
        },
        "zia:Firewall/getFirewallFilteringRule:getFirewallFilteringRule": {
            "description": "Use the **zia_firewall_filtering_rule** data source to get information about a cloud firewall rule available in the Zscaler Internet Access cloud firewall.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@pulumi/zia\";\n\nconst example = zia.Firewall.getFirewallFilteringRule({\n    name: \"Office 365 One Click Rule\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zia as zia\n\nexample = zia.Firewall.get_firewall_filtering_rule(name=\"Office 365 One Click Rule\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Zia = Pulumi.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Zia.Firewall.GetFirewallFilteringRule.Invoke(new()\n    {\n        Name = \"Office 365 One Click Rule\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia/Firewall\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Firewall.GetFirewallFilteringRule(ctx, \u0026firewall.GetFirewallFilteringRuleArgs{\n\t\t\tName: pulumi.StringRef(\"Office 365 One Click Rule\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zia.Firewall.FirewallFunctions;\nimport com.pulumi.zia.Firewall.inputs.GetFirewallFilteringRuleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = FirewallFunctions.getFirewallFilteringRule(GetFirewallFilteringRuleArgs.builder()\n            .name(\"Office 365 One Click Rule\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: zia:Firewall:getFirewallFilteringRule\n      Arguments:\n        name: Office 365 One Click Rule\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getFirewallFilteringRule.\n",
                "properties": {
                    "action": {
                        "type": "string",
                        "description": "(Optional) Choose the action of the service when packets match the rule. The following actions are accepted: `ALLOW`, `BLOCK_DROP`, `BLOCK_RESET`, `BLOCK_ICMP`, `EVAL_NWAPP`\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "(Optional) Enter additional notes or information. The description cannot exceed 10,240 characters.\n"
                    },
                    "id": {
                        "type": "integer",
                        "description": "Unique identifier for the Firewall Filtering policy rule\n"
                    },
                    "lastModifiedTime": {
                        "type": "integer",
                        "description": "(Number)\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the Firewall Filtering policy rule\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "(Optional) An enabled rule is actively enforced. A disabled rule is not actively enforced but does not lose its place in the Rule Order. The service skips it and moves to the next rule.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getFirewallFilteringRule.\n",
                "properties": {
                    "accessControl": {
                        "type": "string",
                        "description": "(String)\n"
                    },
                    "action": {
                        "type": "string",
                        "description": "(Optional) Choose the action of the service when packets match the rule. The following actions are accepted: `ALLOW`, `BLOCK_DROP`, `BLOCK_RESET`, `BLOCK_ICMP`, `EVAL_NWAPP`\n"
                    },
                    "appServiceGroups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:Firewall/getFirewallFilteringRuleAppServiceGroup:getFirewallFilteringRuleAppServiceGroup"
                        },
                        "description": "Application service groups on which this rule is applied\n"
                    },
                    "appServices": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:Firewall/getFirewallFilteringRuleAppService:getFirewallFilteringRuleAppService"
                        },
                        "description": "Application services on which this rule is applied\n"
                    },
                    "defaultRule": {
                        "type": "boolean",
                        "description": "(Boolean)\n"
                    },
                    "departments": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:Firewall/getFirewallFilteringRuleDepartment:getFirewallFilteringRuleDepartment"
                        },
                        "description": "(Optional) Apply to any number of departments When not used it implies `Any` to apply the rule to all departments.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "(Optional) Enter additional notes or information. The description cannot exceed 10,240 characters.\n"
                    },
                    "destAddresses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "** - (Optional) -  IP addresses and fully qualified domain names (FQDNs), if the domain has multiple destination IP addresses or if its IP addresses may change. For IP addresses, you can enter individual IP addresses, subnets, or address ranges. If adding multiple items, hit Enter after each entry.\n"
                    },
                    "destCountries": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "** - (Optional) Identify destinations based on the location of a server, select Any to apply the rule to all countries or select the countries to which you want to control traffic.\n"
                    },
                    "destIpCategories": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "** - (Optional) identify destinations based on the URL category of the domain, select Any to apply the rule to all categories or select the specific categories you want to control.\n"
                    },
                    "destIpGroups": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "** - (Optional) Any number of destination IP address groups that you want to control with this rule.\n"
                    },
                    "enableFullLogging": {
                        "type": "boolean",
                        "description": "(Boolean)\n"
                    },
                    "groups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:Firewall/getFirewallFilteringRuleGroup:getFirewallFilteringRuleGroup"
                        },
                        "description": "(Optional) You can manually select up to `8` groups. When not used it implies `Any` to apply the rule to all groups.\n"
                    },
                    "id": {
                        "type": "integer",
                        "description": "(Number) The ID of this resource.\n"
                    },
                    "labels": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:Firewall/getFirewallFilteringRuleLabel:getFirewallFilteringRuleLabel"
                        },
                        "description": "Labels that are applicable to the rule.\n"
                    },
                    "lastModifiedBies": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:Firewall/getFirewallFilteringRuleLastModifiedBy:getFirewallFilteringRuleLastModifiedBy"
                        }
                    },
                    "lastModifiedTime": {
                        "type": "integer",
                        "description": "(Number)\n"
                    },
                    "locationGroups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:Firewall/getFirewallFilteringRuleLocationGroup:getFirewallFilteringRuleLocationGroup"
                        },
                        "description": "(Optional) You can manually select up to `32` location groups. When not used it implies `Any` to apply the rule to all location groups.\n"
                    },
                    "locations": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:Firewall/getFirewallFilteringRuleLocation:getFirewallFilteringRuleLocation"
                        },
                        "description": "(Optional) You can manually select up to `8` locations. When not used it implies `Any` to apply the rule to all groups.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "(String) The configured name of the entity\n"
                    },
                    "nwApplicationGroups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:Firewall/getFirewallFilteringRuleNwApplicationGroup:getFirewallFilteringRuleNwApplicationGroup"
                        },
                        "description": "(Optional) Any number of application groups that you want to control with this rule. The service provides predefined applications that you can group, but not modify\n"
                    },
                    "nwApplications": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(Optional) When not used it applies the rule to all applications. The service provides predefined applications, which you can group, but not modify.\n"
                    },
                    "nwServiceGroups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:Firewall/getFirewallFilteringRuleNwServiceGroup:getFirewallFilteringRuleNwServiceGroup"
                        },
                        "description": "(Optional) Any number of predefined or custom network service groups to which the rule applies.\n"
                    },
                    "nwServices": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:Firewall/getFirewallFilteringRuleNwService:getFirewallFilteringRuleNwService"
                        },
                        "description": "(Optional) When not used it applies the rule to all network services or you can select specific network services. The Zscaler firewall has predefined services and you can configure up to `1,024` additional custom services.\n"
                    },
                    "order": {
                        "type": "integer",
                        "description": "(Required) Policy rules are evaluated in ascending numerical order (Rule 1 before Rule 2, and so on), and the Rule Order reflects this rule's place in the order.\n"
                    },
                    "predefined": {
                        "type": "boolean",
                        "description": "(Boolean)\n"
                    },
                    "rank": {
                        "type": "integer",
                        "description": "(Optional) By default, the admin ranking is disabled. To use this feature, you must enable admin rank. The default value is `7`.\n"
                    },
                    "srcIpGroups": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(Optional) Any number of source IP address groups that you want to control with this rule.\n"
                    },
                    "srcIps": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(Optional) You can enter individual IP addresses, subnets, or address ranges.\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "(Optional) An enabled rule is actively enforced. A disabled rule is not actively enforced but does not lose its place in the Rule Order. The service skips it and moves to the next rule.\n"
                    },
                    "timeWindows": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:Firewall/getFirewallFilteringRuleTimeWindow:getFirewallFilteringRuleTimeWindow"
                        },
                        "description": "(Optional) You can manually select up to `2` time intervals. When not used it implies `always` to apply the rule to all time intervals.\n"
                    },
                    "users": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:Firewall/getFirewallFilteringRuleUser:getFirewallFilteringRuleUser"
                        },
                        "description": "(Optional) You can manually select up to `4` general and/or special users. When not used it implies `Any` to apply the rule to all users.\n"
                    }
                },
                "type": "object",
                "required": [
                    "accessControl",
                    "appServiceGroups",
                    "appServices",
                    "defaultRule",
                    "departments",
                    "destAddresses",
                    "destCountries",
                    "destIpCategories",
                    "destIpGroups",
                    "enableFullLogging",
                    "groups",
                    "id",
                    "labels",
                    "lastModifiedBies",
                    "locationGroups",
                    "locations",
                    "name",
                    "nwApplicationGroups",
                    "nwApplications",
                    "nwServiceGroups",
                    "nwServices",
                    "order",
                    "predefined",
                    "rank",
                    "srcIpGroups",
                    "srcIps",
                    "timeWindows",
                    "users"
                ]
            }
        },
        "zia:Firewall/getFirewallFilteringSourceIPGroups:getFirewallFilteringSourceIPGroups": {
            "description": "Use the **zia_firewall_filtering_ip_source_groups** data source to get information about ip source groups available in the Zscaler Internet Access cloud firewall. This data source can then be associated with a ZIA firewall filtering rule.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@pulumi/zia\";\n\nconst example = zia.Firewall.getFirewallFilteringSourceIPGroups({\n    name: \"example\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zia as zia\n\nexample = zia.Firewall.get_firewall_filtering_source_ip_groups(name=\"example\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Zia = Pulumi.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Zia.Firewall.GetFirewallFilteringSourceIPGroups.Invoke(new()\n    {\n        Name = \"example\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia/Firewall\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Firewall.GetFirewallFilteringSourceIPGroups(ctx, \u0026firewall.GetFirewallFilteringSourceIPGroupsArgs{\n\t\t\tName: pulumi.StringRef(\"example\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zia.Firewall.FirewallFunctions;\nimport com.pulumi.zia.Firewall.inputs.GetFirewallFilteringSourceIPGroupsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = FirewallFunctions.getFirewallFilteringSourceIPGroups(GetFirewallFilteringSourceIPGroupsArgs.builder()\n            .name(\"example\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: zia:Firewall:getFirewallFilteringSourceIPGroups\n      Arguments:\n        name: example\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getFirewallFilteringSourceIPGroups.\n",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "The ID of the ip source group resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the ip source group to be exported.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getFirewallFilteringSourceIPGroups.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "(String)\n"
                    },
                    "id": {
                        "type": "integer",
                        "description": "The ID of this resource.\n"
                    },
                    "ipAddresses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(List of String)\n"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "description",
                    "id",
                    "ipAddresses",
                    "name"
                ]
            }
        },
        "zia:Groups/getGroupManagement:getGroupManagement": {
            "inputs": {
                "description": "A collection of arguments for invoking getGroupManagement.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getGroupManagement.\n",
                "properties": {
                    "comments": {
                        "type": "string"
                    },
                    "id": {
                        "type": "integer"
                    },
                    "idpId": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "comments",
                    "id",
                    "idpId"
                ]
            }
        },
        "zia:LocationGroups/getLocationGroups:getLocationGroups": {
            "description": "Use the **zia_location_groups** data source to get information about a location group option available in the Zscaler Internet Access.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@pulumi/zia\";\n\nconst example = zia.LocationGroups.getLocationGroups({\n    name: \"Corporate User Traffic Group\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zia as zia\n\nexample = zia.LocationGroups.get_location_groups(name=\"Corporate User Traffic Group\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Zia = Pulumi.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Zia.LocationGroups.GetLocationGroups.Invoke(new()\n    {\n        Name = \"Corporate User Traffic Group\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia/LocationGroups\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := LocationGroups.GetLocationGroups(ctx, \u0026locationgroups.GetLocationGroupsArgs{\n\t\t\tName: pulumi.StringRef(\"Corporate User Traffic Group\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zia.LocationGroups.LocationGroupsFunctions;\nimport com.pulumi.zia.LocationGroups.inputs.GetLocationGroupsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = LocationGroupsFunctions.getLocationGroups(GetLocationGroupsArgs.builder()\n            .name(\"Corporate User Traffic Group\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: zia:LocationGroups:getLocationGroups\n      Arguments:\n        name: Corporate User Traffic Group\n```\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@pulumi/zia\";\n\nconst example = zia.LocationGroups.getLocationGroups({\n    name: \"Guest Wifi Group\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zia as zia\n\nexample = zia.LocationGroups.get_location_groups(name=\"Guest Wifi Group\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Zia = Pulumi.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Zia.LocationGroups.GetLocationGroups.Invoke(new()\n    {\n        Name = \"Guest Wifi Group\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia/LocationGroups\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := LocationGroups.GetLocationGroups(ctx, \u0026locationgroups.GetLocationGroupsArgs{\n\t\t\tName: pulumi.StringRef(\"Guest Wifi Group\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zia.LocationGroups.LocationGroupsFunctions;\nimport com.pulumi.zia.LocationGroups.inputs.GetLocationGroupsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = LocationGroupsFunctions.getLocationGroups(GetLocationGroupsArgs.builder()\n            .name(\"Guest Wifi Group\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: zia:LocationGroups:getLocationGroups\n      Arguments:\n        name: Guest Wifi Group\n```\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@pulumi/zia\";\n\nconst example = zia.LocationGroups.getLocationGroups({\n    name: \"IoT Traffic Group\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zia as zia\n\nexample = zia.LocationGroups.get_location_groups(name=\"IoT Traffic Group\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Zia = Pulumi.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Zia.LocationGroups.GetLocationGroups.Invoke(new()\n    {\n        Name = \"IoT Traffic Group\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia/LocationGroups\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := LocationGroups.GetLocationGroups(ctx, \u0026locationgroups.GetLocationGroupsArgs{\n\t\t\tName: pulumi.StringRef(\"IoT Traffic Group\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zia.LocationGroups.LocationGroupsFunctions;\nimport com.pulumi.zia.LocationGroups.inputs.GetLocationGroupsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = LocationGroupsFunctions.getLocationGroups(GetLocationGroupsArgs.builder()\n            .name(\"IoT Traffic Group\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: zia:LocationGroups:getLocationGroups\n      Arguments:\n        name: IoT Traffic Group\n```\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@pulumi/zia\";\n\nconst example = zia.LocationGroups.getLocationGroups({\n    name: \"Server Traffic Group\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zia as zia\n\nexample = zia.LocationGroups.get_location_groups(name=\"Server Traffic Group\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Zia = Pulumi.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Zia.LocationGroups.GetLocationGroups.Invoke(new()\n    {\n        Name = \"Server Traffic Group\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia/LocationGroups\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := LocationGroups.GetLocationGroups(ctx, \u0026locationgroups.GetLocationGroupsArgs{\n\t\t\tName: pulumi.StringRef(\"Server Traffic Group\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zia.LocationGroups.LocationGroupsFunctions;\nimport com.pulumi.zia.LocationGroups.inputs.GetLocationGroupsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = LocationGroupsFunctions.getLocationGroups(GetLocationGroupsArgs.builder()\n            .name(\"Server Traffic Group\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: zia:LocationGroups:getLocationGroups\n      Arguments:\n        name: Server Traffic Group\n```\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@pulumi/zia\";\n\nconst example = zia.LocationGroups.getLocationGroups({\n    name: \"Server Traffic Group\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zia as zia\n\nexample = zia.LocationGroups.get_location_groups(name=\"Server Traffic Group\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Zia = Pulumi.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Zia.LocationGroups.GetLocationGroups.Invoke(new()\n    {\n        Name = \"Server Traffic Group\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia/LocationGroups\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := LocationGroups.GetLocationGroups(ctx, \u0026locationgroups.GetLocationGroupsArgs{\n\t\t\tName: pulumi.StringRef(\"Server Traffic Group\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zia.LocationGroups.LocationGroupsFunctions;\nimport com.pulumi.zia.LocationGroups.inputs.GetLocationGroupsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = LocationGroupsFunctions.getLocationGroups(GetLocationGroupsArgs.builder()\n            .name(\"Server Traffic Group\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: zia:LocationGroups:getLocationGroups\n      Arguments:\n        name: Server Traffic Group\n```\n",
            "inputs": {
                "description": "A collection of arguments for invoking getLocationGroups.\n",
                "properties": {
                    "dynamicLocationGroupCriterias": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:LocationGroups/getLocationGroupsDynamicLocationGroupCriteria:getLocationGroupsDynamicLocationGroupCriteria"
                        },
                        "description": "(Block Set) Dynamic location group information.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Location group name\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getLocationGroups.\n",
                "properties": {
                    "comments": {
                        "type": "string",
                        "description": "(List of Object)\n"
                    },
                    "deleted": {
                        "type": "boolean",
                        "description": "(Boolean) Indicates the location group was deleted\n"
                    },
                    "dynamicLocationGroupCriterias": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:LocationGroups/getLocationGroupsDynamicLocationGroupCriteria:getLocationGroupsDynamicLocationGroupCriteria"
                        },
                        "description": "(Block Set) Dynamic location group information.\n"
                    },
                    "groupType": {
                        "type": "string",
                        "description": "(String) The location group's type (i.e., Static or Dynamic)\n"
                    },
                    "id": {
                        "type": "integer",
                        "description": "(Number) Identifier that uniquely identifies an entity\n"
                    },
                    "lastModTime": {
                        "type": "integer",
                        "description": "(List of Object) Automatically populated with the current time, after a successful POST or PUT request.\n"
                    },
                    "lastModUsers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:LocationGroups/getLocationGroupsLastModUser:getLocationGroupsLastModUser"
                        },
                        "description": "(List of Object)\n"
                    },
                    "locations": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:LocationGroups/getLocationGroupsLocation:getLocationGroupsLocation"
                        },
                        "description": "(List of Object) The Name-ID pairs of the locations that are assigned to the static location group. This is ignored if the groupType is Dynamic.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "(String) The configured name of the entity\n"
                    },
                    "predefined": {
                        "type": "boolean",
                        "description": "(Boolean)\n"
                    }
                },
                "type": "object",
                "required": [
                    "comments",
                    "deleted",
                    "groupType",
                    "id",
                    "lastModTime",
                    "lastModUsers",
                    "locations",
                    "predefined"
                ]
            }
        },
        "zia:LocationManagement/getLocationManagement:getLocationManagement": {
            "description": "Use the **zia_location_management** data source to get information about a location resource available in the Zscaler Internet Access Location Management. This resource can then be referenced in multiple other resources, such as URL Filtering Rules, Firewall rules etc.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@pulumi/zia\";\n\nconst example = zia.LocationManagement.getLocationManagement({\n    name: \"San Jose\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zia as zia\n\nexample = zia.LocationManagement.get_location_management(name=\"San Jose\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Zia = Pulumi.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Zia.LocationManagement.GetLocationManagement.Invoke(new()\n    {\n        Name = \"San Jose\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia/LocationManagement\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := LocationManagement.GetLocationManagement(ctx, \u0026locationmanagement.GetLocationManagementArgs{\n\t\t\tName: pulumi.StringRef(\"San Jose\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zia.LocationManagement.LocationManagementFunctions;\nimport com.pulumi.zia.LocationManagement.inputs.GetLocationManagementArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = LocationManagementFunctions.getLocationManagement(GetLocationManagementArgs.builder()\n            .name(\"San Jose\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: zia:LocationManagement:getLocationManagement\n      Arguments:\n        name: San Jose\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getLocationManagement.\n",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "The ID of the location to be exported.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the location to be exported.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getLocationManagement.\n",
                "properties": {
                    "aupBlockInternetUntilAccepted": {
                        "type": "boolean",
                        "description": "(Boolean) For First Time AUP Behavior, Block Internet Access. When set, all internet access (including non-HTTP traffic) is disabled until the user accepts the AUP.\n"
                    },
                    "aupEnabled": {
                        "type": "boolean",
                        "description": "(Boolean) Enable AUP. When set to true, AUP is enabled for the location.\n"
                    },
                    "aupForceSslInspection": {
                        "type": "boolean",
                        "description": "(Boolean) For First Time AUP Behavior, Force SSL Inspection. When set, Zscaler will force SSL Inspection in order to enforce AUP for HTTPS traffic.\n"
                    },
                    "aupTimeoutInDays": {
                        "type": "integer",
                        "description": "(Number) Custom AUP Frequency. Refresh time (in days) to re-validate the AUP.\n"
                    },
                    "authRequired": {
                        "type": "boolean",
                        "description": "(Boolean) Enforce Authentication. Required when ports are enabled, IP Surrogate is enabled, or Kerberos Authentication is enabled.\n"
                    },
                    "cautionEnabled": {
                        "type": "boolean",
                        "description": "(Boolean) Enable Caution. When set to true, a caution notifcation is enabled for the location.\n"
                    },
                    "country": {
                        "type": "string",
                        "description": "(String) Country\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "(String) Additional notes or information regarding the location or sub-location. The description cannot exceed 1024 characters.\n"
                    },
                    "displayTimeUnit": {
                        "type": "string",
                        "description": "(String) Display Time Unit. The time unit to display for IP Surrogate idle time to disassociation.\n"
                    },
                    "dnBandwidth": {
                        "type": "integer",
                        "description": "(Number) Download bandwidth in bytes. The value `0` implies no Bandwidth Control enforcement.\n"
                    },
                    "id": {
                        "type": "integer",
                        "description": "(Number) Identifier that uniquely identifies an entity\n"
                    },
                    "idleTimeInMinutes": {
                        "type": "integer",
                        "description": "(Number) Idle Time to Disassociation. The user mapping idle time (in minutes) is required if a Surrogate IP is enabled.\n"
                    },
                    "ipAddresses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(List of String) For locations: IP addresses of the egress points that are provisioned in the Zscaler Cloud. Each entry is a single IP address (e.g., `238.10.33.9`). For sub-locations: Egress, internal, or GRE tunnel IP addresses. Each entry is either a single IP address, CIDR (e.g., `10.10.33.0/24`), or range (e.g., `10.10.33.1-10.10.33.10`)).\n"
                    },
                    "ipsControl": {
                        "type": "boolean",
                        "description": "(Boolean) Enable IPS Control. When set to true, IPS Control is enabled for the location if Firewall is enabled.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "(String) The configured name of the entity\n"
                    },
                    "ofwEnabled": {
                        "type": "boolean",
                        "description": "(Boolean) Enable Firewall. When set to true, Firewall is enabled for the location.\n"
                    },
                    "parentId": {
                        "type": "integer",
                        "description": "(Number) - Parent Location ID. If this ID does not exist or is `0`, it is implied that it is a parent location. Otherwise, it is a sub-location whose parent has this ID. x-applicableTo: `SUB`\n"
                    },
                    "ports": {
                        "type": "string",
                        "description": "(String) IP ports that are associated with the location.\n"
                    },
                    "profile": {
                        "type": "string",
                        "description": "(String) Profile tag that specifies the location traffic type. If not specified, this tag defaults to `Unassigned`.\n"
                    },
                    "sslScanEnabled": {
                        "type": "boolean",
                        "description": "(Boolean) This parameter was deprecated and no longer has an effect on SSL policy. It remains supported in the API payload in order to maintain backwards compatibility with existing scripts, but it will be removed in future.\n"
                    },
                    "surrogateIp": {
                        "type": "boolean",
                        "description": "(Boolean) Enable Surrogate IP. When set to true, users are mapped to internal device IP addresses.\n"
                    },
                    "surrogateIpEnforcedForKnownBrowsers": {
                        "type": "boolean",
                        "description": "(Boolean) Enforce Surrogate IP for Known Browsers. When set to true, IP Surrogate is enforced for all known browsers.\n"
                    },
                    "surrogateRefreshTimeInMinutes": {
                        "type": "integer",
                        "description": "(Number) Refresh Time for re-validation of Surrogacy. The surrogate refresh time (in minutes) to re-validate the IP surrogates.\n"
                    },
                    "surrogateRefreshTimeUnit": {
                        "type": "string",
                        "description": "(String) Display Refresh Time Unit. The time unit to display for refresh time for re-validation of surrogacy.\n"
                    },
                    "tz": {
                        "type": "string",
                        "description": "(String) Timezone of the location. If not specified, it defaults to GMT.\n"
                    },
                    "upBandwidth": {
                        "type": "integer",
                        "description": "(Number) Upload bandwidth in bytes. The value `0` implies no Bandwidth Control enforcement.\n"
                    },
                    "vpnCredentials": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:LocationManagement/getLocationManagementVpnCredential:getLocationManagementVpnCredential"
                        }
                    },
                    "xffForwardEnabled": {
                        "type": "boolean",
                        "description": "(Boolean) Enable XFF Forwarding. When set to true, traffic is passed to Zscaler Cloud via the X-Forwarded-For (XFF) header.\n"
                    },
                    "zappSslScanEnabled": {
                        "type": "boolean",
                        "description": "(Boolean) This parameter was deprecated and no longer has an effect on SSL policy. It remains supported in the API payload in order to maintain backwards compatibility with existing scripts, but it will be removed in future.\n"
                    }
                },
                "type": "object",
                "required": [
                    "aupBlockInternetUntilAccepted",
                    "aupEnabled",
                    "aupForceSslInspection",
                    "aupTimeoutInDays",
                    "authRequired",
                    "cautionEnabled",
                    "country",
                    "description",
                    "displayTimeUnit",
                    "dnBandwidth",
                    "idleTimeInMinutes",
                    "ipAddresses",
                    "ipsControl",
                    "ofwEnabled",
                    "parentId",
                    "ports",
                    "profile",
                    "sslScanEnabled",
                    "surrogateIp",
                    "surrogateIpEnforcedForKnownBrowsers",
                    "surrogateRefreshTimeInMinutes",
                    "surrogateRefreshTimeUnit",
                    "tz",
                    "upBandwidth",
                    "vpnCredentials",
                    "xffForwardEnabled",
                    "zappSslScanEnabled"
                ]
            }
        },
        "zia:RuleLabels/getRuleLabels:getRuleLabels": {
            "description": "Use the **zia_rule_labels** data source to get information about a rule label resource in the Zscaler Internet Access cloud or via the API. This data source can then be associated with resources such as: Firewall Rules and URL filtering rules\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@pulumi/zia\";\n\nconst example = zia.RuleLabels.getRuleLabels({\n    name: \"Example\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zia as zia\n\nexample = zia.RuleLabels.get_rule_labels(name=\"Example\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Zia = Pulumi.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Zia.RuleLabels.GetRuleLabels.Invoke(new()\n    {\n        Name = \"Example\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia/RuleLabels\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := RuleLabels.GetRuleLabels(ctx, \u0026rulelabels.GetRuleLabelsArgs{\n\t\t\tName: pulumi.StringRef(\"Example\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zia.RuleLabels.RuleLabelsFunctions;\nimport com.pulumi.zia.RuleLabels.inputs.GetRuleLabelsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = RuleLabelsFunctions.getRuleLabels(GetRuleLabelsArgs.builder()\n            .name(\"Example\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: zia:RuleLabels:getRuleLabels\n      Arguments:\n        name: Example\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getRuleLabels.\n",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "The unique identifer for the device group.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the rule label to be exported.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getRuleLabels.\n",
                "properties": {
                    "createdBies": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:RuleLabels/getRuleLabelsCreatedBy:getRuleLabelsCreatedBy"
                        },
                        "description": "(String) The admin that created the rule label. This is a read-only field. Ignored by PUT requests.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "(String) The rule label description.\n"
                    },
                    "id": {
                        "type": "integer"
                    },
                    "lastModifiedBies": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:RuleLabels/getRuleLabelsLastModifiedBy:getRuleLabelsLastModifiedBy"
                        },
                        "description": "(String) The admin that modified the rule label last. This is a read-only field. Ignored by PUT requests.\n"
                    },
                    "lastModifiedTime": {
                        "type": "integer",
                        "description": "(String) Timestamp when the rule lable was last modified. This is a read-only field. Ignored by PUT and DELETE requests.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "referencedRuleCount": {
                        "type": "integer",
                        "description": "(int) The number of rules that reference the label.\n"
                    }
                },
                "type": "object",
                "required": [
                    "createdBies",
                    "description",
                    "id",
                    "lastModifiedBies",
                    "lastModifiedTime",
                    "name",
                    "referencedRuleCount"
                ]
            }
        },
        "zia:SecuritySettings/getSecuritySettings:getSecuritySettings": {
            "outputs": {
                "description": "A collection of values returned by getSecuritySettings.\n",
                "properties": {
                    "blacklistUrls": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "whitelistUrls": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "blacklistUrls",
                    "whitelistUrls",
                    "id"
                ]
            }
        },
        "zia:TimeWindow/getTimeWindow:getTimeWindow": {
            "description": "Use the **zia_firewall_filtering_time_window** data source to get information about a time window option available in the Zscaler Internet Access cloud firewall. This data source can then be associated with a ZIA firewall filtering rule.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@pulumi/zia\";\n\nconst workHours = zia.TimeWindow.getTimeWindow({\n    name: \"Work hours\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zia as zia\n\nwork_hours = zia.TimeWindow.get_time_window(name=\"Work hours\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Zia = Pulumi.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var workHours = Zia.TimeWindow.GetTimeWindow.Invoke(new()\n    {\n        Name = \"Work hours\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia/TimeWindow\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := TimeWindow.GetTimeWindow(ctx, \u0026timewindow.GetTimeWindowArgs{\n\t\t\tName: pulumi.StringRef(\"Work hours\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zia.TimeWindow.TimeWindowFunctions;\nimport com.pulumi.zia.TimeWindow.inputs.GetTimeWindowArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var workHours = TimeWindowFunctions.getTimeWindow(GetTimeWindowArgs.builder()\n            .name(\"Work hours\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  workHours:\n    fn::invoke:\n      Function: zia:TimeWindow:getTimeWindow\n      Arguments:\n        name: Work hours\n```\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@pulumi/zia\";\n\nconst weekends = zia.TimeWindow.getTimeWindow({\n    name: \"Weekends\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zia as zia\n\nweekends = zia.TimeWindow.get_time_window(name=\"Weekends\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Zia = Pulumi.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var weekends = Zia.TimeWindow.GetTimeWindow.Invoke(new()\n    {\n        Name = \"Weekends\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia/TimeWindow\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := TimeWindow.GetTimeWindow(ctx, \u0026timewindow.GetTimeWindowArgs{\n\t\t\tName: pulumi.StringRef(\"Weekends\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zia.TimeWindow.TimeWindowFunctions;\nimport com.pulumi.zia.TimeWindow.inputs.GetTimeWindowArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var weekends = TimeWindowFunctions.getTimeWindow(GetTimeWindowArgs.builder()\n            .name(\"Weekends\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  weekends:\n    fn::invoke:\n      Function: zia:TimeWindow:getTimeWindow\n      Arguments:\n        name: Weekends\n```\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@pulumi/zia\";\n\nconst offHours = zia.TimeWindow.getTimeWindow({\n    name: \"Off hours\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zia as zia\n\noff_hours = zia.TimeWindow.get_time_window(name=\"Off hours\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Zia = Pulumi.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var offHours = Zia.TimeWindow.GetTimeWindow.Invoke(new()\n    {\n        Name = \"Off hours\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia/TimeWindow\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := TimeWindow.GetTimeWindow(ctx, \u0026timewindow.GetTimeWindowArgs{\n\t\t\tName: pulumi.StringRef(\"Off hours\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zia.TimeWindow.TimeWindowFunctions;\nimport com.pulumi.zia.TimeWindow.inputs.GetTimeWindowArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var offHours = TimeWindowFunctions.getTimeWindow(GetTimeWindowArgs.builder()\n            .name(\"Off hours\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  offHours:\n    fn::invoke:\n      Function: zia:TimeWindow:getTimeWindow\n      Arguments:\n        name: Off hours\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getTimeWindow.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the time window to be exported.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getTimeWindow.\n",
                "properties": {
                    "dayOfWeeks": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(String). The supported values are:\n"
                    },
                    "endTime": {
                        "type": "integer",
                        "description": "(String)\n"
                    },
                    "id": {
                        "type": "integer"
                    },
                    "name": {
                        "type": "string"
                    },
                    "startTime": {
                        "type": "integer",
                        "description": "(String)\n"
                    }
                },
                "type": "object",
                "required": [
                    "dayOfWeeks",
                    "endTime",
                    "id",
                    "startTime"
                ]
            }
        },
        "zia:TrafficForwarding/getTrafficForwardingGREInternalIPRange:getTrafficForwardingGREInternalIPRange": {
            "inputs": {
                "description": "A collection of arguments for invoking getTrafficForwardingGREInternalIPRange.\n",
                "properties": {
                    "requiredCount": {
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getTrafficForwardingGREInternalIPRange.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "lists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:TrafficForwarding/getTrafficForwardingGREInternalIPRangeList:getTrafficForwardingGREInternalIPRangeList"
                        }
                    },
                    "requiredCount": {
                        "type": "integer"
                    }
                },
                "type": "object",
                "required": [
                    "lists",
                    "id"
                ]
            }
        },
        "zia:TrafficForwarding/getTrafficForwardingGRETunnel:getTrafficForwardingGRETunnel": {
            "inputs": {
                "description": "A collection of arguments for invoking getTrafficForwardingGRETunnel.\n",
                "properties": {
                    "id": {
                        "type": "integer"
                    },
                    "sourceIp": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getTrafficForwardingGRETunnel.\n",
                "properties": {
                    "comment": {
                        "type": "string"
                    },
                    "id": {
                        "type": "integer"
                    },
                    "internalIpRange": {
                        "type": "string"
                    },
                    "ipUnnumbered": {
                        "type": "boolean"
                    },
                    "lastModificationTime": {
                        "type": "integer"
                    },
                    "lastModifiedBies": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:TrafficForwarding/getTrafficForwardingGRETunnelLastModifiedBy:getTrafficForwardingGRETunnelLastModifiedBy"
                        }
                    },
                    "managedBies": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:TrafficForwarding/getTrafficForwardingGRETunnelManagedBy:getTrafficForwardingGRETunnelManagedBy"
                        }
                    },
                    "primaryDestVips": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:TrafficForwarding/getTrafficForwardingGRETunnelPrimaryDestVip:getTrafficForwardingGRETunnelPrimaryDestVip"
                        }
                    },
                    "secondaryDestVips": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:TrafficForwarding/getTrafficForwardingGRETunnelSecondaryDestVip:getTrafficForwardingGRETunnelSecondaryDestVip"
                        }
                    },
                    "sourceIp": {
                        "type": "string"
                    },
                    "withinCountry": {
                        "type": "boolean"
                    }
                },
                "type": "object",
                "required": [
                    "comment",
                    "internalIpRange",
                    "ipUnnumbered",
                    "lastModificationTime",
                    "lastModifiedBies",
                    "managedBies",
                    "primaryDestVips",
                    "secondaryDestVips",
                    "withinCountry"
                ]
            }
        },
        "zia:TrafficForwarding/getTrafficForwardingGRETunnelInfo:getTrafficForwardingGRETunnelInfo": {
            "description": "The **zia_traffic_forwarding_gre_tunnel_info** data source to get information about provisioned GRE tunnel information created in the Zscaler Internet Access portal.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@pulumi/zia\";\n\nconst example = zia.TrafficForwarding.getTrafficForwardingGRETunnelInfo({\n    ipAddress: \"1.1.1.1\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zia as zia\n\nexample = zia.TrafficForwarding.get_traffic_forwarding_gre_tunnel_info(ip_address=\"1.1.1.1\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Zia = Pulumi.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Zia.TrafficForwarding.GetTrafficForwardingGRETunnelInfo.Invoke(new()\n    {\n        IpAddress = \"1.1.1.1\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia/TrafficForwarding\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := TrafficForwarding.GetTrafficForwardingGRETunnelInfo(ctx, \u0026trafficforwarding.GetTrafficForwardingGRETunnelInfoArgs{\n\t\t\tIpAddress: pulumi.StringRef(\"1.1.1.1\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zia.TrafficForwarding.TrafficForwardingFunctions;\nimport com.pulumi.zia.TrafficForwarding.inputs.GetTrafficForwardingGRETunnelInfoArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = TrafficForwardingFunctions.getTrafficForwardingGRETunnelInfo(GetTrafficForwardingGRETunnelInfoArgs.builder()\n            .ipAddress(\"1.1.1.1\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: zia:TrafficForwarding:getTrafficForwardingGRETunnelInfo\n      Arguments:\n        ipAddress: 1.1.1.1\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getTrafficForwardingGRETunnelInfo.\n",
                "properties": {
                    "greEnabled": {
                        "type": "boolean",
                        "description": "Displays only ip addresses with GRE tunnel enabled\n"
                    },
                    "ipAddress": {
                        "type": "string",
                        "description": "Filter based on an IP address range.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getTrafficForwardingGRETunnelInfo.\n",
                "properties": {
                    "greEnabled": {
                        "type": "boolean"
                    },
                    "greRangePrimary": {
                        "type": "string",
                        "description": "(String)\n"
                    },
                    "greRangeSecondary": {
                        "type": "string",
                        "description": "(String)\n"
                    },
                    "greTunnelIp": {
                        "type": "string",
                        "description": "(String) The start of the internal IP address in /29 CIDR range\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "ipAddress": {
                        "type": "string"
                    },
                    "primaryGw": {
                        "type": "string",
                        "description": "(String)\n"
                    },
                    "secondaryGw": {
                        "type": "string",
                        "description": "(String)\n"
                    },
                    "tunId": {
                        "type": "integer",
                        "description": "(Number)\n"
                    }
                },
                "type": "object",
                "required": [
                    "greRangePrimary",
                    "greRangeSecondary",
                    "greTunnelIp",
                    "primaryGw",
                    "secondaryGw",
                    "tunId",
                    "id"
                ]
            }
        },
        "zia:TrafficForwarding/getTrafficForwardingNodeVIPs:getTrafficForwardingNodeVIPs": {
            "description": "Use the **zia_traffic_forwarding_public_node_vips** data source to retrieve a paginated list of virtual IP addresses (VIPs) available in the Zscaler cloud.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@pulumi/zia\";\n\nconst yvr1 = zia.TrafficForwarding.getTrafficForwardingNodeVIPs({\n    datacenter: \"YVR1\",\n});\nexport const ziaTrafficForwardingPublicNodeVipsYvr1 = yvr1;\n```\n```python\nimport pulumi\nimport pulumi_zia as zia\n\nyvr1 = zia.TrafficForwarding.get_traffic_forwarding_node_vips(datacenter=\"YVR1\")\npulumi.export(\"ziaTrafficForwardingPublicNodeVipsYvr1\", yvr1)\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Zia = Pulumi.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var yvr1 = Zia.TrafficForwarding.GetTrafficForwardingNodeVIPs.Invoke(new()\n    {\n        Datacenter = \"YVR1\",\n    });\n\n    return new Dictionary\u003cstring, object?\u003e\n    {\n        [\"ziaTrafficForwardingPublicNodeVipsYvr1\"] = yvr1.Apply(getTrafficForwardingNodeVIPsResult =\u003e getTrafficForwardingNodeVIPsResult),\n    };\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia/TrafficForwarding\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tyvr1, err := TrafficForwarding.GetTrafficForwardingNodeVIPs(ctx, \u0026trafficforwarding.GetTrafficForwardingNodeVIPsArgs{\n\t\t\tDatacenter: pulumi.StringRef(\"YVR1\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tctx.Export(\"ziaTrafficForwardingPublicNodeVipsYvr1\", yvr1)\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zia.TrafficForwarding.TrafficForwardingFunctions;\nimport com.pulumi.zia.TrafficForwarding.inputs.GetTrafficForwardingNodeVIPsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var yvr1 = TrafficForwardingFunctions.getTrafficForwardingNodeVIPs(GetTrafficForwardingNodeVIPsArgs.builder()\n            .datacenter(\"YVR1\")\n            .build());\n\n        ctx.export(\"ziaTrafficForwardingPublicNodeVipsYvr1\", yvr1.applyValue(getTrafficForwardingNodeVIPsResult -\u003e getTrafficForwardingNodeVIPsResult));\n    }\n}\n```\n```yaml\nvariables:\n  yvr1:\n    fn::invoke:\n      Function: zia:TrafficForwarding:getTrafficForwardingNodeVIPs\n      Arguments:\n        datacenter: YVR1\noutputs:\n  ziaTrafficForwardingPublicNodeVipsYvr1: ${yvr1}\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getTrafficForwardingNodeVIPs.\n",
                "properties": {
                    "datacenter": {
                        "type": "string",
                        "description": "Data-center Name\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getTrafficForwardingNodeVIPs.\n",
                "properties": {
                    "city": {
                        "type": "string"
                    },
                    "cloudName": {
                        "type": "string"
                    },
                    "datacenter": {
                        "type": "string"
                    },
                    "greDomainName": {
                        "type": "string"
                    },
                    "greIps": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "location": {
                        "type": "string"
                    },
                    "pacDomainName": {
                        "type": "string"
                    },
                    "pacIps": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "region": {
                        "type": "string"
                    },
                    "vpnDomainName": {
                        "type": "string"
                    },
                    "vpnIps": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "city",
                    "cloudName",
                    "greDomainName",
                    "greIps",
                    "location",
                    "pacDomainName",
                    "pacIps",
                    "region",
                    "vpnDomainName",
                    "vpnIps",
                    "id"
                ]
            }
        },
        "zia:TrafficForwarding/getTrafficForwardingStaticIP:getTrafficForwardingStaticIP": {
            "description": "Use the **zia_traffic_forwarding_static_ip** data source to get information about all provisioned static IP addresses. This resource can then be utilized when creating a GRE Tunnel or VPN Credential resource of Type `IP`\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@pulumi/zia\";\n\nconst example = zia.TrafficForwarding.getTrafficForwardingStaticIP({\n    ipAddress: \"1.1.1.1\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zia as zia\n\nexample = zia.TrafficForwarding.get_traffic_forwarding_static_ip(ip_address=\"1.1.1.1\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Zia = Pulumi.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Zia.TrafficForwarding.GetTrafficForwardingStaticIP.Invoke(new()\n    {\n        IpAddress = \"1.1.1.1\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia/TrafficForwarding\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := TrafficForwarding.GetTrafficForwardingStaticIP(ctx, \u0026trafficforwarding.GetTrafficForwardingStaticIPArgs{\n\t\t\tIpAddress: pulumi.StringRef(\"1.1.1.1\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zia.TrafficForwarding.TrafficForwardingFunctions;\nimport com.pulumi.zia.TrafficForwarding.inputs.GetTrafficForwardingStaticIPArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = TrafficForwardingFunctions.getTrafficForwardingStaticIP(GetTrafficForwardingStaticIPArgs.builder()\n            .ipAddress(\"1.1.1.1\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: zia:TrafficForwarding:getTrafficForwardingStaticIP\n      Arguments:\n        ipAddress: 1.1.1.1\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getTrafficForwardingStaticIP.\n",
                "properties": {
                    "comment": {
                        "type": "string",
                        "description": "(String) Additional information about this static IP address\n"
                    },
                    "id": {
                        "type": "integer",
                        "description": "The unique identifier for the static IP address\n"
                    },
                    "ipAddress": {
                        "type": "string",
                        "description": "The static IP address\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getTrafficForwardingStaticIP.\n",
                "properties": {
                    "comment": {
                        "type": "string",
                        "description": "(String) Additional information about this static IP address\n"
                    },
                    "geoOverride": {
                        "type": "boolean",
                        "description": "(Boolean) If not set, geographic coordinates and city are automatically determined from the IP address. Otherwise, the latitude and longitude coordinates must be provided.\n"
                    },
                    "id": {
                        "type": "integer",
                        "description": "(String) Identifier that uniquely identifies an entity\n"
                    },
                    "ipAddress": {
                        "type": "string",
                        "description": "(String) The static IP address\n"
                    },
                    "lastModificationTime": {
                        "type": "integer",
                        "description": "(Number) When the static IP address was last modified\n"
                    },
                    "lastModifiedBies": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:TrafficForwarding/getTrafficForwardingStaticIPLastModifiedBy:getTrafficForwardingStaticIPLastModifiedBy"
                        },
                        "description": "(Set of Object)\n"
                    },
                    "latitude": {
                        "type": "integer",
                        "description": "(Number) Required only if the geoOverride attribute is set. Latitude with 7 digit precision after decimal point, ranges between `-90` and `90` degrees.\n"
                    },
                    "longitude": {
                        "type": "integer",
                        "description": "(Number) Required only if the geoOverride attribute is set. Longitude with 7 digit precision after decimal point, ranges between `-180` and `180` degrees.\n"
                    },
                    "managedBies": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:TrafficForwarding/getTrafficForwardingStaticIPManagedBy:getTrafficForwardingStaticIPManagedBy"
                        },
                        "description": "(Set of Object)\n"
                    },
                    "routableIp": {
                        "type": "boolean",
                        "description": "(Boolean) Indicates whether a non-RFC 1918 IP address is publicly routable. This attribute is ignored if there is no ZIA Private Service Edge associated to the organization.\n"
                    }
                },
                "type": "object",
                "required": [
                    "geoOverride",
                    "id",
                    "ipAddress",
                    "lastModificationTime",
                    "lastModifiedBies",
                    "latitude",
                    "longitude",
                    "managedBies",
                    "routableIp"
                ]
            }
        },
        "zia:TrafficForwarding/getTrafficForwardingVIPRecommendedList:getTrafficForwardingVIPRecommendedList": {
            "description": "Use the **zia_gre_vip_recommended_list** data source to get information about a list of recommended GRE tunnel virtual IP addresses (VIPs), based on source IP address or latitude/longitude coordinates.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getTrafficForwardingVIPRecommendedList.\n",
                "properties": {
                    "geoOverride": {
                        "type": "boolean"
                    },
                    "requiredCount": {
                        "type": "integer"
                    },
                    "routableIp": {
                        "type": "boolean"
                    },
                    "sourceIp": {
                        "type": "string",
                        "description": "(String) The public source IP address.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getTrafficForwardingVIPRecommendedList.\n",
                "properties": {
                    "geoOverride": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "lists": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:TrafficForwarding/getTrafficForwardingVIPRecommendedListList:getTrafficForwardingVIPRecommendedListList"
                        }
                    },
                    "requiredCount": {
                        "type": "integer"
                    },
                    "routableIp": {
                        "type": "boolean"
                    },
                    "sourceIp": {
                        "type": "string",
                        "description": "(String) The public source IP address.\n"
                    }
                },
                "type": "object",
                "required": [
                    "lists",
                    "id"
                ]
            }
        },
        "zia:TrafficForwarding/getTrafficForwardingVPNCredentials:getTrafficForwardingVPNCredentials": {
            "description": "Use the **zia_traffic_forwarding_vpn_credentials** data source to get information about VPN credentials that can be associated to locations. VPN is one way to route traffic from customer locations to the cloud. Site-to-Site IPSec VPN credentials can be identified by the cloud through one of the following methods:\n\n* Common Name (CN) of IPSec Certificate\n* VPN User FQDN - requires VPN_SITE_TO_SITE subscription\n* VPN IP Address - requires VPN_SITE_TO_SITE subscription\n* Extended Authentication (XAUTH) or hosted mobile UserID - requires VPN_MOBILE subscription\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@pulumi/zia\";\n\nconst example = zia.TrafficForwarding.getTrafficForwardingVPNCredentials({\n    fqdn: \"sjc-1-37@acme.com\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zia as zia\n\nexample = zia.TrafficForwarding.get_traffic_forwarding_vpn_credentials(fqdn=\"sjc-1-37@acme.com\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Zia = Pulumi.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Zia.TrafficForwarding.GetTrafficForwardingVPNCredentials.Invoke(new()\n    {\n        Fqdn = \"sjc-1-37@acme.com\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia/TrafficForwarding\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := TrafficForwarding.GetTrafficForwardingVPNCredentials(ctx, \u0026trafficforwarding.GetTrafficForwardingVPNCredentialsArgs{\n\t\t\tFqdn: pulumi.StringRef(\"sjc-1-37@acme.com\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zia.TrafficForwarding.TrafficForwardingFunctions;\nimport com.pulumi.zia.TrafficForwarding.inputs.GetTrafficForwardingVPNCredentialsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = TrafficForwardingFunctions.getTrafficForwardingVPNCredentials(GetTrafficForwardingVPNCredentialsArgs.builder()\n            .fqdn(\"sjc-1-37@acme.com\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: zia:TrafficForwarding:getTrafficForwardingVPNCredentials\n      Arguments:\n        fqdn: sjc-1-37@acme.com\n```\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@pulumi/zia\";\n\nconst example = zia.TrafficForwarding.getTrafficForwardingVPNCredentials({\n    ipAddress: \"1.1.1.1\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zia as zia\n\nexample = zia.TrafficForwarding.get_traffic_forwarding_vpn_credentials(ip_address=\"1.1.1.1\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Zia = Pulumi.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Zia.TrafficForwarding.GetTrafficForwardingVPNCredentials.Invoke(new()\n    {\n        IpAddress = \"1.1.1.1\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia/TrafficForwarding\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := TrafficForwarding.GetTrafficForwardingVPNCredentials(ctx, \u0026trafficforwarding.GetTrafficForwardingVPNCredentialsArgs{\n\t\t\tIpAddress: pulumi.StringRef(\"1.1.1.1\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zia.TrafficForwarding.TrafficForwardingFunctions;\nimport com.pulumi.zia.TrafficForwarding.inputs.GetTrafficForwardingVPNCredentialsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = TrafficForwardingFunctions.getTrafficForwardingVPNCredentials(GetTrafficForwardingVPNCredentialsArgs.builder()\n            .ipAddress(\"1.1.1.1\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: zia:TrafficForwarding:getTrafficForwardingVPNCredentials\n      Arguments:\n        ipAddress: 1.1.1.1\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getTrafficForwardingVPNCredentials.\n",
                "properties": {
                    "fqdn": {
                        "type": "string",
                        "description": "(String) Fully Qualified Domain Name. Applicable only to `UFQDN` or `XAUTH` (or `HOSTED_MOBILE_USERS`) auth type.\n"
                    },
                    "id": {
                        "type": "integer",
                        "description": "Unique identifer of the GRE virtual IP address (VIP)\n"
                    },
                    "ipAddress": {
                        "type": "string",
                        "description": "Filter based on an IP address range.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "(String) VPN authentication type (i.e., how the VPN credential is sent to the server). It is not modifiable after VpnCredential is created.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getTrafficForwardingVPNCredentials.\n",
                "properties": {
                    "comments": {
                        "type": "string",
                        "description": "(String) Additional information about this VPN credential.\n"
                    },
                    "fqdn": {
                        "type": "string",
                        "description": "(String) Fully Qualified Domain Name. Applicable only to `UFQDN` or `XAUTH` (or `HOSTED_MOBILE_USERS`) auth type.\n"
                    },
                    "id": {
                        "type": "integer",
                        "description": "(Number) Identifier that uniquely identifies an entity\n"
                    },
                    "ipAddress": {
                        "type": "string"
                    },
                    "locations": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:TrafficForwarding/getTrafficForwardingVPNCredentialsLocation:getTrafficForwardingVPNCredentialsLocation"
                        },
                        "description": "(Set of Object) Location that is associated to this VPN credential. Non-existence means not associated to any location.\n"
                    },
                    "managedBies": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:TrafficForwarding/getTrafficForwardingVPNCredentialsManagedBy:getTrafficForwardingVPNCredentialsManagedBy"
                        },
                        "description": "(Set of Object) SD-WAN Partner that manages the location. If a partner does not manage the locaton, this is set to Self.\n"
                    },
                    "preSharedKey": {
                        "type": "string",
                        "description": "(String) Pre-shared key. This is a required field for `UFQDN` and `IP` auth type.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "(String) VPN authentication type (i.e., how the VPN credential is sent to the server). It is not modifiable after VpnCredential is created.\n"
                    }
                },
                "type": "object",
                "required": [
                    "comments",
                    "id",
                    "locations",
                    "managedBies",
                    "preSharedKey",
                    "type"
                ]
            }
        },
        "zia:URLCategory/getURLCategories:getURLCategories": {
            "description": "Use the **zia_url_categories** data source to get information about all or custom URL categories. By default, the response includes keywords.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@pulumi/zia\";\n\nconst example = zia.URLCategory.getURLCategories({\n    id: \"CUSTOM_08\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zia as zia\n\nexample = zia.URLCategory.get_url_categories(id=\"CUSTOM_08\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Zia = Pulumi.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Zia.URLCategory.GetURLCategories.Invoke(new()\n    {\n        Id = \"CUSTOM_08\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia/URLCategory\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := URLCategory.GetURLCategories(ctx, \u0026urlcategory.GetURLCategoriesArgs{\n\t\t\tId: pulumi.StringRef(\"CUSTOM_08\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zia.URLCategory.URLCategoryFunctions;\nimport com.pulumi.zia.URLCategory.inputs.GetURLCategoriesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = URLCategoryFunctions.getURLCategories(GetURLCategoriesArgs.builder()\n            .id(\"CUSTOM_08\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: zia:URLCategory:getURLCategories\n      Arguments:\n        id: CUSTOM_08\n```\n",
            "inputs": {
                "description": "A collection of arguments for invoking getURLCategories.\n",
                "properties": {
                    "configuredName": {
                        "type": "string",
                        "description": "(String) Name of the URL category. This is only required for custom URL categories.\n"
                    },
                    "customCategory": {
                        "type": "boolean",
                        "description": "(Boolean) Set to true for custom URL category. Up to 48 custom URL categories can be added per organization.\n"
                    },
                    "customIpRangesCount": {
                        "type": "integer",
                        "description": "(Number) The number of custom IP address ranges associated to the URL category.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "URL category\n"
                    },
                    "superCategory": {
                        "type": "string",
                        "description": "(String)\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getURLCategories.\n",
                "properties": {
                    "configuredName": {
                        "type": "string",
                        "description": "(String) Name of the URL category. This is only required for custom URL categories.\n"
                    },
                    "customCategory": {
                        "type": "boolean",
                        "description": "(Boolean) Set to true for custom URL category. Up to 48 custom URL categories can be added per organization.\n"
                    },
                    "customIpRangesCount": {
                        "type": "integer",
                        "description": "(Number) The number of custom IP address ranges associated to the URL category.\n"
                    },
                    "customUrlsCount": {
                        "type": "integer",
                        "description": "(Number) The number of custom URLs associated to the URL category.\n"
                    },
                    "dbCategorizedUrls": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(List of String) URLs added to a custom URL category are also retained under the original parent URL category (i.e., the predefined category the URL previously belonged to).\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "(String) Description of the category.\n"
                    },
                    "editable": {
                        "type": "boolean",
                        "description": "(Boolean) Value is set to false for custom URL category when due to scope user does not have edit permission\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "(String) Identifier that uniquely identifies an entity\n"
                    },
                    "ipRanges": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "ipRangesRetainingParentCategories": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "ipRangesRetainingParentCategoryCount": {
                        "type": "integer",
                        "description": "(Number) The number of custom IP address ranges associated to the URL category, that also need to be retained under the original parent category.\n"
                    },
                    "keywords": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(List of String) Custom keywords associated to a URL category. Up to 2048 custom keywords can be added per organization across all categories (including bandwidth classes).\n"
                    },
                    "keywordsRetainingParentCategories": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "scopes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:URLCategory/getURLCategoriesScope:getURLCategoriesScope"
                        },
                        "description": "(List of Object) Scope of the custom categories.\n"
                    },
                    "superCategory": {
                        "type": "string",
                        "description": "(String)\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "(String) The admin scope type. The attribute name is subject to change. `ORGANIZATION`, `DEPARTMENT`, `LOCATION`, `LOCATION_GROUP`\n"
                    },
                    "urlKeywordCounts": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:URLCategory/getURLCategoriesUrlKeywordCount:getURLCategoriesUrlKeywordCount"
                        },
                        "description": "(List of Object) URL and keyword counts for the category.\n"
                    },
                    "urls": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(List of String) Custom URLs to add to a URL category. Up to 25,000 custom URLs can be added per organization across all categories (including bandwidth classes).\n"
                    },
                    "urlsRetainingParentCategoryCount": {
                        "type": "integer",
                        "description": "(Number) The number of custom URLs associated to the URL category, that also need to be retained under the original parent category.\n"
                    },
                    "val": {
                        "type": "integer",
                        "description": "(Number)\n"
                    }
                },
                "type": "object",
                "required": [
                    "configuredName",
                    "customCategory",
                    "customUrlsCount",
                    "dbCategorizedUrls",
                    "description",
                    "editable",
                    "id",
                    "ipRanges",
                    "ipRangesRetainingParentCategories",
                    "ipRangesRetainingParentCategoryCount",
                    "keywords",
                    "keywordsRetainingParentCategories",
                    "scopes",
                    "type",
                    "urlKeywordCounts",
                    "urls",
                    "urlsRetainingParentCategoryCount",
                    "val"
                ]
            }
        },
        "zia:URLFiltering/getURLFilteringRules:getURLFilteringRules": {
            "description": "Use the **zia_url_filtering_rules** data source to get information about a URL filtering rule information for the specified `Name`.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@pulumi/zia\";\n\nconst example = zia.URLFiltering.getURLFilteringRules({\n    name: \"Example\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zia as zia\n\nexample = zia.URLFiltering.get_url_filtering_rules(name=\"Example\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Zia = Pulumi.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var example = Zia.URLFiltering.GetURLFilteringRules.Invoke(new()\n    {\n        Name = \"Example\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia/URLFiltering\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := URLFiltering.GetURLFilteringRules(ctx, \u0026urlfiltering.GetURLFilteringRulesArgs{\n\t\t\tName: pulumi.StringRef(\"Example\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zia.URLFiltering.URLFilteringFunctions;\nimport com.pulumi.zia.URLFiltering.inputs.GetURLFilteringRulesArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var example = URLFilteringFunctions.getURLFilteringRules(GetURLFilteringRulesArgs.builder()\n            .name(\"Example\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  example:\n    fn::invoke:\n      Function: zia:URLFiltering:getURLFilteringRules\n      Arguments:\n        name: Example\n```\n",
            "inputs": {
                "description": "A collection of arguments for invoking getURLFilteringRules.\n",
                "properties": {
                    "deviceTrustLevels": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "id": {
                        "type": "integer",
                        "description": "URL Filtering Rule ID\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the URL Filtering policy rule\n"
                    },
                    "order": {
                        "type": "integer",
                        "description": "(Number) Order of execution of rule with respect to other URL Filtering rules\n"
                    },
                    "userAgentTypes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getURLFilteringRules.\n",
                "properties": {
                    "action": {
                        "type": "string",
                        "description": "(String) Action taken when traffic matches rule criteria. Supported values: `ANY`, `NONE`, `BLOCK`, `CAUTION`, `ALLOW`, `ICAP_RESPONSE`\n"
                    },
                    "blockOverride": {
                        "type": "boolean",
                        "description": "(String) When set to true, a `BLOCK` action triggered by the rule could be overridden. If true and both overrideGroup and overrideUsers are not set, the `BLOCK` triggered by this rule could be overridden for any users. If block)Override is not set, `BLOCK` action cannot be overridden.\n"
                    },
                    "cbiProfileId": {
                        "type": "integer"
                    },
                    "ciparule": {
                        "type": "boolean"
                    },
                    "departments": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:URLFiltering/getURLFilteringRulesDepartment:getURLFilteringRulesDepartment"
                        },
                        "description": "(List of Object) The departments to which the Firewall Filtering policy rule applies\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "(String) Additional information about the rule\n"
                    },
                    "deviceGroups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:URLFiltering/getURLFilteringRulesDeviceGroup:getURLFilteringRulesDeviceGroup"
                        }
                    },
                    "deviceTrustLevels": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "devices": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:URLFiltering/getURLFilteringRulesDevice:getURLFilteringRulesDevice"
                        }
                    },
                    "endUserNotificationUrl": {
                        "type": "string",
                        "description": "(String) URL of end user notification page to be displayed when the rule is matched. Not applicable if either 'overrideUsers' or 'overrideGroups' is specified.\n"
                    },
                    "enforceTimeValidity": {
                        "type": "boolean",
                        "description": "(String) Enforce a set a validity time period for the URL Filtering rule.\n"
                    },
                    "groups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:URLFiltering/getURLFilteringRulesGroup:getURLFilteringRulesGroup"
                        },
                        "description": "(List of Object) The groups to which the Firewall Filtering policy rule applies\n"
                    },
                    "id": {
                        "type": "integer",
                        "description": "(Number) Identifier that uniquely identifies an entity\n"
                    },
                    "labels": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:URLFiltering/getURLFilteringRulesLabel:getURLFilteringRulesLabel"
                        }
                    },
                    "lastModifiedBies": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:URLFiltering/getURLFilteringRulesLastModifiedBy:getURLFilteringRulesLastModifiedBy"
                        }
                    },
                    "lastModifiedTime": {
                        "type": "integer",
                        "description": "(Number) When the rule was last modified\n"
                    },
                    "locationGroups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:URLFiltering/getURLFilteringRulesLocationGroup:getURLFilteringRulesLocationGroup"
                        },
                        "description": "(List of Object) The location groups to which the Firewall Filtering policy rule applies\n"
                    },
                    "locations": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:URLFiltering/getURLFilteringRulesLocation:getURLFilteringRulesLocation"
                        },
                        "description": "(List of Object) The locations to which the Firewall Filtering policy rule applies\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "(String) The configured name of the entity\n"
                    },
                    "order": {
                        "type": "integer",
                        "description": "(Number) Order of execution of rule with respect to other URL Filtering rules\n"
                    },
                    "overrideGroups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:URLFiltering/getURLFilteringRulesOverrideGroup:getURLFilteringRulesOverrideGroup"
                        },
                        "description": "(List of Object) Name-ID pairs of users for which this rule can be overridden. Applicable only if blockOverride is set to `true`, action is `BLOCK` and overrideGroups is not set.If this overrideUsers is not set, `BLOCK` action can be overridden for any group.\n"
                    },
                    "overrideUsers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:URLFiltering/getURLFilteringRulesOverrideUser:getURLFilteringRulesOverrideUser"
                        },
                        "description": "(List of Object) Name-ID pairs of users for which this rule can be overridden. Applicable only if blockOverride is set to `true`, action is `BLOCK` and overrideGroups is not set.If this overrideUsers is not set, `BLOCK` action can be overridden for any user.\n"
                    },
                    "protocols": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(List of Object) Protocol criteria. Supported values: `SMRULEF_ZPA_BROKERS_RULE`, `ANY_RULE`, `TCP_RULE`, `UDP_RULE`, `DOHTTPS_RULE`, `TUNNELSSL_RULE`, `HTTP_PROXY`, `FOHTTP_RULE`, `FTP_RULE`, `HTTPS_RULE`, `HTTP_RULE`, `SSL_RULE`, `TUNNEL_RULE`.\n"
                    },
                    "rank": {
                        "type": "integer",
                        "description": "(String) Admin rank of the admin who creates this rule\n"
                    },
                    "requestMethods": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(String) Request method for which the rule must be applied. If not set, rule will be applied to all methods\n"
                    },
                    "sizeQuota": {
                        "type": "integer",
                        "description": "(String) Size quota in KB beyond which the URL Filtering rule is applied. If not set, no quota is enforced. If a policy rule action is set to `BLOCK`, this field is not applicable.\n"
                    },
                    "state": {
                        "type": "string",
                        "description": "(String) Rule State\n"
                    },
                    "timeQuota": {
                        "type": "integer",
                        "description": "(String) Time quota in minutes, after which the URL Filtering rule is applied. If not set, no quota is enforced. If a policy rule action is set to `BLOCK`, this field is not applicable.\n"
                    },
                    "timeWindows": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:URLFiltering/getURLFilteringRulesTimeWindow:getURLFilteringRulesTimeWindow"
                        },
                        "description": "(List of Object) The time interval in which the Firewall Filtering policy rule applies\n"
                    },
                    "urlCategories": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "(String) List of URL categories for which rule must be applied\n"
                    },
                    "userAgentTypes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "users": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:URLFiltering/getURLFilteringRulesUser:getURLFilteringRulesUser"
                        },
                        "description": "(List of Object) The users to which the Firewall Filtering policy rule applies\n"
                    },
                    "validityEndTime": {
                        "type": "integer",
                        "description": "(Number) If enforceTimeValidity is set to true, the URL Filtering rule will cease to be valid on this end date and time.\n"
                    },
                    "validityStartTime": {
                        "type": "integer",
                        "description": "(Number) If enforceTimeValidity is set to true, the URL Filtering rule will be valid starting on this date and time.\n"
                    },
                    "validityTimeZoneId": {
                        "type": "string",
                        "description": "(Number) If enforceTimeValidity is set to true, the URL Filtering rule date and time will be valid based on this time zone ID.\n"
                    }
                },
                "type": "object",
                "required": [
                    "action",
                    "blockOverride",
                    "cbiProfileId",
                    "ciparule",
                    "departments",
                    "description",
                    "deviceGroups",
                    "devices",
                    "endUserNotificationUrl",
                    "enforceTimeValidity",
                    "groups",
                    "id",
                    "labels",
                    "lastModifiedBies",
                    "lastModifiedTime",
                    "locationGroups",
                    "locations",
                    "name",
                    "order",
                    "overrideGroups",
                    "overrideUsers",
                    "protocols",
                    "rank",
                    "requestMethods",
                    "sizeQuota",
                    "state",
                    "timeQuota",
                    "timeWindows",
                    "urlCategories",
                    "users",
                    "validityEndTime",
                    "validityStartTime",
                    "validityTimeZoneId"
                ]
            }
        },
        "zia:Users/getUserManagement:getUserManagement": {
            "description": "Use the **zia_user_management** data source to get information about a user account that may have been created in the Zscaler Internet Access portal or via API. This data source can then be associated with a ZIA cloud firewall filtering rule, and URL filtering rules.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as zia from \"@pulumi/zia\";\n\nconst adamAshcroft = zia.Users.getUserManagement({\n    name: \"Adam Ashcroft\",\n});\n```\n```python\nimport pulumi\nimport pulumi_zia as zia\n\nadam_ashcroft = zia.Users.get_user_management(name=\"Adam Ashcroft\")\n```\n```csharp\nusing System.Collections.Generic;\nusing Pulumi;\nusing Zia = Pulumi.Zia;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var adamAshcroft = Zia.Users.GetUserManagement.Invoke(new()\n    {\n        Name = \"Adam Ashcroft\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n\t\"github.com/zscaler/pulumi-zia/sdk/go/zia/Users\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := Users.GetUserManagement(ctx, \u0026users.GetUserManagementArgs{\n\t\t\tName: pulumi.StringRef(\"Adam Ashcroft\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.zia.Users.UsersFunctions;\nimport com.pulumi.zia.Users.inputs.GetUserManagementArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var adamAshcroft = UsersFunctions.getUserManagement(GetUserManagementArgs.builder()\n            .name(\"Adam Ashcroft\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  adamAshcroft:\n    fn::invoke:\n      Function: zia:Users:getUserManagement\n      Arguments:\n        name: Adam Ashcroft\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getUserManagement.\n",
                "properties": {
                    "id": {
                        "type": "integer",
                        "description": "The ID of the time window resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "User name. This appears when choosing users for policies.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getUserManagement.\n",
                "properties": {
                    "adminUser": {
                        "type": "boolean",
                        "description": "(Optional) True if this user is an Admin user. readOnly: `true` default: `false`\n"
                    },
                    "comments": {
                        "type": "string",
                        "description": "(String) Additional information about the group\n"
                    },
                    "departments": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:Users/getUserManagementDepartment:getUserManagementDepartment"
                        },
                        "description": "(Required) Department a user belongs to\n"
                    },
                    "email": {
                        "type": "string",
                        "description": "(Required) User email consists of a user name and domain name. It does not have to be a valid email address, but it must be unique and its domain must belong to the organization\n"
                    },
                    "groups": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/zia:Users/getUserManagementGroup:getUserManagementGroup"
                        },
                        "description": "(Required) List of Groups a user belongs to. Groups are used in policies.\n"
                    },
                    "id": {
                        "type": "integer",
                        "description": "(Number) Unique identfier for the group\n"
                    },
                    "isAuditor": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "description": "(String) Group name\n"
                    },
                    "tempAuthEmail": {
                        "type": "string",
                        "description": "(String) Temporary Authentication Email. If you enabled one-time tokens or links, enter the email address to which the Zscaler service sends the tokens or links. If this is empty, the service will send the email to the User email.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "(String) User type. Provided only if this user is not an end user. The supported types are:\n"
                    }
                },
                "type": "object",
                "required": [
                    "adminUser",
                    "comments",
                    "departments",
                    "email",
                    "groups",
                    "isAuditor",
                    "tempAuthEmail",
                    "type"
                ]
            }
        }
    }
}