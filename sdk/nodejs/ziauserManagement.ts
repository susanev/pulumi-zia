// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * The **zia_user_management** resource allows the creation and management of local user account in the Zscaler Internet Access cloud. The user account resource can then be associated with several different types of resource within the ZIA tenant.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as zia from "@pulumi/zia";
 * import * as zia from "@zscaler/pulumi-zia";
 *
 * const normalInternet = zia.getZIAGroupManagement({
 *     name: "Normal_Internet",
 * });
 * const engineering = zia.getZIADepartmentManagement({
 *     name: "Engineering",
 * });
 * // ZIA Local User Account
 * const johnAshcroft = new zia.ZIAUserManagement("johnAshcroft", {
 *     email: "john.ashcroft@acme.com",
 *     password: "P@ssw0rd123*",
 *     groups: {
 *         ids: normalInternet.then(normalInternet => normalInternet.id),
 *     },
 *     department: {
 *         id: engineering.then(engineering => engineering.id),
 *     },
 * });
 * ```
 * ## Optional
 *
 * The following attributes are supported:
 *
 * * `comments` - (Optional) Additional information about this user.
 * * `tempAuthEmail` - (Optional) Temporary Authentication Email. If you enabled one-time tokens or links, enter the email address to which the Zscaler service sends the tokens or links. If this is empty, the service will send the email to the User email.
 */
export class ZIAUserManagement extends pulumi.CustomResource {
    /**
     * Get an existing ZIAUserManagement resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ZIAUserManagementState, opts?: pulumi.CustomResourceOptions): ZIAUserManagement {
        return new ZIAUserManagement(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'zia:index/zIAUserManagement:ZIAUserManagement';

    /**
     * Returns true if the given object is an instance of ZIAUserManagement.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ZIAUserManagement {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ZIAUserManagement.__pulumiType;
    }

    /**
     * Additional information about this user.
     */
    public readonly comments!: pulumi.Output<string | undefined>;
    /**
     * Department a user belongs to
     */
    public readonly department!: pulumi.Output<outputs.ZIAUserManagementDepartment | undefined>;
    /**
     * User email consists of a user name and domain name. It does not have to be a valid email address, but it must be unique and its domain must belong to the organization.
     */
    public readonly email!: pulumi.Output<string>;
    /**
     * List of Groups a user belongs to. Groups are used in policies.
     */
    public readonly groups!: pulumi.Output<outputs.ZIAUserManagementGroups>;
    /**
     * User name. This appears when choosing users for policies.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * User's password. Applicable only when authentication type is Hosted DB. Password strength must follow what is defined in the auth settings.
     */
    public readonly password!: pulumi.Output<string>;
    /**
     * Temporary Authentication Email. If you enabled one-time tokens or links, enter the email address to which the Zscaler
     * service sends the tokens or links. If this is empty, the service will send the email to the User email.
     */
    public readonly tempAuthEmail!: pulumi.Output<string | undefined>;
    public /*out*/ readonly userId!: pulumi.Output<number>;

    /**
     * Create a ZIAUserManagement resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ZIAUserManagementArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ZIAUserManagementArgs | ZIAUserManagementState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ZIAUserManagementState | undefined;
            resourceInputs["comments"] = state ? state.comments : undefined;
            resourceInputs["department"] = state ? state.department : undefined;
            resourceInputs["email"] = state ? state.email : undefined;
            resourceInputs["groups"] = state ? state.groups : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["tempAuthEmail"] = state ? state.tempAuthEmail : undefined;
            resourceInputs["userId"] = state ? state.userId : undefined;
        } else {
            const args = argsOrState as ZIAUserManagementArgs | undefined;
            if ((!args || args.email === undefined) && !opts.urn) {
                throw new Error("Missing required property 'email'");
            }
            if ((!args || args.password === undefined) && !opts.urn) {
                throw new Error("Missing required property 'password'");
            }
            resourceInputs["comments"] = args ? args.comments : undefined;
            resourceInputs["department"] = args ? args.department : undefined;
            resourceInputs["email"] = args ? args.email : undefined;
            resourceInputs["groups"] = args ? args.groups : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["tempAuthEmail"] = args ? args.tempAuthEmail : undefined;
            resourceInputs["userId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(ZIAUserManagement.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ZIAUserManagement resources.
 */
export interface ZIAUserManagementState {
    /**
     * Additional information about this user.
     */
    comments?: pulumi.Input<string>;
    /**
     * Department a user belongs to
     */
    department?: pulumi.Input<inputs.ZIAUserManagementDepartment>;
    /**
     * User email consists of a user name and domain name. It does not have to be a valid email address, but it must be unique and its domain must belong to the organization.
     */
    email?: pulumi.Input<string>;
    /**
     * List of Groups a user belongs to. Groups are used in policies.
     */
    groups?: pulumi.Input<inputs.ZIAUserManagementGroups>;
    /**
     * User name. This appears when choosing users for policies.
     */
    name?: pulumi.Input<string>;
    /**
     * User's password. Applicable only when authentication type is Hosted DB. Password strength must follow what is defined in the auth settings.
     */
    password?: pulumi.Input<string>;
    /**
     * Temporary Authentication Email. If you enabled one-time tokens or links, enter the email address to which the Zscaler
     * service sends the tokens or links. If this is empty, the service will send the email to the User email.
     */
    tempAuthEmail?: pulumi.Input<string>;
    userId?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a ZIAUserManagement resource.
 */
export interface ZIAUserManagementArgs {
    /**
     * Additional information about this user.
     */
    comments?: pulumi.Input<string>;
    /**
     * Department a user belongs to
     */
    department?: pulumi.Input<inputs.ZIAUserManagementDepartment>;
    /**
     * User email consists of a user name and domain name. It does not have to be a valid email address, but it must be unique and its domain must belong to the organization.
     */
    email: pulumi.Input<string>;
    /**
     * List of Groups a user belongs to. Groups are used in policies.
     */
    groups?: pulumi.Input<inputs.ZIAUserManagementGroups>;
    /**
     * User name. This appears when choosing users for policies.
     */
    name?: pulumi.Input<string>;
    /**
     * User's password. Applicable only when authentication type is Hosted DB. Password strength must follow what is defined in the auth settings.
     */
    password: pulumi.Input<string>;
    /**
     * Temporary Authentication Email. If you enabled one-time tokens or links, enter the email address to which the Zscaler
     * service sends the tokens or links. If this is empty, the service will send the email to the User email.
     */
    tempAuthEmail?: pulumi.Input<string>;
}
