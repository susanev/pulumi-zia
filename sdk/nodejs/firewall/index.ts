// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { FirewallFilteringApplicationGroupsArgs, FirewallFilteringApplicationGroupsState } from "./firewallFilteringApplicationGroups";
export type FirewallFilteringApplicationGroups = import("./firewallFilteringApplicationGroups").FirewallFilteringApplicationGroups;
export const FirewallFilteringApplicationGroups: typeof import("./firewallFilteringApplicationGroups").FirewallFilteringApplicationGroups = null as any;
utilities.lazyLoad(exports, ["FirewallFilteringApplicationGroups"], () => require("./firewallFilteringApplicationGroups"));

export { FirewallFilteringDestinationGroupsArgs, FirewallFilteringDestinationGroupsState } from "./firewallFilteringDestinationGroups";
export type FirewallFilteringDestinationGroups = import("./firewallFilteringDestinationGroups").FirewallFilteringDestinationGroups;
export const FirewallFilteringDestinationGroups: typeof import("./firewallFilteringDestinationGroups").FirewallFilteringDestinationGroups = null as any;
utilities.lazyLoad(exports, ["FirewallFilteringDestinationGroups"], () => require("./firewallFilteringDestinationGroups"));

export { FirewallFilteringNetworkServicesArgs, FirewallFilteringNetworkServicesState } from "./firewallFilteringNetworkServices";
export type FirewallFilteringNetworkServices = import("./firewallFilteringNetworkServices").FirewallFilteringNetworkServices;
export const FirewallFilteringNetworkServices: typeof import("./firewallFilteringNetworkServices").FirewallFilteringNetworkServices = null as any;
utilities.lazyLoad(exports, ["FirewallFilteringNetworkServices"], () => require("./firewallFilteringNetworkServices"));

export { FirewallFilteringRuleArgs, FirewallFilteringRuleState } from "./firewallFilteringRule";
export type FirewallFilteringRule = import("./firewallFilteringRule").FirewallFilteringRule;
export const FirewallFilteringRule: typeof import("./firewallFilteringRule").FirewallFilteringRule = null as any;
utilities.lazyLoad(exports, ["FirewallFilteringRule"], () => require("./firewallFilteringRule"));

export { FirewallFilteringServiceGroupsArgs, FirewallFilteringServiceGroupsState } from "./firewallFilteringServiceGroups";
export type FirewallFilteringServiceGroups = import("./firewallFilteringServiceGroups").FirewallFilteringServiceGroups;
export const FirewallFilteringServiceGroups: typeof import("./firewallFilteringServiceGroups").FirewallFilteringServiceGroups = null as any;
utilities.lazyLoad(exports, ["FirewallFilteringServiceGroups"], () => require("./firewallFilteringServiceGroups"));

export { FirewallFilteringSourceGroupsArgs, FirewallFilteringSourceGroupsState } from "./firewallFilteringSourceGroups";
export type FirewallFilteringSourceGroups = import("./firewallFilteringSourceGroups").FirewallFilteringSourceGroups;
export const FirewallFilteringSourceGroups: typeof import("./firewallFilteringSourceGroups").FirewallFilteringSourceGroups = null as any;
utilities.lazyLoad(exports, ["FirewallFilteringSourceGroups"], () => require("./firewallFilteringSourceGroups"));

export { GetFirewallFilteringApplicationArgs, GetFirewallFilteringApplicationResult, GetFirewallFilteringApplicationOutputArgs } from "./getFirewallFilteringApplication";
export const getFirewallFilteringApplication: typeof import("./getFirewallFilteringApplication").getFirewallFilteringApplication = null as any;
export const getFirewallFilteringApplicationOutput: typeof import("./getFirewallFilteringApplication").getFirewallFilteringApplicationOutput = null as any;
utilities.lazyLoad(exports, ["getFirewallFilteringApplication","getFirewallFilteringApplicationOutput"], () => require("./getFirewallFilteringApplication"));

export { GetFirewallFilteringApplicationGroupsArgs, GetFirewallFilteringApplicationGroupsResult, GetFirewallFilteringApplicationGroupsOutputArgs } from "./getFirewallFilteringApplicationGroups";
export const getFirewallFilteringApplicationGroups: typeof import("./getFirewallFilteringApplicationGroups").getFirewallFilteringApplicationGroups = null as any;
export const getFirewallFilteringApplicationGroupsOutput: typeof import("./getFirewallFilteringApplicationGroups").getFirewallFilteringApplicationGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getFirewallFilteringApplicationGroups","getFirewallFilteringApplicationGroupsOutput"], () => require("./getFirewallFilteringApplicationGroups"));

export { GetFirewallFilteringDestinationGroupsArgs, GetFirewallFilteringDestinationGroupsResult, GetFirewallFilteringDestinationGroupsOutputArgs } from "./getFirewallFilteringDestinationGroups";
export const getFirewallFilteringDestinationGroups: typeof import("./getFirewallFilteringDestinationGroups").getFirewallFilteringDestinationGroups = null as any;
export const getFirewallFilteringDestinationGroupsOutput: typeof import("./getFirewallFilteringDestinationGroups").getFirewallFilteringDestinationGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getFirewallFilteringDestinationGroups","getFirewallFilteringDestinationGroupsOutput"], () => require("./getFirewallFilteringDestinationGroups"));

export { GetFirewallFilteringNetworkServiceGroupsArgs, GetFirewallFilteringNetworkServiceGroupsResult, GetFirewallFilteringNetworkServiceGroupsOutputArgs } from "./getFirewallFilteringNetworkServiceGroups";
export const getFirewallFilteringNetworkServiceGroups: typeof import("./getFirewallFilteringNetworkServiceGroups").getFirewallFilteringNetworkServiceGroups = null as any;
export const getFirewallFilteringNetworkServiceGroupsOutput: typeof import("./getFirewallFilteringNetworkServiceGroups").getFirewallFilteringNetworkServiceGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getFirewallFilteringNetworkServiceGroups","getFirewallFilteringNetworkServiceGroupsOutput"], () => require("./getFirewallFilteringNetworkServiceGroups"));

export { GetFirewallFilteringNetworkServicesArgs, GetFirewallFilteringNetworkServicesResult, GetFirewallFilteringNetworkServicesOutputArgs } from "./getFirewallFilteringNetworkServices";
export const getFirewallFilteringNetworkServices: typeof import("./getFirewallFilteringNetworkServices").getFirewallFilteringNetworkServices = null as any;
export const getFirewallFilteringNetworkServicesOutput: typeof import("./getFirewallFilteringNetworkServices").getFirewallFilteringNetworkServicesOutput = null as any;
utilities.lazyLoad(exports, ["getFirewallFilteringNetworkServices","getFirewallFilteringNetworkServicesOutput"], () => require("./getFirewallFilteringNetworkServices"));

export { GetFirewallFilteringRuleArgs, GetFirewallFilteringRuleResult, GetFirewallFilteringRuleOutputArgs } from "./getFirewallFilteringRule";
export const getFirewallFilteringRule: typeof import("./getFirewallFilteringRule").getFirewallFilteringRule = null as any;
export const getFirewallFilteringRuleOutput: typeof import("./getFirewallFilteringRule").getFirewallFilteringRuleOutput = null as any;
utilities.lazyLoad(exports, ["getFirewallFilteringRule","getFirewallFilteringRuleOutput"], () => require("./getFirewallFilteringRule"));

export { GetFirewallFilteringSourceIPGroupsArgs, GetFirewallFilteringSourceIPGroupsResult, GetFirewallFilteringSourceIPGroupsOutputArgs } from "./getFirewallFilteringSourceIPGroups";
export const getFirewallFilteringSourceIPGroups: typeof import("./getFirewallFilteringSourceIPGroups").getFirewallFilteringSourceIPGroups = null as any;
export const getFirewallFilteringSourceIPGroupsOutput: typeof import("./getFirewallFilteringSourceIPGroups").getFirewallFilteringSourceIPGroupsOutput = null as any;
utilities.lazyLoad(exports, ["getFirewallFilteringSourceIPGroups","getFirewallFilteringSourceIPGroupsOutput"], () => require("./getFirewallFilteringSourceIPGroups"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "zia:Firewall/firewallFilteringApplicationGroups:FirewallFilteringApplicationGroups":
                return new FirewallFilteringApplicationGroups(name, <any>undefined, { urn })
            case "zia:Firewall/firewallFilteringDestinationGroups:FirewallFilteringDestinationGroups":
                return new FirewallFilteringDestinationGroups(name, <any>undefined, { urn })
            case "zia:Firewall/firewallFilteringNetworkServices:FirewallFilteringNetworkServices":
                return new FirewallFilteringNetworkServices(name, <any>undefined, { urn })
            case "zia:Firewall/firewallFilteringRule:FirewallFilteringRule":
                return new FirewallFilteringRule(name, <any>undefined, { urn })
            case "zia:Firewall/firewallFilteringServiceGroups:FirewallFilteringServiceGroups":
                return new FirewallFilteringServiceGroups(name, <any>undefined, { urn })
            case "zia:Firewall/firewallFilteringSourceGroups:FirewallFilteringSourceGroups":
                return new FirewallFilteringSourceGroups(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("zia", "Firewall/firewallFilteringApplicationGroups", _module)
pulumi.runtime.registerResourceModule("zia", "Firewall/firewallFilteringDestinationGroups", _module)
pulumi.runtime.registerResourceModule("zia", "Firewall/firewallFilteringNetworkServices", _module)
pulumi.runtime.registerResourceModule("zia", "Firewall/firewallFilteringRule", _module)
pulumi.runtime.registerResourceModule("zia", "Firewall/firewallFilteringServiceGroups", _module)
pulumi.runtime.registerResourceModule("zia", "Firewall/firewallFilteringSourceGroups", _module)
