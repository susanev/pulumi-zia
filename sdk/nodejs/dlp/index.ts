// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

// Export members:
export { DLPDictionariesArgs, DLPDictionariesState } from "./dlpdictionaries";
export type DLPDictionaries = import("./dlpdictionaries").DLPDictionaries;
export const DLPDictionaries: typeof import("./dlpdictionaries").DLPDictionaries = null as any;
utilities.lazyLoad(exports, ["DLPDictionaries"], () => require("./dlpdictionaries"));

export { DLPNotificationTemplatesArgs, DLPNotificationTemplatesState } from "./dlpnotificationTemplates";
export type DLPNotificationTemplates = import("./dlpnotificationTemplates").DLPNotificationTemplates;
export const DLPNotificationTemplates: typeof import("./dlpnotificationTemplates").DLPNotificationTemplates = null as any;
utilities.lazyLoad(exports, ["DLPNotificationTemplates"], () => require("./dlpnotificationTemplates"));

export { DLPWebRulesArgs, DLPWebRulesState } from "./dlpwebRules";
export type DLPWebRules = import("./dlpwebRules").DLPWebRules;
export const DLPWebRules: typeof import("./dlpwebRules").DLPWebRules = null as any;
utilities.lazyLoad(exports, ["DLPWebRules"], () => require("./dlpwebRules"));

export { GetDLPDictionariesArgs, GetDLPDictionariesResult, GetDLPDictionariesOutputArgs } from "./getDLPDictionaries";
export const getDLPDictionaries: typeof import("./getDLPDictionaries").getDLPDictionaries = null as any;
export const getDLPDictionariesOutput: typeof import("./getDLPDictionaries").getDLPDictionariesOutput = null as any;
utilities.lazyLoad(exports, ["getDLPDictionaries","getDLPDictionariesOutput"], () => require("./getDLPDictionaries"));

export { GetDLPEnginesArgs, GetDLPEnginesResult, GetDLPEnginesOutputArgs } from "./getDLPEngines";
export const getDLPEngines: typeof import("./getDLPEngines").getDLPEngines = null as any;
export const getDLPEnginesOutput: typeof import("./getDLPEngines").getDLPEnginesOutput = null as any;
utilities.lazyLoad(exports, ["getDLPEngines","getDLPEnginesOutput"], () => require("./getDLPEngines"));

export { GetDLPNotificationTemplatesArgs, GetDLPNotificationTemplatesResult, GetDLPNotificationTemplatesOutputArgs } from "./getDLPNotificationTemplates";
export const getDLPNotificationTemplates: typeof import("./getDLPNotificationTemplates").getDLPNotificationTemplates = null as any;
export const getDLPNotificationTemplatesOutput: typeof import("./getDLPNotificationTemplates").getDLPNotificationTemplatesOutput = null as any;
utilities.lazyLoad(exports, ["getDLPNotificationTemplates","getDLPNotificationTemplatesOutput"], () => require("./getDLPNotificationTemplates"));

export { GetDLPWebRulesArgs, GetDLPWebRulesResult, GetDLPWebRulesOutputArgs } from "./getDLPWebRules";
export const getDLPWebRules: typeof import("./getDLPWebRules").getDLPWebRules = null as any;
export const getDLPWebRulesOutput: typeof import("./getDLPWebRules").getDLPWebRulesOutput = null as any;
utilities.lazyLoad(exports, ["getDLPWebRules","getDLPWebRulesOutput"], () => require("./getDLPWebRules"));


const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "zia:DLP/dLPDictionaries:DLPDictionaries":
                return new DLPDictionaries(name, <any>undefined, { urn })
            case "zia:DLP/dLPNotificationTemplates:DLPNotificationTemplates":
                return new DLPNotificationTemplates(name, <any>undefined, { urn })
            case "zia:DLP/dLPWebRules:DLPWebRules":
                return new DLPWebRules(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("zia", "DLP/dLPDictionaries", _module)
pulumi.runtime.registerResourceModule("zia", "DLP/dLPNotificationTemplates", _module)
pulumi.runtime.registerResourceModule("zia", "DLP/dLPWebRules", _module)
