// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";
import * as utilities from "../utilities";

/**
 * The **zia_dlp_web_rules** resource allows the creation and management of ZIA DLP Web Rules in the Zscaler Internet Access cloud or via the API.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as zia from "@zscaler/pulumi-zia";
 *
 * const test = new zia.dlp.DLPWebRules("test", {
 *     action: "ALLOW",
 *     cloudApplications: [
 *         "ZENDESK",
 *         "LUCKY_ORANGE",
 *         "MICROSOFT_POWERAPPS",
 *         "MICROSOFTLIVEMEETING",
 *     ],
 *     description: "Test",
 *     fileTypes: [],
 *     matchOnly: false,
 *     minSize: 20,
 *     ocrEnabled: false,
 *     order: 1,
 *     protocols: [
 *         "HTTPS_RULE",
 *         "HTTP_RULE",
 *     ],
 *     rank: 7,
 *     state: "ENABLED",
 *     withoutContentInspection: false,
 *     zscalerIncidentReciever: true,
 * });
 * ```
 */
export class DLPWebRules extends pulumi.CustomResource {
    /**
     * Get an existing DLPWebRules resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DLPWebRulesState, opts?: pulumi.CustomResourceOptions): DLPWebRules {
        return new DLPWebRules(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'zia:DLP/dLPWebRules:DLPWebRules';

    /**
     * Returns true if the given object is an instance of DLPWebRules.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DLPWebRules {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DLPWebRules.__pulumiType;
    }

    /**
     * The access privilege for this DLP policy rule based on the admin's state. The supported values are:
     */
    public readonly accessControl!: pulumi.Output<string>;
    /**
     * The action taken when traffic matches the DLP policy rule criteria. The supported values are:
     */
    public readonly action!: pulumi.Output<string>;
    /**
     * The auditor to which the DLP policy rule must be applied.
     */
    public readonly auditor!: pulumi.Output<outputs.DLP.DLPWebRulesAuditor>;
    /**
     * The list of cloud applications to which the DLP policy rule must be applied. For the complete list of supported cloud applications refer to the  [ZIA API documentation](https://help.zscaler.com/zia/data-loss-prevention#/webDlpRules-post)
     */
    public readonly cloudApplications!: pulumi.Output<string[]>;
    /**
     * The name-ID pairs of the departments that are excluded from the DLP policy rule.
     */
    public readonly departments!: pulumi.Output<outputs.DLP.DLPWebRulesDepartments>;
    /**
     * The description of the DLP policy rule.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * The list of DLP engines to which the DLP policy rule must be applied.
     */
    public readonly dlpEngines!: pulumi.Output<outputs.DLP.DLPWebRulesDlpEngines>;
    /**
     * The name-ID pairs of the groups that are excluded from the DLP policy rule. Maximum of up to `256` departments.
     */
    public readonly excludedDepartments!: pulumi.Output<outputs.DLP.DLPWebRulesExcludedDepartments>;
    /**
     * The name-ID pairs of the groups that are excluded from the DLP policy rule. Maximum of up to `256` groups.
     */
    public readonly excludedGroups!: pulumi.Output<outputs.DLP.DLPWebRulesExcludedGroups>;
    /**
     * The name-ID pairs of the users that are excluded from the DLP policy rule. Maximum of up to `256` users.
     */
    public readonly excludedUsers!: pulumi.Output<outputs.DLP.DLPWebRulesExcludedUsers>;
    /**
     * The email address of an external auditor to whom DLP email notifications are sent.
     */
    public readonly externalAuditorEmail!: pulumi.Output<string>;
    /**
     * The list of file types to which the DLP policy rule must be applied. For the complete list of supported file types refer to the  [ZIA API documentation](https://help.zscaler.com/zia/data-loss-prevention#/webDlpRules-post)
     */
    public readonly fileTypes!: pulumi.Output<string[]>;
    /**
     * The Name-ID pairs of groups to which the DLP policy rule must be applied. Maximum of up to `8` groups. When not used it implies `Any` to apply the rule to all groups.
     */
    public readonly groups!: pulumi.Output<outputs.DLP.DLPWebRulesGroups>;
    /**
     * The DLP server, using ICAP, to which the transaction content is forwarded.
     */
    public readonly icapServer!: pulumi.Output<outputs.DLP.DLPWebRulesIcapServer>;
    /**
     * The Name-ID pairs of rule labels associated to the DLP policy rule.
     */
    public readonly labels!: pulumi.Output<outputs.DLP.DLPWebRulesLabels>;
    /**
     * The Name-ID pairs of locations groups to which the DLP policy rule must be applied. Maximum of up to `32` location groups. When not used it implies `Any` to apply the rule to all location groups.
     */
    public readonly locationGroups!: pulumi.Output<outputs.DLP.DLPWebRulesLocationGroups>;
    /**
     * The Name-ID pairs of locations to which the DLP policy rule must be applied. Maximum of up to `8` locations. When not used it implies `Any` to apply the rule to all locations.
     */
    public readonly locations!: pulumi.Output<outputs.DLP.DLPWebRulesLocations>;
    /**
     * The match only criteria for DLP engines.
     */
    public readonly matchOnly!: pulumi.Output<boolean>;
    /**
     * The minimum file size (in KB) used for evaluation of the DLP policy rule.
     */
    public readonly minSize!: pulumi.Output<number>;
    /**
     * The DLP policy rule name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The template used for DLP notification emails.
     */
    public readonly notificationTemplate!: pulumi.Output<outputs.DLP.DLPWebRulesNotificationTemplate>;
    /**
     * Enables or disables image file scanning.
     */
    public readonly ocrEnabled!: pulumi.Output<boolean>;
    /**
     * The rule order of execution for the DLP policy rule with respect to other rules.
     */
    public readonly order!: pulumi.Output<number>;
    /**
     * The protocol criteria specified for the DLP policy rule.
     */
    public readonly protocols!: pulumi.Output<string[]>;
    /**
     * Admin rank of the admin who creates this rule
     */
    public readonly rank!: pulumi.Output<number | undefined>;
    public /*out*/ readonly ruleId!: pulumi.Output<number>;
    /**
     * Enables or disables the DLP policy rule.. The supported values are:
     */
    public readonly state!: pulumi.Output<string>;
    /**
     * The Name-ID pairs of time windows to which the DLP policy rule must be applied. Maximum of up to `2` time intervals. When not used it implies `always` to apply the rule to all time intervals.
     */
    public readonly timeWindows!: pulumi.Output<outputs.DLP.DLPWebRulesTimeWindows>;
    /**
     * The list of URL categories to which the DLP policy rule must be applied.
     */
    public readonly urlCategories!: pulumi.Output<outputs.DLP.DLPWebRulesUrlCategories>;
    /**
     * The Name-ID pairs of users to which the DLP policy rule must be applied. Maximum of up to `4` users. When not used it implies `Any` to apply the rule to all users.
     */
    public readonly users!: pulumi.Output<outputs.DLP.DLPWebRulesUsers>;
    /**
     * Indicates a DLP policy rule without content inspection, when the value is set to true.
     */
    public readonly withoutContentInspection!: pulumi.Output<boolean>;
    /**
     * Indicates whether a Zscaler Incident Receiver is associated to the DLP policy rule.
     */
    public readonly zscalerIncidentReciever!: pulumi.Output<boolean>;

    /**
     * Create a DLPWebRules resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DLPWebRulesArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DLPWebRulesArgs | DLPWebRulesState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DLPWebRulesState | undefined;
            resourceInputs["accessControl"] = state ? state.accessControl : undefined;
            resourceInputs["action"] = state ? state.action : undefined;
            resourceInputs["auditor"] = state ? state.auditor : undefined;
            resourceInputs["cloudApplications"] = state ? state.cloudApplications : undefined;
            resourceInputs["departments"] = state ? state.departments : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["dlpEngines"] = state ? state.dlpEngines : undefined;
            resourceInputs["excludedDepartments"] = state ? state.excludedDepartments : undefined;
            resourceInputs["excludedGroups"] = state ? state.excludedGroups : undefined;
            resourceInputs["excludedUsers"] = state ? state.excludedUsers : undefined;
            resourceInputs["externalAuditorEmail"] = state ? state.externalAuditorEmail : undefined;
            resourceInputs["fileTypes"] = state ? state.fileTypes : undefined;
            resourceInputs["groups"] = state ? state.groups : undefined;
            resourceInputs["icapServer"] = state ? state.icapServer : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["locationGroups"] = state ? state.locationGroups : undefined;
            resourceInputs["locations"] = state ? state.locations : undefined;
            resourceInputs["matchOnly"] = state ? state.matchOnly : undefined;
            resourceInputs["minSize"] = state ? state.minSize : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["notificationTemplate"] = state ? state.notificationTemplate : undefined;
            resourceInputs["ocrEnabled"] = state ? state.ocrEnabled : undefined;
            resourceInputs["order"] = state ? state.order : undefined;
            resourceInputs["protocols"] = state ? state.protocols : undefined;
            resourceInputs["rank"] = state ? state.rank : undefined;
            resourceInputs["ruleId"] = state ? state.ruleId : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["timeWindows"] = state ? state.timeWindows : undefined;
            resourceInputs["urlCategories"] = state ? state.urlCategories : undefined;
            resourceInputs["users"] = state ? state.users : undefined;
            resourceInputs["withoutContentInspection"] = state ? state.withoutContentInspection : undefined;
            resourceInputs["zscalerIncidentReciever"] = state ? state.zscalerIncidentReciever : undefined;
        } else {
            const args = argsOrState as DLPWebRulesArgs | undefined;
            if ((!args || args.order === undefined) && !opts.urn) {
                throw new Error("Missing required property 'order'");
            }
            resourceInputs["accessControl"] = args ? args.accessControl : undefined;
            resourceInputs["action"] = args ? args.action : undefined;
            resourceInputs["auditor"] = args ? args.auditor : undefined;
            resourceInputs["cloudApplications"] = args ? args.cloudApplications : undefined;
            resourceInputs["departments"] = args ? args.departments : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["dlpEngines"] = args ? args.dlpEngines : undefined;
            resourceInputs["excludedDepartments"] = args ? args.excludedDepartments : undefined;
            resourceInputs["excludedGroups"] = args ? args.excludedGroups : undefined;
            resourceInputs["excludedUsers"] = args ? args.excludedUsers : undefined;
            resourceInputs["externalAuditorEmail"] = args ? args.externalAuditorEmail : undefined;
            resourceInputs["fileTypes"] = args ? args.fileTypes : undefined;
            resourceInputs["groups"] = args ? args.groups : undefined;
            resourceInputs["icapServer"] = args ? args.icapServer : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["locationGroups"] = args ? args.locationGroups : undefined;
            resourceInputs["locations"] = args ? args.locations : undefined;
            resourceInputs["matchOnly"] = args ? args.matchOnly : undefined;
            resourceInputs["minSize"] = args ? args.minSize : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["notificationTemplate"] = args ? args.notificationTemplate : undefined;
            resourceInputs["ocrEnabled"] = args ? args.ocrEnabled : undefined;
            resourceInputs["order"] = args ? args.order : undefined;
            resourceInputs["protocols"] = args ? args.protocols : undefined;
            resourceInputs["rank"] = args ? args.rank : undefined;
            resourceInputs["state"] = args ? args.state : undefined;
            resourceInputs["timeWindows"] = args ? args.timeWindows : undefined;
            resourceInputs["urlCategories"] = args ? args.urlCategories : undefined;
            resourceInputs["users"] = args ? args.users : undefined;
            resourceInputs["withoutContentInspection"] = args ? args.withoutContentInspection : undefined;
            resourceInputs["zscalerIncidentReciever"] = args ? args.zscalerIncidentReciever : undefined;
            resourceInputs["ruleId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DLPWebRules.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DLPWebRules resources.
 */
export interface DLPWebRulesState {
    /**
     * The access privilege for this DLP policy rule based on the admin's state. The supported values are:
     */
    accessControl?: pulumi.Input<string>;
    /**
     * The action taken when traffic matches the DLP policy rule criteria. The supported values are:
     */
    action?: pulumi.Input<string>;
    /**
     * The auditor to which the DLP policy rule must be applied.
     */
    auditor?: pulumi.Input<inputs.DLP.DLPWebRulesAuditor>;
    /**
     * The list of cloud applications to which the DLP policy rule must be applied. For the complete list of supported cloud applications refer to the  [ZIA API documentation](https://help.zscaler.com/zia/data-loss-prevention#/webDlpRules-post)
     */
    cloudApplications?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name-ID pairs of the departments that are excluded from the DLP policy rule.
     */
    departments?: pulumi.Input<inputs.DLP.DLPWebRulesDepartments>;
    /**
     * The description of the DLP policy rule.
     */
    description?: pulumi.Input<string>;
    /**
     * The list of DLP engines to which the DLP policy rule must be applied.
     */
    dlpEngines?: pulumi.Input<inputs.DLP.DLPWebRulesDlpEngines>;
    /**
     * The name-ID pairs of the groups that are excluded from the DLP policy rule. Maximum of up to `256` departments.
     */
    excludedDepartments?: pulumi.Input<inputs.DLP.DLPWebRulesExcludedDepartments>;
    /**
     * The name-ID pairs of the groups that are excluded from the DLP policy rule. Maximum of up to `256` groups.
     */
    excludedGroups?: pulumi.Input<inputs.DLP.DLPWebRulesExcludedGroups>;
    /**
     * The name-ID pairs of the users that are excluded from the DLP policy rule. Maximum of up to `256` users.
     */
    excludedUsers?: pulumi.Input<inputs.DLP.DLPWebRulesExcludedUsers>;
    /**
     * The email address of an external auditor to whom DLP email notifications are sent.
     */
    externalAuditorEmail?: pulumi.Input<string>;
    /**
     * The list of file types to which the DLP policy rule must be applied. For the complete list of supported file types refer to the  [ZIA API documentation](https://help.zscaler.com/zia/data-loss-prevention#/webDlpRules-post)
     */
    fileTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The Name-ID pairs of groups to which the DLP policy rule must be applied. Maximum of up to `8` groups. When not used it implies `Any` to apply the rule to all groups.
     */
    groups?: pulumi.Input<inputs.DLP.DLPWebRulesGroups>;
    /**
     * The DLP server, using ICAP, to which the transaction content is forwarded.
     */
    icapServer?: pulumi.Input<inputs.DLP.DLPWebRulesIcapServer>;
    /**
     * The Name-ID pairs of rule labels associated to the DLP policy rule.
     */
    labels?: pulumi.Input<inputs.DLP.DLPWebRulesLabels>;
    /**
     * The Name-ID pairs of locations groups to which the DLP policy rule must be applied. Maximum of up to `32` location groups. When not used it implies `Any` to apply the rule to all location groups.
     */
    locationGroups?: pulumi.Input<inputs.DLP.DLPWebRulesLocationGroups>;
    /**
     * The Name-ID pairs of locations to which the DLP policy rule must be applied. Maximum of up to `8` locations. When not used it implies `Any` to apply the rule to all locations.
     */
    locations?: pulumi.Input<inputs.DLP.DLPWebRulesLocations>;
    /**
     * The match only criteria for DLP engines.
     */
    matchOnly?: pulumi.Input<boolean>;
    /**
     * The minimum file size (in KB) used for evaluation of the DLP policy rule.
     */
    minSize?: pulumi.Input<number>;
    /**
     * The DLP policy rule name.
     */
    name?: pulumi.Input<string>;
    /**
     * The template used for DLP notification emails.
     */
    notificationTemplate?: pulumi.Input<inputs.DLP.DLPWebRulesNotificationTemplate>;
    /**
     * Enables or disables image file scanning.
     */
    ocrEnabled?: pulumi.Input<boolean>;
    /**
     * The rule order of execution for the DLP policy rule with respect to other rules.
     */
    order?: pulumi.Input<number>;
    /**
     * The protocol criteria specified for the DLP policy rule.
     */
    protocols?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Admin rank of the admin who creates this rule
     */
    rank?: pulumi.Input<number>;
    ruleId?: pulumi.Input<number>;
    /**
     * Enables or disables the DLP policy rule.. The supported values are:
     */
    state?: pulumi.Input<string>;
    /**
     * The Name-ID pairs of time windows to which the DLP policy rule must be applied. Maximum of up to `2` time intervals. When not used it implies `always` to apply the rule to all time intervals.
     */
    timeWindows?: pulumi.Input<inputs.DLP.DLPWebRulesTimeWindows>;
    /**
     * The list of URL categories to which the DLP policy rule must be applied.
     */
    urlCategories?: pulumi.Input<inputs.DLP.DLPWebRulesUrlCategories>;
    /**
     * The Name-ID pairs of users to which the DLP policy rule must be applied. Maximum of up to `4` users. When not used it implies `Any` to apply the rule to all users.
     */
    users?: pulumi.Input<inputs.DLP.DLPWebRulesUsers>;
    /**
     * Indicates a DLP policy rule without content inspection, when the value is set to true.
     */
    withoutContentInspection?: pulumi.Input<boolean>;
    /**
     * Indicates whether a Zscaler Incident Receiver is associated to the DLP policy rule.
     */
    zscalerIncidentReciever?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a DLPWebRules resource.
 */
export interface DLPWebRulesArgs {
    /**
     * The access privilege for this DLP policy rule based on the admin's state. The supported values are:
     */
    accessControl?: pulumi.Input<string>;
    /**
     * The action taken when traffic matches the DLP policy rule criteria. The supported values are:
     */
    action?: pulumi.Input<string>;
    /**
     * The auditor to which the DLP policy rule must be applied.
     */
    auditor?: pulumi.Input<inputs.DLP.DLPWebRulesAuditor>;
    /**
     * The list of cloud applications to which the DLP policy rule must be applied. For the complete list of supported cloud applications refer to the  [ZIA API documentation](https://help.zscaler.com/zia/data-loss-prevention#/webDlpRules-post)
     */
    cloudApplications?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name-ID pairs of the departments that are excluded from the DLP policy rule.
     */
    departments?: pulumi.Input<inputs.DLP.DLPWebRulesDepartments>;
    /**
     * The description of the DLP policy rule.
     */
    description?: pulumi.Input<string>;
    /**
     * The list of DLP engines to which the DLP policy rule must be applied.
     */
    dlpEngines?: pulumi.Input<inputs.DLP.DLPWebRulesDlpEngines>;
    /**
     * The name-ID pairs of the groups that are excluded from the DLP policy rule. Maximum of up to `256` departments.
     */
    excludedDepartments?: pulumi.Input<inputs.DLP.DLPWebRulesExcludedDepartments>;
    /**
     * The name-ID pairs of the groups that are excluded from the DLP policy rule. Maximum of up to `256` groups.
     */
    excludedGroups?: pulumi.Input<inputs.DLP.DLPWebRulesExcludedGroups>;
    /**
     * The name-ID pairs of the users that are excluded from the DLP policy rule. Maximum of up to `256` users.
     */
    excludedUsers?: pulumi.Input<inputs.DLP.DLPWebRulesExcludedUsers>;
    /**
     * The email address of an external auditor to whom DLP email notifications are sent.
     */
    externalAuditorEmail?: pulumi.Input<string>;
    /**
     * The list of file types to which the DLP policy rule must be applied. For the complete list of supported file types refer to the  [ZIA API documentation](https://help.zscaler.com/zia/data-loss-prevention#/webDlpRules-post)
     */
    fileTypes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The Name-ID pairs of groups to which the DLP policy rule must be applied. Maximum of up to `8` groups. When not used it implies `Any` to apply the rule to all groups.
     */
    groups?: pulumi.Input<inputs.DLP.DLPWebRulesGroups>;
    /**
     * The DLP server, using ICAP, to which the transaction content is forwarded.
     */
    icapServer?: pulumi.Input<inputs.DLP.DLPWebRulesIcapServer>;
    /**
     * The Name-ID pairs of rule labels associated to the DLP policy rule.
     */
    labels?: pulumi.Input<inputs.DLP.DLPWebRulesLabels>;
    /**
     * The Name-ID pairs of locations groups to which the DLP policy rule must be applied. Maximum of up to `32` location groups. When not used it implies `Any` to apply the rule to all location groups.
     */
    locationGroups?: pulumi.Input<inputs.DLP.DLPWebRulesLocationGroups>;
    /**
     * The Name-ID pairs of locations to which the DLP policy rule must be applied. Maximum of up to `8` locations. When not used it implies `Any` to apply the rule to all locations.
     */
    locations?: pulumi.Input<inputs.DLP.DLPWebRulesLocations>;
    /**
     * The match only criteria for DLP engines.
     */
    matchOnly?: pulumi.Input<boolean>;
    /**
     * The minimum file size (in KB) used for evaluation of the DLP policy rule.
     */
    minSize?: pulumi.Input<number>;
    /**
     * The DLP policy rule name.
     */
    name?: pulumi.Input<string>;
    /**
     * The template used for DLP notification emails.
     */
    notificationTemplate?: pulumi.Input<inputs.DLP.DLPWebRulesNotificationTemplate>;
    /**
     * Enables or disables image file scanning.
     */
    ocrEnabled?: pulumi.Input<boolean>;
    /**
     * The rule order of execution for the DLP policy rule with respect to other rules.
     */
    order: pulumi.Input<number>;
    /**
     * The protocol criteria specified for the DLP policy rule.
     */
    protocols?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Admin rank of the admin who creates this rule
     */
    rank?: pulumi.Input<number>;
    /**
     * Enables or disables the DLP policy rule.. The supported values are:
     */
    state?: pulumi.Input<string>;
    /**
     * The Name-ID pairs of time windows to which the DLP policy rule must be applied. Maximum of up to `2` time intervals. When not used it implies `always` to apply the rule to all time intervals.
     */
    timeWindows?: pulumi.Input<inputs.DLP.DLPWebRulesTimeWindows>;
    /**
     * The list of URL categories to which the DLP policy rule must be applied.
     */
    urlCategories?: pulumi.Input<inputs.DLP.DLPWebRulesUrlCategories>;
    /**
     * The Name-ID pairs of users to which the DLP policy rule must be applied. Maximum of up to `4` users. When not used it implies `Any` to apply the rule to all users.
     */
    users?: pulumi.Input<inputs.DLP.DLPWebRulesUsers>;
    /**
     * Indicates a DLP policy rule without content inspection, when the value is set to true.
     */
    withoutContentInspection?: pulumi.Input<boolean>;
    /**
     * Indicates whether a Zscaler Incident Receiver is associated to the DLP policy rule.
     */
    zscalerIncidentReciever?: pulumi.Input<boolean>;
}
