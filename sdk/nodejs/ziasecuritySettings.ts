// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ZIASecuritySettings extends pulumi.CustomResource {
    /**
     * Get an existing ZIASecuritySettings resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ZIASecuritySettingsState, opts?: pulumi.CustomResourceOptions): ZIASecuritySettings {
        return new ZIASecuritySettings(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'zia:index/zIASecuritySettings:ZIASecuritySettings';

    /**
     * Returns true if the given object is an instance of ZIASecuritySettings.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ZIASecuritySettings {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ZIASecuritySettings.__pulumiType;
    }

    /**
     * URLs on the denylist for your organization. Allow up to 25000 URLs.
     */
    public readonly blacklistUrls!: pulumi.Output<string[]>;
    /**
     * Allowlist URLs whose contents will not be scanned. Allows up to 255 URLs.
     */
    public readonly whitelistUrls!: pulumi.Output<string[]>;

    /**
     * Create a ZIASecuritySettings resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ZIASecuritySettingsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ZIASecuritySettingsArgs | ZIASecuritySettingsState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ZIASecuritySettingsState | undefined;
            resourceInputs["blacklistUrls"] = state ? state.blacklistUrls : undefined;
            resourceInputs["whitelistUrls"] = state ? state.whitelistUrls : undefined;
        } else {
            const args = argsOrState as ZIASecuritySettingsArgs | undefined;
            resourceInputs["blacklistUrls"] = args ? args.blacklistUrls : undefined;
            resourceInputs["whitelistUrls"] = args ? args.whitelistUrls : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ZIASecuritySettings.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ZIASecuritySettings resources.
 */
export interface ZIASecuritySettingsState {
    /**
     * URLs on the denylist for your organization. Allow up to 25000 URLs.
     */
    blacklistUrls?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Allowlist URLs whose contents will not be scanned. Allows up to 255 URLs.
     */
    whitelistUrls?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a ZIASecuritySettings resource.
 */
export interface ZIASecuritySettingsArgs {
    /**
     * URLs on the denylist for your organization. Allow up to 25000 URLs.
     */
    blacklistUrls?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Allowlist URLs whose contents will not be scanned. Allows up to 255 URLs.
     */
    whitelistUrls?: pulumi.Input<pulumi.Input<string>[]>;
}
