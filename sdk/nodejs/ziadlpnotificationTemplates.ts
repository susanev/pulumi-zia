// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * The **zia_dlp_notification_templates** resource allows the creation and management of ZIA DLP Notification Templates in the Zscaler Internet Access cloud or via the API.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as fs from "fs";
 * import * as zia from "@zscaler/pulumi-zia";
 *
 * const example = new zia.ZIADLPNotificationTemplates("example", {
 *     subject: `DLP Violation: ${TRANSACTION_ID} ${ENGINES}`,
 *     attachContent: true,
 *     tlsEnabled: true,
 *     htmlMessage: fs.readFileSync("./index.html"),
 *     plainTextMessage: fs.readFileSync("./dlp.txt"),
 * });
 * ```
 */
export class ZIADLPNotificationTemplates extends pulumi.CustomResource {
    /**
     * Get an existing ZIADLPNotificationTemplates resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ZIADLPNotificationTemplatesState, opts?: pulumi.CustomResourceOptions): ZIADLPNotificationTemplates {
        return new ZIADLPNotificationTemplates(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'zia:index/zIADLPNotificationTemplates:ZIADLPNotificationTemplates';

    /**
     * Returns true if the given object is an instance of ZIADLPNotificationTemplates.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ZIADLPNotificationTemplates {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ZIADLPNotificationTemplates.__pulumiType;
    }

    /**
     * If set to true, the content that is violation is attached to the DLP notification email.
     */
    public readonly attachContent!: pulumi.Output<boolean | undefined>;
    /**
     * The template for the HTML message body that must be displayed in the DLP notification email.
     */
    public readonly htmlMessage!: pulumi.Output<string>;
    /**
     * The DLP policy rule name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The template for the plain text UTF-8 message body that must be displayed in the DLP notification email.
     */
    public readonly plainTextMessage!: pulumi.Output<string>;
    /**
     * The Subject line that is displayed within the DLP notification email.
     */
    public readonly subject!: pulumi.Output<string | undefined>;
    public /*out*/ readonly templateId!: pulumi.Output<number>;
    /**
     * If set to true, the content that is violation is attached to the DLP notification email.
     */
    public readonly tlsEnabled!: pulumi.Output<boolean | undefined>;

    /**
     * Create a ZIADLPNotificationTemplates resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ZIADLPNotificationTemplatesArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ZIADLPNotificationTemplatesArgs | ZIADLPNotificationTemplatesState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ZIADLPNotificationTemplatesState | undefined;
            resourceInputs["attachContent"] = state ? state.attachContent : undefined;
            resourceInputs["htmlMessage"] = state ? state.htmlMessage : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["plainTextMessage"] = state ? state.plainTextMessage : undefined;
            resourceInputs["subject"] = state ? state.subject : undefined;
            resourceInputs["templateId"] = state ? state.templateId : undefined;
            resourceInputs["tlsEnabled"] = state ? state.tlsEnabled : undefined;
        } else {
            const args = argsOrState as ZIADLPNotificationTemplatesArgs | undefined;
            if ((!args || args.htmlMessage === undefined) && !opts.urn) {
                throw new Error("Missing required property 'htmlMessage'");
            }
            if ((!args || args.plainTextMessage === undefined) && !opts.urn) {
                throw new Error("Missing required property 'plainTextMessage'");
            }
            resourceInputs["attachContent"] = args ? args.attachContent : undefined;
            resourceInputs["htmlMessage"] = args ? args.htmlMessage : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["plainTextMessage"] = args ? args.plainTextMessage : undefined;
            resourceInputs["subject"] = args ? args.subject : undefined;
            resourceInputs["tlsEnabled"] = args ? args.tlsEnabled : undefined;
            resourceInputs["templateId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ZIADLPNotificationTemplates.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ZIADLPNotificationTemplates resources.
 */
export interface ZIADLPNotificationTemplatesState {
    /**
     * If set to true, the content that is violation is attached to the DLP notification email.
     */
    attachContent?: pulumi.Input<boolean>;
    /**
     * The template for the HTML message body that must be displayed in the DLP notification email.
     */
    htmlMessage?: pulumi.Input<string>;
    /**
     * The DLP policy rule name.
     */
    name?: pulumi.Input<string>;
    /**
     * The template for the plain text UTF-8 message body that must be displayed in the DLP notification email.
     */
    plainTextMessage?: pulumi.Input<string>;
    /**
     * The Subject line that is displayed within the DLP notification email.
     */
    subject?: pulumi.Input<string>;
    templateId?: pulumi.Input<number>;
    /**
     * If set to true, the content that is violation is attached to the DLP notification email.
     */
    tlsEnabled?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a ZIADLPNotificationTemplates resource.
 */
export interface ZIADLPNotificationTemplatesArgs {
    /**
     * If set to true, the content that is violation is attached to the DLP notification email.
     */
    attachContent?: pulumi.Input<boolean>;
    /**
     * The template for the HTML message body that must be displayed in the DLP notification email.
     */
    htmlMessage: pulumi.Input<string>;
    /**
     * The DLP policy rule name.
     */
    name?: pulumi.Input<string>;
    /**
     * The template for the plain text UTF-8 message body that must be displayed in the DLP notification email.
     */
    plainTextMessage: pulumi.Input<string>;
    /**
     * The Subject line that is displayed within the DLP notification email.
     */
    subject?: pulumi.Input<string>;
    /**
     * If set to true, the content that is violation is attached to the DLP notification email.
     */
    tlsEnabled?: pulumi.Input<boolean>;
}
