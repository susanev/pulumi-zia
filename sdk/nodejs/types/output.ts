// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export namespace AdminUsers {
    export interface AdminUsersAdminScope {
        /**
         * Based on the admin scope type, the entities can be the ID/name pair of departments, locations, or location groups.
         */
        scopeEntities: outputs.AdminUsers.AdminUsersAdminScopeScopeEntities;
        /**
         * Only applicable for the LOCATION_GROUP admin scope type, in which case this attribute gives the list of ID/name pairs of locations within the location group.
         */
        scopeGroupMemberEntities: outputs.AdminUsers.AdminUsersAdminScopeScopeGroupMemberEntities;
        /**
         * The admin scope type. The attribute name is subject to change.
         */
        type: string;
    }

    export interface AdminUsersAdminScopeScopeEntities {
        /**
         * Identifier that uniquely identifies an entity
         */
        ids: number[];
    }

    export interface AdminUsersAdminScopeScopeGroupMemberEntities {
        /**
         * Identifier that uniquely identifies an entity
         */
        ids: number[];
    }

    export interface AdminUsersRole {
        extensions: {[key: string]: string};
        /**
         * Identifier that uniquely identifies an entity
         */
        id: number;
        isNameL10nTag: boolean;
        /**
         * The configured name of the entity
         */
        name: string;
    }

    export interface GetAdminUsersAdminScope {
        /**
         * (String) Based on the admin scope type, the entities can be the ID/name pair of departments, locations, or location groups.
         */
        scopeEntities: outputs.AdminUsers.GetAdminUsersAdminScopeScopeEntity[];
        /**
         * (Number) Only applicable for the LOCATION_GROUP admin scope type, in which case this attribute gives the list of ID/name pairs of locations within the location group.
         */
        scopeGroupMemberEntities: outputs.AdminUsers.GetAdminUsersAdminScopeScopeGroupMemberEntity[];
        /**
         * (String) The admin scope type. The attribute name is subject to change.
         */
        type: string;
    }

    export interface GetAdminUsersAdminScopeScopeEntity {
        extensions: {[key: string]: string};
        /**
         * The ID of the admin user to be exported.
         */
        id: number;
        /**
         * (String)
         */
        name: string;
    }

    export interface GetAdminUsersAdminScopeScopeGroupMemberEntity {
        extensions: {[key: string]: string};
        /**
         * The ID of the admin user to be exported.
         */
        id: number;
        /**
         * (String)
         */
        name: string;
    }

    export interface GetAdminUsersExecMobileAppToken {
        /**
         * (String)
         */
        cloud: string;
        /**
         * (Number)
         */
        createTime: number;
        /**
         * (String)
         */
        deviceId: string;
        /**
         * (String)
         */
        deviceName: string;
        /**
         * (String)
         */
        name: string;
        /**
         * (Number)
         */
        orgId: number;
        /**
         * (String)
         */
        token: string;
        /**
         * (Number)
         */
        tokenExpiry: number;
        /**
         * (String)
         */
        tokenId: string;
    }

    export interface GetAdminUsersRole {
        extensions: {[key: string]: string};
        /**
         * The ID of the admin user to be exported.
         */
        id: number;
        /**
         * (String)
         */
        name: string;
    }

}

export namespace DLP {
    export interface DLPDictionariesExactDataMatchDetail {
        /**
         * The unique identifier for the EDM mapping.
         */
        dictionaryEdmMappingId: number;
        /**
         * The EDM template's primary field.
         */
        primaryField?: number;
        /**
         * The unique identifier for the EDM template (or schema).
         */
        schemaId: number;
        /**
         * The EDM secondary field to match on.
         * - `"MATCHON_NONE"`
         * - `"MATCHON_ANY_1"`
         * - `"MATCHON_ANY_2"`
         * - `"MATCHON_ANY_3"`
         * - `"MATCHON_ANY_4"`
         * - `"MATCHON_ANY_5"`
         * - `"MATCHON_ANY_6"`
         * - `"MATCHON_ANY_7"`
         * - `"MATCHON_ANY_8"`
         * - `"MATCHON_ANY_9"`
         * - `"MATCHON_ANY_10"`
         * - `"MATCHON_ANY_11"`
         * - `"MATCHON_ANY_12"`
         * - `"MATCHON_ANY_13"`
         * - `"MATCHON_ANY_14"`
         * - `"MATCHON_ANY_15"`
         * - `"MATCHON_ALL"`
         */
        secondaryFieldMatchOn?: string;
        /**
         * The EDM template's secondary fields.
         */
        secondaryFields: number[];
    }

    export interface DLPDictionariesIdmProfileMatchAccuracy {
        /**
         * The IDM template reference.
         */
        adpIdmProfile?: outputs.DLP.DLPDictionariesIdmProfileMatchAccuracyAdpIdmProfile;
        /**
         * The IDM template match accuracy.
         * - `"LOW"`
         * - `"MEDIUM"`
         * - `"HEAVY"`
         */
        matchAccuracy?: string;
    }

    export interface DLPDictionariesIdmProfileMatchAccuracyAdpIdmProfile {
        extensions: {[key: string]: string};
        id: number;
    }

    export interface DLPDictionariesPattern {
        /**
         * The action applied to a DLP dictionary using patterns. The following values are supported:
         */
        action?: string;
        /**
         * DLP dictionary pattern
         */
        pattern?: string;
    }

    export interface DLPDictionariesPhrase {
        /**
         * The action applied to a DLP dictionary using patterns. The following values are supported:
         */
        action?: string;
        /**
         * DLP dictionary phrase
         */
        phrase?: string;
    }

    export interface DLPWebRulesAuditor {
        /**
         * Identifier that uniquely identifies an entity
         */
        id: number;
    }

    export interface DLPWebRulesDepartments {
        /**
         * Identifier that uniquely identifies an entity
         */
        ids: number[];
    }

    export interface DLPWebRulesDlpEngines {
        /**
         * Identifier that uniquely identifies an entity
         */
        ids: number[];
    }

    export interface DLPWebRulesExcludedDepartments {
        /**
         * Identifier that uniquely identifies an entity
         */
        ids: number[];
    }

    export interface DLPWebRulesExcludedGroups {
        /**
         * Identifier that uniquely identifies an entity
         */
        ids: number[];
    }

    export interface DLPWebRulesExcludedUsers {
        /**
         * Identifier that uniquely identifies an entity
         */
        ids: number[];
    }

    export interface DLPWebRulesGroups {
        /**
         * Identifier that uniquely identifies an entity
         */
        ids: number[];
    }

    export interface DLPWebRulesIcapServer {
        /**
         * Identifier that uniquely identifies an entity
         */
        id: number;
    }

    export interface DLPWebRulesLabels {
        /**
         * Identifier that uniquely identifies an entity
         */
        ids: number[];
    }

    export interface DLPWebRulesLocationGroups {
        /**
         * Identifier that uniquely identifies an entity
         */
        ids: number[];
    }

    export interface DLPWebRulesLocations {
        /**
         * Identifier that uniquely identifies an entity
         */
        ids: number[];
    }

    export interface DLPWebRulesNotificationTemplate {
        /**
         * Identifier that uniquely identifies an entity
         */
        id: number;
    }

    export interface DLPWebRulesTimeWindows {
        /**
         * Identifier that uniquely identifies an entity
         */
        ids: number[];
    }

    export interface DLPWebRulesUrlCategories {
        /**
         * Identifier that uniquely identifies an entity
         */
        ids: number[];
    }

    export interface DLPWebRulesUsers {
        /**
         * Identifier that uniquely identifies an entity
         */
        ids: number[];
    }

    export interface GetDLPDictionariesExactDataMatchDetail {
        dictionaryEdmMappingId: number;
        primaryField: number;
        schemaId: number;
        secondaryFieldMatchOn: string;
        secondaryFields: number[];
    }

    export interface GetDLPDictionariesIdmProfileMatchAccuracy {
        adpIdmProfiles: outputs.DLP.GetDLPDictionariesIdmProfileMatchAccuracyAdpIdmProfile[];
        matchAccuracy: string;
    }

    export interface GetDLPDictionariesIdmProfileMatchAccuracyAdpIdmProfile {
        extensions: {[key: string]: string};
        /**
         * Unique identifier for the DLP dictionary
         */
        id: number;
    }

    export interface GetDLPDictionariesPattern {
        /**
         * (String) The action applied to a DLP dictionary using patterns
         */
        action: string;
        /**
         * (String) DLP dictionary pattern
         */
        pattern: string;
    }

    export interface GetDLPDictionariesPhrase {
        /**
         * (String) The action applied to a DLP dictionary using patterns
         */
        action: string;
        phrase: string;
    }

    export interface GetDLPWebRulesAuditor {
        extensions: {[key: string]: string};
        /**
         * Identifier that uniquely identifies an entity
         */
        id: number;
        /**
         * The DLP policy rule name.
         * rules.
         */
        name: string;
    }

    export interface GetDLPWebRulesDepartment {
        extensions: {[key: string]: string};
        /**
         * Identifier that uniquely identifies an entity
         */
        id: number;
        /**
         * The DLP policy rule name.
         * rules.
         */
        name: string;
    }

    export interface GetDLPWebRulesDlpEngine {
        extensions: {[key: string]: string};
        /**
         * Identifier that uniquely identifies an entity
         */
        id: number;
        /**
         * The DLP policy rule name.
         * rules.
         */
        name: string;
    }

    export interface GetDLPWebRulesExcludedDepartment {
        extensions: {[key: string]: string};
        /**
         * Identifier that uniquely identifies an entity
         */
        id: number;
    }

    export interface GetDLPWebRulesExcludedGroup {
        extensions: {[key: string]: string};
        /**
         * Identifier that uniquely identifies an entity
         */
        id: number;
    }

    export interface GetDLPWebRulesExcludedUser {
        extensions: {[key: string]: string};
        /**
         * Identifier that uniquely identifies an entity
         */
        id: number;
    }

    export interface GetDLPWebRulesGroup {
        extensions: {[key: string]: string};
        /**
         * Identifier that uniquely identifies an entity
         */
        id: number;
        /**
         * The DLP policy rule name.
         * rules.
         */
        name: string;
    }

    export interface GetDLPWebRulesIcapServer {
        extensions: {[key: string]: string};
        /**
         * Identifier that uniquely identifies an entity
         */
        id: number;
        /**
         * The DLP policy rule name.
         * rules.
         */
        name: string;
    }

    export interface GetDLPWebRulesLabel {
        extensions: {[key: string]: string};
        /**
         * Identifier that uniquely identifies an entity
         */
        id: number;
        /**
         * The DLP policy rule name.
         * rules.
         */
        name: string;
    }

    export interface GetDLPWebRulesLastModifiedBy {
        extensions: {[key: string]: string};
        /**
         * Identifier that uniquely identifies an entity
         */
        id: number;
        /**
         * The DLP policy rule name.
         * rules.
         */
        name: string;
    }

    export interface GetDLPWebRulesLocation {
        extensions: {[key: string]: string};
        /**
         * Identifier that uniquely identifies an entity
         */
        id: number;
        /**
         * The DLP policy rule name.
         * rules.
         */
        name: string;
    }

    export interface GetDLPWebRulesLocationGroup {
        extensions: {[key: string]: string};
        /**
         * Identifier that uniquely identifies an entity
         */
        id: number;
        /**
         * The DLP policy rule name.
         * rules.
         */
        name: string;
    }

    export interface GetDLPWebRulesNotificationTemplate {
        extensions: {[key: string]: string};
        /**
         * Identifier that uniquely identifies an entity
         */
        id: number;
        /**
         * The DLP policy rule name.
         * rules.
         */
        name: string;
    }

    export interface GetDLPWebRulesTimeWindow {
        extensions: {[key: string]: string};
        /**
         * Identifier that uniquely identifies an entity
         */
        id: number;
        /**
         * The DLP policy rule name.
         * rules.
         */
        name: string;
    }

    export interface GetDLPWebRulesUrlCategory {
        extensions: {[key: string]: string};
        /**
         * Identifier that uniquely identifies an entity
         */
        id: number;
        /**
         * The DLP policy rule name.
         * rules.
         */
        name: string;
    }

    export interface GetDLPWebRulesUser {
        extensions: {[key: string]: string};
        /**
         * Identifier that uniquely identifies an entity
         */
        id: number;
        /**
         * The DLP policy rule name.
         * rules.
         */
        name: string;
    }

}

export namespace Firewall {
    export interface FirewallFilteringNetworkServicesDestTcpPort {
        end?: number;
        start?: number;
    }

    export interface FirewallFilteringNetworkServicesDestUdpPort {
        end?: number;
        start?: number;
    }

    export interface FirewallFilteringNetworkServicesSrcTcpPort {
        end?: number;
        start?: number;
    }

    export interface FirewallFilteringNetworkServicesSrcUdpPort {
        end?: number;
        start?: number;
    }

    export interface FirewallFilteringRuleAppServiceGroups {
        /**
         * Identifier that uniquely identifies an entity
         */
        ids: number[];
    }

    export interface FirewallFilteringRuleAppServices {
        /**
         * Identifier that uniquely identifies an entity
         */
        ids: number[];
    }

    export interface FirewallFilteringRuleDepartments {
        /**
         * Identifier that uniquely identifies an entity
         */
        ids: number[];
    }

    export interface FirewallFilteringRuleDestIpGroups {
        /**
         * Identifier that uniquely identifies an entity
         */
        ids: number[];
    }

    export interface FirewallFilteringRuleGroups {
        /**
         * Identifier that uniquely identifies an entity
         */
        ids: number[];
    }

    export interface FirewallFilteringRuleLabels {
        /**
         * Identifier that uniquely identifies an entity
         */
        ids: number[];
    }

    export interface FirewallFilteringRuleLastModifiedBy {
        extensions?: {[key: string]: string};
        /**
         * Identifier that uniquely identifies an entity
         */
        id?: number;
    }

    export interface FirewallFilteringRuleLocationGroups {
        /**
         * Identifier that uniquely identifies an entity
         */
        ids: number[];
    }

    export interface FirewallFilteringRuleLocations {
        /**
         * Identifier that uniquely identifies an entity
         */
        ids: number[];
    }

    export interface FirewallFilteringRuleNwApplicationGroups {
        /**
         * Identifier that uniquely identifies an entity
         */
        ids: number[];
    }

    export interface FirewallFilteringRuleNwServiceGroups {
        /**
         * Identifier that uniquely identifies an entity
         */
        ids: number[];
    }

    export interface FirewallFilteringRuleNwServices {
        /**
         * Identifier that uniquely identifies an entity
         */
        ids: number[];
    }

    export interface FirewallFilteringRuleSrcIpGroups {
        /**
         * Identifier that uniquely identifies an entity
         */
        ids: number[];
    }

    export interface FirewallFilteringRuleTimeWindows {
        /**
         * Identifier that uniquely identifies an entity
         */
        ids: number[];
    }

    export interface FirewallFilteringRuleUsers {
        /**
         * Identifier that uniquely identifies an entity
         */
        ids: number[];
    }

    export interface FirewallFilteringServiceGroupsService {
        ids: number[];
    }

    export interface GetFirewallFilteringNetworkServiceGroupsService {
        /**
         * (String)
         */
        description: string;
        /**
         * The ID of the ip source group to be exported.
         */
        id: number;
        /**
         * (Bool) - Default: false
         */
        isNameL10nTag: boolean;
        /**
         * The name of the ip source group to be exported.
         */
        name?: string;
    }

    export interface GetFirewallFilteringNetworkServicesDestTcpPort {
        /**
         * (Number)
         */
        end: number;
        /**
         * (Number)
         */
        start: number;
    }

    export interface GetFirewallFilteringNetworkServicesDestUdpPort {
        /**
         * (Number)
         */
        end: number;
        /**
         * (Number)
         */
        start: number;
    }

    export interface GetFirewallFilteringNetworkServicesSrcTcpPort {
        /**
         * (Number)
         */
        end: number;
        /**
         * (Number)
         */
        start: number;
    }

    export interface GetFirewallFilteringNetworkServicesSrcUdpPort {
        /**
         * (Number)
         */
        end: number;
        /**
         * (Number)
         */
        start: number;
    }

    export interface GetFirewallFilteringRuleAppService {
        /**
         * (Map of String)
         */
        extensions: {[key: string]: string};
        /**
         * Unique identifier for the Firewall Filtering policy rule
         */
        id: number;
        /**
         * Name of the Firewall Filtering policy rule
         */
        name: string;
    }

    export interface GetFirewallFilteringRuleAppServiceGroup {
        /**
         * (Map of String)
         */
        extensions: {[key: string]: string};
        /**
         * Unique identifier for the Firewall Filtering policy rule
         */
        id: number;
        /**
         * Name of the Firewall Filtering policy rule
         */
        name: string;
    }

    export interface GetFirewallFilteringRuleDepartment {
        /**
         * (Map of String)
         */
        extensions: {[key: string]: string};
        /**
         * Unique identifier for the Firewall Filtering policy rule
         */
        id: number;
        /**
         * Name of the Firewall Filtering policy rule
         */
        name: string;
    }

    export interface GetFirewallFilteringRuleGroup {
        /**
         * (Map of String)
         */
        extensions: {[key: string]: string};
        /**
         * Unique identifier for the Firewall Filtering policy rule
         */
        id: number;
        /**
         * Name of the Firewall Filtering policy rule
         */
        name: string;
    }

    export interface GetFirewallFilteringRuleLabel {
        /**
         * (Map of String)
         */
        extensions: {[key: string]: string};
        /**
         * Unique identifier for the Firewall Filtering policy rule
         */
        id: number;
        /**
         * Name of the Firewall Filtering policy rule
         */
        name: string;
    }

    export interface GetFirewallFilteringRuleLastModifiedBy {
        /**
         * (Map of String)
         */
        extensions: {[key: string]: string};
        /**
         * Unique identifier for the Firewall Filtering policy rule
         */
        id: number;
        /**
         * Name of the Firewall Filtering policy rule
         */
        name: string;
    }

    export interface GetFirewallFilteringRuleLocation {
        /**
         * (Map of String)
         */
        extensions: {[key: string]: string};
        /**
         * Unique identifier for the Firewall Filtering policy rule
         */
        id: number;
        /**
         * Name of the Firewall Filtering policy rule
         */
        name: string;
    }

    export interface GetFirewallFilteringRuleLocationGroup {
        /**
         * (Map of String)
         */
        extensions: {[key: string]: string};
        /**
         * Unique identifier for the Firewall Filtering policy rule
         */
        id: number;
        /**
         * Name of the Firewall Filtering policy rule
         */
        name: string;
    }

    export interface GetFirewallFilteringRuleNwApplicationGroup {
        /**
         * (Map of String)
         */
        extensions: {[key: string]: string};
        /**
         * Unique identifier for the Firewall Filtering policy rule
         */
        id: number;
        /**
         * Name of the Firewall Filtering policy rule
         */
        name: string;
    }

    export interface GetFirewallFilteringRuleNwService {
        /**
         * (Map of String)
         */
        extensions: {[key: string]: string};
        /**
         * Unique identifier for the Firewall Filtering policy rule
         */
        id: number;
        /**
         * Name of the Firewall Filtering policy rule
         */
        name: string;
    }

    export interface GetFirewallFilteringRuleNwServiceGroup {
        /**
         * (Map of String)
         */
        extensions: {[key: string]: string};
        /**
         * Unique identifier for the Firewall Filtering policy rule
         */
        id: number;
        /**
         * Name of the Firewall Filtering policy rule
         */
        name: string;
    }

    export interface GetFirewallFilteringRuleTimeWindow {
        /**
         * (Map of String)
         */
        extensions: {[key: string]: string};
        /**
         * Unique identifier for the Firewall Filtering policy rule
         */
        id: number;
        /**
         * Name of the Firewall Filtering policy rule
         */
        name: string;
    }

    export interface GetFirewallFilteringRuleUser {
        /**
         * (Map of String)
         */
        extensions: {[key: string]: string};
        /**
         * Unique identifier for the Firewall Filtering policy rule
         */
        id: number;
        /**
         * Name of the Firewall Filtering policy rule
         */
        name: string;
    }

}

export namespace LocationGroups {
    export interface GetLocationGroupsDynamicLocationGroupCriteria {
        /**
         * (Block List)
         */
        cities?: outputs.LocationGroups.GetLocationGroupsDynamicLocationGroupCriteriaCity[];
        /**
         * (List of String) One or more countries from a predefined set
         */
        countries?: string[];
        /**
         * (Boolean) Enable Bandwidth Control. When set to true, Bandwidth Control is enabled for the location.
         */
        enableBandwidthControl: boolean;
        /**
         * (Boolean) Enable Caution. When set to true, a caution notifcation is enabled for the location.
         */
        enableCaution: boolean;
        /**
         * (Boolean) Enable `XFF` Forwarding. When set to true, traffic is passed to Zscaler Cloud via the X-Forwarded-For (XFF) header.
         */
        enableXffForwarding: boolean;
        /**
         * (Boolean) Enable AUP. When set to true, AUP is enabled for the location.
         */
        enforceAup: boolean;
        /**
         * (Boolean) Enforce Authentication. Required when ports are enabled, IP Surrogate is enabled, or Kerberos Authentication is enabled.
         */
        enforceAuthentication: boolean;
        /**
         * (Boolean) Enable Firewall. When set to true, Firewall is enabled for the location.
         */
        enforceFirewallControl: boolean;
        /**
         * (Block List)
         */
        managedBies: outputs.LocationGroups.GetLocationGroupsDynamicLocationGroupCriteriaManagedBy[];
        /**
         * Location group name
         */
        names?: outputs.LocationGroups.GetLocationGroupsDynamicLocationGroupCriteriaName[];
        /**
         * (List of String) One or more location profiles from a predefined set
         */
        profiles?: string[];
    }

    export interface GetLocationGroupsDynamicLocationGroupCriteriaCity {
        /**
         * (String) String value to be matched or partially matched
         */
        matchString?: string;
        /**
         * (String) Operator that performs match action
         */
        matchType?: string;
    }

    export interface GetLocationGroupsDynamicLocationGroupCriteriaManagedBy {
        /**
         * (Map of String)
         */
        extensions: {[key: string]: string};
        /**
         * Unique identifier for the location group
         */
        id: number;
        /**
         * Location group name
         */
        name: string;
    }

    export interface GetLocationGroupsDynamicLocationGroupCriteriaName {
        /**
         * (String) String value to be matched or partially matched
         */
        matchString?: string;
        /**
         * (String) Operator that performs match action
         */
        matchType?: string;
    }

    export interface GetLocationGroupsLastModUser {
        /**
         * (Map of String)
         */
        extensions: {[key: string]: string};
        /**
         * Unique identifier for the location group
         */
        id: number;
        /**
         * Location group name
         */
        name: string;
    }

    export interface GetLocationGroupsLocation {
        /**
         * (Map of String)
         */
        extensions: {[key: string]: string};
        /**
         * Unique identifier for the location group
         */
        id: number;
        /**
         * Location group name
         */
        name: string;
    }

}

export namespace LocationManagement {
    export interface GetLocationManagementVpnCredential {
        /**
         * (String) Additional information about this VPN credential.
         * Additional information about this VPN credential.
         */
        comments: string;
        /**
         * (String) Fully Qualified Domain Name. Applicable only to `UFQDN` or `XAUTH` (or `HOSTED_MOBILE_USERS`) auth type.
         */
        fqdn: string;
        /**
         * The ID of the location to be exported.
         */
        id: number;
        /**
         * (List of Object)
         */
        locations: outputs.LocationManagement.GetLocationManagementVpnCredentialLocation[];
        /**
         * (List of Object)
         */
        managedBies: outputs.LocationManagement.GetLocationManagementVpnCredentialManagedBy[];
        /**
         * (String) Pre-shared key. This is a required field for `UFQDN` and IP auth type.
         */
        preSharedKey: string;
        /**
         * (String) VPN authentication type (i.e., how the VPN credential is sent to the server). It is not modifiable after VpnCredential is created.
         */
        type: string;
    }

    export interface GetLocationManagementVpnCredentialLocation {
        /**
         * (Map of String)
         */
        extensions: {[key: string]: string};
        /**
         * The ID of the location to be exported.
         */
        id: number;
        /**
         * The name of the location to be exported.
         */
        name: string;
    }

    export interface GetLocationManagementVpnCredentialManagedBy {
        /**
         * (Map of String)
         */
        extensions: {[key: string]: string};
        /**
         * The ID of the location to be exported.
         */
        id: number;
        /**
         * The name of the location to be exported.
         */
        name: string;
    }

    export interface LocationManagementVpnCredential {
        comments: string;
        fqdn: string;
        /**
         * VPN credential resource id. The value is required if `ipAddresses` are not defined.
         */
        id: number;
        ipAddress: string;
        preSharedKey?: string;
        type: string;
    }

}

export namespace RuleLabels {
    export interface GetRuleLabelsCreatedBy {
        extensions: {[key: string]: string};
        /**
         * The unique identifer for the device group.
         */
        id: number;
        /**
         * The name of the rule label to be exported.
         */
        name: string;
    }

    export interface GetRuleLabelsLastModifiedBy {
        extensions: {[key: string]: string};
        /**
         * The unique identifer for the device group.
         */
        id: number;
        /**
         * The name of the rule label to be exported.
         */
        name: string;
    }

    export interface RuleLabelsCreatedBy {
        extensions?: {[key: string]: string};
        id: number;
        /**
         * The name of the devices to be created.
         */
        name: string;
    }

    export interface RuleLabelsLastModifiedBy {
        extensions?: {[key: string]: string};
        id: number;
        /**
         * The name of the devices to be created.
         */
        name: string;
    }

}

export namespace TrafficForwarding {
    export interface GetTrafficForwardingGREInternalIPRangeList {
        endIpAddress: string;
        startIpAddress: string;
    }

    export interface GetTrafficForwardingGRETunnelLastModifiedBy {
        id: number;
        name: string;
    }

    export interface GetTrafficForwardingGRETunnelManagedBy {
        id: number;
        name: string;
    }

    export interface GetTrafficForwardingGRETunnelPrimaryDestVip {
        city: string;
        countryCode: string;
        datacenter: string;
        id: number;
        latitude: number;
        longitude: number;
        privateServiceEdge: boolean;
        region: string;
        virtualIp: string;
    }

    export interface GetTrafficForwardingGRETunnelSecondaryDestVip {
        city: string;
        countryCode: string;
        datacenter: string;
        id: number;
        latitude: number;
        longitude: number;
        privateServiceEdge: boolean;
        region: string;
        virtualIp: string;
    }

    export interface GetTrafficForwardingStaticIPLastModifiedBy {
        /**
         * (Map of String)
         */
        extensions: {[key: string]: string};
        /**
         * The unique identifier for the static IP address
         */
        id: number;
        /**
         * (String) The configured name of the entity
         */
        name: string;
    }

    export interface GetTrafficForwardingStaticIPManagedBy {
        /**
         * The unique identifier for the static IP address
         */
        id: number;
        /**
         * (String) The configured name of the entity
         */
        name: string;
    }

    export interface GetTrafficForwardingVIPRecommendedListList {
        /**
         * (String) Data center information
         */
        datacenter?: string;
        /**
         * Unique identifer of the GRE virtual IP address (VIP)
         */
        id?: number;
        /**
         * (Boolean) Set to true if the virtual IP address (VIP) is a ZIA Private Service Edge
         */
        privateServiceEdge?: boolean;
        /**
         * (String) GRE cluster virtual IP address (VIP)
         */
        virtualIp?: string;
    }

    export interface GetTrafficForwardingVPNCredentialsLocation {
        /**
         * (Map of String)
         */
        extensions: {[key: string]: string};
        /**
         * Unique identifer of the GRE virtual IP address (VIP)
         */
        id: number;
        /**
         * (String) The configured name of the entity
         */
        name: string;
    }

    export interface GetTrafficForwardingVPNCredentialsManagedBy {
        /**
         * (Map of String)
         */
        extensions: {[key: string]: string};
        /**
         * Unique identifer of the GRE virtual IP address (VIP)
         */
        id: number;
        /**
         * (String) The configured name of the entity
         */
        name: string;
    }

    export interface TrafficForwardingGRETunnelLastModifiedBy {
        extensions: {[key: string]: string};
        /**
         * Unique identifer of the GRE virtual IP address (VIP)
         */
        id: number;
        name: string;
    }

    export interface TrafficForwardingGRETunnelPrimaryDestVip {
        datacenter: string;
        /**
         * Unique identifer of the GRE virtual IP address (VIP)
         */
        id: number;
        privateServiceEdge: boolean;
        /**
         * GRE cluster virtual IP address (VIP)
         */
        virtualIp: string;
    }

    export interface TrafficForwardingGRETunnelSecondaryDestVip {
        datacenter: string;
        /**
         * Unique identifer of the GRE virtual IP address (VIP)
         */
        id: number;
        privateServiceEdge: boolean;
        /**
         * GRE cluster virtual IP address (VIP)
         */
        virtualIp: string;
    }

    export interface TrafficForwardingStaticIPLastModifiedBy {
        extensions?: {[key: string]: string};
        id?: number;
        name?: string;
    }

    export interface TrafficForwardingStaticIPManagedBy {
        extensions?: {[key: string]: string};
        id?: number;
        name?: string;
    }

}

export namespace URLCategory {
    export interface GetURLCategoriesScope {
        /**
         * (List of Object)
         */
        scopeEntities: outputs.URLCategory.GetURLCategoriesScopeScopeEntity[];
        /**
         * (List of Object) Only applicable for the LOCATION_GROUP admin scope type, in which case this attribute gives the list of ID/name pairs of locations within the location group. The attribute name is subject to change.
         */
        scopeGroupMemberEntities: outputs.URLCategory.GetURLCategoriesScopeScopeGroupMemberEntity[];
        /**
         * (String) The admin scope type. The attribute name is subject to change. `ORGANIZATION`, `DEPARTMENT`, `LOCATION`, `LOCATION_GROUP`
         */
        type: string;
    }

    export interface GetURLCategoriesScopeScopeEntity {
        /**
         * (Map of String)
         */
        extensions: {[key: string]: string};
        /**
         * URL category
         */
        id: number;
        /**
         * (String) The configured name of the entity
         */
        name: string;
    }

    export interface GetURLCategoriesScopeScopeGroupMemberEntity {
        /**
         * (Map of String)
         */
        extensions: {[key: string]: string};
        /**
         * URL category
         */
        id: number;
        /**
         * (String) The configured name of the entity
         */
        name: string;
    }

    export interface GetURLCategoriesUrlKeywordCount {
        /**
         * (Number) Count of total keywords with retain parent category.
         */
        retainParentKeywordCount: number;
        /**
         * (Number) Count of URLs with retain parent category.
         */
        retainParentUrlCount: number;
        /**
         * (Number) Total keyword count for the category.
         */
        totalKeywordCount: number;
        /**
         * (Number) Custom URL count for the category.
         */
        totalUrlCount: number;
    }

    export interface URLCategoriesScope {
        scopeEntities: outputs.URLCategory.URLCategoriesScopeScopeEntities;
        /**
         * Only applicable for the LOCATION_GROUP admin scope type, in which case this attribute gives the list of ID/name pairs of locations within the location group. The attribute name is subject to change.
         */
        scopeGroupMemberEntities: outputs.URLCategory.URLCategoriesScopeScopeGroupMemberEntities;
        /**
         * Type of the custom categories. `URL_CATEGORY`, `TLD_CATEGORY`, `ALL`
         */
        type?: string;
    }

    export interface URLCategoriesScopeScopeEntities {
        ids: number[];
    }

    export interface URLCategoriesScopeScopeGroupMemberEntities {
        ids: number[];
    }

    export interface URLCategoriesUrlKeywordCounts {
        /**
         * Count of total keywords with retain parent category.
         */
        retainParentKeywordCount: number;
        /**
         * Count of URLs with retain parent category.
         */
        retainParentUrlCount: number;
        /**
         * Total keyword count for the category.
         */
        totalKeywordCount: number;
        /**
         * Custom URL count for the category.
         */
        totalUrlCount: number;
    }

}

export namespace URLFiltering {
    export interface GetURLFilteringRulesDepartment {
        /**
         * (Map of String)
         */
        extensions: {[key: string]: string};
        /**
         * URL Filtering Rule ID
         */
        id: number;
        /**
         * Name of the URL Filtering policy rule
         */
        name: string;
    }

    export interface GetURLFilteringRulesDevice {
        /**
         * (Map of String)
         */
        extensions: {[key: string]: string};
        /**
         * URL Filtering Rule ID
         */
        id: number;
        /**
         * Name of the URL Filtering policy rule
         */
        name: string;
    }

    export interface GetURLFilteringRulesDeviceGroup {
        /**
         * (Map of String)
         */
        extensions: {[key: string]: string};
        /**
         * URL Filtering Rule ID
         */
        id: number;
        /**
         * Name of the URL Filtering policy rule
         */
        name: string;
    }

    export interface GetURLFilteringRulesGroup {
        /**
         * (Map of String)
         */
        extensions: {[key: string]: string};
        /**
         * URL Filtering Rule ID
         */
        id: number;
        /**
         * Name of the URL Filtering policy rule
         */
        name: string;
    }

    export interface GetURLFilteringRulesLabel {
        /**
         * (Map of String)
         */
        extensions: {[key: string]: string};
        /**
         * URL Filtering Rule ID
         */
        id: number;
        /**
         * Name of the URL Filtering policy rule
         */
        name: string;
    }

    export interface GetURLFilteringRulesLastModifiedBy {
        /**
         * (Map of String)
         */
        extensions: {[key: string]: string};
        /**
         * URL Filtering Rule ID
         */
        id: number;
        /**
         * Name of the URL Filtering policy rule
         */
        name: string;
    }

    export interface GetURLFilteringRulesLocation {
        /**
         * (Map of String)
         */
        extensions: {[key: string]: string};
        /**
         * URL Filtering Rule ID
         */
        id: number;
        /**
         * Name of the URL Filtering policy rule
         */
        name: string;
    }

    export interface GetURLFilteringRulesLocationGroup {
        /**
         * (Map of String)
         */
        extensions: {[key: string]: string};
        /**
         * URL Filtering Rule ID
         */
        id: number;
        /**
         * Name of the URL Filtering policy rule
         */
        name: string;
    }

    export interface GetURLFilteringRulesOverrideGroup {
        /**
         * (Map of String)
         */
        extensions: {[key: string]: string};
        /**
         * URL Filtering Rule ID
         */
        id: number;
        /**
         * Name of the URL Filtering policy rule
         */
        name: string;
    }

    export interface GetURLFilteringRulesOverrideUser {
        /**
         * (Map of String)
         */
        extensions: {[key: string]: string};
        /**
         * URL Filtering Rule ID
         */
        id: number;
        /**
         * Name of the URL Filtering policy rule
         */
        name: string;
    }

    export interface GetURLFilteringRulesTimeWindow {
        /**
         * (Map of String)
         */
        extensions: {[key: string]: string};
        /**
         * URL Filtering Rule ID
         */
        id: number;
        /**
         * Name of the URL Filtering policy rule
         */
        name: string;
    }

    export interface GetURLFilteringRulesUser {
        /**
         * (Map of String)
         */
        extensions: {[key: string]: string};
        /**
         * URL Filtering Rule ID
         */
        id: number;
        /**
         * Name of the URL Filtering policy rule
         */
        name: string;
    }

    export interface URLFilteringRulesDepartments {
        /**
         * Identifier that uniquely identifies an entity
         */
        ids: number[];
    }

    export interface URLFilteringRulesDeviceGroups {
        /**
         * Identifier that uniquely identifies an entity
         */
        ids: number[];
    }

    export interface URLFilteringRulesDevices {
        /**
         * Identifier that uniquely identifies an entity
         */
        ids: number[];
    }

    export interface URLFilteringRulesGroups {
        /**
         * Identifier that uniquely identifies an entity
         */
        ids: number[];
    }

    export interface URLFilteringRulesLabels {
        /**
         * Identifier that uniquely identifies an entity
         */
        ids: number[];
    }

    export interface URLFilteringRulesLastModifiedBy {
        extensions?: {[key: string]: string};
        /**
         * Identifier that uniquely identifies an entity
         */
        id?: number;
        /**
         * Name of the Firewall Filtering policy rule
         */
        name: string;
    }

    export interface URLFilteringRulesLocationGroups {
        /**
         * Identifier that uniquely identifies an entity
         */
        ids: number[];
    }

    export interface URLFilteringRulesLocations {
        /**
         * Identifier that uniquely identifies an entity
         */
        ids: number[];
    }

    export interface URLFilteringRulesOverrideGroups {
        /**
         * Identifier that uniquely identifies an entity
         */
        ids: number[];
    }

    export interface URLFilteringRulesOverrideUsers {
        /**
         * Identifier that uniquely identifies an entity
         */
        ids: number[];
    }

    export interface URLFilteringRulesTimeWindows {
        /**
         * Identifier that uniquely identifies an entity
         */
        ids: number[];
    }

    export interface URLFilteringRulesUsers {
        /**
         * Identifier that uniquely identifies an entity
         */
        ids: number[];
    }

}

export namespace Users {
    export interface GetUserManagementDepartment {
        /**
         * (String) Additional information about the group
         */
        comments: string;
        /**
         * (Boolean) default: `false`
         */
        deleted: boolean;
        /**
         * The ID of the time window resource.
         */
        id: number;
        /**
         * (Number) Unique identfier for the identity provider (IdP)
         */
        idpId: number;
        /**
         * User name. This appears when choosing users for policies.
         */
        name: string;
    }

    export interface GetUserManagementGroup {
        /**
         * (String) Additional information about the group
         */
        comments: string;
        /**
         * The ID of the time window resource.
         */
        id: number;
        /**
         * (Number) Unique identfier for the identity provider (IdP)
         */
        idpId: number;
        /**
         * User name. This appears when choosing users for policies.
         */
        name: string;
    }

    export interface UserManagementDepartment {
        comments: string;
        deleted: boolean;
        /**
         * Department ID
         */
        id?: number;
        idpId: number;
        /**
         * User name. This appears when choosing users for policies.
         */
        name: string;
    }

    export interface UserManagementGroups {
        /**
         * Department ID
         */
        ids: number[];
    }

}
