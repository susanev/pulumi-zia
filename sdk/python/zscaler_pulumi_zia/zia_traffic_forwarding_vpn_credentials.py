# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['ZIATrafficForwardingVPNCredentialsArgs', 'ZIATrafficForwardingVPNCredentials']

@pulumi.input_type
class ZIATrafficForwardingVPNCredentialsArgs:
    def __init__(__self__, *,
                 comments: Optional[pulumi.Input[str]] = None,
                 fqdn: Optional[pulumi.Input[str]] = None,
                 ip_address: Optional[pulumi.Input[str]] = None,
                 pre_shared_key: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a ZIATrafficForwardingVPNCredentials resource.
        :param pulumi.Input[str] comments: Additional information about this VPN credential.
        :param pulumi.Input[str] fqdn: Fully Qualified Domain Name. Applicable only to `UFQDN` or `XAUTH` (or `HOSTED_MOBILE_USERS`) auth type.
        :param pulumi.Input[str] ip_address: IP Address for the VON credentials. The parameter becomes required if `type = IP`
        :param pulumi.Input[str] pre_shared_key: Pre-shared key. This is a required field for UFQDN and IP auth type.
        :param pulumi.Input[str] type: VPN authentication type (i.e., how the VPN credential is sent to the server). It is not modifiable after VpnCredential is created. The supported values are: `UFQDN` and `IP`
        """
        if comments is not None:
            pulumi.set(__self__, "comments", comments)
        if fqdn is not None:
            pulumi.set(__self__, "fqdn", fqdn)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if pre_shared_key is not None:
            pulumi.set(__self__, "pre_shared_key", pre_shared_key)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def comments(self) -> Optional[pulumi.Input[str]]:
        """
        Additional information about this VPN credential.
        """
        return pulumi.get(self, "comments")

    @comments.setter
    def comments(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comments", value)

    @property
    @pulumi.getter
    def fqdn(self) -> Optional[pulumi.Input[str]]:
        """
        Fully Qualified Domain Name. Applicable only to `UFQDN` or `XAUTH` (or `HOSTED_MOBILE_USERS`) auth type.
        """
        return pulumi.get(self, "fqdn")

    @fqdn.setter
    def fqdn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fqdn", value)

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[pulumi.Input[str]]:
        """
        IP Address for the VON credentials. The parameter becomes required if `type = IP`
        """
        return pulumi.get(self, "ip_address")

    @ip_address.setter
    def ip_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_address", value)

    @property
    @pulumi.getter(name="preSharedKey")
    def pre_shared_key(self) -> Optional[pulumi.Input[str]]:
        """
        Pre-shared key. This is a required field for UFQDN and IP auth type.
        """
        return pulumi.get(self, "pre_shared_key")

    @pre_shared_key.setter
    def pre_shared_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pre_shared_key", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        VPN authentication type (i.e., how the VPN credential is sent to the server). It is not modifiable after VpnCredential is created. The supported values are: `UFQDN` and `IP`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class _ZIATrafficForwardingVPNCredentialsState:
    def __init__(__self__, *,
                 comments: Optional[pulumi.Input[str]] = None,
                 fqdn: Optional[pulumi.Input[str]] = None,
                 ip_address: Optional[pulumi.Input[str]] = None,
                 pre_shared_key: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 vpn_credental_id: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering ZIATrafficForwardingVPNCredentials resources.
        :param pulumi.Input[str] comments: Additional information about this VPN credential.
        :param pulumi.Input[str] fqdn: Fully Qualified Domain Name. Applicable only to `UFQDN` or `XAUTH` (or `HOSTED_MOBILE_USERS`) auth type.
        :param pulumi.Input[str] ip_address: IP Address for the VON credentials. The parameter becomes required if `type = IP`
        :param pulumi.Input[str] pre_shared_key: Pre-shared key. This is a required field for UFQDN and IP auth type.
        :param pulumi.Input[str] type: VPN authentication type (i.e., how the VPN credential is sent to the server). It is not modifiable after VpnCredential is created. The supported values are: `UFQDN` and `IP`
        """
        if comments is not None:
            pulumi.set(__self__, "comments", comments)
        if fqdn is not None:
            pulumi.set(__self__, "fqdn", fqdn)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if pre_shared_key is not None:
            pulumi.set(__self__, "pre_shared_key", pre_shared_key)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if vpn_credental_id is not None:
            pulumi.set(__self__, "vpn_credental_id", vpn_credental_id)

    @property
    @pulumi.getter
    def comments(self) -> Optional[pulumi.Input[str]]:
        """
        Additional information about this VPN credential.
        """
        return pulumi.get(self, "comments")

    @comments.setter
    def comments(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comments", value)

    @property
    @pulumi.getter
    def fqdn(self) -> Optional[pulumi.Input[str]]:
        """
        Fully Qualified Domain Name. Applicable only to `UFQDN` or `XAUTH` (or `HOSTED_MOBILE_USERS`) auth type.
        """
        return pulumi.get(self, "fqdn")

    @fqdn.setter
    def fqdn(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fqdn", value)

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[pulumi.Input[str]]:
        """
        IP Address for the VON credentials. The parameter becomes required if `type = IP`
        """
        return pulumi.get(self, "ip_address")

    @ip_address.setter
    def ip_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ip_address", value)

    @property
    @pulumi.getter(name="preSharedKey")
    def pre_shared_key(self) -> Optional[pulumi.Input[str]]:
        """
        Pre-shared key. This is a required field for UFQDN and IP auth type.
        """
        return pulumi.get(self, "pre_shared_key")

    @pre_shared_key.setter
    def pre_shared_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pre_shared_key", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        VPN authentication type (i.e., how the VPN credential is sent to the server). It is not modifiable after VpnCredential is created. The supported values are: `UFQDN` and `IP`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="vpnCredentalId")
    def vpn_credental_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "vpn_credental_id")

    @vpn_credental_id.setter
    def vpn_credental_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "vpn_credental_id", value)


class ZIATrafficForwardingVPNCredentials(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 fqdn: Optional[pulumi.Input[str]] = None,
                 ip_address: Optional[pulumi.Input[str]] = None,
                 pre_shared_key: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        The **zia_traffic_forwarding_vpn_credentials** creates and manages VPN credentials that can be associated to locations. VPN is one way to route traffic from customer locations to the cloud. Site-to-site IPSec VPN credentials can be identified by the cloud through one of the following methods:

        * Common Name (CN) of IPSec Certificate
        * VPN User FQDN - requires VPN_SITE_TO_SITE subscription
        * VPN IP Address - requires VPN_SITE_TO_SITE subscription
        * Extended Authentication (XAUTH) or hosted mobile UserID - requires VPN_MOBILE subscription

        ## Example Usage

        ```python
        import pulumi
        import zscaler_pulumi_zia as zia

        # ZIA Traffic Forwarding - VPN Credentials (UFQDN)
        example = zia.ZIATrafficForwardingVPNCredentials("example",
            comments="Example",
            fqdn="sjc-1-37@acme.com",
            pre_shared_key="newPassword123!",
            type="UFQDN")
        ```

        ```python
        import pulumi
        import zscaler_pulumi_zia as zia

        example_zia_traffic_forwarding_static_ip = zia.ZIATrafficForwardingStaticIP("exampleZIATrafficForwardingStaticIP",
            ip_address="1.1.1.1",
            routable_ip=True,
            comment="Example",
            geo_override=True,
            latitude=-36.848461,
            longitude=174.763336)
        # ZIA Traffic Forwarding - VPN Credentials (IP)
        example_zia_traffic_forwarding_vpn_credentials = zia.ZIATrafficForwardingVPNCredentials("exampleZIATrafficForwardingVPNCredentials",
            type="IP",
            ip_address=example_zia_traffic_forwarding_static_ip.ip_address,
            comments="Example",
            pre_shared_key="newPassword123!",
            opts=pulumi.ResourceOptions(depends_on=[example_zia_traffic_forwarding_static_ip]))
        ```

        > **NOTE** For VPN Credentials of Type `IP` a static IP resource must be created first.

        ## Import

        Static IP resources can be imported by using `<STATIC IP ID>` or `<IP ADDRESS>`as the import ID.

        ```sh
         $ pulumi import zia:index/zIATrafficForwardingVPNCredentials:ZIATrafficForwardingVPNCredentials example <static_ip_id>
        ```

         or

        ```sh
         $ pulumi import zia:index/zIATrafficForwardingVPNCredentials:ZIATrafficForwardingVPNCredentials example <ip_address>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] comments: Additional information about this VPN credential.
        :param pulumi.Input[str] fqdn: Fully Qualified Domain Name. Applicable only to `UFQDN` or `XAUTH` (or `HOSTED_MOBILE_USERS`) auth type.
        :param pulumi.Input[str] ip_address: IP Address for the VON credentials. The parameter becomes required if `type = IP`
        :param pulumi.Input[str] pre_shared_key: Pre-shared key. This is a required field for UFQDN and IP auth type.
        :param pulumi.Input[str] type: VPN authentication type (i.e., how the VPN credential is sent to the server). It is not modifiable after VpnCredential is created. The supported values are: `UFQDN` and `IP`
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[ZIATrafficForwardingVPNCredentialsArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        The **zia_traffic_forwarding_vpn_credentials** creates and manages VPN credentials that can be associated to locations. VPN is one way to route traffic from customer locations to the cloud. Site-to-site IPSec VPN credentials can be identified by the cloud through one of the following methods:

        * Common Name (CN) of IPSec Certificate
        * VPN User FQDN - requires VPN_SITE_TO_SITE subscription
        * VPN IP Address - requires VPN_SITE_TO_SITE subscription
        * Extended Authentication (XAUTH) or hosted mobile UserID - requires VPN_MOBILE subscription

        ## Example Usage

        ```python
        import pulumi
        import zscaler_pulumi_zia as zia

        # ZIA Traffic Forwarding - VPN Credentials (UFQDN)
        example = zia.ZIATrafficForwardingVPNCredentials("example",
            comments="Example",
            fqdn="sjc-1-37@acme.com",
            pre_shared_key="newPassword123!",
            type="UFQDN")
        ```

        ```python
        import pulumi
        import zscaler_pulumi_zia as zia

        example_zia_traffic_forwarding_static_ip = zia.ZIATrafficForwardingStaticIP("exampleZIATrafficForwardingStaticIP",
            ip_address="1.1.1.1",
            routable_ip=True,
            comment="Example",
            geo_override=True,
            latitude=-36.848461,
            longitude=174.763336)
        # ZIA Traffic Forwarding - VPN Credentials (IP)
        example_zia_traffic_forwarding_vpn_credentials = zia.ZIATrafficForwardingVPNCredentials("exampleZIATrafficForwardingVPNCredentials",
            type="IP",
            ip_address=example_zia_traffic_forwarding_static_ip.ip_address,
            comments="Example",
            pre_shared_key="newPassword123!",
            opts=pulumi.ResourceOptions(depends_on=[example_zia_traffic_forwarding_static_ip]))
        ```

        > **NOTE** For VPN Credentials of Type `IP` a static IP resource must be created first.

        ## Import

        Static IP resources can be imported by using `<STATIC IP ID>` or `<IP ADDRESS>`as the import ID.

        ```sh
         $ pulumi import zia:index/zIATrafficForwardingVPNCredentials:ZIATrafficForwardingVPNCredentials example <static_ip_id>
        ```

         or

        ```sh
         $ pulumi import zia:index/zIATrafficForwardingVPNCredentials:ZIATrafficForwardingVPNCredentials example <ip_address>
        ```

        :param str resource_name: The name of the resource.
        :param ZIATrafficForwardingVPNCredentialsArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ZIATrafficForwardingVPNCredentialsArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 fqdn: Optional[pulumi.Input[str]] = None,
                 ip_address: Optional[pulumi.Input[str]] = None,
                 pre_shared_key: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ZIATrafficForwardingVPNCredentialsArgs.__new__(ZIATrafficForwardingVPNCredentialsArgs)

            __props__.__dict__["comments"] = comments
            __props__.__dict__["fqdn"] = fqdn
            __props__.__dict__["ip_address"] = ip_address
            __props__.__dict__["pre_shared_key"] = None if pre_shared_key is None else pulumi.Output.secret(pre_shared_key)
            __props__.__dict__["type"] = type
            __props__.__dict__["vpn_credental_id"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["preSharedKey"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(ZIATrafficForwardingVPNCredentials, __self__).__init__(
            'zia:index/zIATrafficForwardingVPNCredentials:ZIATrafficForwardingVPNCredentials',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            comments: Optional[pulumi.Input[str]] = None,
            fqdn: Optional[pulumi.Input[str]] = None,
            ip_address: Optional[pulumi.Input[str]] = None,
            pre_shared_key: Optional[pulumi.Input[str]] = None,
            type: Optional[pulumi.Input[str]] = None,
            vpn_credental_id: Optional[pulumi.Input[int]] = None) -> 'ZIATrafficForwardingVPNCredentials':
        """
        Get an existing ZIATrafficForwardingVPNCredentials resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] comments: Additional information about this VPN credential.
        :param pulumi.Input[str] fqdn: Fully Qualified Domain Name. Applicable only to `UFQDN` or `XAUTH` (or `HOSTED_MOBILE_USERS`) auth type.
        :param pulumi.Input[str] ip_address: IP Address for the VON credentials. The parameter becomes required if `type = IP`
        :param pulumi.Input[str] pre_shared_key: Pre-shared key. This is a required field for UFQDN and IP auth type.
        :param pulumi.Input[str] type: VPN authentication type (i.e., how the VPN credential is sent to the server). It is not modifiable after VpnCredential is created. The supported values are: `UFQDN` and `IP`
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ZIATrafficForwardingVPNCredentialsState.__new__(_ZIATrafficForwardingVPNCredentialsState)

        __props__.__dict__["comments"] = comments
        __props__.__dict__["fqdn"] = fqdn
        __props__.__dict__["ip_address"] = ip_address
        __props__.__dict__["pre_shared_key"] = pre_shared_key
        __props__.__dict__["type"] = type
        __props__.__dict__["vpn_credental_id"] = vpn_credental_id
        return ZIATrafficForwardingVPNCredentials(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def comments(self) -> pulumi.Output[Optional[str]]:
        """
        Additional information about this VPN credential.
        """
        return pulumi.get(self, "comments")

    @property
    @pulumi.getter
    def fqdn(self) -> pulumi.Output[Optional[str]]:
        """
        Fully Qualified Domain Name. Applicable only to `UFQDN` or `XAUTH` (or `HOSTED_MOBILE_USERS`) auth type.
        """
        return pulumi.get(self, "fqdn")

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> pulumi.Output[Optional[str]]:
        """
        IP Address for the VON credentials. The parameter becomes required if `type = IP`
        """
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter(name="preSharedKey")
    def pre_shared_key(self) -> pulumi.Output[Optional[str]]:
        """
        Pre-shared key. This is a required field for UFQDN and IP auth type.
        """
        return pulumi.get(self, "pre_shared_key")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[Optional[str]]:
        """
        VPN authentication type (i.e., how the VPN credential is sent to the server). It is not modifiable after VpnCredential is created. The supported values are: `UFQDN` and `IP`
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="vpnCredentalId")
    def vpn_credental_id(self) -> pulumi.Output[int]:
        return pulumi.get(self, "vpn_credental_id")

