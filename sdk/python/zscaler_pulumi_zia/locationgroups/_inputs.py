# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'GetLocationGroupsDynamicLocationGroupCriteriaArgs',
    'GetLocationGroupsDynamicLocationGroupCriteriaCityArgs',
    'GetLocationGroupsDynamicLocationGroupCriteriaManagedByArgs',
    'GetLocationGroupsDynamicLocationGroupCriteriaNameArgs',
]

@pulumi.input_type
class GetLocationGroupsDynamicLocationGroupCriteriaArgs:
    def __init__(__self__, *,
                 enable_bandwidth_control: bool,
                 enable_caution: bool,
                 enable_xff_forwarding: bool,
                 enforce_aup: bool,
                 enforce_authentication: bool,
                 enforce_firewall_control: bool,
                 managed_bies: Sequence['GetLocationGroupsDynamicLocationGroupCriteriaManagedByArgs'],
                 cities: Optional[Sequence['GetLocationGroupsDynamicLocationGroupCriteriaCityArgs']] = None,
                 countries: Optional[Sequence[str]] = None,
                 names: Optional[Sequence['GetLocationGroupsDynamicLocationGroupCriteriaNameArgs']] = None,
                 profiles: Optional[Sequence[str]] = None):
        """
        :param bool enable_bandwidth_control: (Boolean) Enable Bandwidth Control. When set to true, Bandwidth Control is enabled for the location.
        :param bool enable_caution: (Boolean) Enable Caution. When set to true, a caution notifcation is enabled for the location.
        :param bool enable_xff_forwarding: (Boolean) Enable `XFF` Forwarding. When set to true, traffic is passed to Zscaler Cloud via the X-Forwarded-For (XFF) header.
        :param bool enforce_aup: (Boolean) Enable AUP. When set to true, AUP is enabled for the location.
        :param bool enforce_authentication: (Boolean) Enforce Authentication. Required when ports are enabled, IP Surrogate is enabled, or Kerberos Authentication is enabled.
        :param bool enforce_firewall_control: (Boolean) Enable Firewall. When set to true, Firewall is enabled for the location.
        :param Sequence['GetLocationGroupsDynamicLocationGroupCriteriaManagedByArgs'] managed_bies: (Block List)
        :param Sequence['GetLocationGroupsDynamicLocationGroupCriteriaCityArgs'] cities: (Block List)
        :param Sequence[str] countries: (List of String) One or more countries from a predefined set
        :param Sequence['GetLocationGroupsDynamicLocationGroupCriteriaNameArgs'] names: Location group name
        :param Sequence[str] profiles: (List of String) One or more location profiles from a predefined set
        """
        pulumi.set(__self__, "enable_bandwidth_control", enable_bandwidth_control)
        pulumi.set(__self__, "enable_caution", enable_caution)
        pulumi.set(__self__, "enable_xff_forwarding", enable_xff_forwarding)
        pulumi.set(__self__, "enforce_aup", enforce_aup)
        pulumi.set(__self__, "enforce_authentication", enforce_authentication)
        pulumi.set(__self__, "enforce_firewall_control", enforce_firewall_control)
        pulumi.set(__self__, "managed_bies", managed_bies)
        if cities is not None:
            pulumi.set(__self__, "cities", cities)
        if countries is not None:
            pulumi.set(__self__, "countries", countries)
        if names is not None:
            pulumi.set(__self__, "names", names)
        if profiles is not None:
            pulumi.set(__self__, "profiles", profiles)

    @property
    @pulumi.getter(name="enableBandwidthControl")
    def enable_bandwidth_control(self) -> bool:
        """
        (Boolean) Enable Bandwidth Control. When set to true, Bandwidth Control is enabled for the location.
        """
        return pulumi.get(self, "enable_bandwidth_control")

    @enable_bandwidth_control.setter
    def enable_bandwidth_control(self, value: bool):
        pulumi.set(self, "enable_bandwidth_control", value)

    @property
    @pulumi.getter(name="enableCaution")
    def enable_caution(self) -> bool:
        """
        (Boolean) Enable Caution. When set to true, a caution notifcation is enabled for the location.
        """
        return pulumi.get(self, "enable_caution")

    @enable_caution.setter
    def enable_caution(self, value: bool):
        pulumi.set(self, "enable_caution", value)

    @property
    @pulumi.getter(name="enableXffForwarding")
    def enable_xff_forwarding(self) -> bool:
        """
        (Boolean) Enable `XFF` Forwarding. When set to true, traffic is passed to Zscaler Cloud via the X-Forwarded-For (XFF) header.
        """
        return pulumi.get(self, "enable_xff_forwarding")

    @enable_xff_forwarding.setter
    def enable_xff_forwarding(self, value: bool):
        pulumi.set(self, "enable_xff_forwarding", value)

    @property
    @pulumi.getter(name="enforceAup")
    def enforce_aup(self) -> bool:
        """
        (Boolean) Enable AUP. When set to true, AUP is enabled for the location.
        """
        return pulumi.get(self, "enforce_aup")

    @enforce_aup.setter
    def enforce_aup(self, value: bool):
        pulumi.set(self, "enforce_aup", value)

    @property
    @pulumi.getter(name="enforceAuthentication")
    def enforce_authentication(self) -> bool:
        """
        (Boolean) Enforce Authentication. Required when ports are enabled, IP Surrogate is enabled, or Kerberos Authentication is enabled.
        """
        return pulumi.get(self, "enforce_authentication")

    @enforce_authentication.setter
    def enforce_authentication(self, value: bool):
        pulumi.set(self, "enforce_authentication", value)

    @property
    @pulumi.getter(name="enforceFirewallControl")
    def enforce_firewall_control(self) -> bool:
        """
        (Boolean) Enable Firewall. When set to true, Firewall is enabled for the location.
        """
        return pulumi.get(self, "enforce_firewall_control")

    @enforce_firewall_control.setter
    def enforce_firewall_control(self, value: bool):
        pulumi.set(self, "enforce_firewall_control", value)

    @property
    @pulumi.getter(name="managedBies")
    def managed_bies(self) -> Sequence['GetLocationGroupsDynamicLocationGroupCriteriaManagedByArgs']:
        """
        (Block List)
        """
        return pulumi.get(self, "managed_bies")

    @managed_bies.setter
    def managed_bies(self, value: Sequence['GetLocationGroupsDynamicLocationGroupCriteriaManagedByArgs']):
        pulumi.set(self, "managed_bies", value)

    @property
    @pulumi.getter
    def cities(self) -> Optional[Sequence['GetLocationGroupsDynamicLocationGroupCriteriaCityArgs']]:
        """
        (Block List)
        """
        return pulumi.get(self, "cities")

    @cities.setter
    def cities(self, value: Optional[Sequence['GetLocationGroupsDynamicLocationGroupCriteriaCityArgs']]):
        pulumi.set(self, "cities", value)

    @property
    @pulumi.getter
    def countries(self) -> Optional[Sequence[str]]:
        """
        (List of String) One or more countries from a predefined set
        """
        return pulumi.get(self, "countries")

    @countries.setter
    def countries(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "countries", value)

    @property
    @pulumi.getter
    def names(self) -> Optional[Sequence['GetLocationGroupsDynamicLocationGroupCriteriaNameArgs']]:
        """
        Location group name
        """
        return pulumi.get(self, "names")

    @names.setter
    def names(self, value: Optional[Sequence['GetLocationGroupsDynamicLocationGroupCriteriaNameArgs']]):
        pulumi.set(self, "names", value)

    @property
    @pulumi.getter
    def profiles(self) -> Optional[Sequence[str]]:
        """
        (List of String) One or more location profiles from a predefined set
        """
        return pulumi.get(self, "profiles")

    @profiles.setter
    def profiles(self, value: Optional[Sequence[str]]):
        pulumi.set(self, "profiles", value)


@pulumi.input_type
class GetLocationGroupsDynamicLocationGroupCriteriaCityArgs:
    def __init__(__self__, *,
                 match_string: Optional[str] = None,
                 match_type: Optional[str] = None):
        """
        :param str match_string: (String) String value to be matched or partially matched
        :param str match_type: (String) Operator that performs match action
        """
        if match_string is not None:
            pulumi.set(__self__, "match_string", match_string)
        if match_type is not None:
            pulumi.set(__self__, "match_type", match_type)

    @property
    @pulumi.getter(name="matchString")
    def match_string(self) -> Optional[str]:
        """
        (String) String value to be matched or partially matched
        """
        return pulumi.get(self, "match_string")

    @match_string.setter
    def match_string(self, value: Optional[str]):
        pulumi.set(self, "match_string", value)

    @property
    @pulumi.getter(name="matchType")
    def match_type(self) -> Optional[str]:
        """
        (String) Operator that performs match action
        """
        return pulumi.get(self, "match_type")

    @match_type.setter
    def match_type(self, value: Optional[str]):
        pulumi.set(self, "match_type", value)


@pulumi.input_type
class GetLocationGroupsDynamicLocationGroupCriteriaManagedByArgs:
    def __init__(__self__, *,
                 extensions: Mapping[str, str],
                 id: int,
                 name: str):
        """
        :param Mapping[str, str] extensions: (Map of String)
        :param int id: Unique identifier for the location group
        :param str name: Location group name
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @extensions.setter
    def extensions(self, value: Mapping[str, str]):
        pulumi.set(self, "extensions", value)

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Unique identifier for the location group
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: int):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Location group name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: str):
        pulumi.set(self, "name", value)


@pulumi.input_type
class GetLocationGroupsDynamicLocationGroupCriteriaNameArgs:
    def __init__(__self__, *,
                 match_string: Optional[str] = None,
                 match_type: Optional[str] = None):
        """
        :param str match_string: (String) String value to be matched or partially matched
        :param str match_type: (String) Operator that performs match action
        """
        if match_string is not None:
            pulumi.set(__self__, "match_string", match_string)
        if match_type is not None:
            pulumi.set(__self__, "match_type", match_type)

    @property
    @pulumi.getter(name="matchString")
    def match_string(self) -> Optional[str]:
        """
        (String) String value to be matched or partially matched
        """
        return pulumi.get(self, "match_string")

    @match_string.setter
    def match_string(self, value: Optional[str]):
        pulumi.set(self, "match_string", value)

    @property
    @pulumi.getter(name="matchType")
    def match_type(self) -> Optional[str]:
        """
        (String) Operator that performs match action
        """
        return pulumi.get(self, "match_type")

    @match_type.setter
    def match_type(self, value: Optional[str]):
        pulumi.set(self, "match_type", value)


