# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'URLCategoriesScopeArgs',
    'URLCategoriesScopeScopeEntitiesArgs',
    'URLCategoriesScopeScopeGroupMemberEntitiesArgs',
    'URLCategoriesUrlKeywordCountsArgs',
]

@pulumi.input_type
class URLCategoriesScopeArgs:
    def __init__(__self__, *,
                 scope_entities: Optional[pulumi.Input['URLCategoriesScopeScopeEntitiesArgs']] = None,
                 scope_group_member_entities: Optional[pulumi.Input['URLCategoriesScopeScopeGroupMemberEntitiesArgs']] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input['URLCategoriesScopeScopeGroupMemberEntitiesArgs'] scope_group_member_entities: Only applicable for the LOCATION_GROUP admin scope type, in which case this attribute gives the list of ID/name pairs of locations within the location group. The attribute name is subject to change.
        :param pulumi.Input[str] type: Type of the custom categories. `URL_CATEGORY`, `TLD_CATEGORY`, `ALL`
        """
        if scope_entities is not None:
            pulumi.set(__self__, "scope_entities", scope_entities)
        if scope_group_member_entities is not None:
            pulumi.set(__self__, "scope_group_member_entities", scope_group_member_entities)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="scopeEntities")
    def scope_entities(self) -> Optional[pulumi.Input['URLCategoriesScopeScopeEntitiesArgs']]:
        return pulumi.get(self, "scope_entities")

    @scope_entities.setter
    def scope_entities(self, value: Optional[pulumi.Input['URLCategoriesScopeScopeEntitiesArgs']]):
        pulumi.set(self, "scope_entities", value)

    @property
    @pulumi.getter(name="scopeGroupMemberEntities")
    def scope_group_member_entities(self) -> Optional[pulumi.Input['URLCategoriesScopeScopeGroupMemberEntitiesArgs']]:
        """
        Only applicable for the LOCATION_GROUP admin scope type, in which case this attribute gives the list of ID/name pairs of locations within the location group. The attribute name is subject to change.
        """
        return pulumi.get(self, "scope_group_member_entities")

    @scope_group_member_entities.setter
    def scope_group_member_entities(self, value: Optional[pulumi.Input['URLCategoriesScopeScopeGroupMemberEntitiesArgs']]):
        pulumi.set(self, "scope_group_member_entities", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of the custom categories. `URL_CATEGORY`, `TLD_CATEGORY`, `ALL`
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class URLCategoriesScopeScopeEntitiesArgs:
    def __init__(__self__, *,
                 ids: pulumi.Input[Sequence[pulumi.Input[int]]]):
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> pulumi.Input[Sequence[pulumi.Input[int]]]:
        return pulumi.get(self, "ids")

    @ids.setter
    def ids(self, value: pulumi.Input[Sequence[pulumi.Input[int]]]):
        pulumi.set(self, "ids", value)


@pulumi.input_type
class URLCategoriesScopeScopeGroupMemberEntitiesArgs:
    def __init__(__self__, *,
                 ids: pulumi.Input[Sequence[pulumi.Input[int]]]):
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> pulumi.Input[Sequence[pulumi.Input[int]]]:
        return pulumi.get(self, "ids")

    @ids.setter
    def ids(self, value: pulumi.Input[Sequence[pulumi.Input[int]]]):
        pulumi.set(self, "ids", value)


@pulumi.input_type
class URLCategoriesUrlKeywordCountsArgs:
    def __init__(__self__, *,
                 retain_parent_keyword_count: Optional[pulumi.Input[int]] = None,
                 retain_parent_url_count: Optional[pulumi.Input[int]] = None,
                 total_keyword_count: Optional[pulumi.Input[int]] = None,
                 total_url_count: Optional[pulumi.Input[int]] = None):
        """
        :param pulumi.Input[int] retain_parent_keyword_count: Count of total keywords with retain parent category.
        :param pulumi.Input[int] retain_parent_url_count: Count of URLs with retain parent category.
        :param pulumi.Input[int] total_keyword_count: Total keyword count for the category.
        :param pulumi.Input[int] total_url_count: Custom URL count for the category.
        """
        if retain_parent_keyword_count is not None:
            pulumi.set(__self__, "retain_parent_keyword_count", retain_parent_keyword_count)
        if retain_parent_url_count is not None:
            pulumi.set(__self__, "retain_parent_url_count", retain_parent_url_count)
        if total_keyword_count is not None:
            pulumi.set(__self__, "total_keyword_count", total_keyword_count)
        if total_url_count is not None:
            pulumi.set(__self__, "total_url_count", total_url_count)

    @property
    @pulumi.getter(name="retainParentKeywordCount")
    def retain_parent_keyword_count(self) -> Optional[pulumi.Input[int]]:
        """
        Count of total keywords with retain parent category.
        """
        return pulumi.get(self, "retain_parent_keyword_count")

    @retain_parent_keyword_count.setter
    def retain_parent_keyword_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "retain_parent_keyword_count", value)

    @property
    @pulumi.getter(name="retainParentUrlCount")
    def retain_parent_url_count(self) -> Optional[pulumi.Input[int]]:
        """
        Count of URLs with retain parent category.
        """
        return pulumi.get(self, "retain_parent_url_count")

    @retain_parent_url_count.setter
    def retain_parent_url_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "retain_parent_url_count", value)

    @property
    @pulumi.getter(name="totalKeywordCount")
    def total_keyword_count(self) -> Optional[pulumi.Input[int]]:
        """
        Total keyword count for the category.
        """
        return pulumi.get(self, "total_keyword_count")

    @total_keyword_count.setter
    def total_keyword_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "total_keyword_count", value)

    @property
    @pulumi.getter(name="totalUrlCount")
    def total_url_count(self) -> Optional[pulumi.Input[int]]:
        """
        Custom URL count for the category.
        """
        return pulumi.get(self, "total_url_count")

    @total_url_count.setter
    def total_url_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "total_url_count", value)


