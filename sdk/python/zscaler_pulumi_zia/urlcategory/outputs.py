# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'URLCategoriesScope',
    'URLCategoriesScopeScopeEntities',
    'URLCategoriesScopeScopeGroupMemberEntities',
    'URLCategoriesUrlKeywordCounts',
    'GetURLCategoriesScopeResult',
    'GetURLCategoriesScopeScopeEntityResult',
    'GetURLCategoriesScopeScopeGroupMemberEntityResult',
    'GetURLCategoriesUrlKeywordCountResult',
]

@pulumi.output_type
class URLCategoriesScope(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "scopeEntities":
            suggest = "scope_entities"
        elif key == "scopeGroupMemberEntities":
            suggest = "scope_group_member_entities"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in URLCategoriesScope. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        URLCategoriesScope.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        URLCategoriesScope.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 scope_entities: Optional['outputs.URLCategoriesScopeScopeEntities'] = None,
                 scope_group_member_entities: Optional['outputs.URLCategoriesScopeScopeGroupMemberEntities'] = None,
                 type: Optional[str] = None):
        """
        :param 'URLCategoriesScopeScopeGroupMemberEntitiesArgs' scope_group_member_entities: Only applicable for the LOCATION_GROUP admin scope type, in which case this attribute gives the list of ID/name pairs of locations within the location group. The attribute name is subject to change.
        :param str type: Type of the custom categories. `URL_CATEGORY`, `TLD_CATEGORY`, `ALL`
        """
        if scope_entities is not None:
            pulumi.set(__self__, "scope_entities", scope_entities)
        if scope_group_member_entities is not None:
            pulumi.set(__self__, "scope_group_member_entities", scope_group_member_entities)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="scopeEntities")
    def scope_entities(self) -> Optional['outputs.URLCategoriesScopeScopeEntities']:
        return pulumi.get(self, "scope_entities")

    @property
    @pulumi.getter(name="scopeGroupMemberEntities")
    def scope_group_member_entities(self) -> Optional['outputs.URLCategoriesScopeScopeGroupMemberEntities']:
        """
        Only applicable for the LOCATION_GROUP admin scope type, in which case this attribute gives the list of ID/name pairs of locations within the location group. The attribute name is subject to change.
        """
        return pulumi.get(self, "scope_group_member_entities")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Type of the custom categories. `URL_CATEGORY`, `TLD_CATEGORY`, `ALL`
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class URLCategoriesScopeScopeEntities(dict):
    def __init__(__self__, *,
                 ids: Sequence[int]):
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Sequence[int]:
        return pulumi.get(self, "ids")


@pulumi.output_type
class URLCategoriesScopeScopeGroupMemberEntities(dict):
    def __init__(__self__, *,
                 ids: Sequence[int]):
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Sequence[int]:
        return pulumi.get(self, "ids")


@pulumi.output_type
class URLCategoriesUrlKeywordCounts(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "retainParentKeywordCount":
            suggest = "retain_parent_keyword_count"
        elif key == "retainParentUrlCount":
            suggest = "retain_parent_url_count"
        elif key == "totalKeywordCount":
            suggest = "total_keyword_count"
        elif key == "totalUrlCount":
            suggest = "total_url_count"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in URLCategoriesUrlKeywordCounts. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        URLCategoriesUrlKeywordCounts.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        URLCategoriesUrlKeywordCounts.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 retain_parent_keyword_count: Optional[int] = None,
                 retain_parent_url_count: Optional[int] = None,
                 total_keyword_count: Optional[int] = None,
                 total_url_count: Optional[int] = None):
        """
        :param int retain_parent_keyword_count: Count of total keywords with retain parent category.
        :param int retain_parent_url_count: Count of URLs with retain parent category.
        :param int total_keyword_count: Total keyword count for the category.
        :param int total_url_count: Custom URL count for the category.
        """
        if retain_parent_keyword_count is not None:
            pulumi.set(__self__, "retain_parent_keyword_count", retain_parent_keyword_count)
        if retain_parent_url_count is not None:
            pulumi.set(__self__, "retain_parent_url_count", retain_parent_url_count)
        if total_keyword_count is not None:
            pulumi.set(__self__, "total_keyword_count", total_keyword_count)
        if total_url_count is not None:
            pulumi.set(__self__, "total_url_count", total_url_count)

    @property
    @pulumi.getter(name="retainParentKeywordCount")
    def retain_parent_keyword_count(self) -> Optional[int]:
        """
        Count of total keywords with retain parent category.
        """
        return pulumi.get(self, "retain_parent_keyword_count")

    @property
    @pulumi.getter(name="retainParentUrlCount")
    def retain_parent_url_count(self) -> Optional[int]:
        """
        Count of URLs with retain parent category.
        """
        return pulumi.get(self, "retain_parent_url_count")

    @property
    @pulumi.getter(name="totalKeywordCount")
    def total_keyword_count(self) -> Optional[int]:
        """
        Total keyword count for the category.
        """
        return pulumi.get(self, "total_keyword_count")

    @property
    @pulumi.getter(name="totalUrlCount")
    def total_url_count(self) -> Optional[int]:
        """
        Custom URL count for the category.
        """
        return pulumi.get(self, "total_url_count")


@pulumi.output_type
class GetURLCategoriesScopeResult(dict):
    def __init__(__self__, *,
                 scope_entities: Sequence['outputs.GetURLCategoriesScopeScopeEntityResult'],
                 scope_group_member_entities: Sequence['outputs.GetURLCategoriesScopeScopeGroupMemberEntityResult'],
                 type: str):
        """
        :param Sequence['GetURLCategoriesScopeScopeEntityArgs'] scope_entities: (List of Object)
        :param Sequence['GetURLCategoriesScopeScopeGroupMemberEntityArgs'] scope_group_member_entities: (List of Object) Only applicable for the LOCATION_GROUP admin scope type, in which case this attribute gives the list of ID/name pairs of locations within the location group. The attribute name is subject to change.
        :param str type: (String) The admin scope type. The attribute name is subject to change. `ORGANIZATION`, `DEPARTMENT`, `LOCATION`, `LOCATION_GROUP`
        """
        pulumi.set(__self__, "scope_entities", scope_entities)
        pulumi.set(__self__, "scope_group_member_entities", scope_group_member_entities)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="scopeEntities")
    def scope_entities(self) -> Sequence['outputs.GetURLCategoriesScopeScopeEntityResult']:
        """
        (List of Object)
        """
        return pulumi.get(self, "scope_entities")

    @property
    @pulumi.getter(name="scopeGroupMemberEntities")
    def scope_group_member_entities(self) -> Sequence['outputs.GetURLCategoriesScopeScopeGroupMemberEntityResult']:
        """
        (List of Object) Only applicable for the LOCATION_GROUP admin scope type, in which case this attribute gives the list of ID/name pairs of locations within the location group. The attribute name is subject to change.
        """
        return pulumi.get(self, "scope_group_member_entities")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        (String) The admin scope type. The attribute name is subject to change. `ORGANIZATION`, `DEPARTMENT`, `LOCATION`, `LOCATION_GROUP`
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetURLCategoriesScopeScopeEntityResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, str],
                 id: int,
                 name: str):
        """
        :param Mapping[str, str] extensions: (Map of String)
        :param int id: URL category
        :param str name: (String) The configured name of the entity
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        URL category
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (String) The configured name of the entity
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetURLCategoriesScopeScopeGroupMemberEntityResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, str],
                 id: int,
                 name: str):
        """
        :param Mapping[str, str] extensions: (Map of String)
        :param int id: URL category
        :param str name: (String) The configured name of the entity
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        URL category
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (String) The configured name of the entity
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetURLCategoriesUrlKeywordCountResult(dict):
    def __init__(__self__, *,
                 retain_parent_keyword_count: int,
                 retain_parent_url_count: int,
                 total_keyword_count: int,
                 total_url_count: int):
        """
        :param int retain_parent_keyword_count: (Number) Count of total keywords with retain parent category.
        :param int retain_parent_url_count: (Number) Count of URLs with retain parent category.
        :param int total_keyword_count: (Number) Total keyword count for the category.
        :param int total_url_count: (Number) Custom URL count for the category.
        """
        pulumi.set(__self__, "retain_parent_keyword_count", retain_parent_keyword_count)
        pulumi.set(__self__, "retain_parent_url_count", retain_parent_url_count)
        pulumi.set(__self__, "total_keyword_count", total_keyword_count)
        pulumi.set(__self__, "total_url_count", total_url_count)

    @property
    @pulumi.getter(name="retainParentKeywordCount")
    def retain_parent_keyword_count(self) -> int:
        """
        (Number) Count of total keywords with retain parent category.
        """
        return pulumi.get(self, "retain_parent_keyword_count")

    @property
    @pulumi.getter(name="retainParentUrlCount")
    def retain_parent_url_count(self) -> int:
        """
        (Number) Count of URLs with retain parent category.
        """
        return pulumi.get(self, "retain_parent_url_count")

    @property
    @pulumi.getter(name="totalKeywordCount")
    def total_keyword_count(self) -> int:
        """
        (Number) Total keyword count for the category.
        """
        return pulumi.get(self, "total_keyword_count")

    @property
    @pulumi.getter(name="totalUrlCount")
    def total_url_count(self) -> int:
        """
        (Number) Custom URL count for the category.
        """
        return pulumi.get(self, "total_url_count")


