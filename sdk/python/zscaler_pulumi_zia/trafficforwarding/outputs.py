# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'TrafficForwardingGRETunnelLastModifiedBy',
    'TrafficForwardingGRETunnelPrimaryDestVip',
    'TrafficForwardingGRETunnelSecondaryDestVip',
    'TrafficForwardingStaticIPLastModifiedBy',
    'TrafficForwardingStaticIPManagedBy',
    'GetTrafficForwardingGREInternalIPRangeListResult',
    'GetTrafficForwardingGRETunnelLastModifiedByResult',
    'GetTrafficForwardingGRETunnelManagedByResult',
    'GetTrafficForwardingGRETunnelPrimaryDestVipResult',
    'GetTrafficForwardingGRETunnelSecondaryDestVipResult',
    'GetTrafficForwardingStaticIPLastModifiedByResult',
    'GetTrafficForwardingStaticIPManagedByResult',
    'GetTrafficForwardingVIPRecommendedListListResult',
    'GetTrafficForwardingVPNCredentialsLocationResult',
    'GetTrafficForwardingVPNCredentialsManagedByResult',
]

@pulumi.output_type
class TrafficForwardingGRETunnelLastModifiedBy(dict):
    def __init__(__self__, *,
                 extensions: Optional[Mapping[str, str]] = None,
                 id: Optional[int] = None,
                 name: Optional[str] = None):
        """
        :param int id: Unique identifer of the GRE virtual IP address (VIP)
        """
        if extensions is not None:
            pulumi.set(__self__, "extensions", extensions)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        Unique identifer of the GRE virtual IP address (VIP)
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class TrafficForwardingGRETunnelPrimaryDestVip(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "privateServiceEdge":
            suggest = "private_service_edge"
        elif key == "virtualIp":
            suggest = "virtual_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TrafficForwardingGRETunnelPrimaryDestVip. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TrafficForwardingGRETunnelPrimaryDestVip.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TrafficForwardingGRETunnelPrimaryDestVip.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 datacenter: Optional[str] = None,
                 id: Optional[int] = None,
                 private_service_edge: Optional[bool] = None,
                 virtual_ip: Optional[str] = None):
        """
        :param int id: Unique identifer of the GRE virtual IP address (VIP)
        :param str virtual_ip: GRE cluster virtual IP address (VIP)
        """
        if datacenter is not None:
            pulumi.set(__self__, "datacenter", datacenter)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if private_service_edge is not None:
            pulumi.set(__self__, "private_service_edge", private_service_edge)
        if virtual_ip is not None:
            pulumi.set(__self__, "virtual_ip", virtual_ip)

    @property
    @pulumi.getter
    def datacenter(self) -> Optional[str]:
        return pulumi.get(self, "datacenter")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        Unique identifer of the GRE virtual IP address (VIP)
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="privateServiceEdge")
    def private_service_edge(self) -> Optional[bool]:
        return pulumi.get(self, "private_service_edge")

    @property
    @pulumi.getter(name="virtualIp")
    def virtual_ip(self) -> Optional[str]:
        """
        GRE cluster virtual IP address (VIP)
        """
        return pulumi.get(self, "virtual_ip")


@pulumi.output_type
class TrafficForwardingGRETunnelSecondaryDestVip(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "privateServiceEdge":
            suggest = "private_service_edge"
        elif key == "virtualIp":
            suggest = "virtual_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in TrafficForwardingGRETunnelSecondaryDestVip. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        TrafficForwardingGRETunnelSecondaryDestVip.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        TrafficForwardingGRETunnelSecondaryDestVip.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 datacenter: Optional[str] = None,
                 id: Optional[int] = None,
                 private_service_edge: Optional[bool] = None,
                 virtual_ip: Optional[str] = None):
        """
        :param int id: Unique identifer of the GRE virtual IP address (VIP)
        :param str virtual_ip: GRE cluster virtual IP address (VIP)
        """
        if datacenter is not None:
            pulumi.set(__self__, "datacenter", datacenter)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if private_service_edge is not None:
            pulumi.set(__self__, "private_service_edge", private_service_edge)
        if virtual_ip is not None:
            pulumi.set(__self__, "virtual_ip", virtual_ip)

    @property
    @pulumi.getter
    def datacenter(self) -> Optional[str]:
        return pulumi.get(self, "datacenter")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        Unique identifer of the GRE virtual IP address (VIP)
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="privateServiceEdge")
    def private_service_edge(self) -> Optional[bool]:
        return pulumi.get(self, "private_service_edge")

    @property
    @pulumi.getter(name="virtualIp")
    def virtual_ip(self) -> Optional[str]:
        """
        GRE cluster virtual IP address (VIP)
        """
        return pulumi.get(self, "virtual_ip")


@pulumi.output_type
class TrafficForwardingStaticIPLastModifiedBy(dict):
    def __init__(__self__, *,
                 extensions: Optional[Mapping[str, str]] = None,
                 id: Optional[int] = None,
                 name: Optional[str] = None):
        if extensions is not None:
            pulumi.set(__self__, "extensions", extensions)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class TrafficForwardingStaticIPManagedBy(dict):
    def __init__(__self__, *,
                 extensions: Optional[Mapping[str, str]] = None,
                 id: Optional[int] = None,
                 name: Optional[str] = None):
        if extensions is not None:
            pulumi.set(__self__, "extensions", extensions)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetTrafficForwardingGREInternalIPRangeListResult(dict):
    def __init__(__self__, *,
                 end_ip_address: str,
                 start_ip_address: str):
        pulumi.set(__self__, "end_ip_address", end_ip_address)
        pulumi.set(__self__, "start_ip_address", start_ip_address)

    @property
    @pulumi.getter(name="endIpAddress")
    def end_ip_address(self) -> str:
        return pulumi.get(self, "end_ip_address")

    @property
    @pulumi.getter(name="startIpAddress")
    def start_ip_address(self) -> str:
        return pulumi.get(self, "start_ip_address")


@pulumi.output_type
class GetTrafficForwardingGRETunnelLastModifiedByResult(dict):
    def __init__(__self__, *,
                 id: int,
                 name: str):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetTrafficForwardingGRETunnelManagedByResult(dict):
    def __init__(__self__, *,
                 id: int,
                 name: str):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetTrafficForwardingGRETunnelPrimaryDestVipResult(dict):
    def __init__(__self__, *,
                 city: str,
                 country_code: str,
                 datacenter: str,
                 id: int,
                 latitude: int,
                 longitude: int,
                 private_service_edge: bool,
                 region: str,
                 virtual_ip: str):
        pulumi.set(__self__, "city", city)
        pulumi.set(__self__, "country_code", country_code)
        pulumi.set(__self__, "datacenter", datacenter)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "latitude", latitude)
        pulumi.set(__self__, "longitude", longitude)
        pulumi.set(__self__, "private_service_edge", private_service_edge)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "virtual_ip", virtual_ip)

    @property
    @pulumi.getter
    def city(self) -> str:
        return pulumi.get(self, "city")

    @property
    @pulumi.getter(name="countryCode")
    def country_code(self) -> str:
        return pulumi.get(self, "country_code")

    @property
    @pulumi.getter
    def datacenter(self) -> str:
        return pulumi.get(self, "datacenter")

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def latitude(self) -> int:
        return pulumi.get(self, "latitude")

    @property
    @pulumi.getter
    def longitude(self) -> int:
        return pulumi.get(self, "longitude")

    @property
    @pulumi.getter(name="privateServiceEdge")
    def private_service_edge(self) -> bool:
        return pulumi.get(self, "private_service_edge")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="virtualIp")
    def virtual_ip(self) -> str:
        return pulumi.get(self, "virtual_ip")


@pulumi.output_type
class GetTrafficForwardingGRETunnelSecondaryDestVipResult(dict):
    def __init__(__self__, *,
                 city: str,
                 country_code: str,
                 datacenter: str,
                 id: int,
                 latitude: int,
                 longitude: int,
                 private_service_edge: bool,
                 region: str,
                 virtual_ip: str):
        pulumi.set(__self__, "city", city)
        pulumi.set(__self__, "country_code", country_code)
        pulumi.set(__self__, "datacenter", datacenter)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "latitude", latitude)
        pulumi.set(__self__, "longitude", longitude)
        pulumi.set(__self__, "private_service_edge", private_service_edge)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "virtual_ip", virtual_ip)

    @property
    @pulumi.getter
    def city(self) -> str:
        return pulumi.get(self, "city")

    @property
    @pulumi.getter(name="countryCode")
    def country_code(self) -> str:
        return pulumi.get(self, "country_code")

    @property
    @pulumi.getter
    def datacenter(self) -> str:
        return pulumi.get(self, "datacenter")

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def latitude(self) -> int:
        return pulumi.get(self, "latitude")

    @property
    @pulumi.getter
    def longitude(self) -> int:
        return pulumi.get(self, "longitude")

    @property
    @pulumi.getter(name="privateServiceEdge")
    def private_service_edge(self) -> bool:
        return pulumi.get(self, "private_service_edge")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="virtualIp")
    def virtual_ip(self) -> str:
        return pulumi.get(self, "virtual_ip")


@pulumi.output_type
class GetTrafficForwardingStaticIPLastModifiedByResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, str],
                 id: int,
                 name: str):
        """
        :param Mapping[str, str] extensions: (Map of String)
        :param int id: The unique identifier for the static IP address
        :param str name: (String) The configured name of the entity
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        The unique identifier for the static IP address
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (String) The configured name of the entity
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetTrafficForwardingStaticIPManagedByResult(dict):
    def __init__(__self__, *,
                 id: int,
                 name: str):
        """
        :param int id: The unique identifier for the static IP address
        :param str name: (String) The configured name of the entity
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        The unique identifier for the static IP address
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (String) The configured name of the entity
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetTrafficForwardingVIPRecommendedListListResult(dict):
    def __init__(__self__, *,
                 datacenter: Optional[str] = None,
                 id: Optional[int] = None,
                 private_service_edge: Optional[bool] = None,
                 virtual_ip: Optional[str] = None):
        """
        :param str datacenter: (String) Data center information
        :param int id: Unique identifer of the GRE virtual IP address (VIP)
        :param bool private_service_edge: (Boolean) Set to true if the virtual IP address (VIP) is a ZIA Private Service Edge
        :param str virtual_ip: (String) GRE cluster virtual IP address (VIP)
        """
        if datacenter is not None:
            pulumi.set(__self__, "datacenter", datacenter)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if private_service_edge is not None:
            pulumi.set(__self__, "private_service_edge", private_service_edge)
        if virtual_ip is not None:
            pulumi.set(__self__, "virtual_ip", virtual_ip)

    @property
    @pulumi.getter
    def datacenter(self) -> Optional[str]:
        """
        (String) Data center information
        """
        return pulumi.get(self, "datacenter")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        Unique identifer of the GRE virtual IP address (VIP)
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="privateServiceEdge")
    def private_service_edge(self) -> Optional[bool]:
        """
        (Boolean) Set to true if the virtual IP address (VIP) is a ZIA Private Service Edge
        """
        return pulumi.get(self, "private_service_edge")

    @property
    @pulumi.getter(name="virtualIp")
    def virtual_ip(self) -> Optional[str]:
        """
        (String) GRE cluster virtual IP address (VIP)
        """
        return pulumi.get(self, "virtual_ip")


@pulumi.output_type
class GetTrafficForwardingVPNCredentialsLocationResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, str],
                 id: int,
                 name: str):
        """
        :param Mapping[str, str] extensions: (Map of String)
        :param int id: Unique identifer of the GRE virtual IP address (VIP)
        :param str name: (String) The configured name of the entity
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Unique identifer of the GRE virtual IP address (VIP)
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (String) The configured name of the entity
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetTrafficForwardingVPNCredentialsManagedByResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, str],
                 id: int,
                 name: str):
        """
        :param Mapping[str, str] extensions: (Map of String)
        :param int id: Unique identifer of the GRE virtual IP address (VIP)
        :param str name: (String) The configured name of the entity
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Unique identifer of the GRE virtual IP address (VIP)
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (String) The configured name of the entity
        """
        return pulumi.get(self, "name")


