# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['ZIADLPNotificationTemplatesArgs', 'ZIADLPNotificationTemplates']

@pulumi.input_type
class ZIADLPNotificationTemplatesArgs:
    def __init__(__self__, *,
                 html_message: pulumi.Input[str],
                 plain_text_message: pulumi.Input[str],
                 attach_content: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 subject: Optional[pulumi.Input[str]] = None,
                 tls_enabled: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a ZIADLPNotificationTemplates resource.
        :param pulumi.Input[str] html_message: The template for the HTML message body that must be displayed in the DLP notification email.
        :param pulumi.Input[str] plain_text_message: The template for the plain text UTF-8 message body that must be displayed in the DLP notification email.
        :param pulumi.Input[bool] attach_content: If set to true, the content that is violation is attached to the DLP notification email.
        :param pulumi.Input[str] name: The DLP policy rule name.
        :param pulumi.Input[str] subject: The Subject line that is displayed within the DLP notification email.
        :param pulumi.Input[bool] tls_enabled: If set to true, the content that is violation is attached to the DLP notification email.
        """
        pulumi.set(__self__, "html_message", html_message)
        pulumi.set(__self__, "plain_text_message", plain_text_message)
        if attach_content is not None:
            pulumi.set(__self__, "attach_content", attach_content)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if subject is not None:
            pulumi.set(__self__, "subject", subject)
        if tls_enabled is not None:
            pulumi.set(__self__, "tls_enabled", tls_enabled)

    @property
    @pulumi.getter(name="htmlMessage")
    def html_message(self) -> pulumi.Input[str]:
        """
        The template for the HTML message body that must be displayed in the DLP notification email.
        """
        return pulumi.get(self, "html_message")

    @html_message.setter
    def html_message(self, value: pulumi.Input[str]):
        pulumi.set(self, "html_message", value)

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> pulumi.Input[str]:
        """
        The template for the plain text UTF-8 message body that must be displayed in the DLP notification email.
        """
        return pulumi.get(self, "plain_text_message")

    @plain_text_message.setter
    def plain_text_message(self, value: pulumi.Input[str]):
        pulumi.set(self, "plain_text_message", value)

    @property
    @pulumi.getter(name="attachContent")
    def attach_content(self) -> Optional[pulumi.Input[bool]]:
        """
        If set to true, the content that is violation is attached to the DLP notification email.
        """
        return pulumi.get(self, "attach_content")

    @attach_content.setter
    def attach_content(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "attach_content", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The DLP policy rule name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def subject(self) -> Optional[pulumi.Input[str]]:
        """
        The Subject line that is displayed within the DLP notification email.
        """
        return pulumi.get(self, "subject")

    @subject.setter
    def subject(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subject", value)

    @property
    @pulumi.getter(name="tlsEnabled")
    def tls_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        If set to true, the content that is violation is attached to the DLP notification email.
        """
        return pulumi.get(self, "tls_enabled")

    @tls_enabled.setter
    def tls_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "tls_enabled", value)


@pulumi.input_type
class _ZIADLPNotificationTemplatesState:
    def __init__(__self__, *,
                 attach_content: Optional[pulumi.Input[bool]] = None,
                 html_message: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 plain_text_message: Optional[pulumi.Input[str]] = None,
                 subject: Optional[pulumi.Input[str]] = None,
                 template_id: Optional[pulumi.Input[int]] = None,
                 tls_enabled: Optional[pulumi.Input[bool]] = None):
        """
        Input properties used for looking up and filtering ZIADLPNotificationTemplates resources.
        :param pulumi.Input[bool] attach_content: If set to true, the content that is violation is attached to the DLP notification email.
        :param pulumi.Input[str] html_message: The template for the HTML message body that must be displayed in the DLP notification email.
        :param pulumi.Input[str] name: The DLP policy rule name.
        :param pulumi.Input[str] plain_text_message: The template for the plain text UTF-8 message body that must be displayed in the DLP notification email.
        :param pulumi.Input[str] subject: The Subject line that is displayed within the DLP notification email.
        :param pulumi.Input[bool] tls_enabled: If set to true, the content that is violation is attached to the DLP notification email.
        """
        if attach_content is not None:
            pulumi.set(__self__, "attach_content", attach_content)
        if html_message is not None:
            pulumi.set(__self__, "html_message", html_message)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if plain_text_message is not None:
            pulumi.set(__self__, "plain_text_message", plain_text_message)
        if subject is not None:
            pulumi.set(__self__, "subject", subject)
        if template_id is not None:
            pulumi.set(__self__, "template_id", template_id)
        if tls_enabled is not None:
            pulumi.set(__self__, "tls_enabled", tls_enabled)

    @property
    @pulumi.getter(name="attachContent")
    def attach_content(self) -> Optional[pulumi.Input[bool]]:
        """
        If set to true, the content that is violation is attached to the DLP notification email.
        """
        return pulumi.get(self, "attach_content")

    @attach_content.setter
    def attach_content(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "attach_content", value)

    @property
    @pulumi.getter(name="htmlMessage")
    def html_message(self) -> Optional[pulumi.Input[str]]:
        """
        The template for the HTML message body that must be displayed in the DLP notification email.
        """
        return pulumi.get(self, "html_message")

    @html_message.setter
    def html_message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "html_message", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The DLP policy rule name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> Optional[pulumi.Input[str]]:
        """
        The template for the plain text UTF-8 message body that must be displayed in the DLP notification email.
        """
        return pulumi.get(self, "plain_text_message")

    @plain_text_message.setter
    def plain_text_message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "plain_text_message", value)

    @property
    @pulumi.getter
    def subject(self) -> Optional[pulumi.Input[str]]:
        """
        The Subject line that is displayed within the DLP notification email.
        """
        return pulumi.get(self, "subject")

    @subject.setter
    def subject(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subject", value)

    @property
    @pulumi.getter(name="templateId")
    def template_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "template_id")

    @template_id.setter
    def template_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "template_id", value)

    @property
    @pulumi.getter(name="tlsEnabled")
    def tls_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        If set to true, the content that is violation is attached to the DLP notification email.
        """
        return pulumi.get(self, "tls_enabled")

    @tls_enabled.setter
    def tls_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "tls_enabled", value)


class ZIADLPNotificationTemplates(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 attach_content: Optional[pulumi.Input[bool]] = None,
                 html_message: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 plain_text_message: Optional[pulumi.Input[str]] = None,
                 subject: Optional[pulumi.Input[str]] = None,
                 tls_enabled: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        """
        The **zia_dlp_notification_templates** resource allows the creation and management of ZIA DLP Notification Templates in the Zscaler Internet Access cloud or via the API.

        ## Example Usage

        ```python
        import pulumi
        import zscaler_pulumi_zia as zia

        example = zia.ZIADLPNotificationTemplates("example",
            subject=f"DLP Violation: {transactio_n__id} {engines}",
            attach_content=True,
            tls_enabled=True,
            html_message=(lambda path: open(path).read())("./index.html"),
            plain_text_message=(lambda path: open(path).read())("./dlp.txt"))
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] attach_content: If set to true, the content that is violation is attached to the DLP notification email.
        :param pulumi.Input[str] html_message: The template for the HTML message body that must be displayed in the DLP notification email.
        :param pulumi.Input[str] name: The DLP policy rule name.
        :param pulumi.Input[str] plain_text_message: The template for the plain text UTF-8 message body that must be displayed in the DLP notification email.
        :param pulumi.Input[str] subject: The Subject line that is displayed within the DLP notification email.
        :param pulumi.Input[bool] tls_enabled: If set to true, the content that is violation is attached to the DLP notification email.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ZIADLPNotificationTemplatesArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        The **zia_dlp_notification_templates** resource allows the creation and management of ZIA DLP Notification Templates in the Zscaler Internet Access cloud or via the API.

        ## Example Usage

        ```python
        import pulumi
        import zscaler_pulumi_zia as zia

        example = zia.ZIADLPNotificationTemplates("example",
            subject=f"DLP Violation: {transactio_n__id} {engines}",
            attach_content=True,
            tls_enabled=True,
            html_message=(lambda path: open(path).read())("./index.html"),
            plain_text_message=(lambda path: open(path).read())("./dlp.txt"))
        ```

        :param str resource_name: The name of the resource.
        :param ZIADLPNotificationTemplatesArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ZIADLPNotificationTemplatesArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 attach_content: Optional[pulumi.Input[bool]] = None,
                 html_message: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 plain_text_message: Optional[pulumi.Input[str]] = None,
                 subject: Optional[pulumi.Input[str]] = None,
                 tls_enabled: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ZIADLPNotificationTemplatesArgs.__new__(ZIADLPNotificationTemplatesArgs)

            __props__.__dict__["attach_content"] = attach_content
            if html_message is None and not opts.urn:
                raise TypeError("Missing required property 'html_message'")
            __props__.__dict__["html_message"] = html_message
            __props__.__dict__["name"] = name
            if plain_text_message is None and not opts.urn:
                raise TypeError("Missing required property 'plain_text_message'")
            __props__.__dict__["plain_text_message"] = plain_text_message
            __props__.__dict__["subject"] = subject
            __props__.__dict__["tls_enabled"] = tls_enabled
            __props__.__dict__["template_id"] = None
        super(ZIADLPNotificationTemplates, __self__).__init__(
            'zia:index/zIADLPNotificationTemplates:ZIADLPNotificationTemplates',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            attach_content: Optional[pulumi.Input[bool]] = None,
            html_message: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            plain_text_message: Optional[pulumi.Input[str]] = None,
            subject: Optional[pulumi.Input[str]] = None,
            template_id: Optional[pulumi.Input[int]] = None,
            tls_enabled: Optional[pulumi.Input[bool]] = None) -> 'ZIADLPNotificationTemplates':
        """
        Get an existing ZIADLPNotificationTemplates resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] attach_content: If set to true, the content that is violation is attached to the DLP notification email.
        :param pulumi.Input[str] html_message: The template for the HTML message body that must be displayed in the DLP notification email.
        :param pulumi.Input[str] name: The DLP policy rule name.
        :param pulumi.Input[str] plain_text_message: The template for the plain text UTF-8 message body that must be displayed in the DLP notification email.
        :param pulumi.Input[str] subject: The Subject line that is displayed within the DLP notification email.
        :param pulumi.Input[bool] tls_enabled: If set to true, the content that is violation is attached to the DLP notification email.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ZIADLPNotificationTemplatesState.__new__(_ZIADLPNotificationTemplatesState)

        __props__.__dict__["attach_content"] = attach_content
        __props__.__dict__["html_message"] = html_message
        __props__.__dict__["name"] = name
        __props__.__dict__["plain_text_message"] = plain_text_message
        __props__.__dict__["subject"] = subject
        __props__.__dict__["template_id"] = template_id
        __props__.__dict__["tls_enabled"] = tls_enabled
        return ZIADLPNotificationTemplates(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="attachContent")
    def attach_content(self) -> pulumi.Output[Optional[bool]]:
        """
        If set to true, the content that is violation is attached to the DLP notification email.
        """
        return pulumi.get(self, "attach_content")

    @property
    @pulumi.getter(name="htmlMessage")
    def html_message(self) -> pulumi.Output[str]:
        """
        The template for the HTML message body that must be displayed in the DLP notification email.
        """
        return pulumi.get(self, "html_message")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The DLP policy rule name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="plainTextMessage")
    def plain_text_message(self) -> pulumi.Output[str]:
        """
        The template for the plain text UTF-8 message body that must be displayed in the DLP notification email.
        """
        return pulumi.get(self, "plain_text_message")

    @property
    @pulumi.getter
    def subject(self) -> pulumi.Output[Optional[str]]:
        """
        The Subject line that is displayed within the DLP notification email.
        """
        return pulumi.get(self, "subject")

    @property
    @pulumi.getter(name="templateId")
    def template_id(self) -> pulumi.Output[int]:
        return pulumi.get(self, "template_id")

    @property
    @pulumi.getter(name="tlsEnabled")
    def tls_enabled(self) -> pulumi.Output[Optional[bool]]:
        """
        If set to true, the content that is violation is attached to the DLP notification email.
        """
        return pulumi.get(self, "tls_enabled")

