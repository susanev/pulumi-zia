# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ZIAUserManagementArgs', 'ZIAUserManagement']

@pulumi.input_type
class ZIAUserManagementArgs:
    def __init__(__self__, *,
                 email: pulumi.Input[str],
                 password: pulumi.Input[str],
                 comments: Optional[pulumi.Input[str]] = None,
                 department: Optional[pulumi.Input['ZIAUserManagementDepartmentArgs']] = None,
                 groups: Optional[pulumi.Input['ZIAUserManagementGroupsArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 temp_auth_email: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a ZIAUserManagement resource.
        :param pulumi.Input[str] email: User email consists of a user name and domain name. It does not have to be a valid email address, but it must be unique and its domain must belong to the organization.
        :param pulumi.Input[str] password: User's password. Applicable only when authentication type is Hosted DB. Password strength must follow what is defined in the auth settings.
        :param pulumi.Input[str] comments: Additional information about this user.
        :param pulumi.Input['ZIAUserManagementDepartmentArgs'] department: Department a user belongs to
        :param pulumi.Input['ZIAUserManagementGroupsArgs'] groups: List of Groups a user belongs to. Groups are used in policies.
        :param pulumi.Input[str] name: User name. This appears when choosing users for policies.
        :param pulumi.Input[str] temp_auth_email: Temporary Authentication Email. If you enabled one-time tokens or links, enter the email address to which the Zscaler
               service sends the tokens or links. If this is empty, the service will send the email to the User email.
        """
        pulumi.set(__self__, "email", email)
        pulumi.set(__self__, "password", password)
        if comments is not None:
            pulumi.set(__self__, "comments", comments)
        if department is not None:
            pulumi.set(__self__, "department", department)
        if groups is not None:
            pulumi.set(__self__, "groups", groups)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if temp_auth_email is not None:
            pulumi.set(__self__, "temp_auth_email", temp_auth_email)

    @property
    @pulumi.getter
    def email(self) -> pulumi.Input[str]:
        """
        User email consists of a user name and domain name. It does not have to be a valid email address, but it must be unique and its domain must belong to the organization.
        """
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: pulumi.Input[str]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter
    def password(self) -> pulumi.Input[str]:
        """
        User's password. Applicable only when authentication type is Hosted DB. Password strength must follow what is defined in the auth settings.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: pulumi.Input[str]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def comments(self) -> Optional[pulumi.Input[str]]:
        """
        Additional information about this user.
        """
        return pulumi.get(self, "comments")

    @comments.setter
    def comments(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comments", value)

    @property
    @pulumi.getter
    def department(self) -> Optional[pulumi.Input['ZIAUserManagementDepartmentArgs']]:
        """
        Department a user belongs to
        """
        return pulumi.get(self, "department")

    @department.setter
    def department(self, value: Optional[pulumi.Input['ZIAUserManagementDepartmentArgs']]):
        pulumi.set(self, "department", value)

    @property
    @pulumi.getter
    def groups(self) -> Optional[pulumi.Input['ZIAUserManagementGroupsArgs']]:
        """
        List of Groups a user belongs to. Groups are used in policies.
        """
        return pulumi.get(self, "groups")

    @groups.setter
    def groups(self, value: Optional[pulumi.Input['ZIAUserManagementGroupsArgs']]):
        pulumi.set(self, "groups", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        User name. This appears when choosing users for policies.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="tempAuthEmail")
    def temp_auth_email(self) -> Optional[pulumi.Input[str]]:
        """
        Temporary Authentication Email. If you enabled one-time tokens or links, enter the email address to which the Zscaler
        service sends the tokens or links. If this is empty, the service will send the email to the User email.
        """
        return pulumi.get(self, "temp_auth_email")

    @temp_auth_email.setter
    def temp_auth_email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "temp_auth_email", value)


@pulumi.input_type
class _ZIAUserManagementState:
    def __init__(__self__, *,
                 comments: Optional[pulumi.Input[str]] = None,
                 department: Optional[pulumi.Input['ZIAUserManagementDepartmentArgs']] = None,
                 email: Optional[pulumi.Input[str]] = None,
                 groups: Optional[pulumi.Input['ZIAUserManagementGroupsArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 temp_auth_email: Optional[pulumi.Input[str]] = None,
                 user_id: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering ZIAUserManagement resources.
        :param pulumi.Input[str] comments: Additional information about this user.
        :param pulumi.Input['ZIAUserManagementDepartmentArgs'] department: Department a user belongs to
        :param pulumi.Input[str] email: User email consists of a user name and domain name. It does not have to be a valid email address, but it must be unique and its domain must belong to the organization.
        :param pulumi.Input['ZIAUserManagementGroupsArgs'] groups: List of Groups a user belongs to. Groups are used in policies.
        :param pulumi.Input[str] name: User name. This appears when choosing users for policies.
        :param pulumi.Input[str] password: User's password. Applicable only when authentication type is Hosted DB. Password strength must follow what is defined in the auth settings.
        :param pulumi.Input[str] temp_auth_email: Temporary Authentication Email. If you enabled one-time tokens or links, enter the email address to which the Zscaler
               service sends the tokens or links. If this is empty, the service will send the email to the User email.
        """
        if comments is not None:
            pulumi.set(__self__, "comments", comments)
        if department is not None:
            pulumi.set(__self__, "department", department)
        if email is not None:
            pulumi.set(__self__, "email", email)
        if groups is not None:
            pulumi.set(__self__, "groups", groups)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if temp_auth_email is not None:
            pulumi.set(__self__, "temp_auth_email", temp_auth_email)
        if user_id is not None:
            pulumi.set(__self__, "user_id", user_id)

    @property
    @pulumi.getter
    def comments(self) -> Optional[pulumi.Input[str]]:
        """
        Additional information about this user.
        """
        return pulumi.get(self, "comments")

    @comments.setter
    def comments(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comments", value)

    @property
    @pulumi.getter
    def department(self) -> Optional[pulumi.Input['ZIAUserManagementDepartmentArgs']]:
        """
        Department a user belongs to
        """
        return pulumi.get(self, "department")

    @department.setter
    def department(self, value: Optional[pulumi.Input['ZIAUserManagementDepartmentArgs']]):
        pulumi.set(self, "department", value)

    @property
    @pulumi.getter
    def email(self) -> Optional[pulumi.Input[str]]:
        """
        User email consists of a user name and domain name. It does not have to be a valid email address, but it must be unique and its domain must belong to the organization.
        """
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter
    def groups(self) -> Optional[pulumi.Input['ZIAUserManagementGroupsArgs']]:
        """
        List of Groups a user belongs to. Groups are used in policies.
        """
        return pulumi.get(self, "groups")

    @groups.setter
    def groups(self, value: Optional[pulumi.Input['ZIAUserManagementGroupsArgs']]):
        pulumi.set(self, "groups", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        User name. This appears when choosing users for policies.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        User's password. Applicable only when authentication type is Hosted DB. Password strength must follow what is defined in the auth settings.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="tempAuthEmail")
    def temp_auth_email(self) -> Optional[pulumi.Input[str]]:
        """
        Temporary Authentication Email. If you enabled one-time tokens or links, enter the email address to which the Zscaler
        service sends the tokens or links. If this is empty, the service will send the email to the User email.
        """
        return pulumi.get(self, "temp_auth_email")

    @temp_auth_email.setter
    def temp_auth_email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "temp_auth_email", value)

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "user_id")

    @user_id.setter
    def user_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "user_id", value)


class ZIAUserManagement(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 department: Optional[pulumi.Input[pulumi.InputType['ZIAUserManagementDepartmentArgs']]] = None,
                 email: Optional[pulumi.Input[str]] = None,
                 groups: Optional[pulumi.Input[pulumi.InputType['ZIAUserManagementGroupsArgs']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 temp_auth_email: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        The **zia_user_management** resource allows the creation and management of local user account in the Zscaler Internet Access cloud. The user account resource can then be associated with several different types of resource within the ZIA tenant.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_zia as zia
        import zscaler_pulumi_zia as zia

        normal_internet = zia.get_zia_group_management(name="Normal_Internet")
        engineering = zia.get_zia_department_management(name="Engineering")
        # ZIA Local User Account
        john_ashcroft = zia.ZIAUserManagement("johnAshcroft",
            email="john.ashcroft@acme.com",
            password="P@ssw0rd123*",
            groups=zia.ZIAUserManagementGroupsArgs(
                ids=normal_internet.id,
            ),
            department=zia.ZIAUserManagementDepartmentArgs(
                id=engineering.id,
            ))
        ```
        ## Optional

        The following attributes are supported:

        * `comments` - (Optional) Additional information about this user.
        * `temp_auth_email` - (Optional) Temporary Authentication Email. If you enabled one-time tokens or links, enter the email address to which the Zscaler service sends the tokens or links. If this is empty, the service will send the email to the User email.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] comments: Additional information about this user.
        :param pulumi.Input[pulumi.InputType['ZIAUserManagementDepartmentArgs']] department: Department a user belongs to
        :param pulumi.Input[str] email: User email consists of a user name and domain name. It does not have to be a valid email address, but it must be unique and its domain must belong to the organization.
        :param pulumi.Input[pulumi.InputType['ZIAUserManagementGroupsArgs']] groups: List of Groups a user belongs to. Groups are used in policies.
        :param pulumi.Input[str] name: User name. This appears when choosing users for policies.
        :param pulumi.Input[str] password: User's password. Applicable only when authentication type is Hosted DB. Password strength must follow what is defined in the auth settings.
        :param pulumi.Input[str] temp_auth_email: Temporary Authentication Email. If you enabled one-time tokens or links, enter the email address to which the Zscaler
               service sends the tokens or links. If this is empty, the service will send the email to the User email.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ZIAUserManagementArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        The **zia_user_management** resource allows the creation and management of local user account in the Zscaler Internet Access cloud. The user account resource can then be associated with several different types of resource within the ZIA tenant.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_zia as zia
        import zscaler_pulumi_zia as zia

        normal_internet = zia.get_zia_group_management(name="Normal_Internet")
        engineering = zia.get_zia_department_management(name="Engineering")
        # ZIA Local User Account
        john_ashcroft = zia.ZIAUserManagement("johnAshcroft",
            email="john.ashcroft@acme.com",
            password="P@ssw0rd123*",
            groups=zia.ZIAUserManagementGroupsArgs(
                ids=normal_internet.id,
            ),
            department=zia.ZIAUserManagementDepartmentArgs(
                id=engineering.id,
            ))
        ```
        ## Optional

        The following attributes are supported:

        * `comments` - (Optional) Additional information about this user.
        * `temp_auth_email` - (Optional) Temporary Authentication Email. If you enabled one-time tokens or links, enter the email address to which the Zscaler service sends the tokens or links. If this is empty, the service will send the email to the User email.

        :param str resource_name: The name of the resource.
        :param ZIAUserManagementArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ZIAUserManagementArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 comments: Optional[pulumi.Input[str]] = None,
                 department: Optional[pulumi.Input[pulumi.InputType['ZIAUserManagementDepartmentArgs']]] = None,
                 email: Optional[pulumi.Input[str]] = None,
                 groups: Optional[pulumi.Input[pulumi.InputType['ZIAUserManagementGroupsArgs']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 temp_auth_email: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ZIAUserManagementArgs.__new__(ZIAUserManagementArgs)

            __props__.__dict__["comments"] = comments
            __props__.__dict__["department"] = department
            if email is None and not opts.urn:
                raise TypeError("Missing required property 'email'")
            __props__.__dict__["email"] = email
            __props__.__dict__["groups"] = groups
            __props__.__dict__["name"] = name
            if password is None and not opts.urn:
                raise TypeError("Missing required property 'password'")
            __props__.__dict__["password"] = None if password is None else pulumi.Output.secret(password)
            __props__.__dict__["temp_auth_email"] = temp_auth_email
            __props__.__dict__["user_id"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["password"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(ZIAUserManagement, __self__).__init__(
            'zia:index/zIAUserManagement:ZIAUserManagement',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            comments: Optional[pulumi.Input[str]] = None,
            department: Optional[pulumi.Input[pulumi.InputType['ZIAUserManagementDepartmentArgs']]] = None,
            email: Optional[pulumi.Input[str]] = None,
            groups: Optional[pulumi.Input[pulumi.InputType['ZIAUserManagementGroupsArgs']]] = None,
            name: Optional[pulumi.Input[str]] = None,
            password: Optional[pulumi.Input[str]] = None,
            temp_auth_email: Optional[pulumi.Input[str]] = None,
            user_id: Optional[pulumi.Input[int]] = None) -> 'ZIAUserManagement':
        """
        Get an existing ZIAUserManagement resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] comments: Additional information about this user.
        :param pulumi.Input[pulumi.InputType['ZIAUserManagementDepartmentArgs']] department: Department a user belongs to
        :param pulumi.Input[str] email: User email consists of a user name and domain name. It does not have to be a valid email address, but it must be unique and its domain must belong to the organization.
        :param pulumi.Input[pulumi.InputType['ZIAUserManagementGroupsArgs']] groups: List of Groups a user belongs to. Groups are used in policies.
        :param pulumi.Input[str] name: User name. This appears when choosing users for policies.
        :param pulumi.Input[str] password: User's password. Applicable only when authentication type is Hosted DB. Password strength must follow what is defined in the auth settings.
        :param pulumi.Input[str] temp_auth_email: Temporary Authentication Email. If you enabled one-time tokens or links, enter the email address to which the Zscaler
               service sends the tokens or links. If this is empty, the service will send the email to the User email.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ZIAUserManagementState.__new__(_ZIAUserManagementState)

        __props__.__dict__["comments"] = comments
        __props__.__dict__["department"] = department
        __props__.__dict__["email"] = email
        __props__.__dict__["groups"] = groups
        __props__.__dict__["name"] = name
        __props__.__dict__["password"] = password
        __props__.__dict__["temp_auth_email"] = temp_auth_email
        __props__.__dict__["user_id"] = user_id
        return ZIAUserManagement(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def comments(self) -> pulumi.Output[Optional[str]]:
        """
        Additional information about this user.
        """
        return pulumi.get(self, "comments")

    @property
    @pulumi.getter
    def department(self) -> pulumi.Output[Optional['outputs.ZIAUserManagementDepartment']]:
        """
        Department a user belongs to
        """
        return pulumi.get(self, "department")

    @property
    @pulumi.getter
    def email(self) -> pulumi.Output[str]:
        """
        User email consists of a user name and domain name. It does not have to be a valid email address, but it must be unique and its domain must belong to the organization.
        """
        return pulumi.get(self, "email")

    @property
    @pulumi.getter
    def groups(self) -> pulumi.Output['outputs.ZIAUserManagementGroups']:
        """
        List of Groups a user belongs to. Groups are used in policies.
        """
        return pulumi.get(self, "groups")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        User name. This appears when choosing users for policies.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def password(self) -> pulumi.Output[str]:
        """
        User's password. Applicable only when authentication type is Hosted DB. Password strength must follow what is defined in the auth settings.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="tempAuthEmail")
    def temp_auth_email(self) -> pulumi.Output[Optional[str]]:
        """
        Temporary Authentication Email. If you enabled one-time tokens or links, enter the email address to which the Zscaler
        service sends the tokens or links. If this is empty, the service will send the email to the User email.
        """
        return pulumi.get(self, "temp_auth_email")

    @property
    @pulumi.getter(name="userId")
    def user_id(self) -> pulumi.Output[int]:
        return pulumi.get(self, "user_id")

