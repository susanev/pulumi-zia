# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ZIAFirewallFilteringRuleArgs', 'ZIAFirewallFilteringRule']

@pulumi.input_type
class ZIAFirewallFilteringRuleArgs:
    def __init__(__self__, *,
                 access_control: Optional[pulumi.Input[str]] = None,
                 action: Optional[pulumi.Input[str]] = None,
                 app_service_groups: Optional[pulumi.Input['ZIAFirewallFilteringRuleAppServiceGroupsArgs']] = None,
                 app_services: Optional[pulumi.Input['ZIAFirewallFilteringRuleAppServicesArgs']] = None,
                 default_rule: Optional[pulumi.Input[bool]] = None,
                 departments: Optional[pulumi.Input['ZIAFirewallFilteringRuleDepartmentsArgs']] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 dest_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 dest_countries: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 dest_ip_categories: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 dest_ip_groups: Optional[pulumi.Input['ZIAFirewallFilteringRuleDestIpGroupsArgs']] = None,
                 enable_full_logging: Optional[pulumi.Input[bool]] = None,
                 groups: Optional[pulumi.Input['ZIAFirewallFilteringRuleGroupsArgs']] = None,
                 labels: Optional[pulumi.Input['ZIAFirewallFilteringRuleLabelsArgs']] = None,
                 last_modified_bies: Optional[pulumi.Input[Sequence[pulumi.Input['ZIAFirewallFilteringRuleLastModifiedByArgs']]]] = None,
                 last_modified_time: Optional[pulumi.Input[int]] = None,
                 location_groups: Optional[pulumi.Input['ZIAFirewallFilteringRuleLocationGroupsArgs']] = None,
                 locations: Optional[pulumi.Input['ZIAFirewallFilteringRuleLocationsArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nw_application_groups: Optional[pulumi.Input['ZIAFirewallFilteringRuleNwApplicationGroupsArgs']] = None,
                 nw_applications: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 nw_service_groups: Optional[pulumi.Input['ZIAFirewallFilteringRuleNwServiceGroupsArgs']] = None,
                 nw_services: Optional[pulumi.Input['ZIAFirewallFilteringRuleNwServicesArgs']] = None,
                 order: Optional[pulumi.Input[int]] = None,
                 predefined: Optional[pulumi.Input[bool]] = None,
                 rank: Optional[pulumi.Input[int]] = None,
                 src_ip_groups: Optional[pulumi.Input['ZIAFirewallFilteringRuleSrcIpGroupsArgs']] = None,
                 src_ips: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 time_windows: Optional[pulumi.Input['ZIAFirewallFilteringRuleTimeWindowsArgs']] = None,
                 users: Optional[pulumi.Input['ZIAFirewallFilteringRuleUsersArgs']] = None):
        """
        The set of arguments for constructing a ZIAFirewallFilteringRule resource.
        :param pulumi.Input[str] action: Choose the action of the service when packets match the rule. The following actions are accepted: `ALLOW`, `BLOCK_DROP`, `BLOCK_RESET`, `BLOCK_ICMP`, `EVAL_NWAPP`
        :param pulumi.Input['ZIAFirewallFilteringRuleAppServiceGroupsArgs'] app_service_groups: Application service groups on which this rule is applied
        :param pulumi.Input['ZIAFirewallFilteringRuleAppServicesArgs'] app_services: Application services on which this rule is applied
        :param pulumi.Input[bool] default_rule: If set to true, the default rule is applied
        :param pulumi.Input['ZIAFirewallFilteringRuleDepartmentsArgs'] departments: Apply to any number of departments When not used it implies `Any` to apply the rule to all departments.
        :param pulumi.Input[str] description: Enter additional notes or information. The description cannot exceed 10,240 characters.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dest_addresses: ** - (Optional) -  IP addresses and fully qualified domain names (FQDNs), if the domain has multiple destination IP addresses or if its IP addresses may change. For IP addresses, you can enter individual IP addresses, subnets, or address ranges. If adding multiple items, hit Enter after each entry.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dest_countries: ** - (Optional) Identify destinations based on the location of a server, select Any to apply the rule to all countries or select the countries to which you want to control traffic.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dest_ip_categories: ** - (Optional) identify destinations based on the URL category of the domain, select Any to apply the rule to all categories or select the specific categories you want to control.
        :param pulumi.Input['ZIAFirewallFilteringRuleDestIpGroupsArgs'] dest_ip_groups: ** - (Optional) Any number of destination IP address groups that you want to control with this rule.
        :param pulumi.Input['ZIAFirewallFilteringRuleGroupsArgs'] groups: You can manually select up to `8` groups. When not used it implies `Any` to apply the rule to all groups.
        :param pulumi.Input['ZIAFirewallFilteringRuleLabelsArgs'] labels: Labels that are applicable to the rule.
        :param pulumi.Input['ZIAFirewallFilteringRuleLocationGroupsArgs'] location_groups: You can manually select up to `32` location groups. When not used it implies `Any` to apply the rule to all location groups.
        :param pulumi.Input['ZIAFirewallFilteringRuleLocationsArgs'] locations: You can manually select up to `8` locations. When not used it implies `Any` to apply the rule to all groups.
        :param pulumi.Input[str] name: Name of the network service group
        :param pulumi.Input['ZIAFirewallFilteringRuleNwApplicationGroupsArgs'] nw_application_groups: Any number of application groups that you want to control with this rule. The service provides predefined applications that you can group, but not modify
        :param pulumi.Input[Sequence[pulumi.Input[str]]] nw_applications: When not used it applies the rule to all applications. The service provides predefined applications, which you can group, but not modify.
        :param pulumi.Input['ZIAFirewallFilteringRuleNwServiceGroupsArgs'] nw_service_groups: Any number of predefined or custom network service groups to which the rule applies.
        :param pulumi.Input['ZIAFirewallFilteringRuleNwServicesArgs'] nw_services: When not used it applies the rule to all network services or you can select specific network services. The Zscaler firewall has predefined services and you can configure up to `1,024` additional custom services.
        :param pulumi.Input[int] order: Policy rules are evaluated in ascending numerical order (Rule 1 before Rule 2, and so on), and the Rule Order reflects this rule's place in the order.
        :param pulumi.Input[bool] predefined: If set to true, a predefined rule is applied
        :param pulumi.Input[int] rank: By default, the admin ranking is disabled. To use this feature, you must enable admin rank. The default value is `7`.
        :param pulumi.Input['ZIAFirewallFilteringRuleSrcIpGroupsArgs'] src_ip_groups: Any number of source IP address groups that you want to control with this rule.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] src_ips: You can enter individual IP addresses, subnets, or address ranges.
        :param pulumi.Input[str] state: An enabled rule is actively enforced. A disabled rule is not actively enforced but does not lose its place in the Rule Order. The service skips it and moves to the next rule.
        :param pulumi.Input['ZIAFirewallFilteringRuleTimeWindowsArgs'] time_windows: You can manually select up to `2` time intervals. When not used it implies `always` to apply the rule to all time intervals.
        :param pulumi.Input['ZIAFirewallFilteringRuleUsersArgs'] users: You can manually select up to `4` general and/or special users. When not used it implies `Any` to apply the rule to all users.
        """
        if access_control is not None:
            pulumi.set(__self__, "access_control", access_control)
        if action is not None:
            pulumi.set(__self__, "action", action)
        if app_service_groups is not None:
            pulumi.set(__self__, "app_service_groups", app_service_groups)
        if app_services is not None:
            pulumi.set(__self__, "app_services", app_services)
        if default_rule is not None:
            pulumi.set(__self__, "default_rule", default_rule)
        if departments is not None:
            pulumi.set(__self__, "departments", departments)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if dest_addresses is not None:
            pulumi.set(__self__, "dest_addresses", dest_addresses)
        if dest_countries is not None:
            pulumi.set(__self__, "dest_countries", dest_countries)
        if dest_ip_categories is not None:
            pulumi.set(__self__, "dest_ip_categories", dest_ip_categories)
        if dest_ip_groups is not None:
            pulumi.set(__self__, "dest_ip_groups", dest_ip_groups)
        if enable_full_logging is not None:
            pulumi.set(__self__, "enable_full_logging", enable_full_logging)
        if groups is not None:
            pulumi.set(__self__, "groups", groups)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if last_modified_bies is not None:
            pulumi.set(__self__, "last_modified_bies", last_modified_bies)
        if last_modified_time is not None:
            pulumi.set(__self__, "last_modified_time", last_modified_time)
        if location_groups is not None:
            pulumi.set(__self__, "location_groups", location_groups)
        if locations is not None:
            pulumi.set(__self__, "locations", locations)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if nw_application_groups is not None:
            pulumi.set(__self__, "nw_application_groups", nw_application_groups)
        if nw_applications is not None:
            pulumi.set(__self__, "nw_applications", nw_applications)
        if nw_service_groups is not None:
            pulumi.set(__self__, "nw_service_groups", nw_service_groups)
        if nw_services is not None:
            pulumi.set(__self__, "nw_services", nw_services)
        if order is not None:
            pulumi.set(__self__, "order", order)
        if predefined is not None:
            pulumi.set(__self__, "predefined", predefined)
        if rank is not None:
            pulumi.set(__self__, "rank", rank)
        if src_ip_groups is not None:
            pulumi.set(__self__, "src_ip_groups", src_ip_groups)
        if src_ips is not None:
            pulumi.set(__self__, "src_ips", src_ips)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_windows is not None:
            pulumi.set(__self__, "time_windows", time_windows)
        if users is not None:
            pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter(name="accessControl")
    def access_control(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "access_control")

    @access_control.setter
    def access_control(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_control", value)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Choose the action of the service when packets match the rule. The following actions are accepted: `ALLOW`, `BLOCK_DROP`, `BLOCK_RESET`, `BLOCK_ICMP`, `EVAL_NWAPP`
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter(name="appServiceGroups")
    def app_service_groups(self) -> Optional[pulumi.Input['ZIAFirewallFilteringRuleAppServiceGroupsArgs']]:
        """
        Application service groups on which this rule is applied
        """
        return pulumi.get(self, "app_service_groups")

    @app_service_groups.setter
    def app_service_groups(self, value: Optional[pulumi.Input['ZIAFirewallFilteringRuleAppServiceGroupsArgs']]):
        pulumi.set(self, "app_service_groups", value)

    @property
    @pulumi.getter(name="appServices")
    def app_services(self) -> Optional[pulumi.Input['ZIAFirewallFilteringRuleAppServicesArgs']]:
        """
        Application services on which this rule is applied
        """
        return pulumi.get(self, "app_services")

    @app_services.setter
    def app_services(self, value: Optional[pulumi.Input['ZIAFirewallFilteringRuleAppServicesArgs']]):
        pulumi.set(self, "app_services", value)

    @property
    @pulumi.getter(name="defaultRule")
    def default_rule(self) -> Optional[pulumi.Input[bool]]:
        """
        If set to true, the default rule is applied
        """
        return pulumi.get(self, "default_rule")

    @default_rule.setter
    def default_rule(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "default_rule", value)

    @property
    @pulumi.getter
    def departments(self) -> Optional[pulumi.Input['ZIAFirewallFilteringRuleDepartmentsArgs']]:
        """
        Apply to any number of departments When not used it implies `Any` to apply the rule to all departments.
        """
        return pulumi.get(self, "departments")

    @departments.setter
    def departments(self, value: Optional[pulumi.Input['ZIAFirewallFilteringRuleDepartmentsArgs']]):
        pulumi.set(self, "departments", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Enter additional notes or information. The description cannot exceed 10,240 characters.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="destAddresses")
    def dest_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        ** - (Optional) -  IP addresses and fully qualified domain names (FQDNs), if the domain has multiple destination IP addresses or if its IP addresses may change. For IP addresses, you can enter individual IP addresses, subnets, or address ranges. If adding multiple items, hit Enter after each entry.
        """
        return pulumi.get(self, "dest_addresses")

    @dest_addresses.setter
    def dest_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "dest_addresses", value)

    @property
    @pulumi.getter(name="destCountries")
    def dest_countries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        ** - (Optional) Identify destinations based on the location of a server, select Any to apply the rule to all countries or select the countries to which you want to control traffic.
        """
        return pulumi.get(self, "dest_countries")

    @dest_countries.setter
    def dest_countries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "dest_countries", value)

    @property
    @pulumi.getter(name="destIpCategories")
    def dest_ip_categories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        ** - (Optional) identify destinations based on the URL category of the domain, select Any to apply the rule to all categories or select the specific categories you want to control.
        """
        return pulumi.get(self, "dest_ip_categories")

    @dest_ip_categories.setter
    def dest_ip_categories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "dest_ip_categories", value)

    @property
    @pulumi.getter(name="destIpGroups")
    def dest_ip_groups(self) -> Optional[pulumi.Input['ZIAFirewallFilteringRuleDestIpGroupsArgs']]:
        """
        ** - (Optional) Any number of destination IP address groups that you want to control with this rule.
        """
        return pulumi.get(self, "dest_ip_groups")

    @dest_ip_groups.setter
    def dest_ip_groups(self, value: Optional[pulumi.Input['ZIAFirewallFilteringRuleDestIpGroupsArgs']]):
        pulumi.set(self, "dest_ip_groups", value)

    @property
    @pulumi.getter(name="enableFullLogging")
    def enable_full_logging(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_full_logging")

    @enable_full_logging.setter
    def enable_full_logging(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_full_logging", value)

    @property
    @pulumi.getter
    def groups(self) -> Optional[pulumi.Input['ZIAFirewallFilteringRuleGroupsArgs']]:
        """
        You can manually select up to `8` groups. When not used it implies `Any` to apply the rule to all groups.
        """
        return pulumi.get(self, "groups")

    @groups.setter
    def groups(self, value: Optional[pulumi.Input['ZIAFirewallFilteringRuleGroupsArgs']]):
        pulumi.set(self, "groups", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input['ZIAFirewallFilteringRuleLabelsArgs']]:
        """
        Labels that are applicable to the rule.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input['ZIAFirewallFilteringRuleLabelsArgs']]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter(name="lastModifiedBies")
    def last_modified_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ZIAFirewallFilteringRuleLastModifiedByArgs']]]]:
        return pulumi.get(self, "last_modified_bies")

    @last_modified_bies.setter
    def last_modified_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ZIAFirewallFilteringRuleLastModifiedByArgs']]]]):
        pulumi.set(self, "last_modified_bies", value)

    @property
    @pulumi.getter(name="lastModifiedTime")
    def last_modified_time(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "last_modified_time")

    @last_modified_time.setter
    def last_modified_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "last_modified_time", value)

    @property
    @pulumi.getter(name="locationGroups")
    def location_groups(self) -> Optional[pulumi.Input['ZIAFirewallFilteringRuleLocationGroupsArgs']]:
        """
        You can manually select up to `32` location groups. When not used it implies `Any` to apply the rule to all location groups.
        """
        return pulumi.get(self, "location_groups")

    @location_groups.setter
    def location_groups(self, value: Optional[pulumi.Input['ZIAFirewallFilteringRuleLocationGroupsArgs']]):
        pulumi.set(self, "location_groups", value)

    @property
    @pulumi.getter
    def locations(self) -> Optional[pulumi.Input['ZIAFirewallFilteringRuleLocationsArgs']]:
        """
        You can manually select up to `8` locations. When not used it implies `Any` to apply the rule to all groups.
        """
        return pulumi.get(self, "locations")

    @locations.setter
    def locations(self, value: Optional[pulumi.Input['ZIAFirewallFilteringRuleLocationsArgs']]):
        pulumi.set(self, "locations", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the network service group
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nwApplicationGroups")
    def nw_application_groups(self) -> Optional[pulumi.Input['ZIAFirewallFilteringRuleNwApplicationGroupsArgs']]:
        """
        Any number of application groups that you want to control with this rule. The service provides predefined applications that you can group, but not modify
        """
        return pulumi.get(self, "nw_application_groups")

    @nw_application_groups.setter
    def nw_application_groups(self, value: Optional[pulumi.Input['ZIAFirewallFilteringRuleNwApplicationGroupsArgs']]):
        pulumi.set(self, "nw_application_groups", value)

    @property
    @pulumi.getter(name="nwApplications")
    def nw_applications(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        When not used it applies the rule to all applications. The service provides predefined applications, which you can group, but not modify.
        """
        return pulumi.get(self, "nw_applications")

    @nw_applications.setter
    def nw_applications(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "nw_applications", value)

    @property
    @pulumi.getter(name="nwServiceGroups")
    def nw_service_groups(self) -> Optional[pulumi.Input['ZIAFirewallFilteringRuleNwServiceGroupsArgs']]:
        """
        Any number of predefined or custom network service groups to which the rule applies.
        """
        return pulumi.get(self, "nw_service_groups")

    @nw_service_groups.setter
    def nw_service_groups(self, value: Optional[pulumi.Input['ZIAFirewallFilteringRuleNwServiceGroupsArgs']]):
        pulumi.set(self, "nw_service_groups", value)

    @property
    @pulumi.getter(name="nwServices")
    def nw_services(self) -> Optional[pulumi.Input['ZIAFirewallFilteringRuleNwServicesArgs']]:
        """
        When not used it applies the rule to all network services or you can select specific network services. The Zscaler firewall has predefined services and you can configure up to `1,024` additional custom services.
        """
        return pulumi.get(self, "nw_services")

    @nw_services.setter
    def nw_services(self, value: Optional[pulumi.Input['ZIAFirewallFilteringRuleNwServicesArgs']]):
        pulumi.set(self, "nw_services", value)

    @property
    @pulumi.getter
    def order(self) -> Optional[pulumi.Input[int]]:
        """
        Policy rules are evaluated in ascending numerical order (Rule 1 before Rule 2, and so on), and the Rule Order reflects this rule's place in the order.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def predefined(self) -> Optional[pulumi.Input[bool]]:
        """
        If set to true, a predefined rule is applied
        """
        return pulumi.get(self, "predefined")

    @predefined.setter
    def predefined(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "predefined", value)

    @property
    @pulumi.getter
    def rank(self) -> Optional[pulumi.Input[int]]:
        """
        By default, the admin ranking is disabled. To use this feature, you must enable admin rank. The default value is `7`.
        """
        return pulumi.get(self, "rank")

    @rank.setter
    def rank(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "rank", value)

    @property
    @pulumi.getter(name="srcIpGroups")
    def src_ip_groups(self) -> Optional[pulumi.Input['ZIAFirewallFilteringRuleSrcIpGroupsArgs']]:
        """
        Any number of source IP address groups that you want to control with this rule.
        """
        return pulumi.get(self, "src_ip_groups")

    @src_ip_groups.setter
    def src_ip_groups(self, value: Optional[pulumi.Input['ZIAFirewallFilteringRuleSrcIpGroupsArgs']]):
        pulumi.set(self, "src_ip_groups", value)

    @property
    @pulumi.getter(name="srcIps")
    def src_ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        You can enter individual IP addresses, subnets, or address ranges.
        """
        return pulumi.get(self, "src_ips")

    @src_ips.setter
    def src_ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "src_ips", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        """
        An enabled rule is actively enforced. A disabled rule is not actively enforced but does not lose its place in the Rule Order. The service skips it and moves to the next rule.
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter(name="timeWindows")
    def time_windows(self) -> Optional[pulumi.Input['ZIAFirewallFilteringRuleTimeWindowsArgs']]:
        """
        You can manually select up to `2` time intervals. When not used it implies `always` to apply the rule to all time intervals.
        """
        return pulumi.get(self, "time_windows")

    @time_windows.setter
    def time_windows(self, value: Optional[pulumi.Input['ZIAFirewallFilteringRuleTimeWindowsArgs']]):
        pulumi.set(self, "time_windows", value)

    @property
    @pulumi.getter
    def users(self) -> Optional[pulumi.Input['ZIAFirewallFilteringRuleUsersArgs']]:
        """
        You can manually select up to `4` general and/or special users. When not used it implies `Any` to apply the rule to all users.
        """
        return pulumi.get(self, "users")

    @users.setter
    def users(self, value: Optional[pulumi.Input['ZIAFirewallFilteringRuleUsersArgs']]):
        pulumi.set(self, "users", value)


@pulumi.input_type
class _ZIAFirewallFilteringRuleState:
    def __init__(__self__, *,
                 access_control: Optional[pulumi.Input[str]] = None,
                 action: Optional[pulumi.Input[str]] = None,
                 app_service_groups: Optional[pulumi.Input['ZIAFirewallFilteringRuleAppServiceGroupsArgs']] = None,
                 app_services: Optional[pulumi.Input['ZIAFirewallFilteringRuleAppServicesArgs']] = None,
                 default_rule: Optional[pulumi.Input[bool]] = None,
                 departments: Optional[pulumi.Input['ZIAFirewallFilteringRuleDepartmentsArgs']] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 dest_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 dest_countries: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 dest_ip_categories: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 dest_ip_groups: Optional[pulumi.Input['ZIAFirewallFilteringRuleDestIpGroupsArgs']] = None,
                 enable_full_logging: Optional[pulumi.Input[bool]] = None,
                 groups: Optional[pulumi.Input['ZIAFirewallFilteringRuleGroupsArgs']] = None,
                 labels: Optional[pulumi.Input['ZIAFirewallFilteringRuleLabelsArgs']] = None,
                 last_modified_bies: Optional[pulumi.Input[Sequence[pulumi.Input['ZIAFirewallFilteringRuleLastModifiedByArgs']]]] = None,
                 last_modified_time: Optional[pulumi.Input[int]] = None,
                 location_groups: Optional[pulumi.Input['ZIAFirewallFilteringRuleLocationGroupsArgs']] = None,
                 locations: Optional[pulumi.Input['ZIAFirewallFilteringRuleLocationsArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nw_application_groups: Optional[pulumi.Input['ZIAFirewallFilteringRuleNwApplicationGroupsArgs']] = None,
                 nw_applications: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 nw_service_groups: Optional[pulumi.Input['ZIAFirewallFilteringRuleNwServiceGroupsArgs']] = None,
                 nw_services: Optional[pulumi.Input['ZIAFirewallFilteringRuleNwServicesArgs']] = None,
                 order: Optional[pulumi.Input[int]] = None,
                 predefined: Optional[pulumi.Input[bool]] = None,
                 rank: Optional[pulumi.Input[int]] = None,
                 rule_id: Optional[pulumi.Input[int]] = None,
                 src_ip_groups: Optional[pulumi.Input['ZIAFirewallFilteringRuleSrcIpGroupsArgs']] = None,
                 src_ips: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 time_windows: Optional[pulumi.Input['ZIAFirewallFilteringRuleTimeWindowsArgs']] = None,
                 users: Optional[pulumi.Input['ZIAFirewallFilteringRuleUsersArgs']] = None):
        """
        Input properties used for looking up and filtering ZIAFirewallFilteringRule resources.
        :param pulumi.Input[str] action: Choose the action of the service when packets match the rule. The following actions are accepted: `ALLOW`, `BLOCK_DROP`, `BLOCK_RESET`, `BLOCK_ICMP`, `EVAL_NWAPP`
        :param pulumi.Input['ZIAFirewallFilteringRuleAppServiceGroupsArgs'] app_service_groups: Application service groups on which this rule is applied
        :param pulumi.Input['ZIAFirewallFilteringRuleAppServicesArgs'] app_services: Application services on which this rule is applied
        :param pulumi.Input[bool] default_rule: If set to true, the default rule is applied
        :param pulumi.Input['ZIAFirewallFilteringRuleDepartmentsArgs'] departments: Apply to any number of departments When not used it implies `Any` to apply the rule to all departments.
        :param pulumi.Input[str] description: Enter additional notes or information. The description cannot exceed 10,240 characters.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dest_addresses: ** - (Optional) -  IP addresses and fully qualified domain names (FQDNs), if the domain has multiple destination IP addresses or if its IP addresses may change. For IP addresses, you can enter individual IP addresses, subnets, or address ranges. If adding multiple items, hit Enter after each entry.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dest_countries: ** - (Optional) Identify destinations based on the location of a server, select Any to apply the rule to all countries or select the countries to which you want to control traffic.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dest_ip_categories: ** - (Optional) identify destinations based on the URL category of the domain, select Any to apply the rule to all categories or select the specific categories you want to control.
        :param pulumi.Input['ZIAFirewallFilteringRuleDestIpGroupsArgs'] dest_ip_groups: ** - (Optional) Any number of destination IP address groups that you want to control with this rule.
        :param pulumi.Input['ZIAFirewallFilteringRuleGroupsArgs'] groups: You can manually select up to `8` groups. When not used it implies `Any` to apply the rule to all groups.
        :param pulumi.Input['ZIAFirewallFilteringRuleLabelsArgs'] labels: Labels that are applicable to the rule.
        :param pulumi.Input['ZIAFirewallFilteringRuleLocationGroupsArgs'] location_groups: You can manually select up to `32` location groups. When not used it implies `Any` to apply the rule to all location groups.
        :param pulumi.Input['ZIAFirewallFilteringRuleLocationsArgs'] locations: You can manually select up to `8` locations. When not used it implies `Any` to apply the rule to all groups.
        :param pulumi.Input[str] name: Name of the network service group
        :param pulumi.Input['ZIAFirewallFilteringRuleNwApplicationGroupsArgs'] nw_application_groups: Any number of application groups that you want to control with this rule. The service provides predefined applications that you can group, but not modify
        :param pulumi.Input[Sequence[pulumi.Input[str]]] nw_applications: When not used it applies the rule to all applications. The service provides predefined applications, which you can group, but not modify.
        :param pulumi.Input['ZIAFirewallFilteringRuleNwServiceGroupsArgs'] nw_service_groups: Any number of predefined or custom network service groups to which the rule applies.
        :param pulumi.Input['ZIAFirewallFilteringRuleNwServicesArgs'] nw_services: When not used it applies the rule to all network services or you can select specific network services. The Zscaler firewall has predefined services and you can configure up to `1,024` additional custom services.
        :param pulumi.Input[int] order: Policy rules are evaluated in ascending numerical order (Rule 1 before Rule 2, and so on), and the Rule Order reflects this rule's place in the order.
        :param pulumi.Input[bool] predefined: If set to true, a predefined rule is applied
        :param pulumi.Input[int] rank: By default, the admin ranking is disabled. To use this feature, you must enable admin rank. The default value is `7`.
        :param pulumi.Input['ZIAFirewallFilteringRuleSrcIpGroupsArgs'] src_ip_groups: Any number of source IP address groups that you want to control with this rule.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] src_ips: You can enter individual IP addresses, subnets, or address ranges.
        :param pulumi.Input[str] state: An enabled rule is actively enforced. A disabled rule is not actively enforced but does not lose its place in the Rule Order. The service skips it and moves to the next rule.
        :param pulumi.Input['ZIAFirewallFilteringRuleTimeWindowsArgs'] time_windows: You can manually select up to `2` time intervals. When not used it implies `always` to apply the rule to all time intervals.
        :param pulumi.Input['ZIAFirewallFilteringRuleUsersArgs'] users: You can manually select up to `4` general and/or special users. When not used it implies `Any` to apply the rule to all users.
        """
        if access_control is not None:
            pulumi.set(__self__, "access_control", access_control)
        if action is not None:
            pulumi.set(__self__, "action", action)
        if app_service_groups is not None:
            pulumi.set(__self__, "app_service_groups", app_service_groups)
        if app_services is not None:
            pulumi.set(__self__, "app_services", app_services)
        if default_rule is not None:
            pulumi.set(__self__, "default_rule", default_rule)
        if departments is not None:
            pulumi.set(__self__, "departments", departments)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if dest_addresses is not None:
            pulumi.set(__self__, "dest_addresses", dest_addresses)
        if dest_countries is not None:
            pulumi.set(__self__, "dest_countries", dest_countries)
        if dest_ip_categories is not None:
            pulumi.set(__self__, "dest_ip_categories", dest_ip_categories)
        if dest_ip_groups is not None:
            pulumi.set(__self__, "dest_ip_groups", dest_ip_groups)
        if enable_full_logging is not None:
            pulumi.set(__self__, "enable_full_logging", enable_full_logging)
        if groups is not None:
            pulumi.set(__self__, "groups", groups)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if last_modified_bies is not None:
            pulumi.set(__self__, "last_modified_bies", last_modified_bies)
        if last_modified_time is not None:
            pulumi.set(__self__, "last_modified_time", last_modified_time)
        if location_groups is not None:
            pulumi.set(__self__, "location_groups", location_groups)
        if locations is not None:
            pulumi.set(__self__, "locations", locations)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if nw_application_groups is not None:
            pulumi.set(__self__, "nw_application_groups", nw_application_groups)
        if nw_applications is not None:
            pulumi.set(__self__, "nw_applications", nw_applications)
        if nw_service_groups is not None:
            pulumi.set(__self__, "nw_service_groups", nw_service_groups)
        if nw_services is not None:
            pulumi.set(__self__, "nw_services", nw_services)
        if order is not None:
            pulumi.set(__self__, "order", order)
        if predefined is not None:
            pulumi.set(__self__, "predefined", predefined)
        if rank is not None:
            pulumi.set(__self__, "rank", rank)
        if rule_id is not None:
            pulumi.set(__self__, "rule_id", rule_id)
        if src_ip_groups is not None:
            pulumi.set(__self__, "src_ip_groups", src_ip_groups)
        if src_ips is not None:
            pulumi.set(__self__, "src_ips", src_ips)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_windows is not None:
            pulumi.set(__self__, "time_windows", time_windows)
        if users is not None:
            pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter(name="accessControl")
    def access_control(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "access_control")

    @access_control.setter
    def access_control(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_control", value)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        Choose the action of the service when packets match the rule. The following actions are accepted: `ALLOW`, `BLOCK_DROP`, `BLOCK_RESET`, `BLOCK_ICMP`, `EVAL_NWAPP`
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter(name="appServiceGroups")
    def app_service_groups(self) -> Optional[pulumi.Input['ZIAFirewallFilteringRuleAppServiceGroupsArgs']]:
        """
        Application service groups on which this rule is applied
        """
        return pulumi.get(self, "app_service_groups")

    @app_service_groups.setter
    def app_service_groups(self, value: Optional[pulumi.Input['ZIAFirewallFilteringRuleAppServiceGroupsArgs']]):
        pulumi.set(self, "app_service_groups", value)

    @property
    @pulumi.getter(name="appServices")
    def app_services(self) -> Optional[pulumi.Input['ZIAFirewallFilteringRuleAppServicesArgs']]:
        """
        Application services on which this rule is applied
        """
        return pulumi.get(self, "app_services")

    @app_services.setter
    def app_services(self, value: Optional[pulumi.Input['ZIAFirewallFilteringRuleAppServicesArgs']]):
        pulumi.set(self, "app_services", value)

    @property
    @pulumi.getter(name="defaultRule")
    def default_rule(self) -> Optional[pulumi.Input[bool]]:
        """
        If set to true, the default rule is applied
        """
        return pulumi.get(self, "default_rule")

    @default_rule.setter
    def default_rule(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "default_rule", value)

    @property
    @pulumi.getter
    def departments(self) -> Optional[pulumi.Input['ZIAFirewallFilteringRuleDepartmentsArgs']]:
        """
        Apply to any number of departments When not used it implies `Any` to apply the rule to all departments.
        """
        return pulumi.get(self, "departments")

    @departments.setter
    def departments(self, value: Optional[pulumi.Input['ZIAFirewallFilteringRuleDepartmentsArgs']]):
        pulumi.set(self, "departments", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Enter additional notes or information. The description cannot exceed 10,240 characters.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="destAddresses")
    def dest_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        ** - (Optional) -  IP addresses and fully qualified domain names (FQDNs), if the domain has multiple destination IP addresses or if its IP addresses may change. For IP addresses, you can enter individual IP addresses, subnets, or address ranges. If adding multiple items, hit Enter after each entry.
        """
        return pulumi.get(self, "dest_addresses")

    @dest_addresses.setter
    def dest_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "dest_addresses", value)

    @property
    @pulumi.getter(name="destCountries")
    def dest_countries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        ** - (Optional) Identify destinations based on the location of a server, select Any to apply the rule to all countries or select the countries to which you want to control traffic.
        """
        return pulumi.get(self, "dest_countries")

    @dest_countries.setter
    def dest_countries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "dest_countries", value)

    @property
    @pulumi.getter(name="destIpCategories")
    def dest_ip_categories(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        ** - (Optional) identify destinations based on the URL category of the domain, select Any to apply the rule to all categories or select the specific categories you want to control.
        """
        return pulumi.get(self, "dest_ip_categories")

    @dest_ip_categories.setter
    def dest_ip_categories(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "dest_ip_categories", value)

    @property
    @pulumi.getter(name="destIpGroups")
    def dest_ip_groups(self) -> Optional[pulumi.Input['ZIAFirewallFilteringRuleDestIpGroupsArgs']]:
        """
        ** - (Optional) Any number of destination IP address groups that you want to control with this rule.
        """
        return pulumi.get(self, "dest_ip_groups")

    @dest_ip_groups.setter
    def dest_ip_groups(self, value: Optional[pulumi.Input['ZIAFirewallFilteringRuleDestIpGroupsArgs']]):
        pulumi.set(self, "dest_ip_groups", value)

    @property
    @pulumi.getter(name="enableFullLogging")
    def enable_full_logging(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enable_full_logging")

    @enable_full_logging.setter
    def enable_full_logging(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_full_logging", value)

    @property
    @pulumi.getter
    def groups(self) -> Optional[pulumi.Input['ZIAFirewallFilteringRuleGroupsArgs']]:
        """
        You can manually select up to `8` groups. When not used it implies `Any` to apply the rule to all groups.
        """
        return pulumi.get(self, "groups")

    @groups.setter
    def groups(self, value: Optional[pulumi.Input['ZIAFirewallFilteringRuleGroupsArgs']]):
        pulumi.set(self, "groups", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input['ZIAFirewallFilteringRuleLabelsArgs']]:
        """
        Labels that are applicable to the rule.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input['ZIAFirewallFilteringRuleLabelsArgs']]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter(name="lastModifiedBies")
    def last_modified_bies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ZIAFirewallFilteringRuleLastModifiedByArgs']]]]:
        return pulumi.get(self, "last_modified_bies")

    @last_modified_bies.setter
    def last_modified_bies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ZIAFirewallFilteringRuleLastModifiedByArgs']]]]):
        pulumi.set(self, "last_modified_bies", value)

    @property
    @pulumi.getter(name="lastModifiedTime")
    def last_modified_time(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "last_modified_time")

    @last_modified_time.setter
    def last_modified_time(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "last_modified_time", value)

    @property
    @pulumi.getter(name="locationGroups")
    def location_groups(self) -> Optional[pulumi.Input['ZIAFirewallFilteringRuleLocationGroupsArgs']]:
        """
        You can manually select up to `32` location groups. When not used it implies `Any` to apply the rule to all location groups.
        """
        return pulumi.get(self, "location_groups")

    @location_groups.setter
    def location_groups(self, value: Optional[pulumi.Input['ZIAFirewallFilteringRuleLocationGroupsArgs']]):
        pulumi.set(self, "location_groups", value)

    @property
    @pulumi.getter
    def locations(self) -> Optional[pulumi.Input['ZIAFirewallFilteringRuleLocationsArgs']]:
        """
        You can manually select up to `8` locations. When not used it implies `Any` to apply the rule to all groups.
        """
        return pulumi.get(self, "locations")

    @locations.setter
    def locations(self, value: Optional[pulumi.Input['ZIAFirewallFilteringRuleLocationsArgs']]):
        pulumi.set(self, "locations", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the network service group
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nwApplicationGroups")
    def nw_application_groups(self) -> Optional[pulumi.Input['ZIAFirewallFilteringRuleNwApplicationGroupsArgs']]:
        """
        Any number of application groups that you want to control with this rule. The service provides predefined applications that you can group, but not modify
        """
        return pulumi.get(self, "nw_application_groups")

    @nw_application_groups.setter
    def nw_application_groups(self, value: Optional[pulumi.Input['ZIAFirewallFilteringRuleNwApplicationGroupsArgs']]):
        pulumi.set(self, "nw_application_groups", value)

    @property
    @pulumi.getter(name="nwApplications")
    def nw_applications(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        When not used it applies the rule to all applications. The service provides predefined applications, which you can group, but not modify.
        """
        return pulumi.get(self, "nw_applications")

    @nw_applications.setter
    def nw_applications(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "nw_applications", value)

    @property
    @pulumi.getter(name="nwServiceGroups")
    def nw_service_groups(self) -> Optional[pulumi.Input['ZIAFirewallFilteringRuleNwServiceGroupsArgs']]:
        """
        Any number of predefined or custom network service groups to which the rule applies.
        """
        return pulumi.get(self, "nw_service_groups")

    @nw_service_groups.setter
    def nw_service_groups(self, value: Optional[pulumi.Input['ZIAFirewallFilteringRuleNwServiceGroupsArgs']]):
        pulumi.set(self, "nw_service_groups", value)

    @property
    @pulumi.getter(name="nwServices")
    def nw_services(self) -> Optional[pulumi.Input['ZIAFirewallFilteringRuleNwServicesArgs']]:
        """
        When not used it applies the rule to all network services or you can select specific network services. The Zscaler firewall has predefined services and you can configure up to `1,024` additional custom services.
        """
        return pulumi.get(self, "nw_services")

    @nw_services.setter
    def nw_services(self, value: Optional[pulumi.Input['ZIAFirewallFilteringRuleNwServicesArgs']]):
        pulumi.set(self, "nw_services", value)

    @property
    @pulumi.getter
    def order(self) -> Optional[pulumi.Input[int]]:
        """
        Policy rules are evaluated in ascending numerical order (Rule 1 before Rule 2, and so on), and the Rule Order reflects this rule's place in the order.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def predefined(self) -> Optional[pulumi.Input[bool]]:
        """
        If set to true, a predefined rule is applied
        """
        return pulumi.get(self, "predefined")

    @predefined.setter
    def predefined(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "predefined", value)

    @property
    @pulumi.getter
    def rank(self) -> Optional[pulumi.Input[int]]:
        """
        By default, the admin ranking is disabled. To use this feature, you must enable admin rank. The default value is `7`.
        """
        return pulumi.get(self, "rank")

    @rank.setter
    def rank(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "rank", value)

    @property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "rule_id")

    @rule_id.setter
    def rule_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "rule_id", value)

    @property
    @pulumi.getter(name="srcIpGroups")
    def src_ip_groups(self) -> Optional[pulumi.Input['ZIAFirewallFilteringRuleSrcIpGroupsArgs']]:
        """
        Any number of source IP address groups that you want to control with this rule.
        """
        return pulumi.get(self, "src_ip_groups")

    @src_ip_groups.setter
    def src_ip_groups(self, value: Optional[pulumi.Input['ZIAFirewallFilteringRuleSrcIpGroupsArgs']]):
        pulumi.set(self, "src_ip_groups", value)

    @property
    @pulumi.getter(name="srcIps")
    def src_ips(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        You can enter individual IP addresses, subnets, or address ranges.
        """
        return pulumi.get(self, "src_ips")

    @src_ips.setter
    def src_ips(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "src_ips", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        """
        An enabled rule is actively enforced. A disabled rule is not actively enforced but does not lose its place in the Rule Order. The service skips it and moves to the next rule.
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter(name="timeWindows")
    def time_windows(self) -> Optional[pulumi.Input['ZIAFirewallFilteringRuleTimeWindowsArgs']]:
        """
        You can manually select up to `2` time intervals. When not used it implies `always` to apply the rule to all time intervals.
        """
        return pulumi.get(self, "time_windows")

    @time_windows.setter
    def time_windows(self, value: Optional[pulumi.Input['ZIAFirewallFilteringRuleTimeWindowsArgs']]):
        pulumi.set(self, "time_windows", value)

    @property
    @pulumi.getter
    def users(self) -> Optional[pulumi.Input['ZIAFirewallFilteringRuleUsersArgs']]:
        """
        You can manually select up to `4` general and/or special users. When not used it implies `Any` to apply the rule to all users.
        """
        return pulumi.get(self, "users")

    @users.setter
    def users(self, value: Optional[pulumi.Input['ZIAFirewallFilteringRuleUsersArgs']]):
        pulumi.set(self, "users", value)


class ZIAFirewallFilteringRule(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_control: Optional[pulumi.Input[str]] = None,
                 action: Optional[pulumi.Input[str]] = None,
                 app_service_groups: Optional[pulumi.Input[pulumi.InputType['ZIAFirewallFilteringRuleAppServiceGroupsArgs']]] = None,
                 app_services: Optional[pulumi.Input[pulumi.InputType['ZIAFirewallFilteringRuleAppServicesArgs']]] = None,
                 default_rule: Optional[pulumi.Input[bool]] = None,
                 departments: Optional[pulumi.Input[pulumi.InputType['ZIAFirewallFilteringRuleDepartmentsArgs']]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 dest_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 dest_countries: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 dest_ip_categories: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 dest_ip_groups: Optional[pulumi.Input[pulumi.InputType['ZIAFirewallFilteringRuleDestIpGroupsArgs']]] = None,
                 enable_full_logging: Optional[pulumi.Input[bool]] = None,
                 groups: Optional[pulumi.Input[pulumi.InputType['ZIAFirewallFilteringRuleGroupsArgs']]] = None,
                 labels: Optional[pulumi.Input[pulumi.InputType['ZIAFirewallFilteringRuleLabelsArgs']]] = None,
                 last_modified_bies: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ZIAFirewallFilteringRuleLastModifiedByArgs']]]]] = None,
                 last_modified_time: Optional[pulumi.Input[int]] = None,
                 location_groups: Optional[pulumi.Input[pulumi.InputType['ZIAFirewallFilteringRuleLocationGroupsArgs']]] = None,
                 locations: Optional[pulumi.Input[pulumi.InputType['ZIAFirewallFilteringRuleLocationsArgs']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nw_application_groups: Optional[pulumi.Input[pulumi.InputType['ZIAFirewallFilteringRuleNwApplicationGroupsArgs']]] = None,
                 nw_applications: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 nw_service_groups: Optional[pulumi.Input[pulumi.InputType['ZIAFirewallFilteringRuleNwServiceGroupsArgs']]] = None,
                 nw_services: Optional[pulumi.Input[pulumi.InputType['ZIAFirewallFilteringRuleNwServicesArgs']]] = None,
                 order: Optional[pulumi.Input[int]] = None,
                 predefined: Optional[pulumi.Input[bool]] = None,
                 rank: Optional[pulumi.Input[int]] = None,
                 src_ip_groups: Optional[pulumi.Input[pulumi.InputType['ZIAFirewallFilteringRuleSrcIpGroupsArgs']]] = None,
                 src_ips: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 time_windows: Optional[pulumi.Input[pulumi.InputType['ZIAFirewallFilteringRuleTimeWindowsArgs']]] = None,
                 users: Optional[pulumi.Input[pulumi.InputType['ZIAFirewallFilteringRuleUsersArgs']]] = None,
                 __props__=None):
        """
        The **zia_firewall_filtering_rule** resource allows the creation and management of ZIA Cloud Firewall filtering rules in the Zscaler Internet Access.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_zia as zia
        import zscaler_pulumi_zia as zia

        zscaler_proxy_nw_services = zia.get_zia_firewall_filtering_network_services(name="ZSCALER_PROXY_NW_SERVICES")
        engineering = zia.get_zia_department_management(name="Engineering")
        normal_internet = zia.get_zia_group_management(name="Normal_Internet")
        work_hours = zia.get_zia_time_window(name="Work hours")
        example = zia.ZIAFirewallFilteringRule("example",
            description="Example",
            action="ALLOW",
            state="ENABLED",
            order=1,
            enable_full_logging=True,
            nw_services=zia.ZIAFirewallFilteringRuleNwServicesArgs(
                ids=[zscaler_proxy_nw_services.id],
            ),
            departments=zia.ZIAFirewallFilteringRuleDepartmentsArgs(
                ids=[engineering.id],
            ),
            groups=zia.ZIAFirewallFilteringRuleGroupsArgs(
                ids=[normal_internet.id],
            ),
            time_windows=zia.ZIAFirewallFilteringRuleTimeWindowsArgs(
                ids=[work_hours.id],
            ))
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] action: Choose the action of the service when packets match the rule. The following actions are accepted: `ALLOW`, `BLOCK_DROP`, `BLOCK_RESET`, `BLOCK_ICMP`, `EVAL_NWAPP`
        :param pulumi.Input[pulumi.InputType['ZIAFirewallFilteringRuleAppServiceGroupsArgs']] app_service_groups: Application service groups on which this rule is applied
        :param pulumi.Input[pulumi.InputType['ZIAFirewallFilteringRuleAppServicesArgs']] app_services: Application services on which this rule is applied
        :param pulumi.Input[bool] default_rule: If set to true, the default rule is applied
        :param pulumi.Input[pulumi.InputType['ZIAFirewallFilteringRuleDepartmentsArgs']] departments: Apply to any number of departments When not used it implies `Any` to apply the rule to all departments.
        :param pulumi.Input[str] description: Enter additional notes or information. The description cannot exceed 10,240 characters.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dest_addresses: ** - (Optional) -  IP addresses and fully qualified domain names (FQDNs), if the domain has multiple destination IP addresses or if its IP addresses may change. For IP addresses, you can enter individual IP addresses, subnets, or address ranges. If adding multiple items, hit Enter after each entry.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dest_countries: ** - (Optional) Identify destinations based on the location of a server, select Any to apply the rule to all countries or select the countries to which you want to control traffic.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dest_ip_categories: ** - (Optional) identify destinations based on the URL category of the domain, select Any to apply the rule to all categories or select the specific categories you want to control.
        :param pulumi.Input[pulumi.InputType['ZIAFirewallFilteringRuleDestIpGroupsArgs']] dest_ip_groups: ** - (Optional) Any number of destination IP address groups that you want to control with this rule.
        :param pulumi.Input[pulumi.InputType['ZIAFirewallFilteringRuleGroupsArgs']] groups: You can manually select up to `8` groups. When not used it implies `Any` to apply the rule to all groups.
        :param pulumi.Input[pulumi.InputType['ZIAFirewallFilteringRuleLabelsArgs']] labels: Labels that are applicable to the rule.
        :param pulumi.Input[pulumi.InputType['ZIAFirewallFilteringRuleLocationGroupsArgs']] location_groups: You can manually select up to `32` location groups. When not used it implies `Any` to apply the rule to all location groups.
        :param pulumi.Input[pulumi.InputType['ZIAFirewallFilteringRuleLocationsArgs']] locations: You can manually select up to `8` locations. When not used it implies `Any` to apply the rule to all groups.
        :param pulumi.Input[str] name: Name of the network service group
        :param pulumi.Input[pulumi.InputType['ZIAFirewallFilteringRuleNwApplicationGroupsArgs']] nw_application_groups: Any number of application groups that you want to control with this rule. The service provides predefined applications that you can group, but not modify
        :param pulumi.Input[Sequence[pulumi.Input[str]]] nw_applications: When not used it applies the rule to all applications. The service provides predefined applications, which you can group, but not modify.
        :param pulumi.Input[pulumi.InputType['ZIAFirewallFilteringRuleNwServiceGroupsArgs']] nw_service_groups: Any number of predefined or custom network service groups to which the rule applies.
        :param pulumi.Input[pulumi.InputType['ZIAFirewallFilteringRuleNwServicesArgs']] nw_services: When not used it applies the rule to all network services or you can select specific network services. The Zscaler firewall has predefined services and you can configure up to `1,024` additional custom services.
        :param pulumi.Input[int] order: Policy rules are evaluated in ascending numerical order (Rule 1 before Rule 2, and so on), and the Rule Order reflects this rule's place in the order.
        :param pulumi.Input[bool] predefined: If set to true, a predefined rule is applied
        :param pulumi.Input[int] rank: By default, the admin ranking is disabled. To use this feature, you must enable admin rank. The default value is `7`.
        :param pulumi.Input[pulumi.InputType['ZIAFirewallFilteringRuleSrcIpGroupsArgs']] src_ip_groups: Any number of source IP address groups that you want to control with this rule.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] src_ips: You can enter individual IP addresses, subnets, or address ranges.
        :param pulumi.Input[str] state: An enabled rule is actively enforced. A disabled rule is not actively enforced but does not lose its place in the Rule Order. The service skips it and moves to the next rule.
        :param pulumi.Input[pulumi.InputType['ZIAFirewallFilteringRuleTimeWindowsArgs']] time_windows: You can manually select up to `2` time intervals. When not used it implies `always` to apply the rule to all time intervals.
        :param pulumi.Input[pulumi.InputType['ZIAFirewallFilteringRuleUsersArgs']] users: You can manually select up to `4` general and/or special users. When not used it implies `Any` to apply the rule to all users.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[ZIAFirewallFilteringRuleArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        The **zia_firewall_filtering_rule** resource allows the creation and management of ZIA Cloud Firewall filtering rules in the Zscaler Internet Access.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_zia as zia
        import zscaler_pulumi_zia as zia

        zscaler_proxy_nw_services = zia.get_zia_firewall_filtering_network_services(name="ZSCALER_PROXY_NW_SERVICES")
        engineering = zia.get_zia_department_management(name="Engineering")
        normal_internet = zia.get_zia_group_management(name="Normal_Internet")
        work_hours = zia.get_zia_time_window(name="Work hours")
        example = zia.ZIAFirewallFilteringRule("example",
            description="Example",
            action="ALLOW",
            state="ENABLED",
            order=1,
            enable_full_logging=True,
            nw_services=zia.ZIAFirewallFilteringRuleNwServicesArgs(
                ids=[zscaler_proxy_nw_services.id],
            ),
            departments=zia.ZIAFirewallFilteringRuleDepartmentsArgs(
                ids=[engineering.id],
            ),
            groups=zia.ZIAFirewallFilteringRuleGroupsArgs(
                ids=[normal_internet.id],
            ),
            time_windows=zia.ZIAFirewallFilteringRuleTimeWindowsArgs(
                ids=[work_hours.id],
            ))
        ```

        :param str resource_name: The name of the resource.
        :param ZIAFirewallFilteringRuleArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ZIAFirewallFilteringRuleArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_control: Optional[pulumi.Input[str]] = None,
                 action: Optional[pulumi.Input[str]] = None,
                 app_service_groups: Optional[pulumi.Input[pulumi.InputType['ZIAFirewallFilteringRuleAppServiceGroupsArgs']]] = None,
                 app_services: Optional[pulumi.Input[pulumi.InputType['ZIAFirewallFilteringRuleAppServicesArgs']]] = None,
                 default_rule: Optional[pulumi.Input[bool]] = None,
                 departments: Optional[pulumi.Input[pulumi.InputType['ZIAFirewallFilteringRuleDepartmentsArgs']]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 dest_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 dest_countries: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 dest_ip_categories: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 dest_ip_groups: Optional[pulumi.Input[pulumi.InputType['ZIAFirewallFilteringRuleDestIpGroupsArgs']]] = None,
                 enable_full_logging: Optional[pulumi.Input[bool]] = None,
                 groups: Optional[pulumi.Input[pulumi.InputType['ZIAFirewallFilteringRuleGroupsArgs']]] = None,
                 labels: Optional[pulumi.Input[pulumi.InputType['ZIAFirewallFilteringRuleLabelsArgs']]] = None,
                 last_modified_bies: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ZIAFirewallFilteringRuleLastModifiedByArgs']]]]] = None,
                 last_modified_time: Optional[pulumi.Input[int]] = None,
                 location_groups: Optional[pulumi.Input[pulumi.InputType['ZIAFirewallFilteringRuleLocationGroupsArgs']]] = None,
                 locations: Optional[pulumi.Input[pulumi.InputType['ZIAFirewallFilteringRuleLocationsArgs']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nw_application_groups: Optional[pulumi.Input[pulumi.InputType['ZIAFirewallFilteringRuleNwApplicationGroupsArgs']]] = None,
                 nw_applications: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 nw_service_groups: Optional[pulumi.Input[pulumi.InputType['ZIAFirewallFilteringRuleNwServiceGroupsArgs']]] = None,
                 nw_services: Optional[pulumi.Input[pulumi.InputType['ZIAFirewallFilteringRuleNwServicesArgs']]] = None,
                 order: Optional[pulumi.Input[int]] = None,
                 predefined: Optional[pulumi.Input[bool]] = None,
                 rank: Optional[pulumi.Input[int]] = None,
                 src_ip_groups: Optional[pulumi.Input[pulumi.InputType['ZIAFirewallFilteringRuleSrcIpGroupsArgs']]] = None,
                 src_ips: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 time_windows: Optional[pulumi.Input[pulumi.InputType['ZIAFirewallFilteringRuleTimeWindowsArgs']]] = None,
                 users: Optional[pulumi.Input[pulumi.InputType['ZIAFirewallFilteringRuleUsersArgs']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ZIAFirewallFilteringRuleArgs.__new__(ZIAFirewallFilteringRuleArgs)

            __props__.__dict__["access_control"] = access_control
            __props__.__dict__["action"] = action
            __props__.__dict__["app_service_groups"] = app_service_groups
            __props__.__dict__["app_services"] = app_services
            __props__.__dict__["default_rule"] = default_rule
            __props__.__dict__["departments"] = departments
            __props__.__dict__["description"] = description
            __props__.__dict__["dest_addresses"] = dest_addresses
            __props__.__dict__["dest_countries"] = dest_countries
            __props__.__dict__["dest_ip_categories"] = dest_ip_categories
            __props__.__dict__["dest_ip_groups"] = dest_ip_groups
            __props__.__dict__["enable_full_logging"] = enable_full_logging
            __props__.__dict__["groups"] = groups
            __props__.__dict__["labels"] = labels
            __props__.__dict__["last_modified_bies"] = last_modified_bies
            __props__.__dict__["last_modified_time"] = last_modified_time
            __props__.__dict__["location_groups"] = location_groups
            __props__.__dict__["locations"] = locations
            __props__.__dict__["name"] = name
            __props__.__dict__["nw_application_groups"] = nw_application_groups
            __props__.__dict__["nw_applications"] = nw_applications
            __props__.__dict__["nw_service_groups"] = nw_service_groups
            __props__.__dict__["nw_services"] = nw_services
            __props__.__dict__["order"] = order
            __props__.__dict__["predefined"] = predefined
            __props__.__dict__["rank"] = rank
            __props__.__dict__["src_ip_groups"] = src_ip_groups
            __props__.__dict__["src_ips"] = src_ips
            __props__.__dict__["state"] = state
            __props__.__dict__["time_windows"] = time_windows
            __props__.__dict__["users"] = users
            __props__.__dict__["rule_id"] = None
        super(ZIAFirewallFilteringRule, __self__).__init__(
            'zia:index/zIAFirewallFilteringRule:ZIAFirewallFilteringRule',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            access_control: Optional[pulumi.Input[str]] = None,
            action: Optional[pulumi.Input[str]] = None,
            app_service_groups: Optional[pulumi.Input[pulumi.InputType['ZIAFirewallFilteringRuleAppServiceGroupsArgs']]] = None,
            app_services: Optional[pulumi.Input[pulumi.InputType['ZIAFirewallFilteringRuleAppServicesArgs']]] = None,
            default_rule: Optional[pulumi.Input[bool]] = None,
            departments: Optional[pulumi.Input[pulumi.InputType['ZIAFirewallFilteringRuleDepartmentsArgs']]] = None,
            description: Optional[pulumi.Input[str]] = None,
            dest_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            dest_countries: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            dest_ip_categories: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            dest_ip_groups: Optional[pulumi.Input[pulumi.InputType['ZIAFirewallFilteringRuleDestIpGroupsArgs']]] = None,
            enable_full_logging: Optional[pulumi.Input[bool]] = None,
            groups: Optional[pulumi.Input[pulumi.InputType['ZIAFirewallFilteringRuleGroupsArgs']]] = None,
            labels: Optional[pulumi.Input[pulumi.InputType['ZIAFirewallFilteringRuleLabelsArgs']]] = None,
            last_modified_bies: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ZIAFirewallFilteringRuleLastModifiedByArgs']]]]] = None,
            last_modified_time: Optional[pulumi.Input[int]] = None,
            location_groups: Optional[pulumi.Input[pulumi.InputType['ZIAFirewallFilteringRuleLocationGroupsArgs']]] = None,
            locations: Optional[pulumi.Input[pulumi.InputType['ZIAFirewallFilteringRuleLocationsArgs']]] = None,
            name: Optional[pulumi.Input[str]] = None,
            nw_application_groups: Optional[pulumi.Input[pulumi.InputType['ZIAFirewallFilteringRuleNwApplicationGroupsArgs']]] = None,
            nw_applications: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            nw_service_groups: Optional[pulumi.Input[pulumi.InputType['ZIAFirewallFilteringRuleNwServiceGroupsArgs']]] = None,
            nw_services: Optional[pulumi.Input[pulumi.InputType['ZIAFirewallFilteringRuleNwServicesArgs']]] = None,
            order: Optional[pulumi.Input[int]] = None,
            predefined: Optional[pulumi.Input[bool]] = None,
            rank: Optional[pulumi.Input[int]] = None,
            rule_id: Optional[pulumi.Input[int]] = None,
            src_ip_groups: Optional[pulumi.Input[pulumi.InputType['ZIAFirewallFilteringRuleSrcIpGroupsArgs']]] = None,
            src_ips: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            state: Optional[pulumi.Input[str]] = None,
            time_windows: Optional[pulumi.Input[pulumi.InputType['ZIAFirewallFilteringRuleTimeWindowsArgs']]] = None,
            users: Optional[pulumi.Input[pulumi.InputType['ZIAFirewallFilteringRuleUsersArgs']]] = None) -> 'ZIAFirewallFilteringRule':
        """
        Get an existing ZIAFirewallFilteringRule resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] action: Choose the action of the service when packets match the rule. The following actions are accepted: `ALLOW`, `BLOCK_DROP`, `BLOCK_RESET`, `BLOCK_ICMP`, `EVAL_NWAPP`
        :param pulumi.Input[pulumi.InputType['ZIAFirewallFilteringRuleAppServiceGroupsArgs']] app_service_groups: Application service groups on which this rule is applied
        :param pulumi.Input[pulumi.InputType['ZIAFirewallFilteringRuleAppServicesArgs']] app_services: Application services on which this rule is applied
        :param pulumi.Input[bool] default_rule: If set to true, the default rule is applied
        :param pulumi.Input[pulumi.InputType['ZIAFirewallFilteringRuleDepartmentsArgs']] departments: Apply to any number of departments When not used it implies `Any` to apply the rule to all departments.
        :param pulumi.Input[str] description: Enter additional notes or information. The description cannot exceed 10,240 characters.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dest_addresses: ** - (Optional) -  IP addresses and fully qualified domain names (FQDNs), if the domain has multiple destination IP addresses or if its IP addresses may change. For IP addresses, you can enter individual IP addresses, subnets, or address ranges. If adding multiple items, hit Enter after each entry.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dest_countries: ** - (Optional) Identify destinations based on the location of a server, select Any to apply the rule to all countries or select the countries to which you want to control traffic.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dest_ip_categories: ** - (Optional) identify destinations based on the URL category of the domain, select Any to apply the rule to all categories or select the specific categories you want to control.
        :param pulumi.Input[pulumi.InputType['ZIAFirewallFilteringRuleDestIpGroupsArgs']] dest_ip_groups: ** - (Optional) Any number of destination IP address groups that you want to control with this rule.
        :param pulumi.Input[pulumi.InputType['ZIAFirewallFilteringRuleGroupsArgs']] groups: You can manually select up to `8` groups. When not used it implies `Any` to apply the rule to all groups.
        :param pulumi.Input[pulumi.InputType['ZIAFirewallFilteringRuleLabelsArgs']] labels: Labels that are applicable to the rule.
        :param pulumi.Input[pulumi.InputType['ZIAFirewallFilteringRuleLocationGroupsArgs']] location_groups: You can manually select up to `32` location groups. When not used it implies `Any` to apply the rule to all location groups.
        :param pulumi.Input[pulumi.InputType['ZIAFirewallFilteringRuleLocationsArgs']] locations: You can manually select up to `8` locations. When not used it implies `Any` to apply the rule to all groups.
        :param pulumi.Input[str] name: Name of the network service group
        :param pulumi.Input[pulumi.InputType['ZIAFirewallFilteringRuleNwApplicationGroupsArgs']] nw_application_groups: Any number of application groups that you want to control with this rule. The service provides predefined applications that you can group, but not modify
        :param pulumi.Input[Sequence[pulumi.Input[str]]] nw_applications: When not used it applies the rule to all applications. The service provides predefined applications, which you can group, but not modify.
        :param pulumi.Input[pulumi.InputType['ZIAFirewallFilteringRuleNwServiceGroupsArgs']] nw_service_groups: Any number of predefined or custom network service groups to which the rule applies.
        :param pulumi.Input[pulumi.InputType['ZIAFirewallFilteringRuleNwServicesArgs']] nw_services: When not used it applies the rule to all network services or you can select specific network services. The Zscaler firewall has predefined services and you can configure up to `1,024` additional custom services.
        :param pulumi.Input[int] order: Policy rules are evaluated in ascending numerical order (Rule 1 before Rule 2, and so on), and the Rule Order reflects this rule's place in the order.
        :param pulumi.Input[bool] predefined: If set to true, a predefined rule is applied
        :param pulumi.Input[int] rank: By default, the admin ranking is disabled. To use this feature, you must enable admin rank. The default value is `7`.
        :param pulumi.Input[pulumi.InputType['ZIAFirewallFilteringRuleSrcIpGroupsArgs']] src_ip_groups: Any number of source IP address groups that you want to control with this rule.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] src_ips: You can enter individual IP addresses, subnets, or address ranges.
        :param pulumi.Input[str] state: An enabled rule is actively enforced. A disabled rule is not actively enforced but does not lose its place in the Rule Order. The service skips it and moves to the next rule.
        :param pulumi.Input[pulumi.InputType['ZIAFirewallFilteringRuleTimeWindowsArgs']] time_windows: You can manually select up to `2` time intervals. When not used it implies `always` to apply the rule to all time intervals.
        :param pulumi.Input[pulumi.InputType['ZIAFirewallFilteringRuleUsersArgs']] users: You can manually select up to `4` general and/or special users. When not used it implies `Any` to apply the rule to all users.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ZIAFirewallFilteringRuleState.__new__(_ZIAFirewallFilteringRuleState)

        __props__.__dict__["access_control"] = access_control
        __props__.__dict__["action"] = action
        __props__.__dict__["app_service_groups"] = app_service_groups
        __props__.__dict__["app_services"] = app_services
        __props__.__dict__["default_rule"] = default_rule
        __props__.__dict__["departments"] = departments
        __props__.__dict__["description"] = description
        __props__.__dict__["dest_addresses"] = dest_addresses
        __props__.__dict__["dest_countries"] = dest_countries
        __props__.__dict__["dest_ip_categories"] = dest_ip_categories
        __props__.__dict__["dest_ip_groups"] = dest_ip_groups
        __props__.__dict__["enable_full_logging"] = enable_full_logging
        __props__.__dict__["groups"] = groups
        __props__.__dict__["labels"] = labels
        __props__.__dict__["last_modified_bies"] = last_modified_bies
        __props__.__dict__["last_modified_time"] = last_modified_time
        __props__.__dict__["location_groups"] = location_groups
        __props__.__dict__["locations"] = locations
        __props__.__dict__["name"] = name
        __props__.__dict__["nw_application_groups"] = nw_application_groups
        __props__.__dict__["nw_applications"] = nw_applications
        __props__.__dict__["nw_service_groups"] = nw_service_groups
        __props__.__dict__["nw_services"] = nw_services
        __props__.__dict__["order"] = order
        __props__.__dict__["predefined"] = predefined
        __props__.__dict__["rank"] = rank
        __props__.__dict__["rule_id"] = rule_id
        __props__.__dict__["src_ip_groups"] = src_ip_groups
        __props__.__dict__["src_ips"] = src_ips
        __props__.__dict__["state"] = state
        __props__.__dict__["time_windows"] = time_windows
        __props__.__dict__["users"] = users
        return ZIAFirewallFilteringRule(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="accessControl")
    def access_control(self) -> pulumi.Output[str]:
        return pulumi.get(self, "access_control")

    @property
    @pulumi.getter
    def action(self) -> pulumi.Output[str]:
        """
        Choose the action of the service when packets match the rule. The following actions are accepted: `ALLOW`, `BLOCK_DROP`, `BLOCK_RESET`, `BLOCK_ICMP`, `EVAL_NWAPP`
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter(name="appServiceGroups")
    def app_service_groups(self) -> pulumi.Output['outputs.ZIAFirewallFilteringRuleAppServiceGroups']:
        """
        Application service groups on which this rule is applied
        """
        return pulumi.get(self, "app_service_groups")

    @property
    @pulumi.getter(name="appServices")
    def app_services(self) -> pulumi.Output['outputs.ZIAFirewallFilteringRuleAppServices']:
        """
        Application services on which this rule is applied
        """
        return pulumi.get(self, "app_services")

    @property
    @pulumi.getter(name="defaultRule")
    def default_rule(self) -> pulumi.Output[bool]:
        """
        If set to true, the default rule is applied
        """
        return pulumi.get(self, "default_rule")

    @property
    @pulumi.getter
    def departments(self) -> pulumi.Output['outputs.ZIAFirewallFilteringRuleDepartments']:
        """
        Apply to any number of departments When not used it implies `Any` to apply the rule to all departments.
        """
        return pulumi.get(self, "departments")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Enter additional notes or information. The description cannot exceed 10,240 characters.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="destAddresses")
    def dest_addresses(self) -> pulumi.Output[Sequence[str]]:
        """
        ** - (Optional) -  IP addresses and fully qualified domain names (FQDNs), if the domain has multiple destination IP addresses or if its IP addresses may change. For IP addresses, you can enter individual IP addresses, subnets, or address ranges. If adding multiple items, hit Enter after each entry.
        """
        return pulumi.get(self, "dest_addresses")

    @property
    @pulumi.getter(name="destCountries")
    def dest_countries(self) -> pulumi.Output[Sequence[str]]:
        """
        ** - (Optional) Identify destinations based on the location of a server, select Any to apply the rule to all countries or select the countries to which you want to control traffic.
        """
        return pulumi.get(self, "dest_countries")

    @property
    @pulumi.getter(name="destIpCategories")
    def dest_ip_categories(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        ** - (Optional) identify destinations based on the URL category of the domain, select Any to apply the rule to all categories or select the specific categories you want to control.
        """
        return pulumi.get(self, "dest_ip_categories")

    @property
    @pulumi.getter(name="destIpGroups")
    def dest_ip_groups(self) -> pulumi.Output['outputs.ZIAFirewallFilteringRuleDestIpGroups']:
        """
        ** - (Optional) Any number of destination IP address groups that you want to control with this rule.
        """
        return pulumi.get(self, "dest_ip_groups")

    @property
    @pulumi.getter(name="enableFullLogging")
    def enable_full_logging(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "enable_full_logging")

    @property
    @pulumi.getter
    def groups(self) -> pulumi.Output['outputs.ZIAFirewallFilteringRuleGroups']:
        """
        You can manually select up to `8` groups. When not used it implies `Any` to apply the rule to all groups.
        """
        return pulumi.get(self, "groups")

    @property
    @pulumi.getter
    def labels(self) -> pulumi.Output['outputs.ZIAFirewallFilteringRuleLabels']:
        """
        Labels that are applicable to the rule.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="lastModifiedBies")
    def last_modified_bies(self) -> pulumi.Output[Sequence['outputs.ZIAFirewallFilteringRuleLastModifiedBy']]:
        return pulumi.get(self, "last_modified_bies")

    @property
    @pulumi.getter(name="lastModifiedTime")
    def last_modified_time(self) -> pulumi.Output[int]:
        return pulumi.get(self, "last_modified_time")

    @property
    @pulumi.getter(name="locationGroups")
    def location_groups(self) -> pulumi.Output['outputs.ZIAFirewallFilteringRuleLocationGroups']:
        """
        You can manually select up to `32` location groups. When not used it implies `Any` to apply the rule to all location groups.
        """
        return pulumi.get(self, "location_groups")

    @property
    @pulumi.getter
    def locations(self) -> pulumi.Output['outputs.ZIAFirewallFilteringRuleLocations']:
        """
        You can manually select up to `8` locations. When not used it implies `Any` to apply the rule to all groups.
        """
        return pulumi.get(self, "locations")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Name of the network service group
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nwApplicationGroups")
    def nw_application_groups(self) -> pulumi.Output['outputs.ZIAFirewallFilteringRuleNwApplicationGroups']:
        """
        Any number of application groups that you want to control with this rule. The service provides predefined applications that you can group, but not modify
        """
        return pulumi.get(self, "nw_application_groups")

    @property
    @pulumi.getter(name="nwApplications")
    def nw_applications(self) -> pulumi.Output[Sequence[str]]:
        """
        When not used it applies the rule to all applications. The service provides predefined applications, which you can group, but not modify.
        """
        return pulumi.get(self, "nw_applications")

    @property
    @pulumi.getter(name="nwServiceGroups")
    def nw_service_groups(self) -> pulumi.Output['outputs.ZIAFirewallFilteringRuleNwServiceGroups']:
        """
        Any number of predefined or custom network service groups to which the rule applies.
        """
        return pulumi.get(self, "nw_service_groups")

    @property
    @pulumi.getter(name="nwServices")
    def nw_services(self) -> pulumi.Output['outputs.ZIAFirewallFilteringRuleNwServices']:
        """
        When not used it applies the rule to all network services or you can select specific network services. The Zscaler firewall has predefined services and you can configure up to `1,024` additional custom services.
        """
        return pulumi.get(self, "nw_services")

    @property
    @pulumi.getter
    def order(self) -> pulumi.Output[int]:
        """
        Policy rules are evaluated in ascending numerical order (Rule 1 before Rule 2, and so on), and the Rule Order reflects this rule's place in the order.
        """
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def predefined(self) -> pulumi.Output[bool]:
        """
        If set to true, a predefined rule is applied
        """
        return pulumi.get(self, "predefined")

    @property
    @pulumi.getter
    def rank(self) -> pulumi.Output[int]:
        """
        By default, the admin ranking is disabled. To use this feature, you must enable admin rank. The default value is `7`.
        """
        return pulumi.get(self, "rank")

    @property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> pulumi.Output[int]:
        return pulumi.get(self, "rule_id")

    @property
    @pulumi.getter(name="srcIpGroups")
    def src_ip_groups(self) -> pulumi.Output['outputs.ZIAFirewallFilteringRuleSrcIpGroups']:
        """
        Any number of source IP address groups that you want to control with this rule.
        """
        return pulumi.get(self, "src_ip_groups")

    @property
    @pulumi.getter(name="srcIps")
    def src_ips(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        You can enter individual IP addresses, subnets, or address ranges.
        """
        return pulumi.get(self, "src_ips")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[str]:
        """
        An enabled rule is actively enforced. A disabled rule is not actively enforced but does not lose its place in the Rule Order. The service skips it and moves to the next rule.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeWindows")
    def time_windows(self) -> pulumi.Output['outputs.ZIAFirewallFilteringRuleTimeWindows']:
        """
        You can manually select up to `2` time intervals. When not used it implies `always` to apply the rule to all time intervals.
        """
        return pulumi.get(self, "time_windows")

    @property
    @pulumi.getter
    def users(self) -> pulumi.Output['outputs.ZIAFirewallFilteringRuleUsers']:
        """
        You can manually select up to `4` general and/or special users. When not used it implies `Any` to apply the rule to all users.
        """
        return pulumi.get(self, "users")

