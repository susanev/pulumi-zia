# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ZIADLPDictionariesArgs', 'ZIADLPDictionaries']

@pulumi.input_type
class ZIADLPDictionariesArgs:
    def __init__(__self__, *,
                 confidence_threshold: Optional[pulumi.Input[str]] = None,
                 custom_phrase_match_type: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 dictionary_type: Optional[pulumi.Input[str]] = None,
                 exact_data_match_details: Optional[pulumi.Input[Sequence[pulumi.Input['ZIADLPDictionariesExactDataMatchDetailArgs']]]] = None,
                 idm_profile_match_accuracies: Optional[pulumi.Input[Sequence[pulumi.Input['ZIADLPDictionariesIdmProfileMatchAccuracyArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 patterns: Optional[pulumi.Input[Sequence[pulumi.Input['ZIADLPDictionariesPatternArgs']]]] = None,
                 phrases: Optional[pulumi.Input[Sequence[pulumi.Input['ZIADLPDictionariesPhraseArgs']]]] = None,
                 proximity: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a ZIADLPDictionaries resource.
        :param pulumi.Input[str] confidence_threshold: The DLP confidence threshold. The following values are supported:
        :param pulumi.Input[str] custom_phrase_match_type: The DLP custom phrase match type. Supported values are:
        :param pulumi.Input[str] description: The desciption of the DLP dictionary
        :param pulumi.Input[str] dictionary_type: The DLP dictionary type. The following values are supported:
        :param pulumi.Input[Sequence[pulumi.Input['ZIADLPDictionariesExactDataMatchDetailArgs']]] exact_data_match_details: Exact Data Match (EDM) related information for custom DLP dictionaries.
        :param pulumi.Input[Sequence[pulumi.Input['ZIADLPDictionariesIdmProfileMatchAccuracyArgs']]] idm_profile_match_accuracies: List of Indexed Document Match (IDM) profiles and their corresponding match accuracy for custom DLP dictionaries.
        :param pulumi.Input[str] name: The DLP dictionary's name
        :param pulumi.Input[Sequence[pulumi.Input['ZIADLPDictionariesPatternArgs']]] patterns: List containing the patterns used within a custom DLP dictionary. This attribute is not applicable to predefined DLP dictionaries. Required when `dictionary_type` is `PATTERNS_AND_PHRASES`
        :param pulumi.Input[Sequence[pulumi.Input['ZIADLPDictionariesPhraseArgs']]] phrases: List containing the phrases used within a custom DLP dictionary. This attribute is not applicable to predefined DLP dictionaries. Required when `dictionary_type` is `PATTERNS_AND_PHRASES`
        :param pulumi.Input[int] proximity: The DLP dictionary proximity length.
        """
        if confidence_threshold is not None:
            pulumi.set(__self__, "confidence_threshold", confidence_threshold)
        if custom_phrase_match_type is not None:
            pulumi.set(__self__, "custom_phrase_match_type", custom_phrase_match_type)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if dictionary_type is not None:
            pulumi.set(__self__, "dictionary_type", dictionary_type)
        if exact_data_match_details is not None:
            pulumi.set(__self__, "exact_data_match_details", exact_data_match_details)
        if idm_profile_match_accuracies is not None:
            pulumi.set(__self__, "idm_profile_match_accuracies", idm_profile_match_accuracies)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if patterns is not None:
            pulumi.set(__self__, "patterns", patterns)
        if phrases is not None:
            pulumi.set(__self__, "phrases", phrases)
        if proximity is not None:
            pulumi.set(__self__, "proximity", proximity)

    @property
    @pulumi.getter(name="confidenceThreshold")
    def confidence_threshold(self) -> Optional[pulumi.Input[str]]:
        """
        The DLP confidence threshold. The following values are supported:
        """
        return pulumi.get(self, "confidence_threshold")

    @confidence_threshold.setter
    def confidence_threshold(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "confidence_threshold", value)

    @property
    @pulumi.getter(name="customPhraseMatchType")
    def custom_phrase_match_type(self) -> Optional[pulumi.Input[str]]:
        """
        The DLP custom phrase match type. Supported values are:
        """
        return pulumi.get(self, "custom_phrase_match_type")

    @custom_phrase_match_type.setter
    def custom_phrase_match_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_phrase_match_type", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The desciption of the DLP dictionary
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="dictionaryType")
    def dictionary_type(self) -> Optional[pulumi.Input[str]]:
        """
        The DLP dictionary type. The following values are supported:
        """
        return pulumi.get(self, "dictionary_type")

    @dictionary_type.setter
    def dictionary_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dictionary_type", value)

    @property
    @pulumi.getter(name="exactDataMatchDetails")
    def exact_data_match_details(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ZIADLPDictionariesExactDataMatchDetailArgs']]]]:
        """
        Exact Data Match (EDM) related information for custom DLP dictionaries.
        """
        return pulumi.get(self, "exact_data_match_details")

    @exact_data_match_details.setter
    def exact_data_match_details(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ZIADLPDictionariesExactDataMatchDetailArgs']]]]):
        pulumi.set(self, "exact_data_match_details", value)

    @property
    @pulumi.getter(name="idmProfileMatchAccuracies")
    def idm_profile_match_accuracies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ZIADLPDictionariesIdmProfileMatchAccuracyArgs']]]]:
        """
        List of Indexed Document Match (IDM) profiles and their corresponding match accuracy for custom DLP dictionaries.
        """
        return pulumi.get(self, "idm_profile_match_accuracies")

    @idm_profile_match_accuracies.setter
    def idm_profile_match_accuracies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ZIADLPDictionariesIdmProfileMatchAccuracyArgs']]]]):
        pulumi.set(self, "idm_profile_match_accuracies", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The DLP dictionary's name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def patterns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ZIADLPDictionariesPatternArgs']]]]:
        """
        List containing the patterns used within a custom DLP dictionary. This attribute is not applicable to predefined DLP dictionaries. Required when `dictionary_type` is `PATTERNS_AND_PHRASES`
        """
        return pulumi.get(self, "patterns")

    @patterns.setter
    def patterns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ZIADLPDictionariesPatternArgs']]]]):
        pulumi.set(self, "patterns", value)

    @property
    @pulumi.getter
    def phrases(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ZIADLPDictionariesPhraseArgs']]]]:
        """
        List containing the phrases used within a custom DLP dictionary. This attribute is not applicable to predefined DLP dictionaries. Required when `dictionary_type` is `PATTERNS_AND_PHRASES`
        """
        return pulumi.get(self, "phrases")

    @phrases.setter
    def phrases(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ZIADLPDictionariesPhraseArgs']]]]):
        pulumi.set(self, "phrases", value)

    @property
    @pulumi.getter
    def proximity(self) -> Optional[pulumi.Input[int]]:
        """
        The DLP dictionary proximity length.
        """
        return pulumi.get(self, "proximity")

    @proximity.setter
    def proximity(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "proximity", value)


@pulumi.input_type
class _ZIADLPDictionariesState:
    def __init__(__self__, *,
                 confidence_threshold: Optional[pulumi.Input[str]] = None,
                 custom_phrase_match_type: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 dictionary_id: Optional[pulumi.Input[int]] = None,
                 dictionary_type: Optional[pulumi.Input[str]] = None,
                 exact_data_match_details: Optional[pulumi.Input[Sequence[pulumi.Input['ZIADLPDictionariesExactDataMatchDetailArgs']]]] = None,
                 idm_profile_match_accuracies: Optional[pulumi.Input[Sequence[pulumi.Input['ZIADLPDictionariesIdmProfileMatchAccuracyArgs']]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 name_l10n_tag: Optional[pulumi.Input[bool]] = None,
                 patterns: Optional[pulumi.Input[Sequence[pulumi.Input['ZIADLPDictionariesPatternArgs']]]] = None,
                 phrases: Optional[pulumi.Input[Sequence[pulumi.Input['ZIADLPDictionariesPhraseArgs']]]] = None,
                 proximity: Optional[pulumi.Input[int]] = None,
                 threshold_type: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ZIADLPDictionaries resources.
        :param pulumi.Input[str] confidence_threshold: The DLP confidence threshold. The following values are supported:
        :param pulumi.Input[str] custom_phrase_match_type: The DLP custom phrase match type. Supported values are:
        :param pulumi.Input[str] description: The desciption of the DLP dictionary
        :param pulumi.Input[str] dictionary_type: The DLP dictionary type. The following values are supported:
        :param pulumi.Input[Sequence[pulumi.Input['ZIADLPDictionariesExactDataMatchDetailArgs']]] exact_data_match_details: Exact Data Match (EDM) related information for custom DLP dictionaries.
        :param pulumi.Input[Sequence[pulumi.Input['ZIADLPDictionariesIdmProfileMatchAccuracyArgs']]] idm_profile_match_accuracies: List of Indexed Document Match (IDM) profiles and their corresponding match accuracy for custom DLP dictionaries.
        :param pulumi.Input[str] name: The DLP dictionary's name
        :param pulumi.Input[bool] name_l10n_tag: Indicates whether the name is localized or not. This is always set to True for predefined DLP dictionaries.
        :param pulumi.Input[Sequence[pulumi.Input['ZIADLPDictionariesPatternArgs']]] patterns: List containing the patterns used within a custom DLP dictionary. This attribute is not applicable to predefined DLP dictionaries. Required when `dictionary_type` is `PATTERNS_AND_PHRASES`
        :param pulumi.Input[Sequence[pulumi.Input['ZIADLPDictionariesPhraseArgs']]] phrases: List containing the phrases used within a custom DLP dictionary. This attribute is not applicable to predefined DLP dictionaries. Required when `dictionary_type` is `PATTERNS_AND_PHRASES`
        :param pulumi.Input[int] proximity: The DLP dictionary proximity length.
        :param pulumi.Input[str] threshold_type: The DLP threshold type. The following values are supported:
        """
        if confidence_threshold is not None:
            pulumi.set(__self__, "confidence_threshold", confidence_threshold)
        if custom_phrase_match_type is not None:
            pulumi.set(__self__, "custom_phrase_match_type", custom_phrase_match_type)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if dictionary_id is not None:
            pulumi.set(__self__, "dictionary_id", dictionary_id)
        if dictionary_type is not None:
            pulumi.set(__self__, "dictionary_type", dictionary_type)
        if exact_data_match_details is not None:
            pulumi.set(__self__, "exact_data_match_details", exact_data_match_details)
        if idm_profile_match_accuracies is not None:
            pulumi.set(__self__, "idm_profile_match_accuracies", idm_profile_match_accuracies)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if name_l10n_tag is not None:
            pulumi.set(__self__, "name_l10n_tag", name_l10n_tag)
        if patterns is not None:
            pulumi.set(__self__, "patterns", patterns)
        if phrases is not None:
            pulumi.set(__self__, "phrases", phrases)
        if proximity is not None:
            pulumi.set(__self__, "proximity", proximity)
        if threshold_type is not None:
            pulumi.set(__self__, "threshold_type", threshold_type)

    @property
    @pulumi.getter(name="confidenceThreshold")
    def confidence_threshold(self) -> Optional[pulumi.Input[str]]:
        """
        The DLP confidence threshold. The following values are supported:
        """
        return pulumi.get(self, "confidence_threshold")

    @confidence_threshold.setter
    def confidence_threshold(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "confidence_threshold", value)

    @property
    @pulumi.getter(name="customPhraseMatchType")
    def custom_phrase_match_type(self) -> Optional[pulumi.Input[str]]:
        """
        The DLP custom phrase match type. Supported values are:
        """
        return pulumi.get(self, "custom_phrase_match_type")

    @custom_phrase_match_type.setter
    def custom_phrase_match_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_phrase_match_type", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The desciption of the DLP dictionary
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="dictionaryId")
    def dictionary_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "dictionary_id")

    @dictionary_id.setter
    def dictionary_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "dictionary_id", value)

    @property
    @pulumi.getter(name="dictionaryType")
    def dictionary_type(self) -> Optional[pulumi.Input[str]]:
        """
        The DLP dictionary type. The following values are supported:
        """
        return pulumi.get(self, "dictionary_type")

    @dictionary_type.setter
    def dictionary_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dictionary_type", value)

    @property
    @pulumi.getter(name="exactDataMatchDetails")
    def exact_data_match_details(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ZIADLPDictionariesExactDataMatchDetailArgs']]]]:
        """
        Exact Data Match (EDM) related information for custom DLP dictionaries.
        """
        return pulumi.get(self, "exact_data_match_details")

    @exact_data_match_details.setter
    def exact_data_match_details(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ZIADLPDictionariesExactDataMatchDetailArgs']]]]):
        pulumi.set(self, "exact_data_match_details", value)

    @property
    @pulumi.getter(name="idmProfileMatchAccuracies")
    def idm_profile_match_accuracies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ZIADLPDictionariesIdmProfileMatchAccuracyArgs']]]]:
        """
        List of Indexed Document Match (IDM) profiles and their corresponding match accuracy for custom DLP dictionaries.
        """
        return pulumi.get(self, "idm_profile_match_accuracies")

    @idm_profile_match_accuracies.setter
    def idm_profile_match_accuracies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ZIADLPDictionariesIdmProfileMatchAccuracyArgs']]]]):
        pulumi.set(self, "idm_profile_match_accuracies", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The DLP dictionary's name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nameL10nTag")
    def name_l10n_tag(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether the name is localized or not. This is always set to True for predefined DLP dictionaries.
        """
        return pulumi.get(self, "name_l10n_tag")

    @name_l10n_tag.setter
    def name_l10n_tag(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "name_l10n_tag", value)

    @property
    @pulumi.getter
    def patterns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ZIADLPDictionariesPatternArgs']]]]:
        """
        List containing the patterns used within a custom DLP dictionary. This attribute is not applicable to predefined DLP dictionaries. Required when `dictionary_type` is `PATTERNS_AND_PHRASES`
        """
        return pulumi.get(self, "patterns")

    @patterns.setter
    def patterns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ZIADLPDictionariesPatternArgs']]]]):
        pulumi.set(self, "patterns", value)

    @property
    @pulumi.getter
    def phrases(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ZIADLPDictionariesPhraseArgs']]]]:
        """
        List containing the phrases used within a custom DLP dictionary. This attribute is not applicable to predefined DLP dictionaries. Required when `dictionary_type` is `PATTERNS_AND_PHRASES`
        """
        return pulumi.get(self, "phrases")

    @phrases.setter
    def phrases(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ZIADLPDictionariesPhraseArgs']]]]):
        pulumi.set(self, "phrases", value)

    @property
    @pulumi.getter
    def proximity(self) -> Optional[pulumi.Input[int]]:
        """
        The DLP dictionary proximity length.
        """
        return pulumi.get(self, "proximity")

    @proximity.setter
    def proximity(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "proximity", value)

    @property
    @pulumi.getter(name="thresholdType")
    def threshold_type(self) -> Optional[pulumi.Input[str]]:
        """
        The DLP threshold type. The following values are supported:
        """
        return pulumi.get(self, "threshold_type")

    @threshold_type.setter
    def threshold_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "threshold_type", value)


class ZIADLPDictionaries(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 confidence_threshold: Optional[pulumi.Input[str]] = None,
                 custom_phrase_match_type: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 dictionary_type: Optional[pulumi.Input[str]] = None,
                 exact_data_match_details: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ZIADLPDictionariesExactDataMatchDetailArgs']]]]] = None,
                 idm_profile_match_accuracies: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ZIADLPDictionariesIdmProfileMatchAccuracyArgs']]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 patterns: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ZIADLPDictionariesPatternArgs']]]]] = None,
                 phrases: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ZIADLPDictionariesPhraseArgs']]]]] = None,
                 proximity: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        The **zia_dlp_dictionaries** resource allows the creation and management of ZIA DLP dictionaries in the Zscaler Internet Access cloud or via the API.

        ## Example Usage

        ```python
        import pulumi
        import zscaler_pulumi_zia as zia

        example = zia.ZIADLPDictionaries("example",
            custom_phrase_match_type="MATCH_ALL_CUSTOM_PHRASE_PATTERN_DICTIONARY",
            description="Your Description",
            dictionary_type="PATTERNS_AND_PHRASES",
            patterns=[zia.ZIADLPDictionariesPatternArgs(
                action="PATTERN_COUNT_TYPE_UNIQUE",
                pattern="YourPattern",
            )],
            phrases=[zia.ZIADLPDictionariesPhraseArgs(
                action="PHRASE_COUNT_TYPE_ALL",
                phrase="YourPhrase",
            )])
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] confidence_threshold: The DLP confidence threshold. The following values are supported:
        :param pulumi.Input[str] custom_phrase_match_type: The DLP custom phrase match type. Supported values are:
        :param pulumi.Input[str] description: The desciption of the DLP dictionary
        :param pulumi.Input[str] dictionary_type: The DLP dictionary type. The following values are supported:
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ZIADLPDictionariesExactDataMatchDetailArgs']]]] exact_data_match_details: Exact Data Match (EDM) related information for custom DLP dictionaries.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ZIADLPDictionariesIdmProfileMatchAccuracyArgs']]]] idm_profile_match_accuracies: List of Indexed Document Match (IDM) profiles and their corresponding match accuracy for custom DLP dictionaries.
        :param pulumi.Input[str] name: The DLP dictionary's name
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ZIADLPDictionariesPatternArgs']]]] patterns: List containing the patterns used within a custom DLP dictionary. This attribute is not applicable to predefined DLP dictionaries. Required when `dictionary_type` is `PATTERNS_AND_PHRASES`
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ZIADLPDictionariesPhraseArgs']]]] phrases: List containing the phrases used within a custom DLP dictionary. This attribute is not applicable to predefined DLP dictionaries. Required when `dictionary_type` is `PATTERNS_AND_PHRASES`
        :param pulumi.Input[int] proximity: The DLP dictionary proximity length.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[ZIADLPDictionariesArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        The **zia_dlp_dictionaries** resource allows the creation and management of ZIA DLP dictionaries in the Zscaler Internet Access cloud or via the API.

        ## Example Usage

        ```python
        import pulumi
        import zscaler_pulumi_zia as zia

        example = zia.ZIADLPDictionaries("example",
            custom_phrase_match_type="MATCH_ALL_CUSTOM_PHRASE_PATTERN_DICTIONARY",
            description="Your Description",
            dictionary_type="PATTERNS_AND_PHRASES",
            patterns=[zia.ZIADLPDictionariesPatternArgs(
                action="PATTERN_COUNT_TYPE_UNIQUE",
                pattern="YourPattern",
            )],
            phrases=[zia.ZIADLPDictionariesPhraseArgs(
                action="PHRASE_COUNT_TYPE_ALL",
                phrase="YourPhrase",
            )])
        ```

        :param str resource_name: The name of the resource.
        :param ZIADLPDictionariesArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ZIADLPDictionariesArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 confidence_threshold: Optional[pulumi.Input[str]] = None,
                 custom_phrase_match_type: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 dictionary_type: Optional[pulumi.Input[str]] = None,
                 exact_data_match_details: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ZIADLPDictionariesExactDataMatchDetailArgs']]]]] = None,
                 idm_profile_match_accuracies: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ZIADLPDictionariesIdmProfileMatchAccuracyArgs']]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 patterns: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ZIADLPDictionariesPatternArgs']]]]] = None,
                 phrases: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ZIADLPDictionariesPhraseArgs']]]]] = None,
                 proximity: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ZIADLPDictionariesArgs.__new__(ZIADLPDictionariesArgs)

            __props__.__dict__["confidence_threshold"] = confidence_threshold
            __props__.__dict__["custom_phrase_match_type"] = custom_phrase_match_type
            __props__.__dict__["description"] = description
            __props__.__dict__["dictionary_type"] = dictionary_type
            __props__.__dict__["exact_data_match_details"] = exact_data_match_details
            __props__.__dict__["idm_profile_match_accuracies"] = idm_profile_match_accuracies
            __props__.__dict__["name"] = name
            __props__.__dict__["patterns"] = patterns
            __props__.__dict__["phrases"] = phrases
            __props__.__dict__["proximity"] = proximity
            __props__.__dict__["dictionary_id"] = None
            __props__.__dict__["name_l10n_tag"] = None
            __props__.__dict__["threshold_type"] = None
        super(ZIADLPDictionaries, __self__).__init__(
            'zia:index/zIADLPDictionaries:ZIADLPDictionaries',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            confidence_threshold: Optional[pulumi.Input[str]] = None,
            custom_phrase_match_type: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            dictionary_id: Optional[pulumi.Input[int]] = None,
            dictionary_type: Optional[pulumi.Input[str]] = None,
            exact_data_match_details: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ZIADLPDictionariesExactDataMatchDetailArgs']]]]] = None,
            idm_profile_match_accuracies: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ZIADLPDictionariesIdmProfileMatchAccuracyArgs']]]]] = None,
            name: Optional[pulumi.Input[str]] = None,
            name_l10n_tag: Optional[pulumi.Input[bool]] = None,
            patterns: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ZIADLPDictionariesPatternArgs']]]]] = None,
            phrases: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ZIADLPDictionariesPhraseArgs']]]]] = None,
            proximity: Optional[pulumi.Input[int]] = None,
            threshold_type: Optional[pulumi.Input[str]] = None) -> 'ZIADLPDictionaries':
        """
        Get an existing ZIADLPDictionaries resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] confidence_threshold: The DLP confidence threshold. The following values are supported:
        :param pulumi.Input[str] custom_phrase_match_type: The DLP custom phrase match type. Supported values are:
        :param pulumi.Input[str] description: The desciption of the DLP dictionary
        :param pulumi.Input[str] dictionary_type: The DLP dictionary type. The following values are supported:
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ZIADLPDictionariesExactDataMatchDetailArgs']]]] exact_data_match_details: Exact Data Match (EDM) related information for custom DLP dictionaries.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ZIADLPDictionariesIdmProfileMatchAccuracyArgs']]]] idm_profile_match_accuracies: List of Indexed Document Match (IDM) profiles and their corresponding match accuracy for custom DLP dictionaries.
        :param pulumi.Input[str] name: The DLP dictionary's name
        :param pulumi.Input[bool] name_l10n_tag: Indicates whether the name is localized or not. This is always set to True for predefined DLP dictionaries.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ZIADLPDictionariesPatternArgs']]]] patterns: List containing the patterns used within a custom DLP dictionary. This attribute is not applicable to predefined DLP dictionaries. Required when `dictionary_type` is `PATTERNS_AND_PHRASES`
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ZIADLPDictionariesPhraseArgs']]]] phrases: List containing the phrases used within a custom DLP dictionary. This attribute is not applicable to predefined DLP dictionaries. Required when `dictionary_type` is `PATTERNS_AND_PHRASES`
        :param pulumi.Input[int] proximity: The DLP dictionary proximity length.
        :param pulumi.Input[str] threshold_type: The DLP threshold type. The following values are supported:
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ZIADLPDictionariesState.__new__(_ZIADLPDictionariesState)

        __props__.__dict__["confidence_threshold"] = confidence_threshold
        __props__.__dict__["custom_phrase_match_type"] = custom_phrase_match_type
        __props__.__dict__["description"] = description
        __props__.__dict__["dictionary_id"] = dictionary_id
        __props__.__dict__["dictionary_type"] = dictionary_type
        __props__.__dict__["exact_data_match_details"] = exact_data_match_details
        __props__.__dict__["idm_profile_match_accuracies"] = idm_profile_match_accuracies
        __props__.__dict__["name"] = name
        __props__.__dict__["name_l10n_tag"] = name_l10n_tag
        __props__.__dict__["patterns"] = patterns
        __props__.__dict__["phrases"] = phrases
        __props__.__dict__["proximity"] = proximity
        __props__.__dict__["threshold_type"] = threshold_type
        return ZIADLPDictionaries(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="confidenceThreshold")
    def confidence_threshold(self) -> pulumi.Output[Optional[str]]:
        """
        The DLP confidence threshold. The following values are supported:
        """
        return pulumi.get(self, "confidence_threshold")

    @property
    @pulumi.getter(name="customPhraseMatchType")
    def custom_phrase_match_type(self) -> pulumi.Output[Optional[str]]:
        """
        The DLP custom phrase match type. Supported values are:
        """
        return pulumi.get(self, "custom_phrase_match_type")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        The desciption of the DLP dictionary
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="dictionaryId")
    def dictionary_id(self) -> pulumi.Output[int]:
        return pulumi.get(self, "dictionary_id")

    @property
    @pulumi.getter(name="dictionaryType")
    def dictionary_type(self) -> pulumi.Output[Optional[str]]:
        """
        The DLP dictionary type. The following values are supported:
        """
        return pulumi.get(self, "dictionary_type")

    @property
    @pulumi.getter(name="exactDataMatchDetails")
    def exact_data_match_details(self) -> pulumi.Output[Optional[Sequence['outputs.ZIADLPDictionariesExactDataMatchDetail']]]:
        """
        Exact Data Match (EDM) related information for custom DLP dictionaries.
        """
        return pulumi.get(self, "exact_data_match_details")

    @property
    @pulumi.getter(name="idmProfileMatchAccuracies")
    def idm_profile_match_accuracies(self) -> pulumi.Output[Sequence['outputs.ZIADLPDictionariesIdmProfileMatchAccuracy']]:
        """
        List of Indexed Document Match (IDM) profiles and their corresponding match accuracy for custom DLP dictionaries.
        """
        return pulumi.get(self, "idm_profile_match_accuracies")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The DLP dictionary's name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nameL10nTag")
    def name_l10n_tag(self) -> pulumi.Output[bool]:
        """
        Indicates whether the name is localized or not. This is always set to True for predefined DLP dictionaries.
        """
        return pulumi.get(self, "name_l10n_tag")

    @property
    @pulumi.getter
    def patterns(self) -> pulumi.Output[Optional[Sequence['outputs.ZIADLPDictionariesPattern']]]:
        """
        List containing the patterns used within a custom DLP dictionary. This attribute is not applicable to predefined DLP dictionaries. Required when `dictionary_type` is `PATTERNS_AND_PHRASES`
        """
        return pulumi.get(self, "patterns")

    @property
    @pulumi.getter
    def phrases(self) -> pulumi.Output[Optional[Sequence['outputs.ZIADLPDictionariesPhrase']]]:
        """
        List containing the phrases used within a custom DLP dictionary. This attribute is not applicable to predefined DLP dictionaries. Required when `dictionary_type` is `PATTERNS_AND_PHRASES`
        """
        return pulumi.get(self, "phrases")

    @property
    @pulumi.getter
    def proximity(self) -> pulumi.Output[Optional[int]]:
        """
        The DLP dictionary proximity length.
        """
        return pulumi.get(self, "proximity")

    @property
    @pulumi.getter(name="thresholdType")
    def threshold_type(self) -> pulumi.Output[str]:
        """
        The DLP threshold type. The following values are supported:
        """
        return pulumi.get(self, "threshold_type")

