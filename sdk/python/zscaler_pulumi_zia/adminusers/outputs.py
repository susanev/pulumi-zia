# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'AdminUsersAdminScope',
    'AdminUsersAdminScopeScopeEntities',
    'AdminUsersAdminScopeScopeGroupMemberEntities',
    'AdminUsersRole',
    'GetAdminUsersAdminScopeResult',
    'GetAdminUsersAdminScopeScopeEntityResult',
    'GetAdminUsersAdminScopeScopeGroupMemberEntityResult',
    'GetAdminUsersExecMobileAppTokenResult',
    'GetAdminUsersRoleResult',
]

@pulumi.output_type
class AdminUsersAdminScope(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "scopeEntities":
            suggest = "scope_entities"
        elif key == "scopeGroupMemberEntities":
            suggest = "scope_group_member_entities"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AdminUsersAdminScope. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AdminUsersAdminScope.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AdminUsersAdminScope.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 scope_entities: Optional['outputs.AdminUsersAdminScopeScopeEntities'] = None,
                 scope_group_member_entities: Optional['outputs.AdminUsersAdminScopeScopeGroupMemberEntities'] = None,
                 type: Optional[str] = None):
        """
        :param 'AdminUsersAdminScopeScopeEntitiesArgs' scope_entities: Based on the admin scope type, the entities can be the ID/name pair of departments, locations, or location groups.
        :param 'AdminUsersAdminScopeScopeGroupMemberEntitiesArgs' scope_group_member_entities: Only applicable for the LOCATION_GROUP admin scope type, in which case this attribute gives the list of ID/name pairs of locations within the location group.
        :param str type: The admin scope type. The attribute name is subject to change.
        """
        if scope_entities is not None:
            pulumi.set(__self__, "scope_entities", scope_entities)
        if scope_group_member_entities is not None:
            pulumi.set(__self__, "scope_group_member_entities", scope_group_member_entities)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="scopeEntities")
    def scope_entities(self) -> Optional['outputs.AdminUsersAdminScopeScopeEntities']:
        """
        Based on the admin scope type, the entities can be the ID/name pair of departments, locations, or location groups.
        """
        return pulumi.get(self, "scope_entities")

    @property
    @pulumi.getter(name="scopeGroupMemberEntities")
    def scope_group_member_entities(self) -> Optional['outputs.AdminUsersAdminScopeScopeGroupMemberEntities']:
        """
        Only applicable for the LOCATION_GROUP admin scope type, in which case this attribute gives the list of ID/name pairs of locations within the location group.
        """
        return pulumi.get(self, "scope_group_member_entities")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        The admin scope type. The attribute name is subject to change.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class AdminUsersAdminScopeScopeEntities(dict):
    def __init__(__self__, *,
                 ids: Sequence[int]):
        """
        :param Sequence[int] ids: Identifier that uniquely identifies an entity
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Sequence[int]:
        """
        Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class AdminUsersAdminScopeScopeGroupMemberEntities(dict):
    def __init__(__self__, *,
                 ids: Sequence[int]):
        """
        :param Sequence[int] ids: Identifier that uniquely identifies an entity
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Sequence[int]:
        """
        Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class AdminUsersRole(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isNameL10nTag":
            suggest = "is_name_l10n_tag"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AdminUsersRole. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AdminUsersRole.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AdminUsersRole.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 extensions: Optional[Mapping[str, str]] = None,
                 id: Optional[int] = None,
                 is_name_l10n_tag: Optional[bool] = None,
                 name: Optional[str] = None):
        """
        :param int id: Identifier that uniquely identifies an entity
        :param str name: The configured name of the entity
        """
        if extensions is not None:
            pulumi.set(__self__, "extensions", extensions)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_name_l10n_tag is not None:
            pulumi.set(__self__, "is_name_l10n_tag", is_name_l10n_tag)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isNameL10nTag")
    def is_name_l10n_tag(self) -> Optional[bool]:
        return pulumi.get(self, "is_name_l10n_tag")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The configured name of the entity
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetAdminUsersAdminScopeResult(dict):
    def __init__(__self__, *,
                 scope_entities: Sequence['outputs.GetAdminUsersAdminScopeScopeEntityResult'],
                 scope_group_member_entities: Sequence['outputs.GetAdminUsersAdminScopeScopeGroupMemberEntityResult'],
                 type: str):
        """
        :param Sequence['GetAdminUsersAdminScopeScopeEntityArgs'] scope_entities: (String) Based on the admin scope type, the entities can be the ID/name pair of departments, locations, or location groups.
        :param Sequence['GetAdminUsersAdminScopeScopeGroupMemberEntityArgs'] scope_group_member_entities: (Number) Only applicable for the LOCATION_GROUP admin scope type, in which case this attribute gives the list of ID/name pairs of locations within the location group.
        :param str type: (String) The admin scope type. The attribute name is subject to change.
        """
        pulumi.set(__self__, "scope_entities", scope_entities)
        pulumi.set(__self__, "scope_group_member_entities", scope_group_member_entities)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="scopeEntities")
    def scope_entities(self) -> Sequence['outputs.GetAdminUsersAdminScopeScopeEntityResult']:
        """
        (String) Based on the admin scope type, the entities can be the ID/name pair of departments, locations, or location groups.
        """
        return pulumi.get(self, "scope_entities")

    @property
    @pulumi.getter(name="scopeGroupMemberEntities")
    def scope_group_member_entities(self) -> Sequence['outputs.GetAdminUsersAdminScopeScopeGroupMemberEntityResult']:
        """
        (Number) Only applicable for the LOCATION_GROUP admin scope type, in which case this attribute gives the list of ID/name pairs of locations within the location group.
        """
        return pulumi.get(self, "scope_group_member_entities")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        (String) The admin scope type. The attribute name is subject to change.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetAdminUsersAdminScopeScopeEntityResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, str],
                 id: int,
                 name: str):
        """
        :param int id: The ID of the admin user to be exported.
        :param str name: (String)
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, str]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        The ID of the admin user to be exported.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (String)
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetAdminUsersAdminScopeScopeGroupMemberEntityResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, str],
                 id: int,
                 name: str):
        """
        :param int id: The ID of the admin user to be exported.
        :param str name: (String)
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, str]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        The ID of the admin user to be exported.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (String)
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetAdminUsersExecMobileAppTokenResult(dict):
    def __init__(__self__, *,
                 cloud: str,
                 create_time: int,
                 device_id: str,
                 device_name: str,
                 name: str,
                 org_id: int,
                 token: str,
                 token_expiry: int,
                 token_id: str):
        """
        :param str cloud: (String)
        :param int create_time: (Number)
        :param str device_id: (String)
        :param str device_name: (String)
        :param str name: (String)
        :param int org_id: (Number)
        :param str token: (String)
        :param int token_expiry: (Number)
        :param str token_id: (String)
        """
        pulumi.set(__self__, "cloud", cloud)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "device_id", device_id)
        pulumi.set(__self__, "device_name", device_name)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "org_id", org_id)
        pulumi.set(__self__, "token", token)
        pulumi.set(__self__, "token_expiry", token_expiry)
        pulumi.set(__self__, "token_id", token_id)

    @property
    @pulumi.getter
    def cloud(self) -> str:
        """
        (String)
        """
        return pulumi.get(self, "cloud")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> int:
        """
        (Number)
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="deviceId")
    def device_id(self) -> str:
        """
        (String)
        """
        return pulumi.get(self, "device_id")

    @property
    @pulumi.getter(name="deviceName")
    def device_name(self) -> str:
        """
        (String)
        """
        return pulumi.get(self, "device_name")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (String)
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> int:
        """
        (Number)
        """
        return pulumi.get(self, "org_id")

    @property
    @pulumi.getter
    def token(self) -> str:
        """
        (String)
        """
        return pulumi.get(self, "token")

    @property
    @pulumi.getter(name="tokenExpiry")
    def token_expiry(self) -> int:
        """
        (Number)
        """
        return pulumi.get(self, "token_expiry")

    @property
    @pulumi.getter(name="tokenId")
    def token_id(self) -> str:
        """
        (String)
        """
        return pulumi.get(self, "token_id")


@pulumi.output_type
class GetAdminUsersRoleResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, str],
                 id: int,
                 name: str):
        """
        :param int id: The ID of the admin user to be exported.
        :param str name: (String)
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, str]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        The ID of the admin user to be exported.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (String)
        """
        return pulumi.get(self, "name")


