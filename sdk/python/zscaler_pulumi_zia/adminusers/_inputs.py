# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'AdminUsersAdminScopeArgs',
    'AdminUsersAdminScopeScopeEntitiesArgs',
    'AdminUsersAdminScopeScopeGroupMemberEntitiesArgs',
    'AdminUsersRoleArgs',
]

@pulumi.input_type
class AdminUsersAdminScopeArgs:
    def __init__(__self__, *,
                 scope_entities: Optional[pulumi.Input['AdminUsersAdminScopeScopeEntitiesArgs']] = None,
                 scope_group_member_entities: Optional[pulumi.Input['AdminUsersAdminScopeScopeGroupMemberEntitiesArgs']] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input['AdminUsersAdminScopeScopeEntitiesArgs'] scope_entities: Based on the admin scope type, the entities can be the ID/name pair of departments, locations, or location groups.
        :param pulumi.Input['AdminUsersAdminScopeScopeGroupMemberEntitiesArgs'] scope_group_member_entities: Only applicable for the LOCATION_GROUP admin scope type, in which case this attribute gives the list of ID/name pairs of locations within the location group.
        :param pulumi.Input[str] type: The admin scope type. The attribute name is subject to change.
        """
        if scope_entities is not None:
            pulumi.set(__self__, "scope_entities", scope_entities)
        if scope_group_member_entities is not None:
            pulumi.set(__self__, "scope_group_member_entities", scope_group_member_entities)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="scopeEntities")
    def scope_entities(self) -> Optional[pulumi.Input['AdminUsersAdminScopeScopeEntitiesArgs']]:
        """
        Based on the admin scope type, the entities can be the ID/name pair of departments, locations, or location groups.
        """
        return pulumi.get(self, "scope_entities")

    @scope_entities.setter
    def scope_entities(self, value: Optional[pulumi.Input['AdminUsersAdminScopeScopeEntitiesArgs']]):
        pulumi.set(self, "scope_entities", value)

    @property
    @pulumi.getter(name="scopeGroupMemberEntities")
    def scope_group_member_entities(self) -> Optional[pulumi.Input['AdminUsersAdminScopeScopeGroupMemberEntitiesArgs']]:
        """
        Only applicable for the LOCATION_GROUP admin scope type, in which case this attribute gives the list of ID/name pairs of locations within the location group.
        """
        return pulumi.get(self, "scope_group_member_entities")

    @scope_group_member_entities.setter
    def scope_group_member_entities(self, value: Optional[pulumi.Input['AdminUsersAdminScopeScopeGroupMemberEntitiesArgs']]):
        pulumi.set(self, "scope_group_member_entities", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        The admin scope type. The attribute name is subject to change.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class AdminUsersAdminScopeScopeEntitiesArgs:
    def __init__(__self__, *,
                 ids: pulumi.Input[Sequence[pulumi.Input[int]]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[int]]] ids: Identifier that uniquely identifies an entity
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> pulumi.Input[Sequence[pulumi.Input[int]]]:
        """
        Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "ids")

    @ids.setter
    def ids(self, value: pulumi.Input[Sequence[pulumi.Input[int]]]):
        pulumi.set(self, "ids", value)


@pulumi.input_type
class AdminUsersAdminScopeScopeGroupMemberEntitiesArgs:
    def __init__(__self__, *,
                 ids: pulumi.Input[Sequence[pulumi.Input[int]]]):
        """
        :param pulumi.Input[Sequence[pulumi.Input[int]]] ids: Identifier that uniquely identifies an entity
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> pulumi.Input[Sequence[pulumi.Input[int]]]:
        """
        Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "ids")

    @ids.setter
    def ids(self, value: pulumi.Input[Sequence[pulumi.Input[int]]]):
        pulumi.set(self, "ids", value)


@pulumi.input_type
class AdminUsersRoleArgs:
    def __init__(__self__, *,
                 extensions: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 id: Optional[pulumi.Input[int]] = None,
                 is_name_l10n_tag: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] id: Identifier that uniquely identifies an entity
        :param pulumi.Input[str] name: The configured name of the entity
        """
        if extensions is not None:
            pulumi.set(__self__, "extensions", extensions)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_name_l10n_tag is not None:
            pulumi.set(__self__, "is_name_l10n_tag", is_name_l10n_tag)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "extensions")

    @extensions.setter
    def extensions(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "extensions", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[int]]:
        """
        Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter(name="isNameL10nTag")
    def is_name_l10n_tag(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "is_name_l10n_tag")

    @is_name_l10n_tag.setter
    def is_name_l10n_tag(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_name_l10n_tag", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The configured name of the entity
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


