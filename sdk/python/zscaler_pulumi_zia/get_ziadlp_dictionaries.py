# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetZIADLPDictionariesResult',
    'AwaitableGetZIADLPDictionariesResult',
    'get_ziadlp_dictionaries',
    'get_ziadlp_dictionaries_output',
]

@pulumi.output_type
class GetZIADLPDictionariesResult:
    """
    A collection of values returned by getZIADLPDictionaries.
    """
    def __init__(__self__, confidence_threshold=None, custom_phrase_match_type=None, description=None, dictionary_type=None, exact_data_match_details=None, id=None, idm_profile_match_accuracies=None, name=None, name_l10n_tag=None, patterns=None, phrases=None, proximity=None, threshold_type=None):
        if confidence_threshold and not isinstance(confidence_threshold, str):
            raise TypeError("Expected argument 'confidence_threshold' to be a str")
        pulumi.set(__self__, "confidence_threshold", confidence_threshold)
        if custom_phrase_match_type and not isinstance(custom_phrase_match_type, str):
            raise TypeError("Expected argument 'custom_phrase_match_type' to be a str")
        pulumi.set(__self__, "custom_phrase_match_type", custom_phrase_match_type)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if dictionary_type and not isinstance(dictionary_type, str):
            raise TypeError("Expected argument 'dictionary_type' to be a str")
        pulumi.set(__self__, "dictionary_type", dictionary_type)
        if exact_data_match_details and not isinstance(exact_data_match_details, list):
            raise TypeError("Expected argument 'exact_data_match_details' to be a list")
        pulumi.set(__self__, "exact_data_match_details", exact_data_match_details)
        if id and not isinstance(id, int):
            raise TypeError("Expected argument 'id' to be a int")
        pulumi.set(__self__, "id", id)
        if idm_profile_match_accuracies and not isinstance(idm_profile_match_accuracies, list):
            raise TypeError("Expected argument 'idm_profile_match_accuracies' to be a list")
        pulumi.set(__self__, "idm_profile_match_accuracies", idm_profile_match_accuracies)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if name_l10n_tag and not isinstance(name_l10n_tag, bool):
            raise TypeError("Expected argument 'name_l10n_tag' to be a bool")
        pulumi.set(__self__, "name_l10n_tag", name_l10n_tag)
        if patterns and not isinstance(patterns, list):
            raise TypeError("Expected argument 'patterns' to be a list")
        pulumi.set(__self__, "patterns", patterns)
        if phrases and not isinstance(phrases, list):
            raise TypeError("Expected argument 'phrases' to be a list")
        pulumi.set(__self__, "phrases", phrases)
        if proximity and not isinstance(proximity, int):
            raise TypeError("Expected argument 'proximity' to be a int")
        pulumi.set(__self__, "proximity", proximity)
        if threshold_type and not isinstance(threshold_type, str):
            raise TypeError("Expected argument 'threshold_type' to be a str")
        pulumi.set(__self__, "threshold_type", threshold_type)

    @property
    @pulumi.getter(name="confidenceThreshold")
    def confidence_threshold(self) -> str:
        """
        (String) he DLP confidence threshold. [`CONFIDENCE_LEVEL_LOW`, `CONFIDENCE_LEVEL_MEDIUM` `CONFIDENCE_LEVEL_HIGH` ]
        """
        return pulumi.get(self, "confidence_threshold")

    @property
    @pulumi.getter(name="customPhraseMatchType")
    def custom_phrase_match_type(self) -> str:
        """
        (String) The DLP custom phrase match type. [ `MATCH_ALL_CUSTOM_PHRASE_PATTERN_DICTIONARY`, `MATCH_ANY_CUSTOM_PHRASE_PATTERN_DICTIONARY` ]
        """
        return pulumi.get(self, "custom_phrase_match_type")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="dictionaryType")
    def dictionary_type(self) -> str:
        """
        (String) The DLP dictionary type. The cloud service API only supports custom DLP dictionaries that are using the `PATTERNS_AND_PHRASES` type.
        """
        return pulumi.get(self, "dictionary_type")

    @property
    @pulumi.getter(name="exactDataMatchDetails")
    def exact_data_match_details(self) -> Sequence['outputs.GetZIADLPDictionariesExactDataMatchDetailResult']:
        return pulumi.get(self, "exact_data_match_details")

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="idmProfileMatchAccuracies")
    def idm_profile_match_accuracies(self) -> Sequence['outputs.GetZIADLPDictionariesIdmProfileMatchAccuracyResult']:
        return pulumi.get(self, "idm_profile_match_accuracies")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nameL10nTag")
    def name_l10n_tag(self) -> bool:
        """
        (Boolean) Indicates whether the name is localized or not. This is always set to True for predefined DLP dictionaries.
        """
        return pulumi.get(self, "name_l10n_tag")

    @property
    @pulumi.getter
    def patterns(self) -> Sequence['outputs.GetZIADLPDictionariesPatternResult']:
        return pulumi.get(self, "patterns")

    @property
    @pulumi.getter
    def phrases(self) -> Sequence['outputs.GetZIADLPDictionariesPhraseResult']:
        return pulumi.get(self, "phrases")

    @property
    @pulumi.getter
    def proximity(self) -> int:
        return pulumi.get(self, "proximity")

    @property
    @pulumi.getter(name="thresholdType")
    def threshold_type(self) -> str:
        return pulumi.get(self, "threshold_type")


class AwaitableGetZIADLPDictionariesResult(GetZIADLPDictionariesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetZIADLPDictionariesResult(
            confidence_threshold=self.confidence_threshold,
            custom_phrase_match_type=self.custom_phrase_match_type,
            description=self.description,
            dictionary_type=self.dictionary_type,
            exact_data_match_details=self.exact_data_match_details,
            id=self.id,
            idm_profile_match_accuracies=self.idm_profile_match_accuracies,
            name=self.name,
            name_l10n_tag=self.name_l10n_tag,
            patterns=self.patterns,
            phrases=self.phrases,
            proximity=self.proximity,
            threshold_type=self.threshold_type)


def get_ziadlp_dictionaries(id: Optional[int] = None,
                            name: Optional[str] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetZIADLPDictionariesResult:
    """
    Use the **zia_dlp_dictionaries** data source to get information about a DLP dictionary option available in the Zscaler Internet Access.

    ```python
    import pulumi
    import pulumi_zia as zia

    example = zia.get_ziadlp_dictionaries(name="SALESFORCE_REPORT_LEAKAGE")
    ```


    :param int id: Unique identifier for the DLP dictionary
    :param str name: DLP dictionary name
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('zia:index/getZIADLPDictionaries:getZIADLPDictionaries', __args__, opts=opts, typ=GetZIADLPDictionariesResult).value

    return AwaitableGetZIADLPDictionariesResult(
        confidence_threshold=__ret__.confidence_threshold,
        custom_phrase_match_type=__ret__.custom_phrase_match_type,
        description=__ret__.description,
        dictionary_type=__ret__.dictionary_type,
        exact_data_match_details=__ret__.exact_data_match_details,
        id=__ret__.id,
        idm_profile_match_accuracies=__ret__.idm_profile_match_accuracies,
        name=__ret__.name,
        name_l10n_tag=__ret__.name_l10n_tag,
        patterns=__ret__.patterns,
        phrases=__ret__.phrases,
        proximity=__ret__.proximity,
        threshold_type=__ret__.threshold_type)


@_utilities.lift_output_func(get_ziadlp_dictionaries)
def get_ziadlp_dictionaries_output(id: Optional[pulumi.Input[Optional[int]]] = None,
                                   name: Optional[pulumi.Input[Optional[str]]] = None,
                                   opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetZIADLPDictionariesResult]:
    """
    Use the **zia_dlp_dictionaries** data source to get information about a DLP dictionary option available in the Zscaler Internet Access.

    ```python
    import pulumi
    import pulumi_zia as zia

    example = zia.get_ziadlp_dictionaries(name="SALESFORCE_REPORT_LEAKAGE")
    ```


    :param int id: Unique identifier for the DLP dictionary
    :param str name: DLP dictionary name
    """
    ...
