# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'ZIAAdminUsersAdminScope',
    'ZIAAdminUsersAdminScopeScopeEntities',
    'ZIAAdminUsersAdminScopeScopeGroupMemberEntities',
    'ZIAAdminUsersRole',
    'ZIADLPDictionariesExactDataMatchDetail',
    'ZIADLPDictionariesIdmProfileMatchAccuracy',
    'ZIADLPDictionariesIdmProfileMatchAccuracyAdpIdmProfile',
    'ZIADLPDictionariesPattern',
    'ZIADLPDictionariesPhrase',
    'ZIADLPWebRulesAuditor',
    'ZIADLPWebRulesDepartments',
    'ZIADLPWebRulesDlpEngines',
    'ZIADLPWebRulesExcludedDepartments',
    'ZIADLPWebRulesExcludedGroups',
    'ZIADLPWebRulesExcludedUsers',
    'ZIADLPWebRulesGroups',
    'ZIADLPWebRulesIcapServer',
    'ZIADLPWebRulesLabels',
    'ZIADLPWebRulesLocationGroups',
    'ZIADLPWebRulesLocations',
    'ZIADLPWebRulesNotificationTemplate',
    'ZIADLPWebRulesTimeWindows',
    'ZIADLPWebRulesUrlCategories',
    'ZIADLPWebRulesUsers',
    'ZIAFirewallFilteringNetworkServicesDestTcpPort',
    'ZIAFirewallFilteringNetworkServicesDestUdpPort',
    'ZIAFirewallFilteringNetworkServicesSrcTcpPort',
    'ZIAFirewallFilteringNetworkServicesSrcUdpPort',
    'ZIAFirewallFilteringRuleAppServiceGroups',
    'ZIAFirewallFilteringRuleAppServices',
    'ZIAFirewallFilteringRuleDepartments',
    'ZIAFirewallFilteringRuleDestIpGroups',
    'ZIAFirewallFilteringRuleGroups',
    'ZIAFirewallFilteringRuleLabels',
    'ZIAFirewallFilteringRuleLastModifiedBy',
    'ZIAFirewallFilteringRuleLocationGroups',
    'ZIAFirewallFilteringRuleLocations',
    'ZIAFirewallFilteringRuleNwApplicationGroups',
    'ZIAFirewallFilteringRuleNwServiceGroups',
    'ZIAFirewallFilteringRuleNwServices',
    'ZIAFirewallFilteringRuleSrcIpGroups',
    'ZIAFirewallFilteringRuleTimeWindows',
    'ZIAFirewallFilteringRuleUsers',
    'ZIAFirewallFilteringServiceGroupsService',
    'ZIALocationManagementVpnCredential',
    'ZIARuleLabelsCreatedBy',
    'ZIARuleLabelsLastModifiedBy',
    'ZIATrafficForwardingGRETunnelLastModifiedBy',
    'ZIATrafficForwardingGRETunnelPrimaryDestVip',
    'ZIATrafficForwardingGRETunnelSecondaryDestVip',
    'ZIATrafficForwardingStaticIPLastModifiedBy',
    'ZIATrafficForwardingStaticIPManagedBy',
    'ZIAURLCategoriesScope',
    'ZIAURLCategoriesScopeScopeEntities',
    'ZIAURLCategoriesScopeScopeGroupMemberEntities',
    'ZIAURLCategoriesUrlKeywordCounts',
    'ZIAURLFilteringRulesDepartments',
    'ZIAURLFilteringRulesDeviceGroups',
    'ZIAURLFilteringRulesDevices',
    'ZIAURLFilteringRulesGroups',
    'ZIAURLFilteringRulesLabels',
    'ZIAURLFilteringRulesLastModifiedBy',
    'ZIAURLFilteringRulesLocationGroups',
    'ZIAURLFilteringRulesLocations',
    'ZIAURLFilteringRulesOverrideGroups',
    'ZIAURLFilteringRulesOverrideUsers',
    'ZIAURLFilteringRulesTimeWindows',
    'ZIAURLFilteringRulesUsers',
    'ZIAUserManagementDepartment',
    'ZIAUserManagementGroups',
    'GetZIAAdminUsersAdminScopeResult',
    'GetZIAAdminUsersAdminScopeScopeEntityResult',
    'GetZIAAdminUsersAdminScopeScopeGroupMemberEntityResult',
    'GetZIAAdminUsersExecMobileAppTokenResult',
    'GetZIAAdminUsersRoleResult',
    'GetZIADLPDictionariesExactDataMatchDetailResult',
    'GetZIADLPDictionariesIdmProfileMatchAccuracyResult',
    'GetZIADLPDictionariesIdmProfileMatchAccuracyAdpIdmProfileResult',
    'GetZIADLPDictionariesPatternResult',
    'GetZIADLPDictionariesPhraseResult',
    'GetZIADLPWebRulesAuditorResult',
    'GetZIADLPWebRulesDepartmentResult',
    'GetZIADLPWebRulesDlpEngineResult',
    'GetZIADLPWebRulesExcludedDepartmentResult',
    'GetZIADLPWebRulesExcludedGroupResult',
    'GetZIADLPWebRulesExcludedUserResult',
    'GetZIADLPWebRulesGroupResult',
    'GetZIADLPWebRulesIcapServerResult',
    'GetZIADLPWebRulesLabelResult',
    'GetZIADLPWebRulesLastModifiedByResult',
    'GetZIADLPWebRulesLocationResult',
    'GetZIADLPWebRulesLocationGroupResult',
    'GetZIADLPWebRulesNotificationTemplateResult',
    'GetZIADLPWebRulesTimeWindowResult',
    'GetZIADLPWebRulesUrlCategoryResult',
    'GetZIADLPWebRulesUserResult',
    'GetZIAFirewallFilteringNetworkServiceGroupsServiceResult',
    'GetZIAFirewallFilteringNetworkServicesDestTcpPortResult',
    'GetZIAFirewallFilteringNetworkServicesDestUdpPortResult',
    'GetZIAFirewallFilteringNetworkServicesSrcTcpPortResult',
    'GetZIAFirewallFilteringNetworkServicesSrcUdpPortResult',
    'GetZIAFirewallFilteringRuleAppServiceResult',
    'GetZIAFirewallFilteringRuleAppServiceGroupResult',
    'GetZIAFirewallFilteringRuleDepartmentResult',
    'GetZIAFirewallFilteringRuleGroupResult',
    'GetZIAFirewallFilteringRuleLabelResult',
    'GetZIAFirewallFilteringRuleLastModifiedByResult',
    'GetZIAFirewallFilteringRuleLocationResult',
    'GetZIAFirewallFilteringRuleLocationGroupResult',
    'GetZIAFirewallFilteringRuleNwApplicationGroupResult',
    'GetZIAFirewallFilteringRuleNwServiceResult',
    'GetZIAFirewallFilteringRuleNwServiceGroupResult',
    'GetZIAFirewallFilteringRuleTimeWindowResult',
    'GetZIAFirewallFilteringRuleUserResult',
    'GetZIALocationGroupsDynamicLocationGroupCriteriaResult',
    'GetZIALocationGroupsDynamicLocationGroupCriteriaCityResult',
    'GetZIALocationGroupsDynamicLocationGroupCriteriaManagedByResult',
    'GetZIALocationGroupsDynamicLocationGroupCriteriaNameResult',
    'GetZIALocationGroupsLastModUserResult',
    'GetZIALocationGroupsLocationResult',
    'GetZIALocationManagementVpnCredentialResult',
    'GetZIALocationManagementVpnCredentialLocationResult',
    'GetZIALocationManagementVpnCredentialManagedByResult',
    'GetZIARuleLabelsCreatedByResult',
    'GetZIARuleLabelsLastModifiedByResult',
    'GetZIATrafficForwardingGREInternalIPRangeListResult',
    'GetZIATrafficForwardingGRETunnelLastModifiedByResult',
    'GetZIATrafficForwardingGRETunnelManagedByResult',
    'GetZIATrafficForwardingGRETunnelPrimaryDestVipResult',
    'GetZIATrafficForwardingGRETunnelSecondaryDestVipResult',
    'GetZIATrafficForwardingStaticIPLastModifiedByResult',
    'GetZIATrafficForwardingStaticIPManagedByResult',
    'GetZIATrafficForwardingVIPRecommendedListListResult',
    'GetZIATrafficForwardingVPNCredentialsLocationResult',
    'GetZIATrafficForwardingVPNCredentialsManagedByResult',
    'GetZIAURLCategoriesScopeResult',
    'GetZIAURLCategoriesScopeScopeEntityResult',
    'GetZIAURLCategoriesScopeScopeGroupMemberEntityResult',
    'GetZIAURLCategoriesUrlKeywordCountResult',
    'GetZIAURLFilteringRulesDepartmentResult',
    'GetZIAURLFilteringRulesDeviceResult',
    'GetZIAURLFilteringRulesDeviceGroupResult',
    'GetZIAURLFilteringRulesGroupResult',
    'GetZIAURLFilteringRulesLabelResult',
    'GetZIAURLFilteringRulesLastModifiedByResult',
    'GetZIAURLFilteringRulesLocationResult',
    'GetZIAURLFilteringRulesLocationGroupResult',
    'GetZIAURLFilteringRulesOverrideGroupResult',
    'GetZIAURLFilteringRulesOverrideUserResult',
    'GetZIAURLFilteringRulesTimeWindowResult',
    'GetZIAURLFilteringRulesUserResult',
    'GetZIAUserManagementDepartmentResult',
    'GetZIAUserManagementGroupResult',
]

@pulumi.output_type
class ZIAAdminUsersAdminScope(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "scopeEntities":
            suggest = "scope_entities"
        elif key == "scopeGroupMemberEntities":
            suggest = "scope_group_member_entities"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ZIAAdminUsersAdminScope. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ZIAAdminUsersAdminScope.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ZIAAdminUsersAdminScope.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 scope_entities: Optional['outputs.ZIAAdminUsersAdminScopeScopeEntities'] = None,
                 scope_group_member_entities: Optional['outputs.ZIAAdminUsersAdminScopeScopeGroupMemberEntities'] = None,
                 type: Optional[str] = None):
        """
        :param 'ZIAAdminUsersAdminScopeScopeEntitiesArgs' scope_entities: Based on the admin scope type, the entities can be the ID/name pair of departments, locations, or location groups.
        :param 'ZIAAdminUsersAdminScopeScopeGroupMemberEntitiesArgs' scope_group_member_entities: Only applicable for the LOCATION_GROUP admin scope type, in which case this attribute gives the list of ID/name pairs of locations within the location group.
        :param str type: The admin scope type. The attribute name is subject to change.
        """
        if scope_entities is not None:
            pulumi.set(__self__, "scope_entities", scope_entities)
        if scope_group_member_entities is not None:
            pulumi.set(__self__, "scope_group_member_entities", scope_group_member_entities)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="scopeEntities")
    def scope_entities(self) -> Optional['outputs.ZIAAdminUsersAdminScopeScopeEntities']:
        """
        Based on the admin scope type, the entities can be the ID/name pair of departments, locations, or location groups.
        """
        return pulumi.get(self, "scope_entities")

    @property
    @pulumi.getter(name="scopeGroupMemberEntities")
    def scope_group_member_entities(self) -> Optional['outputs.ZIAAdminUsersAdminScopeScopeGroupMemberEntities']:
        """
        Only applicable for the LOCATION_GROUP admin scope type, in which case this attribute gives the list of ID/name pairs of locations within the location group.
        """
        return pulumi.get(self, "scope_group_member_entities")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        The admin scope type. The attribute name is subject to change.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class ZIAAdminUsersAdminScopeScopeEntities(dict):
    def __init__(__self__, *,
                 ids: Sequence[int]):
        """
        :param Sequence[int] ids: Identifier that uniquely identifies an entity
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Sequence[int]:
        """
        Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class ZIAAdminUsersAdminScopeScopeGroupMemberEntities(dict):
    def __init__(__self__, *,
                 ids: Sequence[int]):
        """
        :param Sequence[int] ids: Identifier that uniquely identifies an entity
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Sequence[int]:
        """
        Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class ZIAAdminUsersRole(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "isNameL10nTag":
            suggest = "is_name_l10n_tag"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ZIAAdminUsersRole. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ZIAAdminUsersRole.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ZIAAdminUsersRole.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 extensions: Optional[Mapping[str, str]] = None,
                 id: Optional[int] = None,
                 is_name_l10n_tag: Optional[bool] = None,
                 name: Optional[str] = None):
        """
        :param int id: Identifier that uniquely identifies an entity
        :param str name: The configured name of the entity
        """
        if extensions is not None:
            pulumi.set(__self__, "extensions", extensions)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if is_name_l10n_tag is not None:
            pulumi.set(__self__, "is_name_l10n_tag", is_name_l10n_tag)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isNameL10nTag")
    def is_name_l10n_tag(self) -> Optional[bool]:
        return pulumi.get(self, "is_name_l10n_tag")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The configured name of the entity
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ZIADLPDictionariesExactDataMatchDetail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dictionaryEdmMappingId":
            suggest = "dictionary_edm_mapping_id"
        elif key == "primaryField":
            suggest = "primary_field"
        elif key == "schemaId":
            suggest = "schema_id"
        elif key == "secondaryFieldMatchOn":
            suggest = "secondary_field_match_on"
        elif key == "secondaryFields":
            suggest = "secondary_fields"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ZIADLPDictionariesExactDataMatchDetail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ZIADLPDictionariesExactDataMatchDetail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ZIADLPDictionariesExactDataMatchDetail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dictionary_edm_mapping_id: Optional[int] = None,
                 primary_field: Optional[int] = None,
                 schema_id: Optional[int] = None,
                 secondary_field_match_on: Optional[str] = None,
                 secondary_fields: Optional[Sequence[int]] = None):
        """
        :param int dictionary_edm_mapping_id: The unique identifier for the EDM mapping.
        :param int primary_field: The EDM template's primary field.
        :param int schema_id: The unique identifier for the EDM template (or schema).
        :param str secondary_field_match_on: The EDM secondary field to match on.
               - `"MATCHON_NONE"`
               - `"MATCHON_ANY_1"`
               - `"MATCHON_ANY_2"`
               - `"MATCHON_ANY_3"`
               - `"MATCHON_ANY_4"`
               - `"MATCHON_ANY_5"`
               - `"MATCHON_ANY_6"`
               - `"MATCHON_ANY_7"`
               - `"MATCHON_ANY_8"`
               - `"MATCHON_ANY_9"`
               - `"MATCHON_ANY_10"`
               - `"MATCHON_ANY_11"`
               - `"MATCHON_ANY_12"`
               - `"MATCHON_ANY_13"`
               - `"MATCHON_ANY_14"`
               - `"MATCHON_ANY_15"`
               - `"MATCHON_ALL"`
        :param Sequence[int] secondary_fields: The EDM template's secondary fields.
        """
        if dictionary_edm_mapping_id is not None:
            pulumi.set(__self__, "dictionary_edm_mapping_id", dictionary_edm_mapping_id)
        if primary_field is not None:
            pulumi.set(__self__, "primary_field", primary_field)
        if schema_id is not None:
            pulumi.set(__self__, "schema_id", schema_id)
        if secondary_field_match_on is not None:
            pulumi.set(__self__, "secondary_field_match_on", secondary_field_match_on)
        if secondary_fields is not None:
            pulumi.set(__self__, "secondary_fields", secondary_fields)

    @property
    @pulumi.getter(name="dictionaryEdmMappingId")
    def dictionary_edm_mapping_id(self) -> Optional[int]:
        """
        The unique identifier for the EDM mapping.
        """
        return pulumi.get(self, "dictionary_edm_mapping_id")

    @property
    @pulumi.getter(name="primaryField")
    def primary_field(self) -> Optional[int]:
        """
        The EDM template's primary field.
        """
        return pulumi.get(self, "primary_field")

    @property
    @pulumi.getter(name="schemaId")
    def schema_id(self) -> Optional[int]:
        """
        The unique identifier for the EDM template (or schema).
        """
        return pulumi.get(self, "schema_id")

    @property
    @pulumi.getter(name="secondaryFieldMatchOn")
    def secondary_field_match_on(self) -> Optional[str]:
        """
        The EDM secondary field to match on.
        - `"MATCHON_NONE"`
        - `"MATCHON_ANY_1"`
        - `"MATCHON_ANY_2"`
        - `"MATCHON_ANY_3"`
        - `"MATCHON_ANY_4"`
        - `"MATCHON_ANY_5"`
        - `"MATCHON_ANY_6"`
        - `"MATCHON_ANY_7"`
        - `"MATCHON_ANY_8"`
        - `"MATCHON_ANY_9"`
        - `"MATCHON_ANY_10"`
        - `"MATCHON_ANY_11"`
        - `"MATCHON_ANY_12"`
        - `"MATCHON_ANY_13"`
        - `"MATCHON_ANY_14"`
        - `"MATCHON_ANY_15"`
        - `"MATCHON_ALL"`
        """
        return pulumi.get(self, "secondary_field_match_on")

    @property
    @pulumi.getter(name="secondaryFields")
    def secondary_fields(self) -> Optional[Sequence[int]]:
        """
        The EDM template's secondary fields.
        """
        return pulumi.get(self, "secondary_fields")


@pulumi.output_type
class ZIADLPDictionariesIdmProfileMatchAccuracy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "adpIdmProfile":
            suggest = "adp_idm_profile"
        elif key == "matchAccuracy":
            suggest = "match_accuracy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ZIADLPDictionariesIdmProfileMatchAccuracy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ZIADLPDictionariesIdmProfileMatchAccuracy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ZIADLPDictionariesIdmProfileMatchAccuracy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 adp_idm_profile: Optional['outputs.ZIADLPDictionariesIdmProfileMatchAccuracyAdpIdmProfile'] = None,
                 match_accuracy: Optional[str] = None):
        """
        :param 'ZIADLPDictionariesIdmProfileMatchAccuracyAdpIdmProfileArgs' adp_idm_profile: The IDM template reference.
        :param str match_accuracy: The IDM template match accuracy.
               - `"LOW"`
               - `"MEDIUM"`
               - `"HEAVY"`
        """
        if adp_idm_profile is not None:
            pulumi.set(__self__, "adp_idm_profile", adp_idm_profile)
        if match_accuracy is not None:
            pulumi.set(__self__, "match_accuracy", match_accuracy)

    @property
    @pulumi.getter(name="adpIdmProfile")
    def adp_idm_profile(self) -> Optional['outputs.ZIADLPDictionariesIdmProfileMatchAccuracyAdpIdmProfile']:
        """
        The IDM template reference.
        """
        return pulumi.get(self, "adp_idm_profile")

    @property
    @pulumi.getter(name="matchAccuracy")
    def match_accuracy(self) -> Optional[str]:
        """
        The IDM template match accuracy.
        - `"LOW"`
        - `"MEDIUM"`
        - `"HEAVY"`
        """
        return pulumi.get(self, "match_accuracy")


@pulumi.output_type
class ZIADLPDictionariesIdmProfileMatchAccuracyAdpIdmProfile(dict):
    def __init__(__self__, *,
                 extensions: Optional[Mapping[str, str]] = None,
                 id: Optional[int] = None):
        if extensions is not None:
            pulumi.set(__self__, "extensions", extensions)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def extensions(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")


@pulumi.output_type
class ZIADLPDictionariesPattern(dict):
    def __init__(__self__, *,
                 action: Optional[str] = None,
                 pattern: Optional[str] = None):
        """
        :param str action: The action applied to a DLP dictionary using patterns. The following values are supported:
        :param str pattern: DLP dictionary pattern
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if pattern is not None:
            pulumi.set(__self__, "pattern", pattern)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        """
        The action applied to a DLP dictionary using patterns. The following values are supported:
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def pattern(self) -> Optional[str]:
        """
        DLP dictionary pattern
        """
        return pulumi.get(self, "pattern")


@pulumi.output_type
class ZIADLPDictionariesPhrase(dict):
    def __init__(__self__, *,
                 action: Optional[str] = None,
                 phrase: Optional[str] = None):
        """
        :param str action: The action applied to a DLP dictionary using patterns. The following values are supported:
        :param str phrase: DLP dictionary phrase
        """
        if action is not None:
            pulumi.set(__self__, "action", action)
        if phrase is not None:
            pulumi.set(__self__, "phrase", phrase)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        """
        The action applied to a DLP dictionary using patterns. The following values are supported:
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def phrase(self) -> Optional[str]:
        """
        DLP dictionary phrase
        """
        return pulumi.get(self, "phrase")


@pulumi.output_type
class ZIADLPWebRulesAuditor(dict):
    def __init__(__self__, *,
                 id: int):
        """
        :param int id: Identifier that uniquely identifies an entity
        """
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class ZIADLPWebRulesDepartments(dict):
    def __init__(__self__, *,
                 ids: Sequence[int]):
        """
        :param Sequence[int] ids: Identifier that uniquely identifies an entity
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Sequence[int]:
        """
        Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class ZIADLPWebRulesDlpEngines(dict):
    def __init__(__self__, *,
                 ids: Sequence[int]):
        """
        :param Sequence[int] ids: Identifier that uniquely identifies an entity
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Sequence[int]:
        """
        Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class ZIADLPWebRulesExcludedDepartments(dict):
    def __init__(__self__, *,
                 ids: Sequence[int]):
        """
        :param Sequence[int] ids: Identifier that uniquely identifies an entity
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Sequence[int]:
        """
        Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class ZIADLPWebRulesExcludedGroups(dict):
    def __init__(__self__, *,
                 ids: Sequence[int]):
        """
        :param Sequence[int] ids: Identifier that uniquely identifies an entity
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Sequence[int]:
        """
        Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class ZIADLPWebRulesExcludedUsers(dict):
    def __init__(__self__, *,
                 ids: Sequence[int]):
        """
        :param Sequence[int] ids: Identifier that uniquely identifies an entity
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Sequence[int]:
        """
        Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class ZIADLPWebRulesGroups(dict):
    def __init__(__self__, *,
                 ids: Sequence[int]):
        """
        :param Sequence[int] ids: Identifier that uniquely identifies an entity
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Sequence[int]:
        """
        Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class ZIADLPWebRulesIcapServer(dict):
    def __init__(__self__, *,
                 id: int):
        """
        :param int id: Identifier that uniquely identifies an entity
        """
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class ZIADLPWebRulesLabels(dict):
    def __init__(__self__, *,
                 ids: Sequence[int]):
        """
        :param Sequence[int] ids: Identifier that uniquely identifies an entity
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Sequence[int]:
        """
        Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class ZIADLPWebRulesLocationGroups(dict):
    def __init__(__self__, *,
                 ids: Sequence[int]):
        """
        :param Sequence[int] ids: Identifier that uniquely identifies an entity
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Sequence[int]:
        """
        Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class ZIADLPWebRulesLocations(dict):
    def __init__(__self__, *,
                 ids: Sequence[int]):
        """
        :param Sequence[int] ids: Identifier that uniquely identifies an entity
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Sequence[int]:
        """
        Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class ZIADLPWebRulesNotificationTemplate(dict):
    def __init__(__self__, *,
                 id: int):
        """
        :param int id: Identifier that uniquely identifies an entity
        """
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class ZIADLPWebRulesTimeWindows(dict):
    def __init__(__self__, *,
                 ids: Sequence[int]):
        """
        :param Sequence[int] ids: Identifier that uniquely identifies an entity
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Sequence[int]:
        """
        Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class ZIADLPWebRulesUrlCategories(dict):
    def __init__(__self__, *,
                 ids: Sequence[int]):
        """
        :param Sequence[int] ids: Identifier that uniquely identifies an entity
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Sequence[int]:
        """
        Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class ZIADLPWebRulesUsers(dict):
    def __init__(__self__, *,
                 ids: Sequence[int]):
        """
        :param Sequence[int] ids: Identifier that uniquely identifies an entity
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Sequence[int]:
        """
        Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class ZIAFirewallFilteringNetworkServicesDestTcpPort(dict):
    def __init__(__self__, *,
                 end: Optional[int] = None,
                 start: Optional[int] = None):
        if end is not None:
            pulumi.set(__self__, "end", end)
        if start is not None:
            pulumi.set(__self__, "start", start)

    @property
    @pulumi.getter
    def end(self) -> Optional[int]:
        return pulumi.get(self, "end")

    @property
    @pulumi.getter
    def start(self) -> Optional[int]:
        return pulumi.get(self, "start")


@pulumi.output_type
class ZIAFirewallFilteringNetworkServicesDestUdpPort(dict):
    def __init__(__self__, *,
                 end: Optional[int] = None,
                 start: Optional[int] = None):
        if end is not None:
            pulumi.set(__self__, "end", end)
        if start is not None:
            pulumi.set(__self__, "start", start)

    @property
    @pulumi.getter
    def end(self) -> Optional[int]:
        return pulumi.get(self, "end")

    @property
    @pulumi.getter
    def start(self) -> Optional[int]:
        return pulumi.get(self, "start")


@pulumi.output_type
class ZIAFirewallFilteringNetworkServicesSrcTcpPort(dict):
    def __init__(__self__, *,
                 end: Optional[int] = None,
                 start: Optional[int] = None):
        if end is not None:
            pulumi.set(__self__, "end", end)
        if start is not None:
            pulumi.set(__self__, "start", start)

    @property
    @pulumi.getter
    def end(self) -> Optional[int]:
        return pulumi.get(self, "end")

    @property
    @pulumi.getter
    def start(self) -> Optional[int]:
        return pulumi.get(self, "start")


@pulumi.output_type
class ZIAFirewallFilteringNetworkServicesSrcUdpPort(dict):
    def __init__(__self__, *,
                 end: Optional[int] = None,
                 start: Optional[int] = None):
        if end is not None:
            pulumi.set(__self__, "end", end)
        if start is not None:
            pulumi.set(__self__, "start", start)

    @property
    @pulumi.getter
    def end(self) -> Optional[int]:
        return pulumi.get(self, "end")

    @property
    @pulumi.getter
    def start(self) -> Optional[int]:
        return pulumi.get(self, "start")


@pulumi.output_type
class ZIAFirewallFilteringRuleAppServiceGroups(dict):
    def __init__(__self__, *,
                 ids: Sequence[int]):
        """
        :param Sequence[int] ids: Identifier that uniquely identifies an entity
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Sequence[int]:
        """
        Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class ZIAFirewallFilteringRuleAppServices(dict):
    def __init__(__self__, *,
                 ids: Sequence[int]):
        """
        :param Sequence[int] ids: Identifier that uniquely identifies an entity
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Sequence[int]:
        """
        Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class ZIAFirewallFilteringRuleDepartments(dict):
    def __init__(__self__, *,
                 ids: Sequence[int]):
        """
        :param Sequence[int] ids: Identifier that uniquely identifies an entity
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Sequence[int]:
        """
        Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class ZIAFirewallFilteringRuleDestIpGroups(dict):
    def __init__(__self__, *,
                 ids: Sequence[int]):
        """
        :param Sequence[int] ids: Identifier that uniquely identifies an entity
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Sequence[int]:
        """
        Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class ZIAFirewallFilteringRuleGroups(dict):
    def __init__(__self__, *,
                 ids: Sequence[int]):
        """
        :param Sequence[int] ids: Identifier that uniquely identifies an entity
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Sequence[int]:
        """
        Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class ZIAFirewallFilteringRuleLabels(dict):
    def __init__(__self__, *,
                 ids: Sequence[int]):
        """
        :param Sequence[int] ids: Identifier that uniquely identifies an entity
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Sequence[int]:
        """
        Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class ZIAFirewallFilteringRuleLastModifiedBy(dict):
    def __init__(__self__, *,
                 extensions: Optional[Mapping[str, str]] = None,
                 id: Optional[int] = None):
        """
        :param int id: Identifier that uniquely identifies an entity
        """
        if extensions is not None:
            pulumi.set(__self__, "extensions", extensions)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def extensions(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class ZIAFirewallFilteringRuleLocationGroups(dict):
    def __init__(__self__, *,
                 ids: Sequence[int]):
        """
        :param Sequence[int] ids: Identifier that uniquely identifies an entity
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Sequence[int]:
        """
        Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class ZIAFirewallFilteringRuleLocations(dict):
    def __init__(__self__, *,
                 ids: Sequence[int]):
        """
        :param Sequence[int] ids: Identifier that uniquely identifies an entity
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Sequence[int]:
        """
        Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class ZIAFirewallFilteringRuleNwApplicationGroups(dict):
    def __init__(__self__, *,
                 ids: Sequence[int]):
        """
        :param Sequence[int] ids: Identifier that uniquely identifies an entity
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Sequence[int]:
        """
        Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class ZIAFirewallFilteringRuleNwServiceGroups(dict):
    def __init__(__self__, *,
                 ids: Sequence[int]):
        """
        :param Sequence[int] ids: Identifier that uniquely identifies an entity
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Sequence[int]:
        """
        Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class ZIAFirewallFilteringRuleNwServices(dict):
    def __init__(__self__, *,
                 ids: Sequence[int]):
        """
        :param Sequence[int] ids: Identifier that uniquely identifies an entity
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Sequence[int]:
        """
        Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class ZIAFirewallFilteringRuleSrcIpGroups(dict):
    def __init__(__self__, *,
                 ids: Sequence[int]):
        """
        :param Sequence[int] ids: Identifier that uniquely identifies an entity
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Sequence[int]:
        """
        Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class ZIAFirewallFilteringRuleTimeWindows(dict):
    def __init__(__self__, *,
                 ids: Sequence[int]):
        """
        :param Sequence[int] ids: Identifier that uniquely identifies an entity
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Sequence[int]:
        """
        Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class ZIAFirewallFilteringRuleUsers(dict):
    def __init__(__self__, *,
                 ids: Sequence[int]):
        """
        :param Sequence[int] ids: Identifier that uniquely identifies an entity
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Sequence[int]:
        """
        Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class ZIAFirewallFilteringServiceGroupsService(dict):
    def __init__(__self__, *,
                 ids: Sequence[int]):
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Sequence[int]:
        return pulumi.get(self, "ids")


@pulumi.output_type
class ZIALocationManagementVpnCredential(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipAddress":
            suggest = "ip_address"
        elif key == "preSharedKey":
            suggest = "pre_shared_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ZIALocationManagementVpnCredential. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ZIALocationManagementVpnCredential.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ZIALocationManagementVpnCredential.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 comments: Optional[str] = None,
                 fqdn: Optional[str] = None,
                 id: Optional[int] = None,
                 ip_address: Optional[str] = None,
                 pre_shared_key: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param int id: VPN credential resource id. The value is required if `ip_addresses` are not defined.
        """
        if comments is not None:
            pulumi.set(__self__, "comments", comments)
        if fqdn is not None:
            pulumi.set(__self__, "fqdn", fqdn)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if pre_shared_key is not None:
            pulumi.set(__self__, "pre_shared_key", pre_shared_key)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def comments(self) -> Optional[str]:
        return pulumi.get(self, "comments")

    @property
    @pulumi.getter
    def fqdn(self) -> Optional[str]:
        return pulumi.get(self, "fqdn")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        VPN credential resource id. The value is required if `ip_addresses` are not defined.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[str]:
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter(name="preSharedKey")
    def pre_shared_key(self) -> Optional[str]:
        return pulumi.get(self, "pre_shared_key")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class ZIARuleLabelsCreatedBy(dict):
    def __init__(__self__, *,
                 extensions: Optional[Mapping[str, str]] = None,
                 id: Optional[int] = None,
                 name: Optional[str] = None):
        """
        :param str name: The name of the devices to be created.
        """
        if extensions is not None:
            pulumi.set(__self__, "extensions", extensions)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of the devices to be created.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ZIARuleLabelsLastModifiedBy(dict):
    def __init__(__self__, *,
                 extensions: Optional[Mapping[str, str]] = None,
                 id: Optional[int] = None,
                 name: Optional[str] = None):
        """
        :param str name: The name of the devices to be created.
        """
        if extensions is not None:
            pulumi.set(__self__, "extensions", extensions)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of the devices to be created.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ZIATrafficForwardingGRETunnelLastModifiedBy(dict):
    def __init__(__self__, *,
                 extensions: Optional[Mapping[str, str]] = None,
                 id: Optional[int] = None,
                 name: Optional[str] = None):
        """
        :param int id: Unique identifer of the GRE virtual IP address (VIP)
        """
        if extensions is not None:
            pulumi.set(__self__, "extensions", extensions)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        Unique identifer of the GRE virtual IP address (VIP)
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class ZIATrafficForwardingGRETunnelPrimaryDestVip(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "privateServiceEdge":
            suggest = "private_service_edge"
        elif key == "virtualIp":
            suggest = "virtual_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ZIATrafficForwardingGRETunnelPrimaryDestVip. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ZIATrafficForwardingGRETunnelPrimaryDestVip.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ZIATrafficForwardingGRETunnelPrimaryDestVip.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 datacenter: Optional[str] = None,
                 id: Optional[int] = None,
                 private_service_edge: Optional[bool] = None,
                 virtual_ip: Optional[str] = None):
        """
        :param int id: Unique identifer of the GRE virtual IP address (VIP)
        :param str virtual_ip: GRE cluster virtual IP address (VIP)
        """
        if datacenter is not None:
            pulumi.set(__self__, "datacenter", datacenter)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if private_service_edge is not None:
            pulumi.set(__self__, "private_service_edge", private_service_edge)
        if virtual_ip is not None:
            pulumi.set(__self__, "virtual_ip", virtual_ip)

    @property
    @pulumi.getter
    def datacenter(self) -> Optional[str]:
        return pulumi.get(self, "datacenter")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        Unique identifer of the GRE virtual IP address (VIP)
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="privateServiceEdge")
    def private_service_edge(self) -> Optional[bool]:
        return pulumi.get(self, "private_service_edge")

    @property
    @pulumi.getter(name="virtualIp")
    def virtual_ip(self) -> Optional[str]:
        """
        GRE cluster virtual IP address (VIP)
        """
        return pulumi.get(self, "virtual_ip")


@pulumi.output_type
class ZIATrafficForwardingGRETunnelSecondaryDestVip(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "privateServiceEdge":
            suggest = "private_service_edge"
        elif key == "virtualIp":
            suggest = "virtual_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ZIATrafficForwardingGRETunnelSecondaryDestVip. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ZIATrafficForwardingGRETunnelSecondaryDestVip.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ZIATrafficForwardingGRETunnelSecondaryDestVip.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 datacenter: Optional[str] = None,
                 id: Optional[int] = None,
                 private_service_edge: Optional[bool] = None,
                 virtual_ip: Optional[str] = None):
        """
        :param int id: Unique identifer of the GRE virtual IP address (VIP)
        :param str virtual_ip: GRE cluster virtual IP address (VIP)
        """
        if datacenter is not None:
            pulumi.set(__self__, "datacenter", datacenter)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if private_service_edge is not None:
            pulumi.set(__self__, "private_service_edge", private_service_edge)
        if virtual_ip is not None:
            pulumi.set(__self__, "virtual_ip", virtual_ip)

    @property
    @pulumi.getter
    def datacenter(self) -> Optional[str]:
        return pulumi.get(self, "datacenter")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        Unique identifer of the GRE virtual IP address (VIP)
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="privateServiceEdge")
    def private_service_edge(self) -> Optional[bool]:
        return pulumi.get(self, "private_service_edge")

    @property
    @pulumi.getter(name="virtualIp")
    def virtual_ip(self) -> Optional[str]:
        """
        GRE cluster virtual IP address (VIP)
        """
        return pulumi.get(self, "virtual_ip")


@pulumi.output_type
class ZIATrafficForwardingStaticIPLastModifiedBy(dict):
    def __init__(__self__, *,
                 extensions: Optional[Mapping[str, str]] = None,
                 id: Optional[int] = None,
                 name: Optional[str] = None):
        if extensions is not None:
            pulumi.set(__self__, "extensions", extensions)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class ZIATrafficForwardingStaticIPManagedBy(dict):
    def __init__(__self__, *,
                 extensions: Optional[Mapping[str, str]] = None,
                 id: Optional[int] = None,
                 name: Optional[str] = None):
        if extensions is not None:
            pulumi.set(__self__, "extensions", extensions)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class ZIAURLCategoriesScope(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "scopeEntities":
            suggest = "scope_entities"
        elif key == "scopeGroupMemberEntities":
            suggest = "scope_group_member_entities"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ZIAURLCategoriesScope. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ZIAURLCategoriesScope.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ZIAURLCategoriesScope.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 scope_entities: Optional['outputs.ZIAURLCategoriesScopeScopeEntities'] = None,
                 scope_group_member_entities: Optional['outputs.ZIAURLCategoriesScopeScopeGroupMemberEntities'] = None,
                 type: Optional[str] = None):
        """
        :param 'ZIAURLCategoriesScopeScopeGroupMemberEntitiesArgs' scope_group_member_entities: Only applicable for the LOCATION_GROUP admin scope type, in which case this attribute gives the list of ID/name pairs of locations within the location group. The attribute name is subject to change.
        :param str type: Type of the custom categories. `URL_CATEGORY`, `TLD_CATEGORY`, `ALL`
        """
        if scope_entities is not None:
            pulumi.set(__self__, "scope_entities", scope_entities)
        if scope_group_member_entities is not None:
            pulumi.set(__self__, "scope_group_member_entities", scope_group_member_entities)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="scopeEntities")
    def scope_entities(self) -> Optional['outputs.ZIAURLCategoriesScopeScopeEntities']:
        return pulumi.get(self, "scope_entities")

    @property
    @pulumi.getter(name="scopeGroupMemberEntities")
    def scope_group_member_entities(self) -> Optional['outputs.ZIAURLCategoriesScopeScopeGroupMemberEntities']:
        """
        Only applicable for the LOCATION_GROUP admin scope type, in which case this attribute gives the list of ID/name pairs of locations within the location group. The attribute name is subject to change.
        """
        return pulumi.get(self, "scope_group_member_entities")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Type of the custom categories. `URL_CATEGORY`, `TLD_CATEGORY`, `ALL`
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class ZIAURLCategoriesScopeScopeEntities(dict):
    def __init__(__self__, *,
                 ids: Sequence[int]):
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Sequence[int]:
        return pulumi.get(self, "ids")


@pulumi.output_type
class ZIAURLCategoriesScopeScopeGroupMemberEntities(dict):
    def __init__(__self__, *,
                 ids: Sequence[int]):
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Sequence[int]:
        return pulumi.get(self, "ids")


@pulumi.output_type
class ZIAURLCategoriesUrlKeywordCounts(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "retainParentKeywordCount":
            suggest = "retain_parent_keyword_count"
        elif key == "retainParentUrlCount":
            suggest = "retain_parent_url_count"
        elif key == "totalKeywordCount":
            suggest = "total_keyword_count"
        elif key == "totalUrlCount":
            suggest = "total_url_count"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ZIAURLCategoriesUrlKeywordCounts. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ZIAURLCategoriesUrlKeywordCounts.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ZIAURLCategoriesUrlKeywordCounts.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 retain_parent_keyword_count: Optional[int] = None,
                 retain_parent_url_count: Optional[int] = None,
                 total_keyword_count: Optional[int] = None,
                 total_url_count: Optional[int] = None):
        """
        :param int retain_parent_keyword_count: Count of total keywords with retain parent category.
        :param int retain_parent_url_count: Count of URLs with retain parent category.
        :param int total_keyword_count: Total keyword count for the category.
        :param int total_url_count: Custom URL count for the category.
        """
        if retain_parent_keyword_count is not None:
            pulumi.set(__self__, "retain_parent_keyword_count", retain_parent_keyword_count)
        if retain_parent_url_count is not None:
            pulumi.set(__self__, "retain_parent_url_count", retain_parent_url_count)
        if total_keyword_count is not None:
            pulumi.set(__self__, "total_keyword_count", total_keyword_count)
        if total_url_count is not None:
            pulumi.set(__self__, "total_url_count", total_url_count)

    @property
    @pulumi.getter(name="retainParentKeywordCount")
    def retain_parent_keyword_count(self) -> Optional[int]:
        """
        Count of total keywords with retain parent category.
        """
        return pulumi.get(self, "retain_parent_keyword_count")

    @property
    @pulumi.getter(name="retainParentUrlCount")
    def retain_parent_url_count(self) -> Optional[int]:
        """
        Count of URLs with retain parent category.
        """
        return pulumi.get(self, "retain_parent_url_count")

    @property
    @pulumi.getter(name="totalKeywordCount")
    def total_keyword_count(self) -> Optional[int]:
        """
        Total keyword count for the category.
        """
        return pulumi.get(self, "total_keyword_count")

    @property
    @pulumi.getter(name="totalUrlCount")
    def total_url_count(self) -> Optional[int]:
        """
        Custom URL count for the category.
        """
        return pulumi.get(self, "total_url_count")


@pulumi.output_type
class ZIAURLFilteringRulesDepartments(dict):
    def __init__(__self__, *,
                 ids: Sequence[int]):
        """
        :param Sequence[int] ids: Identifier that uniquely identifies an entity
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Sequence[int]:
        """
        Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class ZIAURLFilteringRulesDeviceGroups(dict):
    def __init__(__self__, *,
                 ids: Sequence[int]):
        """
        :param Sequence[int] ids: Identifier that uniquely identifies an entity
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Sequence[int]:
        """
        Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class ZIAURLFilteringRulesDevices(dict):
    def __init__(__self__, *,
                 ids: Sequence[int]):
        """
        :param Sequence[int] ids: Identifier that uniquely identifies an entity
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Sequence[int]:
        """
        Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class ZIAURLFilteringRulesGroups(dict):
    def __init__(__self__, *,
                 ids: Sequence[int]):
        """
        :param Sequence[int] ids: Identifier that uniquely identifies an entity
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Sequence[int]:
        """
        Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class ZIAURLFilteringRulesLabels(dict):
    def __init__(__self__, *,
                 ids: Sequence[int]):
        """
        :param Sequence[int] ids: Identifier that uniquely identifies an entity
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Sequence[int]:
        """
        Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class ZIAURLFilteringRulesLastModifiedBy(dict):
    def __init__(__self__, *,
                 extensions: Optional[Mapping[str, str]] = None,
                 id: Optional[int] = None,
                 name: Optional[str] = None):
        """
        :param int id: Identifier that uniquely identifies an entity
        :param str name: Name of the Firewall Filtering policy rule
        """
        if extensions is not None:
            pulumi.set(__self__, "extensions", extensions)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the Firewall Filtering policy rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ZIAURLFilteringRulesLocationGroups(dict):
    def __init__(__self__, *,
                 ids: Sequence[int]):
        """
        :param Sequence[int] ids: Identifier that uniquely identifies an entity
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Sequence[int]:
        """
        Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class ZIAURLFilteringRulesLocations(dict):
    def __init__(__self__, *,
                 ids: Sequence[int]):
        """
        :param Sequence[int] ids: Identifier that uniquely identifies an entity
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Sequence[int]:
        """
        Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class ZIAURLFilteringRulesOverrideGroups(dict):
    def __init__(__self__, *,
                 ids: Sequence[int]):
        """
        :param Sequence[int] ids: Identifier that uniquely identifies an entity
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Sequence[int]:
        """
        Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class ZIAURLFilteringRulesOverrideUsers(dict):
    def __init__(__self__, *,
                 ids: Sequence[int]):
        """
        :param Sequence[int] ids: Identifier that uniquely identifies an entity
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Sequence[int]:
        """
        Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class ZIAURLFilteringRulesTimeWindows(dict):
    def __init__(__self__, *,
                 ids: Sequence[int]):
        """
        :param Sequence[int] ids: Identifier that uniquely identifies an entity
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Sequence[int]:
        """
        Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class ZIAURLFilteringRulesUsers(dict):
    def __init__(__self__, *,
                 ids: Sequence[int]):
        """
        :param Sequence[int] ids: Identifier that uniquely identifies an entity
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Sequence[int]:
        """
        Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class ZIAUserManagementDepartment(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "idpId":
            suggest = "idp_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ZIAUserManagementDepartment. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ZIAUserManagementDepartment.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ZIAUserManagementDepartment.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 comments: Optional[str] = None,
                 deleted: Optional[bool] = None,
                 id: Optional[int] = None,
                 idp_id: Optional[int] = None,
                 name: Optional[str] = None):
        """
        :param int id: Department ID
        :param str name: User name. This appears when choosing users for policies.
        """
        if comments is not None:
            pulumi.set(__self__, "comments", comments)
        if deleted is not None:
            pulumi.set(__self__, "deleted", deleted)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if idp_id is not None:
            pulumi.set(__self__, "idp_id", idp_id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def comments(self) -> Optional[str]:
        return pulumi.get(self, "comments")

    @property
    @pulumi.getter
    def deleted(self) -> Optional[bool]:
        return pulumi.get(self, "deleted")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        Department ID
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="idpId")
    def idp_id(self) -> Optional[int]:
        return pulumi.get(self, "idp_id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        User name. This appears when choosing users for policies.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ZIAUserManagementGroups(dict):
    def __init__(__self__, *,
                 ids: Sequence[int]):
        """
        :param Sequence[int] ids: Department ID
        """
        pulumi.set(__self__, "ids", ids)

    @property
    @pulumi.getter
    def ids(self) -> Sequence[int]:
        """
        Department ID
        """
        return pulumi.get(self, "ids")


@pulumi.output_type
class GetZIAAdminUsersAdminScopeResult(dict):
    def __init__(__self__, *,
                 scope_entities: Sequence['outputs.GetZIAAdminUsersAdminScopeScopeEntityResult'],
                 scope_group_member_entities: Sequence['outputs.GetZIAAdminUsersAdminScopeScopeGroupMemberEntityResult'],
                 type: str):
        """
        :param Sequence['GetZIAAdminUsersAdminScopeScopeEntityArgs'] scope_entities: (String) Based on the admin scope type, the entities can be the ID/name pair of departments, locations, or location groups.
        :param Sequence['GetZIAAdminUsersAdminScopeScopeGroupMemberEntityArgs'] scope_group_member_entities: (Number) Only applicable for the LOCATION_GROUP admin scope type, in which case this attribute gives the list of ID/name pairs of locations within the location group.
        :param str type: (String) The admin scope type. The attribute name is subject to change.
        """
        pulumi.set(__self__, "scope_entities", scope_entities)
        pulumi.set(__self__, "scope_group_member_entities", scope_group_member_entities)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="scopeEntities")
    def scope_entities(self) -> Sequence['outputs.GetZIAAdminUsersAdminScopeScopeEntityResult']:
        """
        (String) Based on the admin scope type, the entities can be the ID/name pair of departments, locations, or location groups.
        """
        return pulumi.get(self, "scope_entities")

    @property
    @pulumi.getter(name="scopeGroupMemberEntities")
    def scope_group_member_entities(self) -> Sequence['outputs.GetZIAAdminUsersAdminScopeScopeGroupMemberEntityResult']:
        """
        (Number) Only applicable for the LOCATION_GROUP admin scope type, in which case this attribute gives the list of ID/name pairs of locations within the location group.
        """
        return pulumi.get(self, "scope_group_member_entities")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        (String) The admin scope type. The attribute name is subject to change.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetZIAAdminUsersAdminScopeScopeEntityResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, str],
                 id: int,
                 name: str):
        """
        :param int id: The ID of the admin user to be exported.
        :param str name: (String)
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, str]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        The ID of the admin user to be exported.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (String)
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetZIAAdminUsersAdminScopeScopeGroupMemberEntityResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, str],
                 id: int,
                 name: str):
        """
        :param int id: The ID of the admin user to be exported.
        :param str name: (String)
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, str]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        The ID of the admin user to be exported.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (String)
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetZIAAdminUsersExecMobileAppTokenResult(dict):
    def __init__(__self__, *,
                 cloud: str,
                 create_time: int,
                 device_id: str,
                 device_name: str,
                 name: str,
                 org_id: int,
                 token: str,
                 token_expiry: int,
                 token_id: str):
        """
        :param str cloud: (String)
        :param int create_time: (Number)
        :param str device_id: (String)
        :param str device_name: (String)
        :param str name: (String)
        :param int org_id: (Number)
        :param str token: (String)
        :param int token_expiry: (Number)
        :param str token_id: (String)
        """
        pulumi.set(__self__, "cloud", cloud)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "device_id", device_id)
        pulumi.set(__self__, "device_name", device_name)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "org_id", org_id)
        pulumi.set(__self__, "token", token)
        pulumi.set(__self__, "token_expiry", token_expiry)
        pulumi.set(__self__, "token_id", token_id)

    @property
    @pulumi.getter
    def cloud(self) -> str:
        """
        (String)
        """
        return pulumi.get(self, "cloud")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> int:
        """
        (Number)
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="deviceId")
    def device_id(self) -> str:
        """
        (String)
        """
        return pulumi.get(self, "device_id")

    @property
    @pulumi.getter(name="deviceName")
    def device_name(self) -> str:
        """
        (String)
        """
        return pulumi.get(self, "device_name")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (String)
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> int:
        """
        (Number)
        """
        return pulumi.get(self, "org_id")

    @property
    @pulumi.getter
    def token(self) -> str:
        """
        (String)
        """
        return pulumi.get(self, "token")

    @property
    @pulumi.getter(name="tokenExpiry")
    def token_expiry(self) -> int:
        """
        (Number)
        """
        return pulumi.get(self, "token_expiry")

    @property
    @pulumi.getter(name="tokenId")
    def token_id(self) -> str:
        """
        (String)
        """
        return pulumi.get(self, "token_id")


@pulumi.output_type
class GetZIAAdminUsersRoleResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, str],
                 id: int,
                 name: str):
        """
        :param int id: The ID of the admin user to be exported.
        :param str name: (String)
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, str]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        The ID of the admin user to be exported.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (String)
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetZIADLPDictionariesExactDataMatchDetailResult(dict):
    def __init__(__self__, *,
                 dictionary_edm_mapping_id: int,
                 primary_field: int,
                 schema_id: int,
                 secondary_field_match_on: str,
                 secondary_fields: Sequence[int]):
        pulumi.set(__self__, "dictionary_edm_mapping_id", dictionary_edm_mapping_id)
        pulumi.set(__self__, "primary_field", primary_field)
        pulumi.set(__self__, "schema_id", schema_id)
        pulumi.set(__self__, "secondary_field_match_on", secondary_field_match_on)
        pulumi.set(__self__, "secondary_fields", secondary_fields)

    @property
    @pulumi.getter(name="dictionaryEdmMappingId")
    def dictionary_edm_mapping_id(self) -> int:
        return pulumi.get(self, "dictionary_edm_mapping_id")

    @property
    @pulumi.getter(name="primaryField")
    def primary_field(self) -> int:
        return pulumi.get(self, "primary_field")

    @property
    @pulumi.getter(name="schemaId")
    def schema_id(self) -> int:
        return pulumi.get(self, "schema_id")

    @property
    @pulumi.getter(name="secondaryFieldMatchOn")
    def secondary_field_match_on(self) -> str:
        return pulumi.get(self, "secondary_field_match_on")

    @property
    @pulumi.getter(name="secondaryFields")
    def secondary_fields(self) -> Sequence[int]:
        return pulumi.get(self, "secondary_fields")


@pulumi.output_type
class GetZIADLPDictionariesIdmProfileMatchAccuracyResult(dict):
    def __init__(__self__, *,
                 adp_idm_profiles: Sequence['outputs.GetZIADLPDictionariesIdmProfileMatchAccuracyAdpIdmProfileResult'],
                 match_accuracy: str):
        pulumi.set(__self__, "adp_idm_profiles", adp_idm_profiles)
        pulumi.set(__self__, "match_accuracy", match_accuracy)

    @property
    @pulumi.getter(name="adpIdmProfiles")
    def adp_idm_profiles(self) -> Sequence['outputs.GetZIADLPDictionariesIdmProfileMatchAccuracyAdpIdmProfileResult']:
        return pulumi.get(self, "adp_idm_profiles")

    @property
    @pulumi.getter(name="matchAccuracy")
    def match_accuracy(self) -> str:
        return pulumi.get(self, "match_accuracy")


@pulumi.output_type
class GetZIADLPDictionariesIdmProfileMatchAccuracyAdpIdmProfileResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, str],
                 id: int):
        """
        :param int id: Unique identifier for the DLP dictionary
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, str]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Unique identifier for the DLP dictionary
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetZIADLPDictionariesPatternResult(dict):
    def __init__(__self__, *,
                 action: str,
                 pattern: str):
        """
        :param str action: (String) The action applied to a DLP dictionary using patterns
        :param str pattern: (String) DLP dictionary pattern
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "pattern", pattern)

    @property
    @pulumi.getter
    def action(self) -> str:
        """
        (String) The action applied to a DLP dictionary using patterns
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def pattern(self) -> str:
        """
        (String) DLP dictionary pattern
        """
        return pulumi.get(self, "pattern")


@pulumi.output_type
class GetZIADLPDictionariesPhraseResult(dict):
    def __init__(__self__, *,
                 action: str,
                 phrase: str):
        """
        :param str action: (String) The action applied to a DLP dictionary using patterns
        """
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "phrase", phrase)

    @property
    @pulumi.getter
    def action(self) -> str:
        """
        (String) The action applied to a DLP dictionary using patterns
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def phrase(self) -> str:
        return pulumi.get(self, "phrase")


@pulumi.output_type
class GetZIADLPWebRulesAuditorResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, str],
                 id: int,
                 name: str):
        """
        :param int id: Identifier that uniquely identifies an entity
        :param str name: The DLP policy rule name.
               rules.
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, str]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The DLP policy rule name.
        rules.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetZIADLPWebRulesDepartmentResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, str],
                 id: int,
                 name: str):
        """
        :param int id: Identifier that uniquely identifies an entity
        :param str name: The DLP policy rule name.
               rules.
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, str]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The DLP policy rule name.
        rules.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetZIADLPWebRulesDlpEngineResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, str],
                 id: int,
                 name: str):
        """
        :param int id: Identifier that uniquely identifies an entity
        :param str name: The DLP policy rule name.
               rules.
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, str]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The DLP policy rule name.
        rules.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetZIADLPWebRulesExcludedDepartmentResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, str],
                 id: int):
        """
        :param int id: Identifier that uniquely identifies an entity
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, str]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetZIADLPWebRulesExcludedGroupResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, str],
                 id: int):
        """
        :param int id: Identifier that uniquely identifies an entity
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, str]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetZIADLPWebRulesExcludedUserResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, str],
                 id: int):
        """
        :param int id: Identifier that uniquely identifies an entity
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, str]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class GetZIADLPWebRulesGroupResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, str],
                 id: int,
                 name: str):
        """
        :param int id: Identifier that uniquely identifies an entity
        :param str name: The DLP policy rule name.
               rules.
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, str]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The DLP policy rule name.
        rules.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetZIADLPWebRulesIcapServerResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, str],
                 id: int,
                 name: str):
        """
        :param int id: Identifier that uniquely identifies an entity
        :param str name: The DLP policy rule name.
               rules.
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, str]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The DLP policy rule name.
        rules.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetZIADLPWebRulesLabelResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, str],
                 id: int,
                 name: str):
        """
        :param int id: Identifier that uniquely identifies an entity
        :param str name: The DLP policy rule name.
               rules.
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, str]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The DLP policy rule name.
        rules.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetZIADLPWebRulesLastModifiedByResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, str],
                 id: int,
                 name: str):
        """
        :param int id: Identifier that uniquely identifies an entity
        :param str name: The DLP policy rule name.
               rules.
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, str]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The DLP policy rule name.
        rules.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetZIADLPWebRulesLocationResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, str],
                 id: int,
                 name: str):
        """
        :param int id: Identifier that uniquely identifies an entity
        :param str name: The DLP policy rule name.
               rules.
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, str]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The DLP policy rule name.
        rules.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetZIADLPWebRulesLocationGroupResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, str],
                 id: int,
                 name: str):
        """
        :param int id: Identifier that uniquely identifies an entity
        :param str name: The DLP policy rule name.
               rules.
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, str]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The DLP policy rule name.
        rules.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetZIADLPWebRulesNotificationTemplateResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, str],
                 id: int,
                 name: str):
        """
        :param int id: Identifier that uniquely identifies an entity
        :param str name: The DLP policy rule name.
               rules.
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, str]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The DLP policy rule name.
        rules.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetZIADLPWebRulesTimeWindowResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, str],
                 id: int,
                 name: str):
        """
        :param int id: Identifier that uniquely identifies an entity
        :param str name: The DLP policy rule name.
               rules.
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, str]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The DLP policy rule name.
        rules.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetZIADLPWebRulesUrlCategoryResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, str],
                 id: int,
                 name: str):
        """
        :param int id: Identifier that uniquely identifies an entity
        :param str name: The DLP policy rule name.
               rules.
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, str]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The DLP policy rule name.
        rules.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetZIADLPWebRulesUserResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, str],
                 id: int,
                 name: str):
        """
        :param int id: Identifier that uniquely identifies an entity
        :param str name: The DLP policy rule name.
               rules.
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, str]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Identifier that uniquely identifies an entity
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The DLP policy rule name.
        rules.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetZIAFirewallFilteringNetworkServiceGroupsServiceResult(dict):
    def __init__(__self__, *,
                 description: str,
                 id: int,
                 is_name_l10n_tag: bool,
                 name: Optional[str] = None):
        """
        :param str description: (String)
        :param int id: The ID of the ip source group to be exported.
        :param bool is_name_l10n_tag: (Bool) - Default: false
        :param str name: The name of the ip source group to be exported.
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "is_name_l10n_tag", is_name_l10n_tag)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        (String)
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        The ID of the ip source group to be exported.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="isNameL10nTag")
    def is_name_l10n_tag(self) -> bool:
        """
        (Bool) - Default: false
        """
        return pulumi.get(self, "is_name_l10n_tag")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of the ip source group to be exported.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetZIAFirewallFilteringNetworkServicesDestTcpPortResult(dict):
    def __init__(__self__, *,
                 end: int,
                 start: int):
        """
        :param int end: (Number)
        :param int start: (Number)
        """
        pulumi.set(__self__, "end", end)
        pulumi.set(__self__, "start", start)

    @property
    @pulumi.getter
    def end(self) -> int:
        """
        (Number)
        """
        return pulumi.get(self, "end")

    @property
    @pulumi.getter
    def start(self) -> int:
        """
        (Number)
        """
        return pulumi.get(self, "start")


@pulumi.output_type
class GetZIAFirewallFilteringNetworkServicesDestUdpPortResult(dict):
    def __init__(__self__, *,
                 end: int,
                 start: int):
        """
        :param int end: (Number)
        :param int start: (Number)
        """
        pulumi.set(__self__, "end", end)
        pulumi.set(__self__, "start", start)

    @property
    @pulumi.getter
    def end(self) -> int:
        """
        (Number)
        """
        return pulumi.get(self, "end")

    @property
    @pulumi.getter
    def start(self) -> int:
        """
        (Number)
        """
        return pulumi.get(self, "start")


@pulumi.output_type
class GetZIAFirewallFilteringNetworkServicesSrcTcpPortResult(dict):
    def __init__(__self__, *,
                 end: int,
                 start: int):
        """
        :param int end: (Number)
        :param int start: (Number)
        """
        pulumi.set(__self__, "end", end)
        pulumi.set(__self__, "start", start)

    @property
    @pulumi.getter
    def end(self) -> int:
        """
        (Number)
        """
        return pulumi.get(self, "end")

    @property
    @pulumi.getter
    def start(self) -> int:
        """
        (Number)
        """
        return pulumi.get(self, "start")


@pulumi.output_type
class GetZIAFirewallFilteringNetworkServicesSrcUdpPortResult(dict):
    def __init__(__self__, *,
                 end: int,
                 start: int):
        """
        :param int end: (Number)
        :param int start: (Number)
        """
        pulumi.set(__self__, "end", end)
        pulumi.set(__self__, "start", start)

    @property
    @pulumi.getter
    def end(self) -> int:
        """
        (Number)
        """
        return pulumi.get(self, "end")

    @property
    @pulumi.getter
    def start(self) -> int:
        """
        (Number)
        """
        return pulumi.get(self, "start")


@pulumi.output_type
class GetZIAFirewallFilteringRuleAppServiceResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, str],
                 id: int,
                 name: str):
        """
        :param Mapping[str, str] extensions: (Map of String)
        :param int id: Unique identifier for the Firewall Filtering policy rule
        :param str name: Name of the Firewall Filtering policy rule
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Unique identifier for the Firewall Filtering policy rule
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the Firewall Filtering policy rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetZIAFirewallFilteringRuleAppServiceGroupResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, str],
                 id: int,
                 name: str):
        """
        :param Mapping[str, str] extensions: (Map of String)
        :param int id: Unique identifier for the Firewall Filtering policy rule
        :param str name: Name of the Firewall Filtering policy rule
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Unique identifier for the Firewall Filtering policy rule
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the Firewall Filtering policy rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetZIAFirewallFilteringRuleDepartmentResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, str],
                 id: int,
                 name: str):
        """
        :param Mapping[str, str] extensions: (Map of String)
        :param int id: Unique identifier for the Firewall Filtering policy rule
        :param str name: Name of the Firewall Filtering policy rule
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Unique identifier for the Firewall Filtering policy rule
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the Firewall Filtering policy rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetZIAFirewallFilteringRuleGroupResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, str],
                 id: int,
                 name: str):
        """
        :param Mapping[str, str] extensions: (Map of String)
        :param int id: Unique identifier for the Firewall Filtering policy rule
        :param str name: Name of the Firewall Filtering policy rule
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Unique identifier for the Firewall Filtering policy rule
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the Firewall Filtering policy rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetZIAFirewallFilteringRuleLabelResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, str],
                 id: int,
                 name: str):
        """
        :param Mapping[str, str] extensions: (Map of String)
        :param int id: Unique identifier for the Firewall Filtering policy rule
        :param str name: Name of the Firewall Filtering policy rule
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Unique identifier for the Firewall Filtering policy rule
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the Firewall Filtering policy rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetZIAFirewallFilteringRuleLastModifiedByResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, str],
                 id: int,
                 name: str):
        """
        :param Mapping[str, str] extensions: (Map of String)
        :param int id: Unique identifier for the Firewall Filtering policy rule
        :param str name: Name of the Firewall Filtering policy rule
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Unique identifier for the Firewall Filtering policy rule
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the Firewall Filtering policy rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetZIAFirewallFilteringRuleLocationResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, str],
                 id: int,
                 name: str):
        """
        :param Mapping[str, str] extensions: (Map of String)
        :param int id: Unique identifier for the Firewall Filtering policy rule
        :param str name: Name of the Firewall Filtering policy rule
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Unique identifier for the Firewall Filtering policy rule
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the Firewall Filtering policy rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetZIAFirewallFilteringRuleLocationGroupResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, str],
                 id: int,
                 name: str):
        """
        :param Mapping[str, str] extensions: (Map of String)
        :param int id: Unique identifier for the Firewall Filtering policy rule
        :param str name: Name of the Firewall Filtering policy rule
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Unique identifier for the Firewall Filtering policy rule
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the Firewall Filtering policy rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetZIAFirewallFilteringRuleNwApplicationGroupResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, str],
                 id: int,
                 name: str):
        """
        :param Mapping[str, str] extensions: (Map of String)
        :param int id: Unique identifier for the Firewall Filtering policy rule
        :param str name: Name of the Firewall Filtering policy rule
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Unique identifier for the Firewall Filtering policy rule
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the Firewall Filtering policy rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetZIAFirewallFilteringRuleNwServiceResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, str],
                 id: int,
                 name: str):
        """
        :param Mapping[str, str] extensions: (Map of String)
        :param int id: Unique identifier for the Firewall Filtering policy rule
        :param str name: Name of the Firewall Filtering policy rule
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Unique identifier for the Firewall Filtering policy rule
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the Firewall Filtering policy rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetZIAFirewallFilteringRuleNwServiceGroupResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, str],
                 id: int,
                 name: str):
        """
        :param Mapping[str, str] extensions: (Map of String)
        :param int id: Unique identifier for the Firewall Filtering policy rule
        :param str name: Name of the Firewall Filtering policy rule
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Unique identifier for the Firewall Filtering policy rule
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the Firewall Filtering policy rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetZIAFirewallFilteringRuleTimeWindowResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, str],
                 id: int,
                 name: str):
        """
        :param Mapping[str, str] extensions: (Map of String)
        :param int id: Unique identifier for the Firewall Filtering policy rule
        :param str name: Name of the Firewall Filtering policy rule
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Unique identifier for the Firewall Filtering policy rule
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the Firewall Filtering policy rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetZIAFirewallFilteringRuleUserResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, str],
                 id: int,
                 name: str):
        """
        :param Mapping[str, str] extensions: (Map of String)
        :param int id: Unique identifier for the Firewall Filtering policy rule
        :param str name: Name of the Firewall Filtering policy rule
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Unique identifier for the Firewall Filtering policy rule
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the Firewall Filtering policy rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetZIALocationGroupsDynamicLocationGroupCriteriaResult(dict):
    def __init__(__self__, *,
                 enable_bandwidth_control: bool,
                 enable_caution: bool,
                 enable_xff_forwarding: bool,
                 enforce_aup: bool,
                 enforce_authentication: bool,
                 enforce_firewall_control: bool,
                 managed_bies: Sequence['outputs.GetZIALocationGroupsDynamicLocationGroupCriteriaManagedByResult'],
                 cities: Optional[Sequence['outputs.GetZIALocationGroupsDynamicLocationGroupCriteriaCityResult']] = None,
                 countries: Optional[Sequence[str]] = None,
                 names: Optional[Sequence['outputs.GetZIALocationGroupsDynamicLocationGroupCriteriaNameResult']] = None,
                 profiles: Optional[Sequence[str]] = None):
        """
        :param bool enable_bandwidth_control: (Boolean) Enable Bandwidth Control. When set to true, Bandwidth Control is enabled for the location.
        :param bool enable_caution: (Boolean) Enable Caution. When set to true, a caution notifcation is enabled for the location.
        :param bool enable_xff_forwarding: (Boolean) Enable `XFF` Forwarding. When set to true, traffic is passed to Zscaler Cloud via the X-Forwarded-For (XFF) header.
        :param bool enforce_aup: (Boolean) Enable AUP. When set to true, AUP is enabled for the location.
        :param bool enforce_authentication: (Boolean) Enforce Authentication. Required when ports are enabled, IP Surrogate is enabled, or Kerberos Authentication is enabled.
        :param bool enforce_firewall_control: (Boolean) Enable Firewall. When set to true, Firewall is enabled for the location.
        :param Sequence['GetZIALocationGroupsDynamicLocationGroupCriteriaManagedByArgs'] managed_bies: (Block List)
        :param Sequence['GetZIALocationGroupsDynamicLocationGroupCriteriaCityArgs'] cities: (Block List)
        :param Sequence[str] countries: (List of String) One or more countries from a predefined set
        :param Sequence['GetZIALocationGroupsDynamicLocationGroupCriteriaNameArgs'] names: Location group name
        :param Sequence[str] profiles: (List of String) One or more location profiles from a predefined set
        """
        pulumi.set(__self__, "enable_bandwidth_control", enable_bandwidth_control)
        pulumi.set(__self__, "enable_caution", enable_caution)
        pulumi.set(__self__, "enable_xff_forwarding", enable_xff_forwarding)
        pulumi.set(__self__, "enforce_aup", enforce_aup)
        pulumi.set(__self__, "enforce_authentication", enforce_authentication)
        pulumi.set(__self__, "enforce_firewall_control", enforce_firewall_control)
        pulumi.set(__self__, "managed_bies", managed_bies)
        if cities is not None:
            pulumi.set(__self__, "cities", cities)
        if countries is not None:
            pulumi.set(__self__, "countries", countries)
        if names is not None:
            pulumi.set(__self__, "names", names)
        if profiles is not None:
            pulumi.set(__self__, "profiles", profiles)

    @property
    @pulumi.getter(name="enableBandwidthControl")
    def enable_bandwidth_control(self) -> bool:
        """
        (Boolean) Enable Bandwidth Control. When set to true, Bandwidth Control is enabled for the location.
        """
        return pulumi.get(self, "enable_bandwidth_control")

    @property
    @pulumi.getter(name="enableCaution")
    def enable_caution(self) -> bool:
        """
        (Boolean) Enable Caution. When set to true, a caution notifcation is enabled for the location.
        """
        return pulumi.get(self, "enable_caution")

    @property
    @pulumi.getter(name="enableXffForwarding")
    def enable_xff_forwarding(self) -> bool:
        """
        (Boolean) Enable `XFF` Forwarding. When set to true, traffic is passed to Zscaler Cloud via the X-Forwarded-For (XFF) header.
        """
        return pulumi.get(self, "enable_xff_forwarding")

    @property
    @pulumi.getter(name="enforceAup")
    def enforce_aup(self) -> bool:
        """
        (Boolean) Enable AUP. When set to true, AUP is enabled for the location.
        """
        return pulumi.get(self, "enforce_aup")

    @property
    @pulumi.getter(name="enforceAuthentication")
    def enforce_authentication(self) -> bool:
        """
        (Boolean) Enforce Authentication. Required when ports are enabled, IP Surrogate is enabled, or Kerberos Authentication is enabled.
        """
        return pulumi.get(self, "enforce_authentication")

    @property
    @pulumi.getter(name="enforceFirewallControl")
    def enforce_firewall_control(self) -> bool:
        """
        (Boolean) Enable Firewall. When set to true, Firewall is enabled for the location.
        """
        return pulumi.get(self, "enforce_firewall_control")

    @property
    @pulumi.getter(name="managedBies")
    def managed_bies(self) -> Sequence['outputs.GetZIALocationGroupsDynamicLocationGroupCriteriaManagedByResult']:
        """
        (Block List)
        """
        return pulumi.get(self, "managed_bies")

    @property
    @pulumi.getter
    def cities(self) -> Optional[Sequence['outputs.GetZIALocationGroupsDynamicLocationGroupCriteriaCityResult']]:
        """
        (Block List)
        """
        return pulumi.get(self, "cities")

    @property
    @pulumi.getter
    def countries(self) -> Optional[Sequence[str]]:
        """
        (List of String) One or more countries from a predefined set
        """
        return pulumi.get(self, "countries")

    @property
    @pulumi.getter
    def names(self) -> Optional[Sequence['outputs.GetZIALocationGroupsDynamicLocationGroupCriteriaNameResult']]:
        """
        Location group name
        """
        return pulumi.get(self, "names")

    @property
    @pulumi.getter
    def profiles(self) -> Optional[Sequence[str]]:
        """
        (List of String) One or more location profiles from a predefined set
        """
        return pulumi.get(self, "profiles")


@pulumi.output_type
class GetZIALocationGroupsDynamicLocationGroupCriteriaCityResult(dict):
    def __init__(__self__, *,
                 match_string: Optional[str] = None,
                 match_type: Optional[str] = None):
        """
        :param str match_string: (String) String value to be matched or partially matched
        :param str match_type: (String) Operator that performs match action
        """
        if match_string is not None:
            pulumi.set(__self__, "match_string", match_string)
        if match_type is not None:
            pulumi.set(__self__, "match_type", match_type)

    @property
    @pulumi.getter(name="matchString")
    def match_string(self) -> Optional[str]:
        """
        (String) String value to be matched or partially matched
        """
        return pulumi.get(self, "match_string")

    @property
    @pulumi.getter(name="matchType")
    def match_type(self) -> Optional[str]:
        """
        (String) Operator that performs match action
        """
        return pulumi.get(self, "match_type")


@pulumi.output_type
class GetZIALocationGroupsDynamicLocationGroupCriteriaManagedByResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, str],
                 id: int,
                 name: str):
        """
        :param Mapping[str, str] extensions: (Map of String)
        :param int id: Unique identifier for the location group
        :param str name: Location group name
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Unique identifier for the location group
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Location group name
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetZIALocationGroupsDynamicLocationGroupCriteriaNameResult(dict):
    def __init__(__self__, *,
                 match_string: Optional[str] = None,
                 match_type: Optional[str] = None):
        """
        :param str match_string: (String) String value to be matched or partially matched
        :param str match_type: (String) Operator that performs match action
        """
        if match_string is not None:
            pulumi.set(__self__, "match_string", match_string)
        if match_type is not None:
            pulumi.set(__self__, "match_type", match_type)

    @property
    @pulumi.getter(name="matchString")
    def match_string(self) -> Optional[str]:
        """
        (String) String value to be matched or partially matched
        """
        return pulumi.get(self, "match_string")

    @property
    @pulumi.getter(name="matchType")
    def match_type(self) -> Optional[str]:
        """
        (String) Operator that performs match action
        """
        return pulumi.get(self, "match_type")


@pulumi.output_type
class GetZIALocationGroupsLastModUserResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, str],
                 id: int,
                 name: str):
        """
        :param Mapping[str, str] extensions: (Map of String)
        :param int id: Unique identifier for the location group
        :param str name: Location group name
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Unique identifier for the location group
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Location group name
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetZIALocationGroupsLocationResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, str],
                 id: int,
                 name: str):
        """
        :param Mapping[str, str] extensions: (Map of String)
        :param int id: Unique identifier for the location group
        :param str name: Location group name
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Unique identifier for the location group
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Location group name
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetZIALocationManagementVpnCredentialResult(dict):
    def __init__(__self__, *,
                 comments: str,
                 fqdn: str,
                 id: int,
                 locations: Sequence['outputs.GetZIALocationManagementVpnCredentialLocationResult'],
                 managed_bies: Sequence['outputs.GetZIALocationManagementVpnCredentialManagedByResult'],
                 pre_shared_key: str,
                 type: str):
        """
        :param str comments: (String) Additional information about this VPN credential.
               Additional information about this VPN credential.
        :param str fqdn: (String) Fully Qualified Domain Name. Applicable only to `UFQDN` or `XAUTH` (or `HOSTED_MOBILE_USERS`) auth type.
        :param int id: The ID of the location to be exported.
        :param Sequence['GetZIALocationManagementVpnCredentialLocationArgs'] locations: (List of Object)
        :param Sequence['GetZIALocationManagementVpnCredentialManagedByArgs'] managed_bies: (List of Object)
        :param str pre_shared_key: (String) Pre-shared key. This is a required field for `UFQDN` and IP auth type.
        :param str type: (String) VPN authentication type (i.e., how the VPN credential is sent to the server). It is not modifiable after VpnCredential is created.
        """
        pulumi.set(__self__, "comments", comments)
        pulumi.set(__self__, "fqdn", fqdn)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "locations", locations)
        pulumi.set(__self__, "managed_bies", managed_bies)
        pulumi.set(__self__, "pre_shared_key", pre_shared_key)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def comments(self) -> str:
        """
        (String) Additional information about this VPN credential.
        Additional information about this VPN credential.
        """
        return pulumi.get(self, "comments")

    @property
    @pulumi.getter
    def fqdn(self) -> str:
        """
        (String) Fully Qualified Domain Name. Applicable only to `UFQDN` or `XAUTH` (or `HOSTED_MOBILE_USERS`) auth type.
        """
        return pulumi.get(self, "fqdn")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        The ID of the location to be exported.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def locations(self) -> Sequence['outputs.GetZIALocationManagementVpnCredentialLocationResult']:
        """
        (List of Object)
        """
        return pulumi.get(self, "locations")

    @property
    @pulumi.getter(name="managedBies")
    def managed_bies(self) -> Sequence['outputs.GetZIALocationManagementVpnCredentialManagedByResult']:
        """
        (List of Object)
        """
        return pulumi.get(self, "managed_bies")

    @property
    @pulumi.getter(name="preSharedKey")
    def pre_shared_key(self) -> str:
        """
        (String) Pre-shared key. This is a required field for `UFQDN` and IP auth type.
        """
        return pulumi.get(self, "pre_shared_key")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        (String) VPN authentication type (i.e., how the VPN credential is sent to the server). It is not modifiable after VpnCredential is created.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetZIALocationManagementVpnCredentialLocationResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, str],
                 id: int,
                 name: str):
        """
        :param Mapping[str, str] extensions: (Map of String)
        :param int id: The ID of the location to be exported.
        :param str name: The name of the location to be exported.
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        The ID of the location to be exported.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the location to be exported.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetZIALocationManagementVpnCredentialManagedByResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, str],
                 id: int,
                 name: str):
        """
        :param Mapping[str, str] extensions: (Map of String)
        :param int id: The ID of the location to be exported.
        :param str name: The name of the location to be exported.
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        The ID of the location to be exported.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the location to be exported.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetZIARuleLabelsCreatedByResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, str],
                 id: int,
                 name: str):
        """
        :param int id: The unique identifer for the device group.
        :param str name: The name of the rule label to be exported.
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, str]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        The unique identifer for the device group.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the rule label to be exported.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetZIARuleLabelsLastModifiedByResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, str],
                 id: int,
                 name: str):
        """
        :param int id: The unique identifer for the device group.
        :param str name: The name of the rule label to be exported.
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, str]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        The unique identifer for the device group.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the rule label to be exported.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetZIATrafficForwardingGREInternalIPRangeListResult(dict):
    def __init__(__self__, *,
                 end_ip_address: str,
                 start_ip_address: str):
        pulumi.set(__self__, "end_ip_address", end_ip_address)
        pulumi.set(__self__, "start_ip_address", start_ip_address)

    @property
    @pulumi.getter(name="endIpAddress")
    def end_ip_address(self) -> str:
        return pulumi.get(self, "end_ip_address")

    @property
    @pulumi.getter(name="startIpAddress")
    def start_ip_address(self) -> str:
        return pulumi.get(self, "start_ip_address")


@pulumi.output_type
class GetZIATrafficForwardingGRETunnelLastModifiedByResult(dict):
    def __init__(__self__, *,
                 id: int,
                 name: str):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetZIATrafficForwardingGRETunnelManagedByResult(dict):
    def __init__(__self__, *,
                 id: int,
                 name: str):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetZIATrafficForwardingGRETunnelPrimaryDestVipResult(dict):
    def __init__(__self__, *,
                 city: str,
                 country_code: str,
                 datacenter: str,
                 id: int,
                 latitude: int,
                 longitude: int,
                 private_service_edge: bool,
                 region: str,
                 virtual_ip: str):
        pulumi.set(__self__, "city", city)
        pulumi.set(__self__, "country_code", country_code)
        pulumi.set(__self__, "datacenter", datacenter)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "latitude", latitude)
        pulumi.set(__self__, "longitude", longitude)
        pulumi.set(__self__, "private_service_edge", private_service_edge)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "virtual_ip", virtual_ip)

    @property
    @pulumi.getter
    def city(self) -> str:
        return pulumi.get(self, "city")

    @property
    @pulumi.getter(name="countryCode")
    def country_code(self) -> str:
        return pulumi.get(self, "country_code")

    @property
    @pulumi.getter
    def datacenter(self) -> str:
        return pulumi.get(self, "datacenter")

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def latitude(self) -> int:
        return pulumi.get(self, "latitude")

    @property
    @pulumi.getter
    def longitude(self) -> int:
        return pulumi.get(self, "longitude")

    @property
    @pulumi.getter(name="privateServiceEdge")
    def private_service_edge(self) -> bool:
        return pulumi.get(self, "private_service_edge")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="virtualIp")
    def virtual_ip(self) -> str:
        return pulumi.get(self, "virtual_ip")


@pulumi.output_type
class GetZIATrafficForwardingGRETunnelSecondaryDestVipResult(dict):
    def __init__(__self__, *,
                 city: str,
                 country_code: str,
                 datacenter: str,
                 id: int,
                 latitude: int,
                 longitude: int,
                 private_service_edge: bool,
                 region: str,
                 virtual_ip: str):
        pulumi.set(__self__, "city", city)
        pulumi.set(__self__, "country_code", country_code)
        pulumi.set(__self__, "datacenter", datacenter)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "latitude", latitude)
        pulumi.set(__self__, "longitude", longitude)
        pulumi.set(__self__, "private_service_edge", private_service_edge)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "virtual_ip", virtual_ip)

    @property
    @pulumi.getter
    def city(self) -> str:
        return pulumi.get(self, "city")

    @property
    @pulumi.getter(name="countryCode")
    def country_code(self) -> str:
        return pulumi.get(self, "country_code")

    @property
    @pulumi.getter
    def datacenter(self) -> str:
        return pulumi.get(self, "datacenter")

    @property
    @pulumi.getter
    def id(self) -> int:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def latitude(self) -> int:
        return pulumi.get(self, "latitude")

    @property
    @pulumi.getter
    def longitude(self) -> int:
        return pulumi.get(self, "longitude")

    @property
    @pulumi.getter(name="privateServiceEdge")
    def private_service_edge(self) -> bool:
        return pulumi.get(self, "private_service_edge")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="virtualIp")
    def virtual_ip(self) -> str:
        return pulumi.get(self, "virtual_ip")


@pulumi.output_type
class GetZIATrafficForwardingStaticIPLastModifiedByResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, str],
                 id: int,
                 name: str):
        """
        :param Mapping[str, str] extensions: (Map of String)
        :param int id: The unique identifier for the static IP address
        :param str name: (String) The configured name of the entity
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        The unique identifier for the static IP address
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (String) The configured name of the entity
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetZIATrafficForwardingStaticIPManagedByResult(dict):
    def __init__(__self__, *,
                 id: int,
                 name: str):
        """
        :param int id: The unique identifier for the static IP address
        :param str name: (String) The configured name of the entity
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        The unique identifier for the static IP address
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (String) The configured name of the entity
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetZIATrafficForwardingVIPRecommendedListListResult(dict):
    def __init__(__self__, *,
                 datacenter: Optional[str] = None,
                 id: Optional[int] = None,
                 private_service_edge: Optional[bool] = None,
                 virtual_ip: Optional[str] = None):
        """
        :param str datacenter: (String) Data center information
        :param int id: Unique identifer of the GRE virtual IP address (VIP)
        :param bool private_service_edge: (Boolean) Set to true if the virtual IP address (VIP) is a ZIA Private Service Edge
        :param str virtual_ip: (String) GRE cluster virtual IP address (VIP)
        """
        if datacenter is not None:
            pulumi.set(__self__, "datacenter", datacenter)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if private_service_edge is not None:
            pulumi.set(__self__, "private_service_edge", private_service_edge)
        if virtual_ip is not None:
            pulumi.set(__self__, "virtual_ip", virtual_ip)

    @property
    @pulumi.getter
    def datacenter(self) -> Optional[str]:
        """
        (String) Data center information
        """
        return pulumi.get(self, "datacenter")

    @property
    @pulumi.getter
    def id(self) -> Optional[int]:
        """
        Unique identifer of the GRE virtual IP address (VIP)
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="privateServiceEdge")
    def private_service_edge(self) -> Optional[bool]:
        """
        (Boolean) Set to true if the virtual IP address (VIP) is a ZIA Private Service Edge
        """
        return pulumi.get(self, "private_service_edge")

    @property
    @pulumi.getter(name="virtualIp")
    def virtual_ip(self) -> Optional[str]:
        """
        (String) GRE cluster virtual IP address (VIP)
        """
        return pulumi.get(self, "virtual_ip")


@pulumi.output_type
class GetZIATrafficForwardingVPNCredentialsLocationResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, str],
                 id: int,
                 name: str):
        """
        :param Mapping[str, str] extensions: (Map of String)
        :param int id: Unique identifer of the GRE virtual IP address (VIP)
        :param str name: (String) The configured name of the entity
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Unique identifer of the GRE virtual IP address (VIP)
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (String) The configured name of the entity
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetZIATrafficForwardingVPNCredentialsManagedByResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, str],
                 id: int,
                 name: str):
        """
        :param Mapping[str, str] extensions: (Map of String)
        :param int id: Unique identifer of the GRE virtual IP address (VIP)
        :param str name: (String) The configured name of the entity
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        Unique identifer of the GRE virtual IP address (VIP)
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (String) The configured name of the entity
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetZIAURLCategoriesScopeResult(dict):
    def __init__(__self__, *,
                 scope_entities: Sequence['outputs.GetZIAURLCategoriesScopeScopeEntityResult'],
                 scope_group_member_entities: Sequence['outputs.GetZIAURLCategoriesScopeScopeGroupMemberEntityResult'],
                 type: str):
        """
        :param Sequence['GetZIAURLCategoriesScopeScopeEntityArgs'] scope_entities: (List of Object)
        :param Sequence['GetZIAURLCategoriesScopeScopeGroupMemberEntityArgs'] scope_group_member_entities: (List of Object) Only applicable for the LOCATION_GROUP admin scope type, in which case this attribute gives the list of ID/name pairs of locations within the location group. The attribute name is subject to change.
        :param str type: (String) The admin scope type. The attribute name is subject to change. `ORGANIZATION`, `DEPARTMENT`, `LOCATION`, `LOCATION_GROUP`
        """
        pulumi.set(__self__, "scope_entities", scope_entities)
        pulumi.set(__self__, "scope_group_member_entities", scope_group_member_entities)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="scopeEntities")
    def scope_entities(self) -> Sequence['outputs.GetZIAURLCategoriesScopeScopeEntityResult']:
        """
        (List of Object)
        """
        return pulumi.get(self, "scope_entities")

    @property
    @pulumi.getter(name="scopeGroupMemberEntities")
    def scope_group_member_entities(self) -> Sequence['outputs.GetZIAURLCategoriesScopeScopeGroupMemberEntityResult']:
        """
        (List of Object) Only applicable for the LOCATION_GROUP admin scope type, in which case this attribute gives the list of ID/name pairs of locations within the location group. The attribute name is subject to change.
        """
        return pulumi.get(self, "scope_group_member_entities")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        (String) The admin scope type. The attribute name is subject to change. `ORGANIZATION`, `DEPARTMENT`, `LOCATION`, `LOCATION_GROUP`
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetZIAURLCategoriesScopeScopeEntityResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, str],
                 id: int,
                 name: str):
        """
        :param Mapping[str, str] extensions: (Map of String)
        :param int id: URL category
        :param str name: (String) The configured name of the entity
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        URL category
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (String) The configured name of the entity
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetZIAURLCategoriesScopeScopeGroupMemberEntityResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, str],
                 id: int,
                 name: str):
        """
        :param Mapping[str, str] extensions: (Map of String)
        :param int id: URL category
        :param str name: (String) The configured name of the entity
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        URL category
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        (String) The configured name of the entity
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetZIAURLCategoriesUrlKeywordCountResult(dict):
    def __init__(__self__, *,
                 retain_parent_keyword_count: int,
                 retain_parent_url_count: int,
                 total_keyword_count: int,
                 total_url_count: int):
        """
        :param int retain_parent_keyword_count: (Number) Count of total keywords with retain parent category.
        :param int retain_parent_url_count: (Number) Count of URLs with retain parent category.
        :param int total_keyword_count: (Number) Total keyword count for the category.
        :param int total_url_count: (Number) Custom URL count for the category.
        """
        pulumi.set(__self__, "retain_parent_keyword_count", retain_parent_keyword_count)
        pulumi.set(__self__, "retain_parent_url_count", retain_parent_url_count)
        pulumi.set(__self__, "total_keyword_count", total_keyword_count)
        pulumi.set(__self__, "total_url_count", total_url_count)

    @property
    @pulumi.getter(name="retainParentKeywordCount")
    def retain_parent_keyword_count(self) -> int:
        """
        (Number) Count of total keywords with retain parent category.
        """
        return pulumi.get(self, "retain_parent_keyword_count")

    @property
    @pulumi.getter(name="retainParentUrlCount")
    def retain_parent_url_count(self) -> int:
        """
        (Number) Count of URLs with retain parent category.
        """
        return pulumi.get(self, "retain_parent_url_count")

    @property
    @pulumi.getter(name="totalKeywordCount")
    def total_keyword_count(self) -> int:
        """
        (Number) Total keyword count for the category.
        """
        return pulumi.get(self, "total_keyword_count")

    @property
    @pulumi.getter(name="totalUrlCount")
    def total_url_count(self) -> int:
        """
        (Number) Custom URL count for the category.
        """
        return pulumi.get(self, "total_url_count")


@pulumi.output_type
class GetZIAURLFilteringRulesDepartmentResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, str],
                 id: int,
                 name: str):
        """
        :param Mapping[str, str] extensions: (Map of String)
        :param int id: URL Filtering Rule ID
        :param str name: Name of the URL Filtering policy rule
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        URL Filtering Rule ID
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the URL Filtering policy rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetZIAURLFilteringRulesDeviceResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, str],
                 id: int,
                 name: str):
        """
        :param Mapping[str, str] extensions: (Map of String)
        :param int id: URL Filtering Rule ID
        :param str name: Name of the URL Filtering policy rule
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        URL Filtering Rule ID
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the URL Filtering policy rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetZIAURLFilteringRulesDeviceGroupResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, str],
                 id: int,
                 name: str):
        """
        :param Mapping[str, str] extensions: (Map of String)
        :param int id: URL Filtering Rule ID
        :param str name: Name of the URL Filtering policy rule
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        URL Filtering Rule ID
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the URL Filtering policy rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetZIAURLFilteringRulesGroupResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, str],
                 id: int,
                 name: str):
        """
        :param Mapping[str, str] extensions: (Map of String)
        :param int id: URL Filtering Rule ID
        :param str name: Name of the URL Filtering policy rule
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        URL Filtering Rule ID
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the URL Filtering policy rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetZIAURLFilteringRulesLabelResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, str],
                 id: int,
                 name: str):
        """
        :param Mapping[str, str] extensions: (Map of String)
        :param int id: URL Filtering Rule ID
        :param str name: Name of the URL Filtering policy rule
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        URL Filtering Rule ID
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the URL Filtering policy rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetZIAURLFilteringRulesLastModifiedByResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, str],
                 id: int,
                 name: str):
        """
        :param Mapping[str, str] extensions: (Map of String)
        :param int id: URL Filtering Rule ID
        :param str name: Name of the URL Filtering policy rule
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        URL Filtering Rule ID
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the URL Filtering policy rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetZIAURLFilteringRulesLocationResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, str],
                 id: int,
                 name: str):
        """
        :param Mapping[str, str] extensions: (Map of String)
        :param int id: URL Filtering Rule ID
        :param str name: Name of the URL Filtering policy rule
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        URL Filtering Rule ID
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the URL Filtering policy rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetZIAURLFilteringRulesLocationGroupResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, str],
                 id: int,
                 name: str):
        """
        :param Mapping[str, str] extensions: (Map of String)
        :param int id: URL Filtering Rule ID
        :param str name: Name of the URL Filtering policy rule
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        URL Filtering Rule ID
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the URL Filtering policy rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetZIAURLFilteringRulesOverrideGroupResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, str],
                 id: int,
                 name: str):
        """
        :param Mapping[str, str] extensions: (Map of String)
        :param int id: URL Filtering Rule ID
        :param str name: Name of the URL Filtering policy rule
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        URL Filtering Rule ID
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the URL Filtering policy rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetZIAURLFilteringRulesOverrideUserResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, str],
                 id: int,
                 name: str):
        """
        :param Mapping[str, str] extensions: (Map of String)
        :param int id: URL Filtering Rule ID
        :param str name: Name of the URL Filtering policy rule
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        URL Filtering Rule ID
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the URL Filtering policy rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetZIAURLFilteringRulesTimeWindowResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, str],
                 id: int,
                 name: str):
        """
        :param Mapping[str, str] extensions: (Map of String)
        :param int id: URL Filtering Rule ID
        :param str name: Name of the URL Filtering policy rule
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        URL Filtering Rule ID
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the URL Filtering policy rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetZIAURLFilteringRulesUserResult(dict):
    def __init__(__self__, *,
                 extensions: Mapping[str, str],
                 id: int,
                 name: str):
        """
        :param Mapping[str, str] extensions: (Map of String)
        :param int id: URL Filtering Rule ID
        :param str name: Name of the URL Filtering policy rule
        """
        pulumi.set(__self__, "extensions", extensions)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def extensions(self) -> Mapping[str, str]:
        """
        (Map of String)
        """
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        URL Filtering Rule ID
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the URL Filtering policy rule
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetZIAUserManagementDepartmentResult(dict):
    def __init__(__self__, *,
                 comments: str,
                 deleted: bool,
                 id: int,
                 idp_id: int,
                 name: str):
        """
        :param str comments: (String) Additional information about the group
        :param bool deleted: (Boolean) default: `false`
        :param int id: The ID of the time window resource.
        :param int idp_id: (Number) Unique identfier for the identity provider (IdP)
        :param str name: User name. This appears when choosing users for policies.
        """
        pulumi.set(__self__, "comments", comments)
        pulumi.set(__self__, "deleted", deleted)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "idp_id", idp_id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def comments(self) -> str:
        """
        (String) Additional information about the group
        """
        return pulumi.get(self, "comments")

    @property
    @pulumi.getter
    def deleted(self) -> bool:
        """
        (Boolean) default: `false`
        """
        return pulumi.get(self, "deleted")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        The ID of the time window resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="idpId")
    def idp_id(self) -> int:
        """
        (Number) Unique identfier for the identity provider (IdP)
        """
        return pulumi.get(self, "idp_id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        User name. This appears when choosing users for policies.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class GetZIAUserManagementGroupResult(dict):
    def __init__(__self__, *,
                 comments: str,
                 id: int,
                 idp_id: int,
                 name: str):
        """
        :param str comments: (String) Additional information about the group
        :param int id: The ID of the time window resource.
        :param int idp_id: (Number) Unique identfier for the identity provider (IdP)
        :param str name: User name. This appears when choosing users for policies.
        """
        pulumi.set(__self__, "comments", comments)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "idp_id", idp_id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def comments(self) -> str:
        """
        (String) Additional information about the group
        """
        return pulumi.get(self, "comments")

    @property
    @pulumi.getter
    def id(self) -> int:
        """
        The ID of the time window resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="idpId")
    def idp_id(self) -> int:
        """
        (Number) Unique identfier for the identity provider (IdP)
        """
        return pulumi.get(self, "idp_id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        User name. This appears when choosing users for policies.
        """
        return pulumi.get(self, "name")


