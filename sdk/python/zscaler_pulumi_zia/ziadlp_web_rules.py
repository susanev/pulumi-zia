# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ZIADLPWebRulesArgs', 'ZIADLPWebRules']

@pulumi.input_type
class ZIADLPWebRulesArgs:
    def __init__(__self__, *,
                 order: pulumi.Input[int],
                 access_control: Optional[pulumi.Input[str]] = None,
                 action: Optional[pulumi.Input[str]] = None,
                 auditor: Optional[pulumi.Input['ZIADLPWebRulesAuditorArgs']] = None,
                 cloud_applications: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 departments: Optional[pulumi.Input['ZIADLPWebRulesDepartmentsArgs']] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 dlp_engines: Optional[pulumi.Input['ZIADLPWebRulesDlpEnginesArgs']] = None,
                 excluded_departments: Optional[pulumi.Input['ZIADLPWebRulesExcludedDepartmentsArgs']] = None,
                 excluded_groups: Optional[pulumi.Input['ZIADLPWebRulesExcludedGroupsArgs']] = None,
                 excluded_users: Optional[pulumi.Input['ZIADLPWebRulesExcludedUsersArgs']] = None,
                 external_auditor_email: Optional[pulumi.Input[str]] = None,
                 file_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 groups: Optional[pulumi.Input['ZIADLPWebRulesGroupsArgs']] = None,
                 icap_server: Optional[pulumi.Input['ZIADLPWebRulesIcapServerArgs']] = None,
                 labels: Optional[pulumi.Input['ZIADLPWebRulesLabelsArgs']] = None,
                 location_groups: Optional[pulumi.Input['ZIADLPWebRulesLocationGroupsArgs']] = None,
                 locations: Optional[pulumi.Input['ZIADLPWebRulesLocationsArgs']] = None,
                 match_only: Optional[pulumi.Input[bool]] = None,
                 min_size: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 notification_template: Optional[pulumi.Input['ZIADLPWebRulesNotificationTemplateArgs']] = None,
                 ocr_enabled: Optional[pulumi.Input[bool]] = None,
                 protocols: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 rank: Optional[pulumi.Input[int]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 time_windows: Optional[pulumi.Input['ZIADLPWebRulesTimeWindowsArgs']] = None,
                 url_categories: Optional[pulumi.Input['ZIADLPWebRulesUrlCategoriesArgs']] = None,
                 users: Optional[pulumi.Input['ZIADLPWebRulesUsersArgs']] = None,
                 without_content_inspection: Optional[pulumi.Input[bool]] = None,
                 zscaler_incident_reciever: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a ZIADLPWebRules resource.
        :param pulumi.Input[int] order: The rule order of execution for the DLP policy rule with respect to other rules.
        :param pulumi.Input[str] access_control: The access privilege for this DLP policy rule based on the admin's state. The supported values are:
        :param pulumi.Input[str] action: The action taken when traffic matches the DLP policy rule criteria. The supported values are:
        :param pulumi.Input['ZIADLPWebRulesAuditorArgs'] auditor: The auditor to which the DLP policy rule must be applied.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] cloud_applications: The list of cloud applications to which the DLP policy rule must be applied. For the complete list of supported cloud applications refer to the  [ZIA API documentation](https://help.zscaler.com/zia/data-loss-prevention#/webDlpRules-post)
        :param pulumi.Input['ZIADLPWebRulesDepartmentsArgs'] departments: The name-ID pairs of the departments that are excluded from the DLP policy rule.
        :param pulumi.Input[str] description: The description of the DLP policy rule.
        :param pulumi.Input['ZIADLPWebRulesDlpEnginesArgs'] dlp_engines: The list of DLP engines to which the DLP policy rule must be applied.
        :param pulumi.Input['ZIADLPWebRulesExcludedDepartmentsArgs'] excluded_departments: The name-ID pairs of the groups that are excluded from the DLP policy rule. Maximum of up to `256` departments.
        :param pulumi.Input['ZIADLPWebRulesExcludedGroupsArgs'] excluded_groups: The name-ID pairs of the groups that are excluded from the DLP policy rule. Maximum of up to `256` groups.
        :param pulumi.Input['ZIADLPWebRulesExcludedUsersArgs'] excluded_users: The name-ID pairs of the users that are excluded from the DLP policy rule. Maximum of up to `256` users.
        :param pulumi.Input[str] external_auditor_email: The email address of an external auditor to whom DLP email notifications are sent.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] file_types: The list of file types to which the DLP policy rule must be applied. For the complete list of supported file types refer to the  [ZIA API documentation](https://help.zscaler.com/zia/data-loss-prevention#/webDlpRules-post)
        :param pulumi.Input['ZIADLPWebRulesGroupsArgs'] groups: The Name-ID pairs of groups to which the DLP policy rule must be applied. Maximum of up to `8` groups. When not used it implies `Any` to apply the rule to all groups.
        :param pulumi.Input['ZIADLPWebRulesIcapServerArgs'] icap_server: The DLP server, using ICAP, to which the transaction content is forwarded.
        :param pulumi.Input['ZIADLPWebRulesLabelsArgs'] labels: The Name-ID pairs of rule labels associated to the DLP policy rule.
        :param pulumi.Input['ZIADLPWebRulesLocationGroupsArgs'] location_groups: The Name-ID pairs of locations groups to which the DLP policy rule must be applied. Maximum of up to `32` location groups. When not used it implies `Any` to apply the rule to all location groups.
        :param pulumi.Input['ZIADLPWebRulesLocationsArgs'] locations: The Name-ID pairs of locations to which the DLP policy rule must be applied. Maximum of up to `8` locations. When not used it implies `Any` to apply the rule to all locations.
        :param pulumi.Input[bool] match_only: The match only criteria for DLP engines.
        :param pulumi.Input[int] min_size: The minimum file size (in KB) used for evaluation of the DLP policy rule.
        :param pulumi.Input[str] name: The DLP policy rule name.
        :param pulumi.Input['ZIADLPWebRulesNotificationTemplateArgs'] notification_template: The template used for DLP notification emails.
        :param pulumi.Input[bool] ocr_enabled: Enables or disables image file scanning.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] protocols: The protocol criteria specified for the DLP policy rule.
        :param pulumi.Input[int] rank: Admin rank of the admin who creates this rule
        :param pulumi.Input[str] state: Enables or disables the DLP policy rule.. The supported values are:
        :param pulumi.Input['ZIADLPWebRulesTimeWindowsArgs'] time_windows: The Name-ID pairs of time windows to which the DLP policy rule must be applied. Maximum of up to `2` time intervals. When not used it implies `always` to apply the rule to all time intervals.
        :param pulumi.Input['ZIADLPWebRulesUrlCategoriesArgs'] url_categories: The list of URL categories to which the DLP policy rule must be applied.
        :param pulumi.Input['ZIADLPWebRulesUsersArgs'] users: The Name-ID pairs of users to which the DLP policy rule must be applied. Maximum of up to `4` users. When not used it implies `Any` to apply the rule to all users.
        :param pulumi.Input[bool] without_content_inspection: Indicates a DLP policy rule without content inspection, when the value is set to true.
        :param pulumi.Input[bool] zscaler_incident_reciever: Indicates whether a Zscaler Incident Receiver is associated to the DLP policy rule.
        """
        pulumi.set(__self__, "order", order)
        if access_control is not None:
            pulumi.set(__self__, "access_control", access_control)
        if action is not None:
            pulumi.set(__self__, "action", action)
        if auditor is not None:
            pulumi.set(__self__, "auditor", auditor)
        if cloud_applications is not None:
            pulumi.set(__self__, "cloud_applications", cloud_applications)
        if departments is not None:
            pulumi.set(__self__, "departments", departments)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if dlp_engines is not None:
            pulumi.set(__self__, "dlp_engines", dlp_engines)
        if excluded_departments is not None:
            pulumi.set(__self__, "excluded_departments", excluded_departments)
        if excluded_groups is not None:
            pulumi.set(__self__, "excluded_groups", excluded_groups)
        if excluded_users is not None:
            pulumi.set(__self__, "excluded_users", excluded_users)
        if external_auditor_email is not None:
            pulumi.set(__self__, "external_auditor_email", external_auditor_email)
        if file_types is not None:
            pulumi.set(__self__, "file_types", file_types)
        if groups is not None:
            pulumi.set(__self__, "groups", groups)
        if icap_server is not None:
            pulumi.set(__self__, "icap_server", icap_server)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if location_groups is not None:
            pulumi.set(__self__, "location_groups", location_groups)
        if locations is not None:
            pulumi.set(__self__, "locations", locations)
        if match_only is not None:
            pulumi.set(__self__, "match_only", match_only)
        if min_size is not None:
            pulumi.set(__self__, "min_size", min_size)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if notification_template is not None:
            pulumi.set(__self__, "notification_template", notification_template)
        if ocr_enabled is not None:
            pulumi.set(__self__, "ocr_enabled", ocr_enabled)
        if protocols is not None:
            pulumi.set(__self__, "protocols", protocols)
        if rank is not None:
            pulumi.set(__self__, "rank", rank)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_windows is not None:
            pulumi.set(__self__, "time_windows", time_windows)
        if url_categories is not None:
            pulumi.set(__self__, "url_categories", url_categories)
        if users is not None:
            pulumi.set(__self__, "users", users)
        if without_content_inspection is not None:
            pulumi.set(__self__, "without_content_inspection", without_content_inspection)
        if zscaler_incident_reciever is not None:
            pulumi.set(__self__, "zscaler_incident_reciever", zscaler_incident_reciever)

    @property
    @pulumi.getter
    def order(self) -> pulumi.Input[int]:
        """
        The rule order of execution for the DLP policy rule with respect to other rules.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: pulumi.Input[int]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter(name="accessControl")
    def access_control(self) -> Optional[pulumi.Input[str]]:
        """
        The access privilege for this DLP policy rule based on the admin's state. The supported values are:
        """
        return pulumi.get(self, "access_control")

    @access_control.setter
    def access_control(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_control", value)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        The action taken when traffic matches the DLP policy rule criteria. The supported values are:
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def auditor(self) -> Optional[pulumi.Input['ZIADLPWebRulesAuditorArgs']]:
        """
        The auditor to which the DLP policy rule must be applied.
        """
        return pulumi.get(self, "auditor")

    @auditor.setter
    def auditor(self, value: Optional[pulumi.Input['ZIADLPWebRulesAuditorArgs']]):
        pulumi.set(self, "auditor", value)

    @property
    @pulumi.getter(name="cloudApplications")
    def cloud_applications(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The list of cloud applications to which the DLP policy rule must be applied. For the complete list of supported cloud applications refer to the  [ZIA API documentation](https://help.zscaler.com/zia/data-loss-prevention#/webDlpRules-post)
        """
        return pulumi.get(self, "cloud_applications")

    @cloud_applications.setter
    def cloud_applications(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "cloud_applications", value)

    @property
    @pulumi.getter
    def departments(self) -> Optional[pulumi.Input['ZIADLPWebRulesDepartmentsArgs']]:
        """
        The name-ID pairs of the departments that are excluded from the DLP policy rule.
        """
        return pulumi.get(self, "departments")

    @departments.setter
    def departments(self, value: Optional[pulumi.Input['ZIADLPWebRulesDepartmentsArgs']]):
        pulumi.set(self, "departments", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the DLP policy rule.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="dlpEngines")
    def dlp_engines(self) -> Optional[pulumi.Input['ZIADLPWebRulesDlpEnginesArgs']]:
        """
        The list of DLP engines to which the DLP policy rule must be applied.
        """
        return pulumi.get(self, "dlp_engines")

    @dlp_engines.setter
    def dlp_engines(self, value: Optional[pulumi.Input['ZIADLPWebRulesDlpEnginesArgs']]):
        pulumi.set(self, "dlp_engines", value)

    @property
    @pulumi.getter(name="excludedDepartments")
    def excluded_departments(self) -> Optional[pulumi.Input['ZIADLPWebRulesExcludedDepartmentsArgs']]:
        """
        The name-ID pairs of the groups that are excluded from the DLP policy rule. Maximum of up to `256` departments.
        """
        return pulumi.get(self, "excluded_departments")

    @excluded_departments.setter
    def excluded_departments(self, value: Optional[pulumi.Input['ZIADLPWebRulesExcludedDepartmentsArgs']]):
        pulumi.set(self, "excluded_departments", value)

    @property
    @pulumi.getter(name="excludedGroups")
    def excluded_groups(self) -> Optional[pulumi.Input['ZIADLPWebRulesExcludedGroupsArgs']]:
        """
        The name-ID pairs of the groups that are excluded from the DLP policy rule. Maximum of up to `256` groups.
        """
        return pulumi.get(self, "excluded_groups")

    @excluded_groups.setter
    def excluded_groups(self, value: Optional[pulumi.Input['ZIADLPWebRulesExcludedGroupsArgs']]):
        pulumi.set(self, "excluded_groups", value)

    @property
    @pulumi.getter(name="excludedUsers")
    def excluded_users(self) -> Optional[pulumi.Input['ZIADLPWebRulesExcludedUsersArgs']]:
        """
        The name-ID pairs of the users that are excluded from the DLP policy rule. Maximum of up to `256` users.
        """
        return pulumi.get(self, "excluded_users")

    @excluded_users.setter
    def excluded_users(self, value: Optional[pulumi.Input['ZIADLPWebRulesExcludedUsersArgs']]):
        pulumi.set(self, "excluded_users", value)

    @property
    @pulumi.getter(name="externalAuditorEmail")
    def external_auditor_email(self) -> Optional[pulumi.Input[str]]:
        """
        The email address of an external auditor to whom DLP email notifications are sent.
        """
        return pulumi.get(self, "external_auditor_email")

    @external_auditor_email.setter
    def external_auditor_email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_auditor_email", value)

    @property
    @pulumi.getter(name="fileTypes")
    def file_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The list of file types to which the DLP policy rule must be applied. For the complete list of supported file types refer to the  [ZIA API documentation](https://help.zscaler.com/zia/data-loss-prevention#/webDlpRules-post)
        """
        return pulumi.get(self, "file_types")

    @file_types.setter
    def file_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "file_types", value)

    @property
    @pulumi.getter
    def groups(self) -> Optional[pulumi.Input['ZIADLPWebRulesGroupsArgs']]:
        """
        The Name-ID pairs of groups to which the DLP policy rule must be applied. Maximum of up to `8` groups. When not used it implies `Any` to apply the rule to all groups.
        """
        return pulumi.get(self, "groups")

    @groups.setter
    def groups(self, value: Optional[pulumi.Input['ZIADLPWebRulesGroupsArgs']]):
        pulumi.set(self, "groups", value)

    @property
    @pulumi.getter(name="icapServer")
    def icap_server(self) -> Optional[pulumi.Input['ZIADLPWebRulesIcapServerArgs']]:
        """
        The DLP server, using ICAP, to which the transaction content is forwarded.
        """
        return pulumi.get(self, "icap_server")

    @icap_server.setter
    def icap_server(self, value: Optional[pulumi.Input['ZIADLPWebRulesIcapServerArgs']]):
        pulumi.set(self, "icap_server", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input['ZIADLPWebRulesLabelsArgs']]:
        """
        The Name-ID pairs of rule labels associated to the DLP policy rule.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input['ZIADLPWebRulesLabelsArgs']]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter(name="locationGroups")
    def location_groups(self) -> Optional[pulumi.Input['ZIADLPWebRulesLocationGroupsArgs']]:
        """
        The Name-ID pairs of locations groups to which the DLP policy rule must be applied. Maximum of up to `32` location groups. When not used it implies `Any` to apply the rule to all location groups.
        """
        return pulumi.get(self, "location_groups")

    @location_groups.setter
    def location_groups(self, value: Optional[pulumi.Input['ZIADLPWebRulesLocationGroupsArgs']]):
        pulumi.set(self, "location_groups", value)

    @property
    @pulumi.getter
    def locations(self) -> Optional[pulumi.Input['ZIADLPWebRulesLocationsArgs']]:
        """
        The Name-ID pairs of locations to which the DLP policy rule must be applied. Maximum of up to `8` locations. When not used it implies `Any` to apply the rule to all locations.
        """
        return pulumi.get(self, "locations")

    @locations.setter
    def locations(self, value: Optional[pulumi.Input['ZIADLPWebRulesLocationsArgs']]):
        pulumi.set(self, "locations", value)

    @property
    @pulumi.getter(name="matchOnly")
    def match_only(self) -> Optional[pulumi.Input[bool]]:
        """
        The match only criteria for DLP engines.
        """
        return pulumi.get(self, "match_only")

    @match_only.setter
    def match_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "match_only", value)

    @property
    @pulumi.getter(name="minSize")
    def min_size(self) -> Optional[pulumi.Input[int]]:
        """
        The minimum file size (in KB) used for evaluation of the DLP policy rule.
        """
        return pulumi.get(self, "min_size")

    @min_size.setter
    def min_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_size", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The DLP policy rule name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="notificationTemplate")
    def notification_template(self) -> Optional[pulumi.Input['ZIADLPWebRulesNotificationTemplateArgs']]:
        """
        The template used for DLP notification emails.
        """
        return pulumi.get(self, "notification_template")

    @notification_template.setter
    def notification_template(self, value: Optional[pulumi.Input['ZIADLPWebRulesNotificationTemplateArgs']]):
        pulumi.set(self, "notification_template", value)

    @property
    @pulumi.getter(name="ocrEnabled")
    def ocr_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enables or disables image file scanning.
        """
        return pulumi.get(self, "ocr_enabled")

    @ocr_enabled.setter
    def ocr_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ocr_enabled", value)

    @property
    @pulumi.getter
    def protocols(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The protocol criteria specified for the DLP policy rule.
        """
        return pulumi.get(self, "protocols")

    @protocols.setter
    def protocols(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "protocols", value)

    @property
    @pulumi.getter
    def rank(self) -> Optional[pulumi.Input[int]]:
        """
        Admin rank of the admin who creates this rule
        """
        return pulumi.get(self, "rank")

    @rank.setter
    def rank(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "rank", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        """
        Enables or disables the DLP policy rule.. The supported values are:
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter(name="timeWindows")
    def time_windows(self) -> Optional[pulumi.Input['ZIADLPWebRulesTimeWindowsArgs']]:
        """
        The Name-ID pairs of time windows to which the DLP policy rule must be applied. Maximum of up to `2` time intervals. When not used it implies `always` to apply the rule to all time intervals.
        """
        return pulumi.get(self, "time_windows")

    @time_windows.setter
    def time_windows(self, value: Optional[pulumi.Input['ZIADLPWebRulesTimeWindowsArgs']]):
        pulumi.set(self, "time_windows", value)

    @property
    @pulumi.getter(name="urlCategories")
    def url_categories(self) -> Optional[pulumi.Input['ZIADLPWebRulesUrlCategoriesArgs']]:
        """
        The list of URL categories to which the DLP policy rule must be applied.
        """
        return pulumi.get(self, "url_categories")

    @url_categories.setter
    def url_categories(self, value: Optional[pulumi.Input['ZIADLPWebRulesUrlCategoriesArgs']]):
        pulumi.set(self, "url_categories", value)

    @property
    @pulumi.getter
    def users(self) -> Optional[pulumi.Input['ZIADLPWebRulesUsersArgs']]:
        """
        The Name-ID pairs of users to which the DLP policy rule must be applied. Maximum of up to `4` users. When not used it implies `Any` to apply the rule to all users.
        """
        return pulumi.get(self, "users")

    @users.setter
    def users(self, value: Optional[pulumi.Input['ZIADLPWebRulesUsersArgs']]):
        pulumi.set(self, "users", value)

    @property
    @pulumi.getter(name="withoutContentInspection")
    def without_content_inspection(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates a DLP policy rule without content inspection, when the value is set to true.
        """
        return pulumi.get(self, "without_content_inspection")

    @without_content_inspection.setter
    def without_content_inspection(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "without_content_inspection", value)

    @property
    @pulumi.getter(name="zscalerIncidentReciever")
    def zscaler_incident_reciever(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether a Zscaler Incident Receiver is associated to the DLP policy rule.
        """
        return pulumi.get(self, "zscaler_incident_reciever")

    @zscaler_incident_reciever.setter
    def zscaler_incident_reciever(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "zscaler_incident_reciever", value)


@pulumi.input_type
class _ZIADLPWebRulesState:
    def __init__(__self__, *,
                 access_control: Optional[pulumi.Input[str]] = None,
                 action: Optional[pulumi.Input[str]] = None,
                 auditor: Optional[pulumi.Input['ZIADLPWebRulesAuditorArgs']] = None,
                 cloud_applications: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 departments: Optional[pulumi.Input['ZIADLPWebRulesDepartmentsArgs']] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 dlp_engines: Optional[pulumi.Input['ZIADLPWebRulesDlpEnginesArgs']] = None,
                 excluded_departments: Optional[pulumi.Input['ZIADLPWebRulesExcludedDepartmentsArgs']] = None,
                 excluded_groups: Optional[pulumi.Input['ZIADLPWebRulesExcludedGroupsArgs']] = None,
                 excluded_users: Optional[pulumi.Input['ZIADLPWebRulesExcludedUsersArgs']] = None,
                 external_auditor_email: Optional[pulumi.Input[str]] = None,
                 file_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 groups: Optional[pulumi.Input['ZIADLPWebRulesGroupsArgs']] = None,
                 icap_server: Optional[pulumi.Input['ZIADLPWebRulesIcapServerArgs']] = None,
                 labels: Optional[pulumi.Input['ZIADLPWebRulesLabelsArgs']] = None,
                 location_groups: Optional[pulumi.Input['ZIADLPWebRulesLocationGroupsArgs']] = None,
                 locations: Optional[pulumi.Input['ZIADLPWebRulesLocationsArgs']] = None,
                 match_only: Optional[pulumi.Input[bool]] = None,
                 min_size: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 notification_template: Optional[pulumi.Input['ZIADLPWebRulesNotificationTemplateArgs']] = None,
                 ocr_enabled: Optional[pulumi.Input[bool]] = None,
                 order: Optional[pulumi.Input[int]] = None,
                 protocols: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 rank: Optional[pulumi.Input[int]] = None,
                 rule_id: Optional[pulumi.Input[int]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 time_windows: Optional[pulumi.Input['ZIADLPWebRulesTimeWindowsArgs']] = None,
                 url_categories: Optional[pulumi.Input['ZIADLPWebRulesUrlCategoriesArgs']] = None,
                 users: Optional[pulumi.Input['ZIADLPWebRulesUsersArgs']] = None,
                 without_content_inspection: Optional[pulumi.Input[bool]] = None,
                 zscaler_incident_reciever: Optional[pulumi.Input[bool]] = None):
        """
        Input properties used for looking up and filtering ZIADLPWebRules resources.
        :param pulumi.Input[str] access_control: The access privilege for this DLP policy rule based on the admin's state. The supported values are:
        :param pulumi.Input[str] action: The action taken when traffic matches the DLP policy rule criteria. The supported values are:
        :param pulumi.Input['ZIADLPWebRulesAuditorArgs'] auditor: The auditor to which the DLP policy rule must be applied.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] cloud_applications: The list of cloud applications to which the DLP policy rule must be applied. For the complete list of supported cloud applications refer to the  [ZIA API documentation](https://help.zscaler.com/zia/data-loss-prevention#/webDlpRules-post)
        :param pulumi.Input['ZIADLPWebRulesDepartmentsArgs'] departments: The name-ID pairs of the departments that are excluded from the DLP policy rule.
        :param pulumi.Input[str] description: The description of the DLP policy rule.
        :param pulumi.Input['ZIADLPWebRulesDlpEnginesArgs'] dlp_engines: The list of DLP engines to which the DLP policy rule must be applied.
        :param pulumi.Input['ZIADLPWebRulesExcludedDepartmentsArgs'] excluded_departments: The name-ID pairs of the groups that are excluded from the DLP policy rule. Maximum of up to `256` departments.
        :param pulumi.Input['ZIADLPWebRulesExcludedGroupsArgs'] excluded_groups: The name-ID pairs of the groups that are excluded from the DLP policy rule. Maximum of up to `256` groups.
        :param pulumi.Input['ZIADLPWebRulesExcludedUsersArgs'] excluded_users: The name-ID pairs of the users that are excluded from the DLP policy rule. Maximum of up to `256` users.
        :param pulumi.Input[str] external_auditor_email: The email address of an external auditor to whom DLP email notifications are sent.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] file_types: The list of file types to which the DLP policy rule must be applied. For the complete list of supported file types refer to the  [ZIA API documentation](https://help.zscaler.com/zia/data-loss-prevention#/webDlpRules-post)
        :param pulumi.Input['ZIADLPWebRulesGroupsArgs'] groups: The Name-ID pairs of groups to which the DLP policy rule must be applied. Maximum of up to `8` groups. When not used it implies `Any` to apply the rule to all groups.
        :param pulumi.Input['ZIADLPWebRulesIcapServerArgs'] icap_server: The DLP server, using ICAP, to which the transaction content is forwarded.
        :param pulumi.Input['ZIADLPWebRulesLabelsArgs'] labels: The Name-ID pairs of rule labels associated to the DLP policy rule.
        :param pulumi.Input['ZIADLPWebRulesLocationGroupsArgs'] location_groups: The Name-ID pairs of locations groups to which the DLP policy rule must be applied. Maximum of up to `32` location groups. When not used it implies `Any` to apply the rule to all location groups.
        :param pulumi.Input['ZIADLPWebRulesLocationsArgs'] locations: The Name-ID pairs of locations to which the DLP policy rule must be applied. Maximum of up to `8` locations. When not used it implies `Any` to apply the rule to all locations.
        :param pulumi.Input[bool] match_only: The match only criteria for DLP engines.
        :param pulumi.Input[int] min_size: The minimum file size (in KB) used for evaluation of the DLP policy rule.
        :param pulumi.Input[str] name: The DLP policy rule name.
        :param pulumi.Input['ZIADLPWebRulesNotificationTemplateArgs'] notification_template: The template used for DLP notification emails.
        :param pulumi.Input[bool] ocr_enabled: Enables or disables image file scanning.
        :param pulumi.Input[int] order: The rule order of execution for the DLP policy rule with respect to other rules.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] protocols: The protocol criteria specified for the DLP policy rule.
        :param pulumi.Input[int] rank: Admin rank of the admin who creates this rule
        :param pulumi.Input[str] state: Enables or disables the DLP policy rule.. The supported values are:
        :param pulumi.Input['ZIADLPWebRulesTimeWindowsArgs'] time_windows: The Name-ID pairs of time windows to which the DLP policy rule must be applied. Maximum of up to `2` time intervals. When not used it implies `always` to apply the rule to all time intervals.
        :param pulumi.Input['ZIADLPWebRulesUrlCategoriesArgs'] url_categories: The list of URL categories to which the DLP policy rule must be applied.
        :param pulumi.Input['ZIADLPWebRulesUsersArgs'] users: The Name-ID pairs of users to which the DLP policy rule must be applied. Maximum of up to `4` users. When not used it implies `Any` to apply the rule to all users.
        :param pulumi.Input[bool] without_content_inspection: Indicates a DLP policy rule without content inspection, when the value is set to true.
        :param pulumi.Input[bool] zscaler_incident_reciever: Indicates whether a Zscaler Incident Receiver is associated to the DLP policy rule.
        """
        if access_control is not None:
            pulumi.set(__self__, "access_control", access_control)
        if action is not None:
            pulumi.set(__self__, "action", action)
        if auditor is not None:
            pulumi.set(__self__, "auditor", auditor)
        if cloud_applications is not None:
            pulumi.set(__self__, "cloud_applications", cloud_applications)
        if departments is not None:
            pulumi.set(__self__, "departments", departments)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if dlp_engines is not None:
            pulumi.set(__self__, "dlp_engines", dlp_engines)
        if excluded_departments is not None:
            pulumi.set(__self__, "excluded_departments", excluded_departments)
        if excluded_groups is not None:
            pulumi.set(__self__, "excluded_groups", excluded_groups)
        if excluded_users is not None:
            pulumi.set(__self__, "excluded_users", excluded_users)
        if external_auditor_email is not None:
            pulumi.set(__self__, "external_auditor_email", external_auditor_email)
        if file_types is not None:
            pulumi.set(__self__, "file_types", file_types)
        if groups is not None:
            pulumi.set(__self__, "groups", groups)
        if icap_server is not None:
            pulumi.set(__self__, "icap_server", icap_server)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if location_groups is not None:
            pulumi.set(__self__, "location_groups", location_groups)
        if locations is not None:
            pulumi.set(__self__, "locations", locations)
        if match_only is not None:
            pulumi.set(__self__, "match_only", match_only)
        if min_size is not None:
            pulumi.set(__self__, "min_size", min_size)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if notification_template is not None:
            pulumi.set(__self__, "notification_template", notification_template)
        if ocr_enabled is not None:
            pulumi.set(__self__, "ocr_enabled", ocr_enabled)
        if order is not None:
            pulumi.set(__self__, "order", order)
        if protocols is not None:
            pulumi.set(__self__, "protocols", protocols)
        if rank is not None:
            pulumi.set(__self__, "rank", rank)
        if rule_id is not None:
            pulumi.set(__self__, "rule_id", rule_id)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if time_windows is not None:
            pulumi.set(__self__, "time_windows", time_windows)
        if url_categories is not None:
            pulumi.set(__self__, "url_categories", url_categories)
        if users is not None:
            pulumi.set(__self__, "users", users)
        if without_content_inspection is not None:
            pulumi.set(__self__, "without_content_inspection", without_content_inspection)
        if zscaler_incident_reciever is not None:
            pulumi.set(__self__, "zscaler_incident_reciever", zscaler_incident_reciever)

    @property
    @pulumi.getter(name="accessControl")
    def access_control(self) -> Optional[pulumi.Input[str]]:
        """
        The access privilege for this DLP policy rule based on the admin's state. The supported values are:
        """
        return pulumi.get(self, "access_control")

    @access_control.setter
    def access_control(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_control", value)

    @property
    @pulumi.getter
    def action(self) -> Optional[pulumi.Input[str]]:
        """
        The action taken when traffic matches the DLP policy rule criteria. The supported values are:
        """
        return pulumi.get(self, "action")

    @action.setter
    def action(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "action", value)

    @property
    @pulumi.getter
    def auditor(self) -> Optional[pulumi.Input['ZIADLPWebRulesAuditorArgs']]:
        """
        The auditor to which the DLP policy rule must be applied.
        """
        return pulumi.get(self, "auditor")

    @auditor.setter
    def auditor(self, value: Optional[pulumi.Input['ZIADLPWebRulesAuditorArgs']]):
        pulumi.set(self, "auditor", value)

    @property
    @pulumi.getter(name="cloudApplications")
    def cloud_applications(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The list of cloud applications to which the DLP policy rule must be applied. For the complete list of supported cloud applications refer to the  [ZIA API documentation](https://help.zscaler.com/zia/data-loss-prevention#/webDlpRules-post)
        """
        return pulumi.get(self, "cloud_applications")

    @cloud_applications.setter
    def cloud_applications(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "cloud_applications", value)

    @property
    @pulumi.getter
    def departments(self) -> Optional[pulumi.Input['ZIADLPWebRulesDepartmentsArgs']]:
        """
        The name-ID pairs of the departments that are excluded from the DLP policy rule.
        """
        return pulumi.get(self, "departments")

    @departments.setter
    def departments(self, value: Optional[pulumi.Input['ZIADLPWebRulesDepartmentsArgs']]):
        pulumi.set(self, "departments", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the DLP policy rule.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="dlpEngines")
    def dlp_engines(self) -> Optional[pulumi.Input['ZIADLPWebRulesDlpEnginesArgs']]:
        """
        The list of DLP engines to which the DLP policy rule must be applied.
        """
        return pulumi.get(self, "dlp_engines")

    @dlp_engines.setter
    def dlp_engines(self, value: Optional[pulumi.Input['ZIADLPWebRulesDlpEnginesArgs']]):
        pulumi.set(self, "dlp_engines", value)

    @property
    @pulumi.getter(name="excludedDepartments")
    def excluded_departments(self) -> Optional[pulumi.Input['ZIADLPWebRulesExcludedDepartmentsArgs']]:
        """
        The name-ID pairs of the groups that are excluded from the DLP policy rule. Maximum of up to `256` departments.
        """
        return pulumi.get(self, "excluded_departments")

    @excluded_departments.setter
    def excluded_departments(self, value: Optional[pulumi.Input['ZIADLPWebRulesExcludedDepartmentsArgs']]):
        pulumi.set(self, "excluded_departments", value)

    @property
    @pulumi.getter(name="excludedGroups")
    def excluded_groups(self) -> Optional[pulumi.Input['ZIADLPWebRulesExcludedGroupsArgs']]:
        """
        The name-ID pairs of the groups that are excluded from the DLP policy rule. Maximum of up to `256` groups.
        """
        return pulumi.get(self, "excluded_groups")

    @excluded_groups.setter
    def excluded_groups(self, value: Optional[pulumi.Input['ZIADLPWebRulesExcludedGroupsArgs']]):
        pulumi.set(self, "excluded_groups", value)

    @property
    @pulumi.getter(name="excludedUsers")
    def excluded_users(self) -> Optional[pulumi.Input['ZIADLPWebRulesExcludedUsersArgs']]:
        """
        The name-ID pairs of the users that are excluded from the DLP policy rule. Maximum of up to `256` users.
        """
        return pulumi.get(self, "excluded_users")

    @excluded_users.setter
    def excluded_users(self, value: Optional[pulumi.Input['ZIADLPWebRulesExcludedUsersArgs']]):
        pulumi.set(self, "excluded_users", value)

    @property
    @pulumi.getter(name="externalAuditorEmail")
    def external_auditor_email(self) -> Optional[pulumi.Input[str]]:
        """
        The email address of an external auditor to whom DLP email notifications are sent.
        """
        return pulumi.get(self, "external_auditor_email")

    @external_auditor_email.setter
    def external_auditor_email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_auditor_email", value)

    @property
    @pulumi.getter(name="fileTypes")
    def file_types(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The list of file types to which the DLP policy rule must be applied. For the complete list of supported file types refer to the  [ZIA API documentation](https://help.zscaler.com/zia/data-loss-prevention#/webDlpRules-post)
        """
        return pulumi.get(self, "file_types")

    @file_types.setter
    def file_types(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "file_types", value)

    @property
    @pulumi.getter
    def groups(self) -> Optional[pulumi.Input['ZIADLPWebRulesGroupsArgs']]:
        """
        The Name-ID pairs of groups to which the DLP policy rule must be applied. Maximum of up to `8` groups. When not used it implies `Any` to apply the rule to all groups.
        """
        return pulumi.get(self, "groups")

    @groups.setter
    def groups(self, value: Optional[pulumi.Input['ZIADLPWebRulesGroupsArgs']]):
        pulumi.set(self, "groups", value)

    @property
    @pulumi.getter(name="icapServer")
    def icap_server(self) -> Optional[pulumi.Input['ZIADLPWebRulesIcapServerArgs']]:
        """
        The DLP server, using ICAP, to which the transaction content is forwarded.
        """
        return pulumi.get(self, "icap_server")

    @icap_server.setter
    def icap_server(self, value: Optional[pulumi.Input['ZIADLPWebRulesIcapServerArgs']]):
        pulumi.set(self, "icap_server", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input['ZIADLPWebRulesLabelsArgs']]:
        """
        The Name-ID pairs of rule labels associated to the DLP policy rule.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input['ZIADLPWebRulesLabelsArgs']]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter(name="locationGroups")
    def location_groups(self) -> Optional[pulumi.Input['ZIADLPWebRulesLocationGroupsArgs']]:
        """
        The Name-ID pairs of locations groups to which the DLP policy rule must be applied. Maximum of up to `32` location groups. When not used it implies `Any` to apply the rule to all location groups.
        """
        return pulumi.get(self, "location_groups")

    @location_groups.setter
    def location_groups(self, value: Optional[pulumi.Input['ZIADLPWebRulesLocationGroupsArgs']]):
        pulumi.set(self, "location_groups", value)

    @property
    @pulumi.getter
    def locations(self) -> Optional[pulumi.Input['ZIADLPWebRulesLocationsArgs']]:
        """
        The Name-ID pairs of locations to which the DLP policy rule must be applied. Maximum of up to `8` locations. When not used it implies `Any` to apply the rule to all locations.
        """
        return pulumi.get(self, "locations")

    @locations.setter
    def locations(self, value: Optional[pulumi.Input['ZIADLPWebRulesLocationsArgs']]):
        pulumi.set(self, "locations", value)

    @property
    @pulumi.getter(name="matchOnly")
    def match_only(self) -> Optional[pulumi.Input[bool]]:
        """
        The match only criteria for DLP engines.
        """
        return pulumi.get(self, "match_only")

    @match_only.setter
    def match_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "match_only", value)

    @property
    @pulumi.getter(name="minSize")
    def min_size(self) -> Optional[pulumi.Input[int]]:
        """
        The minimum file size (in KB) used for evaluation of the DLP policy rule.
        """
        return pulumi.get(self, "min_size")

    @min_size.setter
    def min_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "min_size", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The DLP policy rule name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="notificationTemplate")
    def notification_template(self) -> Optional[pulumi.Input['ZIADLPWebRulesNotificationTemplateArgs']]:
        """
        The template used for DLP notification emails.
        """
        return pulumi.get(self, "notification_template")

    @notification_template.setter
    def notification_template(self, value: Optional[pulumi.Input['ZIADLPWebRulesNotificationTemplateArgs']]):
        pulumi.set(self, "notification_template", value)

    @property
    @pulumi.getter(name="ocrEnabled")
    def ocr_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enables or disables image file scanning.
        """
        return pulumi.get(self, "ocr_enabled")

    @ocr_enabled.setter
    def ocr_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ocr_enabled", value)

    @property
    @pulumi.getter
    def order(self) -> Optional[pulumi.Input[int]]:
        """
        The rule order of execution for the DLP policy rule with respect to other rules.
        """
        return pulumi.get(self, "order")

    @order.setter
    def order(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "order", value)

    @property
    @pulumi.getter
    def protocols(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The protocol criteria specified for the DLP policy rule.
        """
        return pulumi.get(self, "protocols")

    @protocols.setter
    def protocols(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "protocols", value)

    @property
    @pulumi.getter
    def rank(self) -> Optional[pulumi.Input[int]]:
        """
        Admin rank of the admin who creates this rule
        """
        return pulumi.get(self, "rank")

    @rank.setter
    def rank(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "rank", value)

    @property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "rule_id")

    @rule_id.setter
    def rule_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "rule_id", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        """
        Enables or disables the DLP policy rule.. The supported values are:
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter(name="timeWindows")
    def time_windows(self) -> Optional[pulumi.Input['ZIADLPWebRulesTimeWindowsArgs']]:
        """
        The Name-ID pairs of time windows to which the DLP policy rule must be applied. Maximum of up to `2` time intervals. When not used it implies `always` to apply the rule to all time intervals.
        """
        return pulumi.get(self, "time_windows")

    @time_windows.setter
    def time_windows(self, value: Optional[pulumi.Input['ZIADLPWebRulesTimeWindowsArgs']]):
        pulumi.set(self, "time_windows", value)

    @property
    @pulumi.getter(name="urlCategories")
    def url_categories(self) -> Optional[pulumi.Input['ZIADLPWebRulesUrlCategoriesArgs']]:
        """
        The list of URL categories to which the DLP policy rule must be applied.
        """
        return pulumi.get(self, "url_categories")

    @url_categories.setter
    def url_categories(self, value: Optional[pulumi.Input['ZIADLPWebRulesUrlCategoriesArgs']]):
        pulumi.set(self, "url_categories", value)

    @property
    @pulumi.getter
    def users(self) -> Optional[pulumi.Input['ZIADLPWebRulesUsersArgs']]:
        """
        The Name-ID pairs of users to which the DLP policy rule must be applied. Maximum of up to `4` users. When not used it implies `Any` to apply the rule to all users.
        """
        return pulumi.get(self, "users")

    @users.setter
    def users(self, value: Optional[pulumi.Input['ZIADLPWebRulesUsersArgs']]):
        pulumi.set(self, "users", value)

    @property
    @pulumi.getter(name="withoutContentInspection")
    def without_content_inspection(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates a DLP policy rule without content inspection, when the value is set to true.
        """
        return pulumi.get(self, "without_content_inspection")

    @without_content_inspection.setter
    def without_content_inspection(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "without_content_inspection", value)

    @property
    @pulumi.getter(name="zscalerIncidentReciever")
    def zscaler_incident_reciever(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates whether a Zscaler Incident Receiver is associated to the DLP policy rule.
        """
        return pulumi.get(self, "zscaler_incident_reciever")

    @zscaler_incident_reciever.setter
    def zscaler_incident_reciever(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "zscaler_incident_reciever", value)


class ZIADLPWebRules(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_control: Optional[pulumi.Input[str]] = None,
                 action: Optional[pulumi.Input[str]] = None,
                 auditor: Optional[pulumi.Input[pulumi.InputType['ZIADLPWebRulesAuditorArgs']]] = None,
                 cloud_applications: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 departments: Optional[pulumi.Input[pulumi.InputType['ZIADLPWebRulesDepartmentsArgs']]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 dlp_engines: Optional[pulumi.Input[pulumi.InputType['ZIADLPWebRulesDlpEnginesArgs']]] = None,
                 excluded_departments: Optional[pulumi.Input[pulumi.InputType['ZIADLPWebRulesExcludedDepartmentsArgs']]] = None,
                 excluded_groups: Optional[pulumi.Input[pulumi.InputType['ZIADLPWebRulesExcludedGroupsArgs']]] = None,
                 excluded_users: Optional[pulumi.Input[pulumi.InputType['ZIADLPWebRulesExcludedUsersArgs']]] = None,
                 external_auditor_email: Optional[pulumi.Input[str]] = None,
                 file_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 groups: Optional[pulumi.Input[pulumi.InputType['ZIADLPWebRulesGroupsArgs']]] = None,
                 icap_server: Optional[pulumi.Input[pulumi.InputType['ZIADLPWebRulesIcapServerArgs']]] = None,
                 labels: Optional[pulumi.Input[pulumi.InputType['ZIADLPWebRulesLabelsArgs']]] = None,
                 location_groups: Optional[pulumi.Input[pulumi.InputType['ZIADLPWebRulesLocationGroupsArgs']]] = None,
                 locations: Optional[pulumi.Input[pulumi.InputType['ZIADLPWebRulesLocationsArgs']]] = None,
                 match_only: Optional[pulumi.Input[bool]] = None,
                 min_size: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 notification_template: Optional[pulumi.Input[pulumi.InputType['ZIADLPWebRulesNotificationTemplateArgs']]] = None,
                 ocr_enabled: Optional[pulumi.Input[bool]] = None,
                 order: Optional[pulumi.Input[int]] = None,
                 protocols: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 rank: Optional[pulumi.Input[int]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 time_windows: Optional[pulumi.Input[pulumi.InputType['ZIADLPWebRulesTimeWindowsArgs']]] = None,
                 url_categories: Optional[pulumi.Input[pulumi.InputType['ZIADLPWebRulesUrlCategoriesArgs']]] = None,
                 users: Optional[pulumi.Input[pulumi.InputType['ZIADLPWebRulesUsersArgs']]] = None,
                 without_content_inspection: Optional[pulumi.Input[bool]] = None,
                 zscaler_incident_reciever: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        """
        The **zia_dlp_web_rules** resource allows the creation and management of ZIA DLP Web Rules in the Zscaler Internet Access cloud or via the API.

        ## Example Usage

        ```python
        import pulumi
        import zscaler_pulumi_zia as zia

        test = zia.ZIADLPWebRules("test",
            action="ALLOW",
            cloud_applications=[
                "ZENDESK",
                "LUCKY_ORANGE",
                "MICROSOFT_POWERAPPS",
                "MICROSOFTLIVEMEETING",
            ],
            description="Test",
            file_types=[],
            match_only=False,
            min_size=20,
            ocr_enabled=False,
            order=1,
            protocols=[
                "HTTPS_RULE",
                "HTTP_RULE",
            ],
            rank=7,
            state="ENABLED",
            without_content_inspection=False,
            zscaler_incident_reciever=True)
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] access_control: The access privilege for this DLP policy rule based on the admin's state. The supported values are:
        :param pulumi.Input[str] action: The action taken when traffic matches the DLP policy rule criteria. The supported values are:
        :param pulumi.Input[pulumi.InputType['ZIADLPWebRulesAuditorArgs']] auditor: The auditor to which the DLP policy rule must be applied.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] cloud_applications: The list of cloud applications to which the DLP policy rule must be applied. For the complete list of supported cloud applications refer to the  [ZIA API documentation](https://help.zscaler.com/zia/data-loss-prevention#/webDlpRules-post)
        :param pulumi.Input[pulumi.InputType['ZIADLPWebRulesDepartmentsArgs']] departments: The name-ID pairs of the departments that are excluded from the DLP policy rule.
        :param pulumi.Input[str] description: The description of the DLP policy rule.
        :param pulumi.Input[pulumi.InputType['ZIADLPWebRulesDlpEnginesArgs']] dlp_engines: The list of DLP engines to which the DLP policy rule must be applied.
        :param pulumi.Input[pulumi.InputType['ZIADLPWebRulesExcludedDepartmentsArgs']] excluded_departments: The name-ID pairs of the groups that are excluded from the DLP policy rule. Maximum of up to `256` departments.
        :param pulumi.Input[pulumi.InputType['ZIADLPWebRulesExcludedGroupsArgs']] excluded_groups: The name-ID pairs of the groups that are excluded from the DLP policy rule. Maximum of up to `256` groups.
        :param pulumi.Input[pulumi.InputType['ZIADLPWebRulesExcludedUsersArgs']] excluded_users: The name-ID pairs of the users that are excluded from the DLP policy rule. Maximum of up to `256` users.
        :param pulumi.Input[str] external_auditor_email: The email address of an external auditor to whom DLP email notifications are sent.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] file_types: The list of file types to which the DLP policy rule must be applied. For the complete list of supported file types refer to the  [ZIA API documentation](https://help.zscaler.com/zia/data-loss-prevention#/webDlpRules-post)
        :param pulumi.Input[pulumi.InputType['ZIADLPWebRulesGroupsArgs']] groups: The Name-ID pairs of groups to which the DLP policy rule must be applied. Maximum of up to `8` groups. When not used it implies `Any` to apply the rule to all groups.
        :param pulumi.Input[pulumi.InputType['ZIADLPWebRulesIcapServerArgs']] icap_server: The DLP server, using ICAP, to which the transaction content is forwarded.
        :param pulumi.Input[pulumi.InputType['ZIADLPWebRulesLabelsArgs']] labels: The Name-ID pairs of rule labels associated to the DLP policy rule.
        :param pulumi.Input[pulumi.InputType['ZIADLPWebRulesLocationGroupsArgs']] location_groups: The Name-ID pairs of locations groups to which the DLP policy rule must be applied. Maximum of up to `32` location groups. When not used it implies `Any` to apply the rule to all location groups.
        :param pulumi.Input[pulumi.InputType['ZIADLPWebRulesLocationsArgs']] locations: The Name-ID pairs of locations to which the DLP policy rule must be applied. Maximum of up to `8` locations. When not used it implies `Any` to apply the rule to all locations.
        :param pulumi.Input[bool] match_only: The match only criteria for DLP engines.
        :param pulumi.Input[int] min_size: The minimum file size (in KB) used for evaluation of the DLP policy rule.
        :param pulumi.Input[str] name: The DLP policy rule name.
        :param pulumi.Input[pulumi.InputType['ZIADLPWebRulesNotificationTemplateArgs']] notification_template: The template used for DLP notification emails.
        :param pulumi.Input[bool] ocr_enabled: Enables or disables image file scanning.
        :param pulumi.Input[int] order: The rule order of execution for the DLP policy rule with respect to other rules.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] protocols: The protocol criteria specified for the DLP policy rule.
        :param pulumi.Input[int] rank: Admin rank of the admin who creates this rule
        :param pulumi.Input[str] state: Enables or disables the DLP policy rule.. The supported values are:
        :param pulumi.Input[pulumi.InputType['ZIADLPWebRulesTimeWindowsArgs']] time_windows: The Name-ID pairs of time windows to which the DLP policy rule must be applied. Maximum of up to `2` time intervals. When not used it implies `always` to apply the rule to all time intervals.
        :param pulumi.Input[pulumi.InputType['ZIADLPWebRulesUrlCategoriesArgs']] url_categories: The list of URL categories to which the DLP policy rule must be applied.
        :param pulumi.Input[pulumi.InputType['ZIADLPWebRulesUsersArgs']] users: The Name-ID pairs of users to which the DLP policy rule must be applied. Maximum of up to `4` users. When not used it implies `Any` to apply the rule to all users.
        :param pulumi.Input[bool] without_content_inspection: Indicates a DLP policy rule without content inspection, when the value is set to true.
        :param pulumi.Input[bool] zscaler_incident_reciever: Indicates whether a Zscaler Incident Receiver is associated to the DLP policy rule.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: ZIADLPWebRulesArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        The **zia_dlp_web_rules** resource allows the creation and management of ZIA DLP Web Rules in the Zscaler Internet Access cloud or via the API.

        ## Example Usage

        ```python
        import pulumi
        import zscaler_pulumi_zia as zia

        test = zia.ZIADLPWebRules("test",
            action="ALLOW",
            cloud_applications=[
                "ZENDESK",
                "LUCKY_ORANGE",
                "MICROSOFT_POWERAPPS",
                "MICROSOFTLIVEMEETING",
            ],
            description="Test",
            file_types=[],
            match_only=False,
            min_size=20,
            ocr_enabled=False,
            order=1,
            protocols=[
                "HTTPS_RULE",
                "HTTP_RULE",
            ],
            rank=7,
            state="ENABLED",
            without_content_inspection=False,
            zscaler_incident_reciever=True)
        ```

        :param str resource_name: The name of the resource.
        :param ZIADLPWebRulesArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ZIADLPWebRulesArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_control: Optional[pulumi.Input[str]] = None,
                 action: Optional[pulumi.Input[str]] = None,
                 auditor: Optional[pulumi.Input[pulumi.InputType['ZIADLPWebRulesAuditorArgs']]] = None,
                 cloud_applications: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 departments: Optional[pulumi.Input[pulumi.InputType['ZIADLPWebRulesDepartmentsArgs']]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 dlp_engines: Optional[pulumi.Input[pulumi.InputType['ZIADLPWebRulesDlpEnginesArgs']]] = None,
                 excluded_departments: Optional[pulumi.Input[pulumi.InputType['ZIADLPWebRulesExcludedDepartmentsArgs']]] = None,
                 excluded_groups: Optional[pulumi.Input[pulumi.InputType['ZIADLPWebRulesExcludedGroupsArgs']]] = None,
                 excluded_users: Optional[pulumi.Input[pulumi.InputType['ZIADLPWebRulesExcludedUsersArgs']]] = None,
                 external_auditor_email: Optional[pulumi.Input[str]] = None,
                 file_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 groups: Optional[pulumi.Input[pulumi.InputType['ZIADLPWebRulesGroupsArgs']]] = None,
                 icap_server: Optional[pulumi.Input[pulumi.InputType['ZIADLPWebRulesIcapServerArgs']]] = None,
                 labels: Optional[pulumi.Input[pulumi.InputType['ZIADLPWebRulesLabelsArgs']]] = None,
                 location_groups: Optional[pulumi.Input[pulumi.InputType['ZIADLPWebRulesLocationGroupsArgs']]] = None,
                 locations: Optional[pulumi.Input[pulumi.InputType['ZIADLPWebRulesLocationsArgs']]] = None,
                 match_only: Optional[pulumi.Input[bool]] = None,
                 min_size: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 notification_template: Optional[pulumi.Input[pulumi.InputType['ZIADLPWebRulesNotificationTemplateArgs']]] = None,
                 ocr_enabled: Optional[pulumi.Input[bool]] = None,
                 order: Optional[pulumi.Input[int]] = None,
                 protocols: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 rank: Optional[pulumi.Input[int]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 time_windows: Optional[pulumi.Input[pulumi.InputType['ZIADLPWebRulesTimeWindowsArgs']]] = None,
                 url_categories: Optional[pulumi.Input[pulumi.InputType['ZIADLPWebRulesUrlCategoriesArgs']]] = None,
                 users: Optional[pulumi.Input[pulumi.InputType['ZIADLPWebRulesUsersArgs']]] = None,
                 without_content_inspection: Optional[pulumi.Input[bool]] = None,
                 zscaler_incident_reciever: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ZIADLPWebRulesArgs.__new__(ZIADLPWebRulesArgs)

            __props__.__dict__["access_control"] = access_control
            __props__.__dict__["action"] = action
            __props__.__dict__["auditor"] = auditor
            __props__.__dict__["cloud_applications"] = cloud_applications
            __props__.__dict__["departments"] = departments
            __props__.__dict__["description"] = description
            __props__.__dict__["dlp_engines"] = dlp_engines
            __props__.__dict__["excluded_departments"] = excluded_departments
            __props__.__dict__["excluded_groups"] = excluded_groups
            __props__.__dict__["excluded_users"] = excluded_users
            __props__.__dict__["external_auditor_email"] = external_auditor_email
            __props__.__dict__["file_types"] = file_types
            __props__.__dict__["groups"] = groups
            __props__.__dict__["icap_server"] = icap_server
            __props__.__dict__["labels"] = labels
            __props__.__dict__["location_groups"] = location_groups
            __props__.__dict__["locations"] = locations
            __props__.__dict__["match_only"] = match_only
            __props__.__dict__["min_size"] = min_size
            __props__.__dict__["name"] = name
            __props__.__dict__["notification_template"] = notification_template
            __props__.__dict__["ocr_enabled"] = ocr_enabled
            if order is None and not opts.urn:
                raise TypeError("Missing required property 'order'")
            __props__.__dict__["order"] = order
            __props__.__dict__["protocols"] = protocols
            __props__.__dict__["rank"] = rank
            __props__.__dict__["state"] = state
            __props__.__dict__["time_windows"] = time_windows
            __props__.__dict__["url_categories"] = url_categories
            __props__.__dict__["users"] = users
            __props__.__dict__["without_content_inspection"] = without_content_inspection
            __props__.__dict__["zscaler_incident_reciever"] = zscaler_incident_reciever
            __props__.__dict__["rule_id"] = None
        super(ZIADLPWebRules, __self__).__init__(
            'zia:index/zIADLPWebRules:ZIADLPWebRules',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            access_control: Optional[pulumi.Input[str]] = None,
            action: Optional[pulumi.Input[str]] = None,
            auditor: Optional[pulumi.Input[pulumi.InputType['ZIADLPWebRulesAuditorArgs']]] = None,
            cloud_applications: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            departments: Optional[pulumi.Input[pulumi.InputType['ZIADLPWebRulesDepartmentsArgs']]] = None,
            description: Optional[pulumi.Input[str]] = None,
            dlp_engines: Optional[pulumi.Input[pulumi.InputType['ZIADLPWebRulesDlpEnginesArgs']]] = None,
            excluded_departments: Optional[pulumi.Input[pulumi.InputType['ZIADLPWebRulesExcludedDepartmentsArgs']]] = None,
            excluded_groups: Optional[pulumi.Input[pulumi.InputType['ZIADLPWebRulesExcludedGroupsArgs']]] = None,
            excluded_users: Optional[pulumi.Input[pulumi.InputType['ZIADLPWebRulesExcludedUsersArgs']]] = None,
            external_auditor_email: Optional[pulumi.Input[str]] = None,
            file_types: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            groups: Optional[pulumi.Input[pulumi.InputType['ZIADLPWebRulesGroupsArgs']]] = None,
            icap_server: Optional[pulumi.Input[pulumi.InputType['ZIADLPWebRulesIcapServerArgs']]] = None,
            labels: Optional[pulumi.Input[pulumi.InputType['ZIADLPWebRulesLabelsArgs']]] = None,
            location_groups: Optional[pulumi.Input[pulumi.InputType['ZIADLPWebRulesLocationGroupsArgs']]] = None,
            locations: Optional[pulumi.Input[pulumi.InputType['ZIADLPWebRulesLocationsArgs']]] = None,
            match_only: Optional[pulumi.Input[bool]] = None,
            min_size: Optional[pulumi.Input[int]] = None,
            name: Optional[pulumi.Input[str]] = None,
            notification_template: Optional[pulumi.Input[pulumi.InputType['ZIADLPWebRulesNotificationTemplateArgs']]] = None,
            ocr_enabled: Optional[pulumi.Input[bool]] = None,
            order: Optional[pulumi.Input[int]] = None,
            protocols: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            rank: Optional[pulumi.Input[int]] = None,
            rule_id: Optional[pulumi.Input[int]] = None,
            state: Optional[pulumi.Input[str]] = None,
            time_windows: Optional[pulumi.Input[pulumi.InputType['ZIADLPWebRulesTimeWindowsArgs']]] = None,
            url_categories: Optional[pulumi.Input[pulumi.InputType['ZIADLPWebRulesUrlCategoriesArgs']]] = None,
            users: Optional[pulumi.Input[pulumi.InputType['ZIADLPWebRulesUsersArgs']]] = None,
            without_content_inspection: Optional[pulumi.Input[bool]] = None,
            zscaler_incident_reciever: Optional[pulumi.Input[bool]] = None) -> 'ZIADLPWebRules':
        """
        Get an existing ZIADLPWebRules resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] access_control: The access privilege for this DLP policy rule based on the admin's state. The supported values are:
        :param pulumi.Input[str] action: The action taken when traffic matches the DLP policy rule criteria. The supported values are:
        :param pulumi.Input[pulumi.InputType['ZIADLPWebRulesAuditorArgs']] auditor: The auditor to which the DLP policy rule must be applied.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] cloud_applications: The list of cloud applications to which the DLP policy rule must be applied. For the complete list of supported cloud applications refer to the  [ZIA API documentation](https://help.zscaler.com/zia/data-loss-prevention#/webDlpRules-post)
        :param pulumi.Input[pulumi.InputType['ZIADLPWebRulesDepartmentsArgs']] departments: The name-ID pairs of the departments that are excluded from the DLP policy rule.
        :param pulumi.Input[str] description: The description of the DLP policy rule.
        :param pulumi.Input[pulumi.InputType['ZIADLPWebRulesDlpEnginesArgs']] dlp_engines: The list of DLP engines to which the DLP policy rule must be applied.
        :param pulumi.Input[pulumi.InputType['ZIADLPWebRulesExcludedDepartmentsArgs']] excluded_departments: The name-ID pairs of the groups that are excluded from the DLP policy rule. Maximum of up to `256` departments.
        :param pulumi.Input[pulumi.InputType['ZIADLPWebRulesExcludedGroupsArgs']] excluded_groups: The name-ID pairs of the groups that are excluded from the DLP policy rule. Maximum of up to `256` groups.
        :param pulumi.Input[pulumi.InputType['ZIADLPWebRulesExcludedUsersArgs']] excluded_users: The name-ID pairs of the users that are excluded from the DLP policy rule. Maximum of up to `256` users.
        :param pulumi.Input[str] external_auditor_email: The email address of an external auditor to whom DLP email notifications are sent.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] file_types: The list of file types to which the DLP policy rule must be applied. For the complete list of supported file types refer to the  [ZIA API documentation](https://help.zscaler.com/zia/data-loss-prevention#/webDlpRules-post)
        :param pulumi.Input[pulumi.InputType['ZIADLPWebRulesGroupsArgs']] groups: The Name-ID pairs of groups to which the DLP policy rule must be applied. Maximum of up to `8` groups. When not used it implies `Any` to apply the rule to all groups.
        :param pulumi.Input[pulumi.InputType['ZIADLPWebRulesIcapServerArgs']] icap_server: The DLP server, using ICAP, to which the transaction content is forwarded.
        :param pulumi.Input[pulumi.InputType['ZIADLPWebRulesLabelsArgs']] labels: The Name-ID pairs of rule labels associated to the DLP policy rule.
        :param pulumi.Input[pulumi.InputType['ZIADLPWebRulesLocationGroupsArgs']] location_groups: The Name-ID pairs of locations groups to which the DLP policy rule must be applied. Maximum of up to `32` location groups. When not used it implies `Any` to apply the rule to all location groups.
        :param pulumi.Input[pulumi.InputType['ZIADLPWebRulesLocationsArgs']] locations: The Name-ID pairs of locations to which the DLP policy rule must be applied. Maximum of up to `8` locations. When not used it implies `Any` to apply the rule to all locations.
        :param pulumi.Input[bool] match_only: The match only criteria for DLP engines.
        :param pulumi.Input[int] min_size: The minimum file size (in KB) used for evaluation of the DLP policy rule.
        :param pulumi.Input[str] name: The DLP policy rule name.
        :param pulumi.Input[pulumi.InputType['ZIADLPWebRulesNotificationTemplateArgs']] notification_template: The template used for DLP notification emails.
        :param pulumi.Input[bool] ocr_enabled: Enables or disables image file scanning.
        :param pulumi.Input[int] order: The rule order of execution for the DLP policy rule with respect to other rules.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] protocols: The protocol criteria specified for the DLP policy rule.
        :param pulumi.Input[int] rank: Admin rank of the admin who creates this rule
        :param pulumi.Input[str] state: Enables or disables the DLP policy rule.. The supported values are:
        :param pulumi.Input[pulumi.InputType['ZIADLPWebRulesTimeWindowsArgs']] time_windows: The Name-ID pairs of time windows to which the DLP policy rule must be applied. Maximum of up to `2` time intervals. When not used it implies `always` to apply the rule to all time intervals.
        :param pulumi.Input[pulumi.InputType['ZIADLPWebRulesUrlCategoriesArgs']] url_categories: The list of URL categories to which the DLP policy rule must be applied.
        :param pulumi.Input[pulumi.InputType['ZIADLPWebRulesUsersArgs']] users: The Name-ID pairs of users to which the DLP policy rule must be applied. Maximum of up to `4` users. When not used it implies `Any` to apply the rule to all users.
        :param pulumi.Input[bool] without_content_inspection: Indicates a DLP policy rule without content inspection, when the value is set to true.
        :param pulumi.Input[bool] zscaler_incident_reciever: Indicates whether a Zscaler Incident Receiver is associated to the DLP policy rule.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ZIADLPWebRulesState.__new__(_ZIADLPWebRulesState)

        __props__.__dict__["access_control"] = access_control
        __props__.__dict__["action"] = action
        __props__.__dict__["auditor"] = auditor
        __props__.__dict__["cloud_applications"] = cloud_applications
        __props__.__dict__["departments"] = departments
        __props__.__dict__["description"] = description
        __props__.__dict__["dlp_engines"] = dlp_engines
        __props__.__dict__["excluded_departments"] = excluded_departments
        __props__.__dict__["excluded_groups"] = excluded_groups
        __props__.__dict__["excluded_users"] = excluded_users
        __props__.__dict__["external_auditor_email"] = external_auditor_email
        __props__.__dict__["file_types"] = file_types
        __props__.__dict__["groups"] = groups
        __props__.__dict__["icap_server"] = icap_server
        __props__.__dict__["labels"] = labels
        __props__.__dict__["location_groups"] = location_groups
        __props__.__dict__["locations"] = locations
        __props__.__dict__["match_only"] = match_only
        __props__.__dict__["min_size"] = min_size
        __props__.__dict__["name"] = name
        __props__.__dict__["notification_template"] = notification_template
        __props__.__dict__["ocr_enabled"] = ocr_enabled
        __props__.__dict__["order"] = order
        __props__.__dict__["protocols"] = protocols
        __props__.__dict__["rank"] = rank
        __props__.__dict__["rule_id"] = rule_id
        __props__.__dict__["state"] = state
        __props__.__dict__["time_windows"] = time_windows
        __props__.__dict__["url_categories"] = url_categories
        __props__.__dict__["users"] = users
        __props__.__dict__["without_content_inspection"] = without_content_inspection
        __props__.__dict__["zscaler_incident_reciever"] = zscaler_incident_reciever
        return ZIADLPWebRules(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="accessControl")
    def access_control(self) -> pulumi.Output[str]:
        """
        The access privilege for this DLP policy rule based on the admin's state. The supported values are:
        """
        return pulumi.get(self, "access_control")

    @property
    @pulumi.getter
    def action(self) -> pulumi.Output[str]:
        """
        The action taken when traffic matches the DLP policy rule criteria. The supported values are:
        """
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def auditor(self) -> pulumi.Output['outputs.ZIADLPWebRulesAuditor']:
        """
        The auditor to which the DLP policy rule must be applied.
        """
        return pulumi.get(self, "auditor")

    @property
    @pulumi.getter(name="cloudApplications")
    def cloud_applications(self) -> pulumi.Output[Sequence[str]]:
        """
        The list of cloud applications to which the DLP policy rule must be applied. For the complete list of supported cloud applications refer to the  [ZIA API documentation](https://help.zscaler.com/zia/data-loss-prevention#/webDlpRules-post)
        """
        return pulumi.get(self, "cloud_applications")

    @property
    @pulumi.getter
    def departments(self) -> pulumi.Output['outputs.ZIADLPWebRulesDepartments']:
        """
        The name-ID pairs of the departments that are excluded from the DLP policy rule.
        """
        return pulumi.get(self, "departments")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[str]:
        """
        The description of the DLP policy rule.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="dlpEngines")
    def dlp_engines(self) -> pulumi.Output['outputs.ZIADLPWebRulesDlpEngines']:
        """
        The list of DLP engines to which the DLP policy rule must be applied.
        """
        return pulumi.get(self, "dlp_engines")

    @property
    @pulumi.getter(name="excludedDepartments")
    def excluded_departments(self) -> pulumi.Output['outputs.ZIADLPWebRulesExcludedDepartments']:
        """
        The name-ID pairs of the groups that are excluded from the DLP policy rule. Maximum of up to `256` departments.
        """
        return pulumi.get(self, "excluded_departments")

    @property
    @pulumi.getter(name="excludedGroups")
    def excluded_groups(self) -> pulumi.Output['outputs.ZIADLPWebRulesExcludedGroups']:
        """
        The name-ID pairs of the groups that are excluded from the DLP policy rule. Maximum of up to `256` groups.
        """
        return pulumi.get(self, "excluded_groups")

    @property
    @pulumi.getter(name="excludedUsers")
    def excluded_users(self) -> pulumi.Output['outputs.ZIADLPWebRulesExcludedUsers']:
        """
        The name-ID pairs of the users that are excluded from the DLP policy rule. Maximum of up to `256` users.
        """
        return pulumi.get(self, "excluded_users")

    @property
    @pulumi.getter(name="externalAuditorEmail")
    def external_auditor_email(self) -> pulumi.Output[str]:
        """
        The email address of an external auditor to whom DLP email notifications are sent.
        """
        return pulumi.get(self, "external_auditor_email")

    @property
    @pulumi.getter(name="fileTypes")
    def file_types(self) -> pulumi.Output[Sequence[str]]:
        """
        The list of file types to which the DLP policy rule must be applied. For the complete list of supported file types refer to the  [ZIA API documentation](https://help.zscaler.com/zia/data-loss-prevention#/webDlpRules-post)
        """
        return pulumi.get(self, "file_types")

    @property
    @pulumi.getter
    def groups(self) -> pulumi.Output['outputs.ZIADLPWebRulesGroups']:
        """
        The Name-ID pairs of groups to which the DLP policy rule must be applied. Maximum of up to `8` groups. When not used it implies `Any` to apply the rule to all groups.
        """
        return pulumi.get(self, "groups")

    @property
    @pulumi.getter(name="icapServer")
    def icap_server(self) -> pulumi.Output['outputs.ZIADLPWebRulesIcapServer']:
        """
        The DLP server, using ICAP, to which the transaction content is forwarded.
        """
        return pulumi.get(self, "icap_server")

    @property
    @pulumi.getter
    def labels(self) -> pulumi.Output['outputs.ZIADLPWebRulesLabels']:
        """
        The Name-ID pairs of rule labels associated to the DLP policy rule.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="locationGroups")
    def location_groups(self) -> pulumi.Output['outputs.ZIADLPWebRulesLocationGroups']:
        """
        The Name-ID pairs of locations groups to which the DLP policy rule must be applied. Maximum of up to `32` location groups. When not used it implies `Any` to apply the rule to all location groups.
        """
        return pulumi.get(self, "location_groups")

    @property
    @pulumi.getter
    def locations(self) -> pulumi.Output['outputs.ZIADLPWebRulesLocations']:
        """
        The Name-ID pairs of locations to which the DLP policy rule must be applied. Maximum of up to `8` locations. When not used it implies `Any` to apply the rule to all locations.
        """
        return pulumi.get(self, "locations")

    @property
    @pulumi.getter(name="matchOnly")
    def match_only(self) -> pulumi.Output[bool]:
        """
        The match only criteria for DLP engines.
        """
        return pulumi.get(self, "match_only")

    @property
    @pulumi.getter(name="minSize")
    def min_size(self) -> pulumi.Output[int]:
        """
        The minimum file size (in KB) used for evaluation of the DLP policy rule.
        """
        return pulumi.get(self, "min_size")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The DLP policy rule name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="notificationTemplate")
    def notification_template(self) -> pulumi.Output['outputs.ZIADLPWebRulesNotificationTemplate']:
        """
        The template used for DLP notification emails.
        """
        return pulumi.get(self, "notification_template")

    @property
    @pulumi.getter(name="ocrEnabled")
    def ocr_enabled(self) -> pulumi.Output[bool]:
        """
        Enables or disables image file scanning.
        """
        return pulumi.get(self, "ocr_enabled")

    @property
    @pulumi.getter
    def order(self) -> pulumi.Output[int]:
        """
        The rule order of execution for the DLP policy rule with respect to other rules.
        """
        return pulumi.get(self, "order")

    @property
    @pulumi.getter
    def protocols(self) -> pulumi.Output[Sequence[str]]:
        """
        The protocol criteria specified for the DLP policy rule.
        """
        return pulumi.get(self, "protocols")

    @property
    @pulumi.getter
    def rank(self) -> pulumi.Output[Optional[int]]:
        """
        Admin rank of the admin who creates this rule
        """
        return pulumi.get(self, "rank")

    @property
    @pulumi.getter(name="ruleId")
    def rule_id(self) -> pulumi.Output[int]:
        return pulumi.get(self, "rule_id")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[str]:
        """
        Enables or disables the DLP policy rule.. The supported values are:
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter(name="timeWindows")
    def time_windows(self) -> pulumi.Output['outputs.ZIADLPWebRulesTimeWindows']:
        """
        The Name-ID pairs of time windows to which the DLP policy rule must be applied. Maximum of up to `2` time intervals. When not used it implies `always` to apply the rule to all time intervals.
        """
        return pulumi.get(self, "time_windows")

    @property
    @pulumi.getter(name="urlCategories")
    def url_categories(self) -> pulumi.Output['outputs.ZIADLPWebRulesUrlCategories']:
        """
        The list of URL categories to which the DLP policy rule must be applied.
        """
        return pulumi.get(self, "url_categories")

    @property
    @pulumi.getter
    def users(self) -> pulumi.Output['outputs.ZIADLPWebRulesUsers']:
        """
        The Name-ID pairs of users to which the DLP policy rule must be applied. Maximum of up to `4` users. When not used it implies `Any` to apply the rule to all users.
        """
        return pulumi.get(self, "users")

    @property
    @pulumi.getter(name="withoutContentInspection")
    def without_content_inspection(self) -> pulumi.Output[bool]:
        """
        Indicates a DLP policy rule without content inspection, when the value is set to true.
        """
        return pulumi.get(self, "without_content_inspection")

    @property
    @pulumi.getter(name="zscalerIncidentReciever")
    def zscaler_incident_reciever(self) -> pulumi.Output[bool]:
        """
        Indicates whether a Zscaler Incident Receiver is associated to the DLP policy rule.
        """
        return pulumi.get(self, "zscaler_incident_reciever")

