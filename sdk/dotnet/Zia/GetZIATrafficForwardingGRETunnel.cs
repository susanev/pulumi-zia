// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace zscaler.PulumiPackage.Zia
{
    public static class GetZIATrafficForwardingGRETunnel
    {
        public static Task<GetZIATrafficForwardingGRETunnelResult> InvokeAsync(GetZIATrafficForwardingGRETunnelArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetZIATrafficForwardingGRETunnelResult>("zia:index/getZIATrafficForwardingGRETunnel:getZIATrafficForwardingGRETunnel", args ?? new GetZIATrafficForwardingGRETunnelArgs(), options.WithDefaults());

        public static Output<GetZIATrafficForwardingGRETunnelResult> Invoke(GetZIATrafficForwardingGRETunnelInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetZIATrafficForwardingGRETunnelResult>("zia:index/getZIATrafficForwardingGRETunnel:getZIATrafficForwardingGRETunnel", args ?? new GetZIATrafficForwardingGRETunnelInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetZIATrafficForwardingGRETunnelArgs : global::Pulumi.InvokeArgs
    {
        [Input("id")]
        public int? Id { get; set; }

        [Input("sourceIp")]
        public string? SourceIp { get; set; }

        public GetZIATrafficForwardingGRETunnelArgs()
        {
        }
        public static new GetZIATrafficForwardingGRETunnelArgs Empty => new GetZIATrafficForwardingGRETunnelArgs();
    }

    public sealed class GetZIATrafficForwardingGRETunnelInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("id")]
        public Input<int>? Id { get; set; }

        [Input("sourceIp")]
        public Input<string>? SourceIp { get; set; }

        public GetZIATrafficForwardingGRETunnelInvokeArgs()
        {
        }
        public static new GetZIATrafficForwardingGRETunnelInvokeArgs Empty => new GetZIATrafficForwardingGRETunnelInvokeArgs();
    }


    [OutputType]
    public sealed class GetZIATrafficForwardingGRETunnelResult
    {
        public readonly string Comment;
        public readonly int? Id;
        public readonly string InternalIpRange;
        public readonly bool IpUnnumbered;
        public readonly int LastModificationTime;
        public readonly ImmutableArray<Outputs.GetZIATrafficForwardingGRETunnelLastModifiedByResult> LastModifiedBies;
        public readonly ImmutableArray<Outputs.GetZIATrafficForwardingGRETunnelManagedByResult> ManagedBies;
        public readonly ImmutableArray<Outputs.GetZIATrafficForwardingGRETunnelPrimaryDestVipResult> PrimaryDestVips;
        public readonly ImmutableArray<Outputs.GetZIATrafficForwardingGRETunnelSecondaryDestVipResult> SecondaryDestVips;
        public readonly string? SourceIp;
        public readonly bool WithinCountry;

        [OutputConstructor]
        private GetZIATrafficForwardingGRETunnelResult(
            string comment,

            int? id,

            string internalIpRange,

            bool ipUnnumbered,

            int lastModificationTime,

            ImmutableArray<Outputs.GetZIATrafficForwardingGRETunnelLastModifiedByResult> lastModifiedBies,

            ImmutableArray<Outputs.GetZIATrafficForwardingGRETunnelManagedByResult> managedBies,

            ImmutableArray<Outputs.GetZIATrafficForwardingGRETunnelPrimaryDestVipResult> primaryDestVips,

            ImmutableArray<Outputs.GetZIATrafficForwardingGRETunnelSecondaryDestVipResult> secondaryDestVips,

            string? sourceIp,

            bool withinCountry)
        {
            Comment = comment;
            Id = id;
            InternalIpRange = internalIpRange;
            IpUnnumbered = ipUnnumbered;
            LastModificationTime = lastModificationTime;
            LastModifiedBies = lastModifiedBies;
            ManagedBies = managedBies;
            PrimaryDestVips = primaryDestVips;
            SecondaryDestVips = secondaryDestVips;
            SourceIp = sourceIp;
            WithinCountry = withinCountry;
        }
    }
}
