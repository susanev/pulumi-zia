// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace zscaler.PulumiPackage.Zia
{
    /// <summary>
    /// The **zia_admin_users** resource allows the creation and management of ZIA admin user account created in the Zscaler Internet Access cloud or via the API.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Zia = Pulumi.Zia;
    /// using Zia = zscaler.PulumiPackage.Zia;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var superAdmin = Zia.GetZIAAdminRoles.Invoke(new()
    ///     {
    ///         Name = "Super Admin",
    ///     });
    /// 
    ///     var engineering = Zia.GetZIADepartmentManagement.Invoke(new()
    ///     {
    ///         Name = "Engineering",
    ///     });
    /// 
    ///     var johnSmith = new Zia.ZIAAdminUsers("johnSmith", new()
    ///     {
    ///         LoginName = "john.smith@acme.com",
    ///         UserName = "John Smith",
    ///         Email = "john.smith@acme.com",
    ///         IsPasswordLoginAllowed = true,
    ///         Password = "AeQ9E5w8B$",
    ///         IsSecurityReportCommEnabled = true,
    ///         IsServiceUpdateCommEnabled = true,
    ///         IsProductUpdateCommEnabled = true,
    ///         Comments = "Administrator User",
    ///         Roles = new[]
    ///         {
    ///             new Zia.Inputs.ZIAAdminUsersRoleArgs
    ///             {
    ///                 Id = superAdmin.Apply(getZIAAdminRolesResult =&gt; getZIAAdminRolesResult.Id),
    ///             },
    ///         },
    ///         AdminScopes = new[]
    ///         {
    ///             new Zia.Inputs.ZIAAdminUsersAdminScopeArgs
    ///             {
    ///                 Type = "DEPARTMENT",
    ///                 ScopeEntities = new Zia.Inputs.ZIAAdminUsersAdminScopeScopeEntitiesArgs
    ///                 {
    ///                     Ids = new[]
    ///                     {
    ///                         engineering.Apply(getZIADepartmentManagementResult =&gt; getZIADepartmentManagementResult.Id),
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [ZiaResourceType("zia:index/zIAAdminUsers:ZIAAdminUsers")]
    public partial class ZIAAdminUsers : global::Pulumi.CustomResource
    {
        [Output("adminId")]
        public Output<int> AdminId { get; private set; } = null!;

        /// <summary>
        /// The admin's scope. A scope is required for admins, but not applicable to auditors. This attribute is subject to change.
        /// </summary>
        [Output("adminScopes")]
        public Output<ImmutableArray<Outputs.ZIAAdminUsersAdminScope>> AdminScopes { get; private set; } = null!;

        /// <summary>
        /// Additional information about the admin or auditor.
        /// </summary>
        [Output("comments")]
        public Output<string?> Comments { get; private set; } = null!;

        /// <summary>
        /// Indicates whether or not the admin account is disabled.
        /// </summary>
        [Output("disabled")]
        public Output<bool> Disabled { get; private set; } = null!;

        /// <summary>
        /// Admin or auditor's email address.
        /// </summary>
        [Output("email")]
        public Output<string> Email { get; private set; } = null!;

        /// <summary>
        /// Indicates whether the user is an auditor. This attribute is subject to change.
        /// </summary>
        [Output("isAuditor")]
        public Output<bool> IsAuditor { get; private set; } = null!;

        /// <summary>
        /// Indicates whether or not Executive Insights App access is enabled for the admin.
        /// </summary>
        [Output("isExecMobileAppEnabled")]
        public Output<bool> IsExecMobileAppEnabled { get; private set; } = null!;

        /// <summary>
        /// Indicates whether or not the admin can be edited or deleted.
        /// </summary>
        [Output("isNonEditable")]
        public Output<bool> IsNonEditable { get; private set; } = null!;

        /// <summary>
        /// Indicates whether or not an admin's password has expired.
        /// </summary>
        [Output("isPasswordExpired")]
        public Output<bool> IsPasswordExpired { get; private set; } = null!;

        /// <summary>
        /// The default is true when SAML Authentication is disabled. When SAML Authentication is enabled, this can be set to false in order to force the admin to login via SSO only.
        /// </summary>
        [Output("isPasswordLoginAllowed")]
        public Output<bool> IsPasswordLoginAllowed { get; private set; } = null!;

        /// <summary>
        /// Communication setting for Product Update.
        /// </summary>
        [Output("isProductUpdateCommEnabled")]
        public Output<bool> IsProductUpdateCommEnabled { get; private set; } = null!;

        /// <summary>
        /// Communication for Security Report is enabled.
        /// </summary>
        [Output("isSecurityReportCommEnabled")]
        public Output<bool> IsSecurityReportCommEnabled { get; private set; } = null!;

        /// <summary>
        /// Communication setting for Service Update.
        /// </summary>
        [Output("isServiceUpdateCommEnabled")]
        public Output<bool> IsServiceUpdateCommEnabled { get; private set; } = null!;

        /// <summary>
        /// The email address of the admin user to be exported.
        /// </summary>
        [Output("loginName")]
        public Output<string> LoginName { get; private set; } = null!;

        /// <summary>
        /// The username of the admin user to be exported.
        /// </summary>
        [Output("password")]
        public Output<string?> Password { get; private set; } = null!;

        /// <summary>
        /// Role of the admin. This is not required for an auditor.
        /// </summary>
        [Output("roles")]
        public Output<ImmutableArray<Outputs.ZIAAdminUsersRole>> Roles { get; private set; } = null!;

        /// <summary>
        /// The username of the admin user to be exported.
        /// </summary>
        [Output("username")]
        public Output<string> Username { get; private set; } = null!;


        /// <summary>
        /// Create a ZIAAdminUsers resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ZIAAdminUsers(string name, ZIAAdminUsersArgs args, CustomResourceOptions? options = null)
            : base("zia:index/zIAAdminUsers:ZIAAdminUsers", name, args ?? new ZIAAdminUsersArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ZIAAdminUsers(string name, Input<string> id, ZIAAdminUsersState? state = null, CustomResourceOptions? options = null)
            : base("zia:index/zIAAdminUsers:ZIAAdminUsers", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/zscaler",
                AdditionalSecretOutputs =
                {
                    "password",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ZIAAdminUsers resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ZIAAdminUsers Get(string name, Input<string> id, ZIAAdminUsersState? state = null, CustomResourceOptions? options = null)
        {
            return new ZIAAdminUsers(name, id, state, options);
        }
    }

    public sealed class ZIAAdminUsersArgs : global::Pulumi.ResourceArgs
    {
        [Input("adminScopes")]
        private InputList<Inputs.ZIAAdminUsersAdminScopeArgs>? _adminScopes;

        /// <summary>
        /// The admin's scope. A scope is required for admins, but not applicable to auditors. This attribute is subject to change.
        /// </summary>
        public InputList<Inputs.ZIAAdminUsersAdminScopeArgs> AdminScopes
        {
            get => _adminScopes ?? (_adminScopes = new InputList<Inputs.ZIAAdminUsersAdminScopeArgs>());
            set => _adminScopes = value;
        }

        /// <summary>
        /// Additional information about the admin or auditor.
        /// </summary>
        [Input("comments")]
        public Input<string>? Comments { get; set; }

        /// <summary>
        /// Indicates whether or not the admin account is disabled.
        /// </summary>
        [Input("disabled")]
        public Input<bool>? Disabled { get; set; }

        /// <summary>
        /// Admin or auditor's email address.
        /// </summary>
        [Input("email", required: true)]
        public Input<string> Email { get; set; } = null!;

        /// <summary>
        /// Indicates whether the user is an auditor. This attribute is subject to change.
        /// </summary>
        [Input("isAuditor")]
        public Input<bool>? IsAuditor { get; set; }

        /// <summary>
        /// Indicates whether or not Executive Insights App access is enabled for the admin.
        /// </summary>
        [Input("isExecMobileAppEnabled")]
        public Input<bool>? IsExecMobileAppEnabled { get; set; }

        /// <summary>
        /// Indicates whether or not the admin can be edited or deleted.
        /// </summary>
        [Input("isNonEditable")]
        public Input<bool>? IsNonEditable { get; set; }

        /// <summary>
        /// Indicates whether or not an admin's password has expired.
        /// </summary>
        [Input("isPasswordExpired")]
        public Input<bool>? IsPasswordExpired { get; set; }

        /// <summary>
        /// The default is true when SAML Authentication is disabled. When SAML Authentication is enabled, this can be set to false in order to force the admin to login via SSO only.
        /// </summary>
        [Input("isPasswordLoginAllowed")]
        public Input<bool>? IsPasswordLoginAllowed { get; set; }

        /// <summary>
        /// Communication setting for Product Update.
        /// </summary>
        [Input("isProductUpdateCommEnabled")]
        public Input<bool>? IsProductUpdateCommEnabled { get; set; }

        /// <summary>
        /// Communication for Security Report is enabled.
        /// </summary>
        [Input("isSecurityReportCommEnabled")]
        public Input<bool>? IsSecurityReportCommEnabled { get; set; }

        /// <summary>
        /// Communication setting for Service Update.
        /// </summary>
        [Input("isServiceUpdateCommEnabled")]
        public Input<bool>? IsServiceUpdateCommEnabled { get; set; }

        /// <summary>
        /// The email address of the admin user to be exported.
        /// </summary>
        [Input("loginName", required: true)]
        public Input<string> LoginName { get; set; } = null!;

        [Input("password")]
        private Input<string>? _password;

        /// <summary>
        /// The username of the admin user to be exported.
        /// </summary>
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("roles")]
        private InputList<Inputs.ZIAAdminUsersRoleArgs>? _roles;

        /// <summary>
        /// Role of the admin. This is not required for an auditor.
        /// </summary>
        public InputList<Inputs.ZIAAdminUsersRoleArgs> Roles
        {
            get => _roles ?? (_roles = new InputList<Inputs.ZIAAdminUsersRoleArgs>());
            set => _roles = value;
        }

        /// <summary>
        /// The username of the admin user to be exported.
        /// </summary>
        [Input("username", required: true)]
        public Input<string> Username { get; set; } = null!;

        public ZIAAdminUsersArgs()
        {
        }
        public static new ZIAAdminUsersArgs Empty => new ZIAAdminUsersArgs();
    }

    public sealed class ZIAAdminUsersState : global::Pulumi.ResourceArgs
    {
        [Input("adminId")]
        public Input<int>? AdminId { get; set; }

        [Input("adminScopes")]
        private InputList<Inputs.ZIAAdminUsersAdminScopeGetArgs>? _adminScopes;

        /// <summary>
        /// The admin's scope. A scope is required for admins, but not applicable to auditors. This attribute is subject to change.
        /// </summary>
        public InputList<Inputs.ZIAAdminUsersAdminScopeGetArgs> AdminScopes
        {
            get => _adminScopes ?? (_adminScopes = new InputList<Inputs.ZIAAdminUsersAdminScopeGetArgs>());
            set => _adminScopes = value;
        }

        /// <summary>
        /// Additional information about the admin or auditor.
        /// </summary>
        [Input("comments")]
        public Input<string>? Comments { get; set; }

        /// <summary>
        /// Indicates whether or not the admin account is disabled.
        /// </summary>
        [Input("disabled")]
        public Input<bool>? Disabled { get; set; }

        /// <summary>
        /// Admin or auditor's email address.
        /// </summary>
        [Input("email")]
        public Input<string>? Email { get; set; }

        /// <summary>
        /// Indicates whether the user is an auditor. This attribute is subject to change.
        /// </summary>
        [Input("isAuditor")]
        public Input<bool>? IsAuditor { get; set; }

        /// <summary>
        /// Indicates whether or not Executive Insights App access is enabled for the admin.
        /// </summary>
        [Input("isExecMobileAppEnabled")]
        public Input<bool>? IsExecMobileAppEnabled { get; set; }

        /// <summary>
        /// Indicates whether or not the admin can be edited or deleted.
        /// </summary>
        [Input("isNonEditable")]
        public Input<bool>? IsNonEditable { get; set; }

        /// <summary>
        /// Indicates whether or not an admin's password has expired.
        /// </summary>
        [Input("isPasswordExpired")]
        public Input<bool>? IsPasswordExpired { get; set; }

        /// <summary>
        /// The default is true when SAML Authentication is disabled. When SAML Authentication is enabled, this can be set to false in order to force the admin to login via SSO only.
        /// </summary>
        [Input("isPasswordLoginAllowed")]
        public Input<bool>? IsPasswordLoginAllowed { get; set; }

        /// <summary>
        /// Communication setting for Product Update.
        /// </summary>
        [Input("isProductUpdateCommEnabled")]
        public Input<bool>? IsProductUpdateCommEnabled { get; set; }

        /// <summary>
        /// Communication for Security Report is enabled.
        /// </summary>
        [Input("isSecurityReportCommEnabled")]
        public Input<bool>? IsSecurityReportCommEnabled { get; set; }

        /// <summary>
        /// Communication setting for Service Update.
        /// </summary>
        [Input("isServiceUpdateCommEnabled")]
        public Input<bool>? IsServiceUpdateCommEnabled { get; set; }

        /// <summary>
        /// The email address of the admin user to be exported.
        /// </summary>
        [Input("loginName")]
        public Input<string>? LoginName { get; set; }

        [Input("password")]
        private Input<string>? _password;

        /// <summary>
        /// The username of the admin user to be exported.
        /// </summary>
        public Input<string>? Password
        {
            get => _password;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _password = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("roles")]
        private InputList<Inputs.ZIAAdminUsersRoleGetArgs>? _roles;

        /// <summary>
        /// Role of the admin. This is not required for an auditor.
        /// </summary>
        public InputList<Inputs.ZIAAdminUsersRoleGetArgs> Roles
        {
            get => _roles ?? (_roles = new InputList<Inputs.ZIAAdminUsersRoleGetArgs>());
            set => _roles = value;
        }

        /// <summary>
        /// The username of the admin user to be exported.
        /// </summary>
        [Input("username")]
        public Input<string>? Username { get; set; }

        public ZIAAdminUsersState()
        {
        }
        public static new ZIAAdminUsersState Empty => new ZIAAdminUsersState();
    }
}
