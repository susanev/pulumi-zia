// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace zscaler.PulumiPackage.Zia
{
    /// <summary>
    /// The **zia_firewall_filtering_rule** resource allows the creation and management of ZIA Cloud Firewall filtering rules in the Zscaler Internet Access.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Zia = Pulumi.Zia;
    /// using Zia = zscaler.PulumiPackage.Zia;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var zscalerProxyNwServices = Zia.GetZIAFirewallFilteringNetworkServices.Invoke(new()
    ///     {
    ///         Name = "ZSCALER_PROXY_NW_SERVICES",
    ///     });
    /// 
    ///     var engineering = Zia.GetZIADepartmentManagement.Invoke(new()
    ///     {
    ///         Name = "Engineering",
    ///     });
    /// 
    ///     var normalInternet = Zia.GetZIAGroupManagement.Invoke(new()
    ///     {
    ///         Name = "Normal_Internet",
    ///     });
    /// 
    ///     var workHours = Zia.GetZIATimeWindow.Invoke(new()
    ///     {
    ///         Name = "Work hours",
    ///     });
    /// 
    ///     var example = new Zia.ZIAFirewallFilteringRule("example", new()
    ///     {
    ///         Description = "Example",
    ///         Action = "ALLOW",
    ///         State = "ENABLED",
    ///         Order = 1,
    ///         EnableFullLogging = true,
    ///         NwServices = new Zia.Inputs.ZIAFirewallFilteringRuleNwServicesArgs
    ///         {
    ///             Ids = new[]
    ///             {
    ///                 zscalerProxyNwServices.Apply(getZIAFirewallFilteringNetworkServicesResult =&gt; getZIAFirewallFilteringNetworkServicesResult.Id),
    ///             },
    ///         },
    ///         Departments = new Zia.Inputs.ZIAFirewallFilteringRuleDepartmentsArgs
    ///         {
    ///             Ids = new[]
    ///             {
    ///                 engineering.Apply(getZIADepartmentManagementResult =&gt; getZIADepartmentManagementResult.Id),
    ///             },
    ///         },
    ///         Groups = new Zia.Inputs.ZIAFirewallFilteringRuleGroupsArgs
    ///         {
    ///             Ids = new[]
    ///             {
    ///                 normalInternet.Apply(getZIAGroupManagementResult =&gt; getZIAGroupManagementResult.Id),
    ///             },
    ///         },
    ///         TimeWindows = new Zia.Inputs.ZIAFirewallFilteringRuleTimeWindowsArgs
    ///         {
    ///             Ids = new[]
    ///             {
    ///                 workHours.Apply(getZIATimeWindowResult =&gt; getZIATimeWindowResult.Id),
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [ZiaResourceType("zia:index/zIAFirewallFilteringRule:ZIAFirewallFilteringRule")]
    public partial class ZIAFirewallFilteringRule : global::Pulumi.CustomResource
    {
        [Output("accessControl")]
        public Output<string> AccessControl { get; private set; } = null!;

        /// <summary>
        /// Choose the action of the service when packets match the rule. The following actions are accepted: `ALLOW`, `BLOCK_DROP`, `BLOCK_RESET`, `BLOCK_ICMP`, `EVAL_NWAPP`
        /// </summary>
        [Output("action")]
        public Output<string> Action { get; private set; } = null!;

        /// <summary>
        /// Application service groups on which this rule is applied
        /// </summary>
        [Output("appServiceGroups")]
        public Output<Outputs.ZIAFirewallFilteringRuleAppServiceGroups> AppServiceGroups { get; private set; } = null!;

        /// <summary>
        /// Application services on which this rule is applied
        /// </summary>
        [Output("appServices")]
        public Output<Outputs.ZIAFirewallFilteringRuleAppServices> AppServices { get; private set; } = null!;

        /// <summary>
        /// If set to true, the default rule is applied
        /// </summary>
        [Output("defaultRule")]
        public Output<bool> DefaultRule { get; private set; } = null!;

        /// <summary>
        /// Apply to any number of departments When not used it implies `Any` to apply the rule to all departments.
        /// </summary>
        [Output("departments")]
        public Output<Outputs.ZIAFirewallFilteringRuleDepartments> Departments { get; private set; } = null!;

        /// <summary>
        /// Enter additional notes or information. The description cannot exceed 10,240 characters.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// ** - (Optional) -  IP addresses and fully qualified domain names (FQDNs), if the domain has multiple destination IP addresses or if its IP addresses may change. For IP addresses, you can enter individual IP addresses, subnets, or address ranges. If adding multiple items, hit Enter after each entry.
        /// </summary>
        [Output("destAddresses")]
        public Output<ImmutableArray<string>> DestAddresses { get; private set; } = null!;

        /// <summary>
        /// ** - (Optional) Identify destinations based on the location of a server, select Any to apply the rule to all countries or select the countries to which you want to control traffic.
        /// </summary>
        [Output("destCountries")]
        public Output<ImmutableArray<string>> DestCountries { get; private set; } = null!;

        /// <summary>
        /// ** - (Optional) identify destinations based on the URL category of the domain, select Any to apply the rule to all categories or select the specific categories you want to control.
        /// </summary>
        [Output("destIpCategories")]
        public Output<ImmutableArray<string>> DestIpCategories { get; private set; } = null!;

        /// <summary>
        /// ** - (Optional) Any number of destination IP address groups that you want to control with this rule.
        /// </summary>
        [Output("destIpGroups")]
        public Output<Outputs.ZIAFirewallFilteringRuleDestIpGroups> DestIpGroups { get; private set; } = null!;

        [Output("enableFullLogging")]
        public Output<bool?> EnableFullLogging { get; private set; } = null!;

        /// <summary>
        /// You can manually select up to `8` groups. When not used it implies `Any` to apply the rule to all groups.
        /// </summary>
        [Output("groups")]
        public Output<Outputs.ZIAFirewallFilteringRuleGroups> Groups { get; private set; } = null!;

        /// <summary>
        /// Labels that are applicable to the rule.
        /// </summary>
        [Output("labels")]
        public Output<Outputs.ZIAFirewallFilteringRuleLabels> Labels { get; private set; } = null!;

        [Output("lastModifiedBies")]
        public Output<ImmutableArray<Outputs.ZIAFirewallFilteringRuleLastModifiedBy>> LastModifiedBies { get; private set; } = null!;

        [Output("lastModifiedTime")]
        public Output<int> LastModifiedTime { get; private set; } = null!;

        /// <summary>
        /// You can manually select up to `32` location groups. When not used it implies `Any` to apply the rule to all location groups.
        /// </summary>
        [Output("locationGroups")]
        public Output<Outputs.ZIAFirewallFilteringRuleLocationGroups> LocationGroups { get; private set; } = null!;

        /// <summary>
        /// You can manually select up to `8` locations. When not used it implies `Any` to apply the rule to all groups.
        /// </summary>
        [Output("locations")]
        public Output<Outputs.ZIAFirewallFilteringRuleLocations> Locations { get; private set; } = null!;

        /// <summary>
        /// Name of the network service group
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Any number of application groups that you want to control with this rule. The service provides predefined applications that you can group, but not modify
        /// </summary>
        [Output("nwApplicationGroups")]
        public Output<Outputs.ZIAFirewallFilteringRuleNwApplicationGroups> NwApplicationGroups { get; private set; } = null!;

        /// <summary>
        /// When not used it applies the rule to all applications. The service provides predefined applications, which you can group, but not modify.
        /// </summary>
        [Output("nwApplications")]
        public Output<ImmutableArray<string>> NwApplications { get; private set; } = null!;

        /// <summary>
        /// Any number of predefined or custom network service groups to which the rule applies.
        /// </summary>
        [Output("nwServiceGroups")]
        public Output<Outputs.ZIAFirewallFilteringRuleNwServiceGroups> NwServiceGroups { get; private set; } = null!;

        /// <summary>
        /// When not used it applies the rule to all network services or you can select specific network services. The Zscaler firewall has predefined services and you can configure up to `1,024` additional custom services.
        /// </summary>
        [Output("nwServices")]
        public Output<Outputs.ZIAFirewallFilteringRuleNwServices> NwServices { get; private set; } = null!;

        /// <summary>
        /// Policy rules are evaluated in ascending numerical order (Rule 1 before Rule 2, and so on), and the Rule Order reflects this rule's place in the order.
        /// </summary>
        [Output("order")]
        public Output<int> Order { get; private set; } = null!;

        /// <summary>
        /// If set to true, a predefined rule is applied
        /// </summary>
        [Output("predefined")]
        public Output<bool> Predefined { get; private set; } = null!;

        /// <summary>
        /// By default, the admin ranking is disabled. To use this feature, you must enable admin rank. The default value is `7`.
        /// </summary>
        [Output("rank")]
        public Output<int> Rank { get; private set; } = null!;

        [Output("ruleId")]
        public Output<int> RuleId { get; private set; } = null!;

        /// <summary>
        /// Any number of source IP address groups that you want to control with this rule.
        /// </summary>
        [Output("srcIpGroups")]
        public Output<Outputs.ZIAFirewallFilteringRuleSrcIpGroups> SrcIpGroups { get; private set; } = null!;

        /// <summary>
        /// You can enter individual IP addresses, subnets, or address ranges.
        /// </summary>
        [Output("srcIps")]
        public Output<ImmutableArray<string>> SrcIps { get; private set; } = null!;

        /// <summary>
        /// An enabled rule is actively enforced. A disabled rule is not actively enforced but does not lose its place in the Rule Order. The service skips it and moves to the next rule.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// You can manually select up to `2` time intervals. When not used it implies `always` to apply the rule to all time intervals.
        /// </summary>
        [Output("timeWindows")]
        public Output<Outputs.ZIAFirewallFilteringRuleTimeWindows> TimeWindows { get; private set; } = null!;

        /// <summary>
        /// You can manually select up to `4` general and/or special users. When not used it implies `Any` to apply the rule to all users.
        /// </summary>
        [Output("users")]
        public Output<Outputs.ZIAFirewallFilteringRuleUsers> Users { get; private set; } = null!;


        /// <summary>
        /// Create a ZIAFirewallFilteringRule resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ZIAFirewallFilteringRule(string name, ZIAFirewallFilteringRuleArgs? args = null, CustomResourceOptions? options = null)
            : base("zia:index/zIAFirewallFilteringRule:ZIAFirewallFilteringRule", name, args ?? new ZIAFirewallFilteringRuleArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ZIAFirewallFilteringRule(string name, Input<string> id, ZIAFirewallFilteringRuleState? state = null, CustomResourceOptions? options = null)
            : base("zia:index/zIAFirewallFilteringRule:ZIAFirewallFilteringRule", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "github://api.github.com/zscaler",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ZIAFirewallFilteringRule resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ZIAFirewallFilteringRule Get(string name, Input<string> id, ZIAFirewallFilteringRuleState? state = null, CustomResourceOptions? options = null)
        {
            return new ZIAFirewallFilteringRule(name, id, state, options);
        }
    }

    public sealed class ZIAFirewallFilteringRuleArgs : global::Pulumi.ResourceArgs
    {
        [Input("accessControl")]
        public Input<string>? AccessControl { get; set; }

        /// <summary>
        /// Choose the action of the service when packets match the rule. The following actions are accepted: `ALLOW`, `BLOCK_DROP`, `BLOCK_RESET`, `BLOCK_ICMP`, `EVAL_NWAPP`
        /// </summary>
        [Input("action")]
        public Input<string>? Action { get; set; }

        /// <summary>
        /// Application service groups on which this rule is applied
        /// </summary>
        [Input("appServiceGroups")]
        public Input<Inputs.ZIAFirewallFilteringRuleAppServiceGroupsArgs>? AppServiceGroups { get; set; }

        /// <summary>
        /// Application services on which this rule is applied
        /// </summary>
        [Input("appServices")]
        public Input<Inputs.ZIAFirewallFilteringRuleAppServicesArgs>? AppServices { get; set; }

        /// <summary>
        /// If set to true, the default rule is applied
        /// </summary>
        [Input("defaultRule")]
        public Input<bool>? DefaultRule { get; set; }

        /// <summary>
        /// Apply to any number of departments When not used it implies `Any` to apply the rule to all departments.
        /// </summary>
        [Input("departments")]
        public Input<Inputs.ZIAFirewallFilteringRuleDepartmentsArgs>? Departments { get; set; }

        /// <summary>
        /// Enter additional notes or information. The description cannot exceed 10,240 characters.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("destAddresses")]
        private InputList<string>? _destAddresses;

        /// <summary>
        /// ** - (Optional) -  IP addresses and fully qualified domain names (FQDNs), if the domain has multiple destination IP addresses or if its IP addresses may change. For IP addresses, you can enter individual IP addresses, subnets, or address ranges. If adding multiple items, hit Enter after each entry.
        /// </summary>
        public InputList<string> DestAddresses
        {
            get => _destAddresses ?? (_destAddresses = new InputList<string>());
            set => _destAddresses = value;
        }

        [Input("destCountries")]
        private InputList<string>? _destCountries;

        /// <summary>
        /// ** - (Optional) Identify destinations based on the location of a server, select Any to apply the rule to all countries or select the countries to which you want to control traffic.
        /// </summary>
        public InputList<string> DestCountries
        {
            get => _destCountries ?? (_destCountries = new InputList<string>());
            set => _destCountries = value;
        }

        [Input("destIpCategories")]
        private InputList<string>? _destIpCategories;

        /// <summary>
        /// ** - (Optional) identify destinations based on the URL category of the domain, select Any to apply the rule to all categories or select the specific categories you want to control.
        /// </summary>
        public InputList<string> DestIpCategories
        {
            get => _destIpCategories ?? (_destIpCategories = new InputList<string>());
            set => _destIpCategories = value;
        }

        /// <summary>
        /// ** - (Optional) Any number of destination IP address groups that you want to control with this rule.
        /// </summary>
        [Input("destIpGroups")]
        public Input<Inputs.ZIAFirewallFilteringRuleDestIpGroupsArgs>? DestIpGroups { get; set; }

        [Input("enableFullLogging")]
        public Input<bool>? EnableFullLogging { get; set; }

        /// <summary>
        /// You can manually select up to `8` groups. When not used it implies `Any` to apply the rule to all groups.
        /// </summary>
        [Input("groups")]
        public Input<Inputs.ZIAFirewallFilteringRuleGroupsArgs>? Groups { get; set; }

        /// <summary>
        /// Labels that are applicable to the rule.
        /// </summary>
        [Input("labels")]
        public Input<Inputs.ZIAFirewallFilteringRuleLabelsArgs>? Labels { get; set; }

        [Input("lastModifiedBies")]
        private InputList<Inputs.ZIAFirewallFilteringRuleLastModifiedByArgs>? _lastModifiedBies;
        public InputList<Inputs.ZIAFirewallFilteringRuleLastModifiedByArgs> LastModifiedBies
        {
            get => _lastModifiedBies ?? (_lastModifiedBies = new InputList<Inputs.ZIAFirewallFilteringRuleLastModifiedByArgs>());
            set => _lastModifiedBies = value;
        }

        [Input("lastModifiedTime")]
        public Input<int>? LastModifiedTime { get; set; }

        /// <summary>
        /// You can manually select up to `32` location groups. When not used it implies `Any` to apply the rule to all location groups.
        /// </summary>
        [Input("locationGroups")]
        public Input<Inputs.ZIAFirewallFilteringRuleLocationGroupsArgs>? LocationGroups { get; set; }

        /// <summary>
        /// You can manually select up to `8` locations. When not used it implies `Any` to apply the rule to all groups.
        /// </summary>
        [Input("locations")]
        public Input<Inputs.ZIAFirewallFilteringRuleLocationsArgs>? Locations { get; set; }

        /// <summary>
        /// Name of the network service group
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Any number of application groups that you want to control with this rule. The service provides predefined applications that you can group, but not modify
        /// </summary>
        [Input("nwApplicationGroups")]
        public Input<Inputs.ZIAFirewallFilteringRuleNwApplicationGroupsArgs>? NwApplicationGroups { get; set; }

        [Input("nwApplications")]
        private InputList<string>? _nwApplications;

        /// <summary>
        /// When not used it applies the rule to all applications. The service provides predefined applications, which you can group, but not modify.
        /// </summary>
        public InputList<string> NwApplications
        {
            get => _nwApplications ?? (_nwApplications = new InputList<string>());
            set => _nwApplications = value;
        }

        /// <summary>
        /// Any number of predefined or custom network service groups to which the rule applies.
        /// </summary>
        [Input("nwServiceGroups")]
        public Input<Inputs.ZIAFirewallFilteringRuleNwServiceGroupsArgs>? NwServiceGroups { get; set; }

        /// <summary>
        /// When not used it applies the rule to all network services or you can select specific network services. The Zscaler firewall has predefined services and you can configure up to `1,024` additional custom services.
        /// </summary>
        [Input("nwServices")]
        public Input<Inputs.ZIAFirewallFilteringRuleNwServicesArgs>? NwServices { get; set; }

        /// <summary>
        /// Policy rules are evaluated in ascending numerical order (Rule 1 before Rule 2, and so on), and the Rule Order reflects this rule's place in the order.
        /// </summary>
        [Input("order")]
        public Input<int>? Order { get; set; }

        /// <summary>
        /// If set to true, a predefined rule is applied
        /// </summary>
        [Input("predefined")]
        public Input<bool>? Predefined { get; set; }

        /// <summary>
        /// By default, the admin ranking is disabled. To use this feature, you must enable admin rank. The default value is `7`.
        /// </summary>
        [Input("rank")]
        public Input<int>? Rank { get; set; }

        /// <summary>
        /// Any number of source IP address groups that you want to control with this rule.
        /// </summary>
        [Input("srcIpGroups")]
        public Input<Inputs.ZIAFirewallFilteringRuleSrcIpGroupsArgs>? SrcIpGroups { get; set; }

        [Input("srcIps")]
        private InputList<string>? _srcIps;

        /// <summary>
        /// You can enter individual IP addresses, subnets, or address ranges.
        /// </summary>
        public InputList<string> SrcIps
        {
            get => _srcIps ?? (_srcIps = new InputList<string>());
            set => _srcIps = value;
        }

        /// <summary>
        /// An enabled rule is actively enforced. A disabled rule is not actively enforced but does not lose its place in the Rule Order. The service skips it and moves to the next rule.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// You can manually select up to `2` time intervals. When not used it implies `always` to apply the rule to all time intervals.
        /// </summary>
        [Input("timeWindows")]
        public Input<Inputs.ZIAFirewallFilteringRuleTimeWindowsArgs>? TimeWindows { get; set; }

        /// <summary>
        /// You can manually select up to `4` general and/or special users. When not used it implies `Any` to apply the rule to all users.
        /// </summary>
        [Input("users")]
        public Input<Inputs.ZIAFirewallFilteringRuleUsersArgs>? Users { get; set; }

        public ZIAFirewallFilteringRuleArgs()
        {
        }
        public static new ZIAFirewallFilteringRuleArgs Empty => new ZIAFirewallFilteringRuleArgs();
    }

    public sealed class ZIAFirewallFilteringRuleState : global::Pulumi.ResourceArgs
    {
        [Input("accessControl")]
        public Input<string>? AccessControl { get; set; }

        /// <summary>
        /// Choose the action of the service when packets match the rule. The following actions are accepted: `ALLOW`, `BLOCK_DROP`, `BLOCK_RESET`, `BLOCK_ICMP`, `EVAL_NWAPP`
        /// </summary>
        [Input("action")]
        public Input<string>? Action { get; set; }

        /// <summary>
        /// Application service groups on which this rule is applied
        /// </summary>
        [Input("appServiceGroups")]
        public Input<Inputs.ZIAFirewallFilteringRuleAppServiceGroupsGetArgs>? AppServiceGroups { get; set; }

        /// <summary>
        /// Application services on which this rule is applied
        /// </summary>
        [Input("appServices")]
        public Input<Inputs.ZIAFirewallFilteringRuleAppServicesGetArgs>? AppServices { get; set; }

        /// <summary>
        /// If set to true, the default rule is applied
        /// </summary>
        [Input("defaultRule")]
        public Input<bool>? DefaultRule { get; set; }

        /// <summary>
        /// Apply to any number of departments When not used it implies `Any` to apply the rule to all departments.
        /// </summary>
        [Input("departments")]
        public Input<Inputs.ZIAFirewallFilteringRuleDepartmentsGetArgs>? Departments { get; set; }

        /// <summary>
        /// Enter additional notes or information. The description cannot exceed 10,240 characters.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("destAddresses")]
        private InputList<string>? _destAddresses;

        /// <summary>
        /// ** - (Optional) -  IP addresses and fully qualified domain names (FQDNs), if the domain has multiple destination IP addresses or if its IP addresses may change. For IP addresses, you can enter individual IP addresses, subnets, or address ranges. If adding multiple items, hit Enter after each entry.
        /// </summary>
        public InputList<string> DestAddresses
        {
            get => _destAddresses ?? (_destAddresses = new InputList<string>());
            set => _destAddresses = value;
        }

        [Input("destCountries")]
        private InputList<string>? _destCountries;

        /// <summary>
        /// ** - (Optional) Identify destinations based on the location of a server, select Any to apply the rule to all countries or select the countries to which you want to control traffic.
        /// </summary>
        public InputList<string> DestCountries
        {
            get => _destCountries ?? (_destCountries = new InputList<string>());
            set => _destCountries = value;
        }

        [Input("destIpCategories")]
        private InputList<string>? _destIpCategories;

        /// <summary>
        /// ** - (Optional) identify destinations based on the URL category of the domain, select Any to apply the rule to all categories or select the specific categories you want to control.
        /// </summary>
        public InputList<string> DestIpCategories
        {
            get => _destIpCategories ?? (_destIpCategories = new InputList<string>());
            set => _destIpCategories = value;
        }

        /// <summary>
        /// ** - (Optional) Any number of destination IP address groups that you want to control with this rule.
        /// </summary>
        [Input("destIpGroups")]
        public Input<Inputs.ZIAFirewallFilteringRuleDestIpGroupsGetArgs>? DestIpGroups { get; set; }

        [Input("enableFullLogging")]
        public Input<bool>? EnableFullLogging { get; set; }

        /// <summary>
        /// You can manually select up to `8` groups. When not used it implies `Any` to apply the rule to all groups.
        /// </summary>
        [Input("groups")]
        public Input<Inputs.ZIAFirewallFilteringRuleGroupsGetArgs>? Groups { get; set; }

        /// <summary>
        /// Labels that are applicable to the rule.
        /// </summary>
        [Input("labels")]
        public Input<Inputs.ZIAFirewallFilteringRuleLabelsGetArgs>? Labels { get; set; }

        [Input("lastModifiedBies")]
        private InputList<Inputs.ZIAFirewallFilteringRuleLastModifiedByGetArgs>? _lastModifiedBies;
        public InputList<Inputs.ZIAFirewallFilteringRuleLastModifiedByGetArgs> LastModifiedBies
        {
            get => _lastModifiedBies ?? (_lastModifiedBies = new InputList<Inputs.ZIAFirewallFilteringRuleLastModifiedByGetArgs>());
            set => _lastModifiedBies = value;
        }

        [Input("lastModifiedTime")]
        public Input<int>? LastModifiedTime { get; set; }

        /// <summary>
        /// You can manually select up to `32` location groups. When not used it implies `Any` to apply the rule to all location groups.
        /// </summary>
        [Input("locationGroups")]
        public Input<Inputs.ZIAFirewallFilteringRuleLocationGroupsGetArgs>? LocationGroups { get; set; }

        /// <summary>
        /// You can manually select up to `8` locations. When not used it implies `Any` to apply the rule to all groups.
        /// </summary>
        [Input("locations")]
        public Input<Inputs.ZIAFirewallFilteringRuleLocationsGetArgs>? Locations { get; set; }

        /// <summary>
        /// Name of the network service group
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Any number of application groups that you want to control with this rule. The service provides predefined applications that you can group, but not modify
        /// </summary>
        [Input("nwApplicationGroups")]
        public Input<Inputs.ZIAFirewallFilteringRuleNwApplicationGroupsGetArgs>? NwApplicationGroups { get; set; }

        [Input("nwApplications")]
        private InputList<string>? _nwApplications;

        /// <summary>
        /// When not used it applies the rule to all applications. The service provides predefined applications, which you can group, but not modify.
        /// </summary>
        public InputList<string> NwApplications
        {
            get => _nwApplications ?? (_nwApplications = new InputList<string>());
            set => _nwApplications = value;
        }

        /// <summary>
        /// Any number of predefined or custom network service groups to which the rule applies.
        /// </summary>
        [Input("nwServiceGroups")]
        public Input<Inputs.ZIAFirewallFilteringRuleNwServiceGroupsGetArgs>? NwServiceGroups { get; set; }

        /// <summary>
        /// When not used it applies the rule to all network services or you can select specific network services. The Zscaler firewall has predefined services and you can configure up to `1,024` additional custom services.
        /// </summary>
        [Input("nwServices")]
        public Input<Inputs.ZIAFirewallFilteringRuleNwServicesGetArgs>? NwServices { get; set; }

        /// <summary>
        /// Policy rules are evaluated in ascending numerical order (Rule 1 before Rule 2, and so on), and the Rule Order reflects this rule's place in the order.
        /// </summary>
        [Input("order")]
        public Input<int>? Order { get; set; }

        /// <summary>
        /// If set to true, a predefined rule is applied
        /// </summary>
        [Input("predefined")]
        public Input<bool>? Predefined { get; set; }

        /// <summary>
        /// By default, the admin ranking is disabled. To use this feature, you must enable admin rank. The default value is `7`.
        /// </summary>
        [Input("rank")]
        public Input<int>? Rank { get; set; }

        [Input("ruleId")]
        public Input<int>? RuleId { get; set; }

        /// <summary>
        /// Any number of source IP address groups that you want to control with this rule.
        /// </summary>
        [Input("srcIpGroups")]
        public Input<Inputs.ZIAFirewallFilteringRuleSrcIpGroupsGetArgs>? SrcIpGroups { get; set; }

        [Input("srcIps")]
        private InputList<string>? _srcIps;

        /// <summary>
        /// You can enter individual IP addresses, subnets, or address ranges.
        /// </summary>
        public InputList<string> SrcIps
        {
            get => _srcIps ?? (_srcIps = new InputList<string>());
            set => _srcIps = value;
        }

        /// <summary>
        /// An enabled rule is actively enforced. A disabled rule is not actively enforced but does not lose its place in the Rule Order. The service skips it and moves to the next rule.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// You can manually select up to `2` time intervals. When not used it implies `always` to apply the rule to all time intervals.
        /// </summary>
        [Input("timeWindows")]
        public Input<Inputs.ZIAFirewallFilteringRuleTimeWindowsGetArgs>? TimeWindows { get; set; }

        /// <summary>
        /// You can manually select up to `4` general and/or special users. When not used it implies `Any` to apply the rule to all users.
        /// </summary>
        [Input("users")]
        public Input<Inputs.ZIAFirewallFilteringRuleUsersGetArgs>? Users { get; set; }

        public ZIAFirewallFilteringRuleState()
        {
        }
        public static new ZIAFirewallFilteringRuleState Empty => new ZIAFirewallFilteringRuleState();
    }
}
