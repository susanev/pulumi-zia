// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace zscaler.PulumiPackage.Zia
{
    public static class GetZIADLPNotificationTemplates
    {
        /// <summary>
        /// Use the **zia_dlp_notification_templates** data source to get information about a ZIA DLP Notification Templates in the Zscaler Internet Access cloud or via the API.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Zia = Pulumi.Zia;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Zia.GetZIADLPNotificationTemplates.Invoke(new()
        ///     {
        ///         Name = "DLP Auditor Template Test",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetZIADLPNotificationTemplatesResult> InvokeAsync(GetZIADLPNotificationTemplatesArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetZIADLPNotificationTemplatesResult>("zia:index/getZIADLPNotificationTemplates:getZIADLPNotificationTemplates", args ?? new GetZIADLPNotificationTemplatesArgs(), options.WithDefaults());

        /// <summary>
        /// Use the **zia_dlp_notification_templates** data source to get information about a ZIA DLP Notification Templates in the Zscaler Internet Access cloud or via the API.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Zia = Pulumi.Zia;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Zia.GetZIADLPNotificationTemplates.Invoke(new()
        ///     {
        ///         Name = "DLP Auditor Template Test",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetZIADLPNotificationTemplatesResult> Invoke(GetZIADLPNotificationTemplatesInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetZIADLPNotificationTemplatesResult>("zia:index/getZIADLPNotificationTemplates:getZIADLPNotificationTemplates", args ?? new GetZIADLPNotificationTemplatesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetZIADLPNotificationTemplatesArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The unique identifier for a DLP notification template.
        /// </summary>
        [Input("id")]
        public int? Id { get; set; }

        /// <summary>
        /// The DLP policy rule name.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        public GetZIADLPNotificationTemplatesArgs()
        {
        }
        public static new GetZIADLPNotificationTemplatesArgs Empty => new GetZIADLPNotificationTemplatesArgs();
    }

    public sealed class GetZIADLPNotificationTemplatesInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The unique identifier for a DLP notification template.
        /// </summary>
        [Input("id")]
        public Input<int>? Id { get; set; }

        /// <summary>
        /// The DLP policy rule name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public GetZIADLPNotificationTemplatesInvokeArgs()
        {
        }
        public static new GetZIADLPNotificationTemplatesInvokeArgs Empty => new GetZIADLPNotificationTemplatesInvokeArgs();
    }


    [OutputType]
    public sealed class GetZIADLPNotificationTemplatesResult
    {
        public readonly bool AttachContent;
        public readonly string HtmlMessage;
        public readonly int Id;
        public readonly string Name;
        public readonly string PlainTestMessage;
        public readonly string Subject;
        public readonly bool TlsEnabled;

        [OutputConstructor]
        private GetZIADLPNotificationTemplatesResult(
            bool attachContent,

            string htmlMessage,

            int id,

            string name,

            string plainTestMessage,

            string subject,

            bool tlsEnabled)
        {
            AttachContent = attachContent;
            HtmlMessage = htmlMessage;
            Id = id;
            Name = name;
            PlainTestMessage = plainTestMessage;
            Subject = subject;
            TlsEnabled = tlsEnabled;
        }
    }
}
