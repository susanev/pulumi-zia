// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi;

namespace zscaler.PulumiPackage.Zia
{
    public static class GetZIADeviceGroups
    {
        /// <summary>
        /// Use the **zia_device_groups** data source to get information about a device group in the Zscaler Internet Access cloud or via the API. This data source can then be associated with resources such as: URL Filtering Rules
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Zia = Pulumi.Zia;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var ios = Zia.GetZIADeviceGroups.Invoke(new()
        ///     {
        ///         Name = "IOS",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Zia = Pulumi.Zia;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var android = Zia.GetZIADeviceGroups.Invoke(new()
        ///     {
        ///         Name = "Android",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetZIADeviceGroupsResult> InvokeAsync(GetZIADeviceGroupsArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetZIADeviceGroupsResult>("zia:index/getZIADeviceGroups:getZIADeviceGroups", args ?? new GetZIADeviceGroupsArgs(), options.WithDefaults());

        /// <summary>
        /// Use the **zia_device_groups** data source to get information about a device group in the Zscaler Internet Access cloud or via the API. This data source can then be associated with resources such as: URL Filtering Rules
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Zia = Pulumi.Zia;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var ios = Zia.GetZIADeviceGroups.Invoke(new()
        ///     {
        ///         Name = "IOS",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Zia = Pulumi.Zia;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var android = Zia.GetZIADeviceGroups.Invoke(new()
        ///     {
        ///         Name = "Android",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetZIADeviceGroupsResult> Invoke(GetZIADeviceGroupsInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetZIADeviceGroupsResult>("zia:index/getZIADeviceGroups:getZIADeviceGroups", args ?? new GetZIADeviceGroupsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetZIADeviceGroupsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the device group to be exported.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        public GetZIADeviceGroupsArgs()
        {
        }
        public static new GetZIADeviceGroupsArgs Empty => new GetZIADeviceGroupsArgs();
    }

    public sealed class GetZIADeviceGroupsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the device group to be exported.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        public GetZIADeviceGroupsInvokeArgs()
        {
        }
        public static new GetZIADeviceGroupsInvokeArgs Empty => new GetZIADeviceGroupsInvokeArgs();
    }


    [OutputType]
    public sealed class GetZIADeviceGroupsResult
    {
        /// <summary>
        /// (String) The device group's description.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// (int) The number of devices within the group.
        /// </summary>
        public readonly int DeviceCount;
        /// <summary>
        /// (String) The names of devices that belong to the device group. The device names are comma-separated.
        /// </summary>
        public readonly string DeviceNames;
        /// <summary>
        /// (String) The device group type. i.e ``ZCC_OS``, ``NON_ZCC``, ``CBI``
        /// </summary>
        public readonly string GroupType;
        /// <summary>
        /// (String) The unique identifer for the device group.
        /// </summary>
        public readonly int Id;
        /// <summary>
        /// (String) The device group name.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// (String) The operating system (OS).
        /// </summary>
        public readonly string OsType;
        /// <summary>
        /// (Boolean) Indicates whether this is a predefined device group. If this value is set to true, the group is predefined.
        /// </summary>
        public readonly bool Predefined;

        [OutputConstructor]
        private GetZIADeviceGroupsResult(
            string description,

            int deviceCount,

            string deviceNames,

            string groupType,

            int id,

            string? name,

            string osType,

            bool predefined)
        {
            Description = description;
            DeviceCount = deviceCount;
            DeviceNames = deviceNames;
            GroupType = groupType;
            Id = id;
            Name = name;
            OsType = osType;
            Predefined = predefined;
        }
    }
}
