// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dlp

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type DLPDictionariesExactDataMatchDetail struct {
	// The unique identifier for the EDM mapping.
	DictionaryEdmMappingId *int `pulumi:"dictionaryEdmMappingId"`
	// The EDM template's primary field.
	PrimaryField *int `pulumi:"primaryField"`
	// The unique identifier for the EDM template (or schema).
	SchemaId *int `pulumi:"schemaId"`
	// The EDM secondary field to match on.
	// - `"MATCHON_NONE"`
	// - `"MATCHON_ANY_1"`
	// - `"MATCHON_ANY_2"`
	// - `"MATCHON_ANY_3"`
	// - `"MATCHON_ANY_4"`
	// - `"MATCHON_ANY_5"`
	// - `"MATCHON_ANY_6"`
	// - `"MATCHON_ANY_7"`
	// - `"MATCHON_ANY_8"`
	// - `"MATCHON_ANY_9"`
	// - `"MATCHON_ANY_10"`
	// - `"MATCHON_ANY_11"`
	// - `"MATCHON_ANY_12"`
	// - `"MATCHON_ANY_13"`
	// - `"MATCHON_ANY_14"`
	// - `"MATCHON_ANY_15"`
	// - `"MATCHON_ALL"`
	SecondaryFieldMatchOn *string `pulumi:"secondaryFieldMatchOn"`
	// The EDM template's secondary fields.
	SecondaryFields []int `pulumi:"secondaryFields"`
}

// DLPDictionariesExactDataMatchDetailInput is an input type that accepts DLPDictionariesExactDataMatchDetailArgs and DLPDictionariesExactDataMatchDetailOutput values.
// You can construct a concrete instance of `DLPDictionariesExactDataMatchDetailInput` via:
//
//	DLPDictionariesExactDataMatchDetailArgs{...}
type DLPDictionariesExactDataMatchDetailInput interface {
	pulumi.Input

	ToDLPDictionariesExactDataMatchDetailOutput() DLPDictionariesExactDataMatchDetailOutput
	ToDLPDictionariesExactDataMatchDetailOutputWithContext(context.Context) DLPDictionariesExactDataMatchDetailOutput
}

type DLPDictionariesExactDataMatchDetailArgs struct {
	// The unique identifier for the EDM mapping.
	DictionaryEdmMappingId pulumi.IntPtrInput `pulumi:"dictionaryEdmMappingId"`
	// The EDM template's primary field.
	PrimaryField pulumi.IntPtrInput `pulumi:"primaryField"`
	// The unique identifier for the EDM template (or schema).
	SchemaId pulumi.IntPtrInput `pulumi:"schemaId"`
	// The EDM secondary field to match on.
	// - `"MATCHON_NONE"`
	// - `"MATCHON_ANY_1"`
	// - `"MATCHON_ANY_2"`
	// - `"MATCHON_ANY_3"`
	// - `"MATCHON_ANY_4"`
	// - `"MATCHON_ANY_5"`
	// - `"MATCHON_ANY_6"`
	// - `"MATCHON_ANY_7"`
	// - `"MATCHON_ANY_8"`
	// - `"MATCHON_ANY_9"`
	// - `"MATCHON_ANY_10"`
	// - `"MATCHON_ANY_11"`
	// - `"MATCHON_ANY_12"`
	// - `"MATCHON_ANY_13"`
	// - `"MATCHON_ANY_14"`
	// - `"MATCHON_ANY_15"`
	// - `"MATCHON_ALL"`
	SecondaryFieldMatchOn pulumi.StringPtrInput `pulumi:"secondaryFieldMatchOn"`
	// The EDM template's secondary fields.
	SecondaryFields pulumi.IntArrayInput `pulumi:"secondaryFields"`
}

func (DLPDictionariesExactDataMatchDetailArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DLPDictionariesExactDataMatchDetail)(nil)).Elem()
}

func (i DLPDictionariesExactDataMatchDetailArgs) ToDLPDictionariesExactDataMatchDetailOutput() DLPDictionariesExactDataMatchDetailOutput {
	return i.ToDLPDictionariesExactDataMatchDetailOutputWithContext(context.Background())
}

func (i DLPDictionariesExactDataMatchDetailArgs) ToDLPDictionariesExactDataMatchDetailOutputWithContext(ctx context.Context) DLPDictionariesExactDataMatchDetailOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DLPDictionariesExactDataMatchDetailOutput)
}

// DLPDictionariesExactDataMatchDetailArrayInput is an input type that accepts DLPDictionariesExactDataMatchDetailArray and DLPDictionariesExactDataMatchDetailArrayOutput values.
// You can construct a concrete instance of `DLPDictionariesExactDataMatchDetailArrayInput` via:
//
//	DLPDictionariesExactDataMatchDetailArray{ DLPDictionariesExactDataMatchDetailArgs{...} }
type DLPDictionariesExactDataMatchDetailArrayInput interface {
	pulumi.Input

	ToDLPDictionariesExactDataMatchDetailArrayOutput() DLPDictionariesExactDataMatchDetailArrayOutput
	ToDLPDictionariesExactDataMatchDetailArrayOutputWithContext(context.Context) DLPDictionariesExactDataMatchDetailArrayOutput
}

type DLPDictionariesExactDataMatchDetailArray []DLPDictionariesExactDataMatchDetailInput

func (DLPDictionariesExactDataMatchDetailArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DLPDictionariesExactDataMatchDetail)(nil)).Elem()
}

func (i DLPDictionariesExactDataMatchDetailArray) ToDLPDictionariesExactDataMatchDetailArrayOutput() DLPDictionariesExactDataMatchDetailArrayOutput {
	return i.ToDLPDictionariesExactDataMatchDetailArrayOutputWithContext(context.Background())
}

func (i DLPDictionariesExactDataMatchDetailArray) ToDLPDictionariesExactDataMatchDetailArrayOutputWithContext(ctx context.Context) DLPDictionariesExactDataMatchDetailArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DLPDictionariesExactDataMatchDetailArrayOutput)
}

type DLPDictionariesExactDataMatchDetailOutput struct{ *pulumi.OutputState }

func (DLPDictionariesExactDataMatchDetailOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DLPDictionariesExactDataMatchDetail)(nil)).Elem()
}

func (o DLPDictionariesExactDataMatchDetailOutput) ToDLPDictionariesExactDataMatchDetailOutput() DLPDictionariesExactDataMatchDetailOutput {
	return o
}

func (o DLPDictionariesExactDataMatchDetailOutput) ToDLPDictionariesExactDataMatchDetailOutputWithContext(ctx context.Context) DLPDictionariesExactDataMatchDetailOutput {
	return o
}

// The unique identifier for the EDM mapping.
func (o DLPDictionariesExactDataMatchDetailOutput) DictionaryEdmMappingId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DLPDictionariesExactDataMatchDetail) *int { return v.DictionaryEdmMappingId }).(pulumi.IntPtrOutput)
}

// The EDM template's primary field.
func (o DLPDictionariesExactDataMatchDetailOutput) PrimaryField() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DLPDictionariesExactDataMatchDetail) *int { return v.PrimaryField }).(pulumi.IntPtrOutput)
}

// The unique identifier for the EDM template (or schema).
func (o DLPDictionariesExactDataMatchDetailOutput) SchemaId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DLPDictionariesExactDataMatchDetail) *int { return v.SchemaId }).(pulumi.IntPtrOutput)
}

// The EDM secondary field to match on.
// - `"MATCHON_NONE"`
// - `"MATCHON_ANY_1"`
// - `"MATCHON_ANY_2"`
// - `"MATCHON_ANY_3"`
// - `"MATCHON_ANY_4"`
// - `"MATCHON_ANY_5"`
// - `"MATCHON_ANY_6"`
// - `"MATCHON_ANY_7"`
// - `"MATCHON_ANY_8"`
// - `"MATCHON_ANY_9"`
// - `"MATCHON_ANY_10"`
// - `"MATCHON_ANY_11"`
// - `"MATCHON_ANY_12"`
// - `"MATCHON_ANY_13"`
// - `"MATCHON_ANY_14"`
// - `"MATCHON_ANY_15"`
// - `"MATCHON_ALL"`
func (o DLPDictionariesExactDataMatchDetailOutput) SecondaryFieldMatchOn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DLPDictionariesExactDataMatchDetail) *string { return v.SecondaryFieldMatchOn }).(pulumi.StringPtrOutput)
}

// The EDM template's secondary fields.
func (o DLPDictionariesExactDataMatchDetailOutput) SecondaryFields() pulumi.IntArrayOutput {
	return o.ApplyT(func(v DLPDictionariesExactDataMatchDetail) []int { return v.SecondaryFields }).(pulumi.IntArrayOutput)
}

type DLPDictionariesExactDataMatchDetailArrayOutput struct{ *pulumi.OutputState }

func (DLPDictionariesExactDataMatchDetailArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DLPDictionariesExactDataMatchDetail)(nil)).Elem()
}

func (o DLPDictionariesExactDataMatchDetailArrayOutput) ToDLPDictionariesExactDataMatchDetailArrayOutput() DLPDictionariesExactDataMatchDetailArrayOutput {
	return o
}

func (o DLPDictionariesExactDataMatchDetailArrayOutput) ToDLPDictionariesExactDataMatchDetailArrayOutputWithContext(ctx context.Context) DLPDictionariesExactDataMatchDetailArrayOutput {
	return o
}

func (o DLPDictionariesExactDataMatchDetailArrayOutput) Index(i pulumi.IntInput) DLPDictionariesExactDataMatchDetailOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DLPDictionariesExactDataMatchDetail {
		return vs[0].([]DLPDictionariesExactDataMatchDetail)[vs[1].(int)]
	}).(DLPDictionariesExactDataMatchDetailOutput)
}

type DLPDictionariesIdmProfileMatchAccuracy struct {
	// The IDM template reference.
	AdpIdmProfile *DLPDictionariesIdmProfileMatchAccuracyAdpIdmProfile `pulumi:"adpIdmProfile"`
	// The IDM template match accuracy.
	// - `"LOW"`
	// - `"MEDIUM"`
	// - `"HEAVY"`
	MatchAccuracy *string `pulumi:"matchAccuracy"`
}

// DLPDictionariesIdmProfileMatchAccuracyInput is an input type that accepts DLPDictionariesIdmProfileMatchAccuracyArgs and DLPDictionariesIdmProfileMatchAccuracyOutput values.
// You can construct a concrete instance of `DLPDictionariesIdmProfileMatchAccuracyInput` via:
//
//	DLPDictionariesIdmProfileMatchAccuracyArgs{...}
type DLPDictionariesIdmProfileMatchAccuracyInput interface {
	pulumi.Input

	ToDLPDictionariesIdmProfileMatchAccuracyOutput() DLPDictionariesIdmProfileMatchAccuracyOutput
	ToDLPDictionariesIdmProfileMatchAccuracyOutputWithContext(context.Context) DLPDictionariesIdmProfileMatchAccuracyOutput
}

type DLPDictionariesIdmProfileMatchAccuracyArgs struct {
	// The IDM template reference.
	AdpIdmProfile DLPDictionariesIdmProfileMatchAccuracyAdpIdmProfilePtrInput `pulumi:"adpIdmProfile"`
	// The IDM template match accuracy.
	// - `"LOW"`
	// - `"MEDIUM"`
	// - `"HEAVY"`
	MatchAccuracy pulumi.StringPtrInput `pulumi:"matchAccuracy"`
}

func (DLPDictionariesIdmProfileMatchAccuracyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DLPDictionariesIdmProfileMatchAccuracy)(nil)).Elem()
}

func (i DLPDictionariesIdmProfileMatchAccuracyArgs) ToDLPDictionariesIdmProfileMatchAccuracyOutput() DLPDictionariesIdmProfileMatchAccuracyOutput {
	return i.ToDLPDictionariesIdmProfileMatchAccuracyOutputWithContext(context.Background())
}

func (i DLPDictionariesIdmProfileMatchAccuracyArgs) ToDLPDictionariesIdmProfileMatchAccuracyOutputWithContext(ctx context.Context) DLPDictionariesIdmProfileMatchAccuracyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DLPDictionariesIdmProfileMatchAccuracyOutput)
}

// DLPDictionariesIdmProfileMatchAccuracyArrayInput is an input type that accepts DLPDictionariesIdmProfileMatchAccuracyArray and DLPDictionariesIdmProfileMatchAccuracyArrayOutput values.
// You can construct a concrete instance of `DLPDictionariesIdmProfileMatchAccuracyArrayInput` via:
//
//	DLPDictionariesIdmProfileMatchAccuracyArray{ DLPDictionariesIdmProfileMatchAccuracyArgs{...} }
type DLPDictionariesIdmProfileMatchAccuracyArrayInput interface {
	pulumi.Input

	ToDLPDictionariesIdmProfileMatchAccuracyArrayOutput() DLPDictionariesIdmProfileMatchAccuracyArrayOutput
	ToDLPDictionariesIdmProfileMatchAccuracyArrayOutputWithContext(context.Context) DLPDictionariesIdmProfileMatchAccuracyArrayOutput
}

type DLPDictionariesIdmProfileMatchAccuracyArray []DLPDictionariesIdmProfileMatchAccuracyInput

func (DLPDictionariesIdmProfileMatchAccuracyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DLPDictionariesIdmProfileMatchAccuracy)(nil)).Elem()
}

func (i DLPDictionariesIdmProfileMatchAccuracyArray) ToDLPDictionariesIdmProfileMatchAccuracyArrayOutput() DLPDictionariesIdmProfileMatchAccuracyArrayOutput {
	return i.ToDLPDictionariesIdmProfileMatchAccuracyArrayOutputWithContext(context.Background())
}

func (i DLPDictionariesIdmProfileMatchAccuracyArray) ToDLPDictionariesIdmProfileMatchAccuracyArrayOutputWithContext(ctx context.Context) DLPDictionariesIdmProfileMatchAccuracyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DLPDictionariesIdmProfileMatchAccuracyArrayOutput)
}

type DLPDictionariesIdmProfileMatchAccuracyOutput struct{ *pulumi.OutputState }

func (DLPDictionariesIdmProfileMatchAccuracyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DLPDictionariesIdmProfileMatchAccuracy)(nil)).Elem()
}

func (o DLPDictionariesIdmProfileMatchAccuracyOutput) ToDLPDictionariesIdmProfileMatchAccuracyOutput() DLPDictionariesIdmProfileMatchAccuracyOutput {
	return o
}

func (o DLPDictionariesIdmProfileMatchAccuracyOutput) ToDLPDictionariesIdmProfileMatchAccuracyOutputWithContext(ctx context.Context) DLPDictionariesIdmProfileMatchAccuracyOutput {
	return o
}

// The IDM template reference.
func (o DLPDictionariesIdmProfileMatchAccuracyOutput) AdpIdmProfile() DLPDictionariesIdmProfileMatchAccuracyAdpIdmProfilePtrOutput {
	return o.ApplyT(func(v DLPDictionariesIdmProfileMatchAccuracy) *DLPDictionariesIdmProfileMatchAccuracyAdpIdmProfile {
		return v.AdpIdmProfile
	}).(DLPDictionariesIdmProfileMatchAccuracyAdpIdmProfilePtrOutput)
}

// The IDM template match accuracy.
// - `"LOW"`
// - `"MEDIUM"`
// - `"HEAVY"`
func (o DLPDictionariesIdmProfileMatchAccuracyOutput) MatchAccuracy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DLPDictionariesIdmProfileMatchAccuracy) *string { return v.MatchAccuracy }).(pulumi.StringPtrOutput)
}

type DLPDictionariesIdmProfileMatchAccuracyArrayOutput struct{ *pulumi.OutputState }

func (DLPDictionariesIdmProfileMatchAccuracyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DLPDictionariesIdmProfileMatchAccuracy)(nil)).Elem()
}

func (o DLPDictionariesIdmProfileMatchAccuracyArrayOutput) ToDLPDictionariesIdmProfileMatchAccuracyArrayOutput() DLPDictionariesIdmProfileMatchAccuracyArrayOutput {
	return o
}

func (o DLPDictionariesIdmProfileMatchAccuracyArrayOutput) ToDLPDictionariesIdmProfileMatchAccuracyArrayOutputWithContext(ctx context.Context) DLPDictionariesIdmProfileMatchAccuracyArrayOutput {
	return o
}

func (o DLPDictionariesIdmProfileMatchAccuracyArrayOutput) Index(i pulumi.IntInput) DLPDictionariesIdmProfileMatchAccuracyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DLPDictionariesIdmProfileMatchAccuracy {
		return vs[0].([]DLPDictionariesIdmProfileMatchAccuracy)[vs[1].(int)]
	}).(DLPDictionariesIdmProfileMatchAccuracyOutput)
}

type DLPDictionariesIdmProfileMatchAccuracyAdpIdmProfile struct {
	Extensions map[string]string `pulumi:"extensions"`
	Id         *int              `pulumi:"id"`
}

// DLPDictionariesIdmProfileMatchAccuracyAdpIdmProfileInput is an input type that accepts DLPDictionariesIdmProfileMatchAccuracyAdpIdmProfileArgs and DLPDictionariesIdmProfileMatchAccuracyAdpIdmProfileOutput values.
// You can construct a concrete instance of `DLPDictionariesIdmProfileMatchAccuracyAdpIdmProfileInput` via:
//
//	DLPDictionariesIdmProfileMatchAccuracyAdpIdmProfileArgs{...}
type DLPDictionariesIdmProfileMatchAccuracyAdpIdmProfileInput interface {
	pulumi.Input

	ToDLPDictionariesIdmProfileMatchAccuracyAdpIdmProfileOutput() DLPDictionariesIdmProfileMatchAccuracyAdpIdmProfileOutput
	ToDLPDictionariesIdmProfileMatchAccuracyAdpIdmProfileOutputWithContext(context.Context) DLPDictionariesIdmProfileMatchAccuracyAdpIdmProfileOutput
}

type DLPDictionariesIdmProfileMatchAccuracyAdpIdmProfileArgs struct {
	Extensions pulumi.StringMapInput `pulumi:"extensions"`
	Id         pulumi.IntPtrInput    `pulumi:"id"`
}

func (DLPDictionariesIdmProfileMatchAccuracyAdpIdmProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DLPDictionariesIdmProfileMatchAccuracyAdpIdmProfile)(nil)).Elem()
}

func (i DLPDictionariesIdmProfileMatchAccuracyAdpIdmProfileArgs) ToDLPDictionariesIdmProfileMatchAccuracyAdpIdmProfileOutput() DLPDictionariesIdmProfileMatchAccuracyAdpIdmProfileOutput {
	return i.ToDLPDictionariesIdmProfileMatchAccuracyAdpIdmProfileOutputWithContext(context.Background())
}

func (i DLPDictionariesIdmProfileMatchAccuracyAdpIdmProfileArgs) ToDLPDictionariesIdmProfileMatchAccuracyAdpIdmProfileOutputWithContext(ctx context.Context) DLPDictionariesIdmProfileMatchAccuracyAdpIdmProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DLPDictionariesIdmProfileMatchAccuracyAdpIdmProfileOutput)
}

func (i DLPDictionariesIdmProfileMatchAccuracyAdpIdmProfileArgs) ToDLPDictionariesIdmProfileMatchAccuracyAdpIdmProfilePtrOutput() DLPDictionariesIdmProfileMatchAccuracyAdpIdmProfilePtrOutput {
	return i.ToDLPDictionariesIdmProfileMatchAccuracyAdpIdmProfilePtrOutputWithContext(context.Background())
}

func (i DLPDictionariesIdmProfileMatchAccuracyAdpIdmProfileArgs) ToDLPDictionariesIdmProfileMatchAccuracyAdpIdmProfilePtrOutputWithContext(ctx context.Context) DLPDictionariesIdmProfileMatchAccuracyAdpIdmProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DLPDictionariesIdmProfileMatchAccuracyAdpIdmProfileOutput).ToDLPDictionariesIdmProfileMatchAccuracyAdpIdmProfilePtrOutputWithContext(ctx)
}

// DLPDictionariesIdmProfileMatchAccuracyAdpIdmProfilePtrInput is an input type that accepts DLPDictionariesIdmProfileMatchAccuracyAdpIdmProfileArgs, DLPDictionariesIdmProfileMatchAccuracyAdpIdmProfilePtr and DLPDictionariesIdmProfileMatchAccuracyAdpIdmProfilePtrOutput values.
// You can construct a concrete instance of `DLPDictionariesIdmProfileMatchAccuracyAdpIdmProfilePtrInput` via:
//
//	        DLPDictionariesIdmProfileMatchAccuracyAdpIdmProfileArgs{...}
//
//	or:
//
//	        nil
type DLPDictionariesIdmProfileMatchAccuracyAdpIdmProfilePtrInput interface {
	pulumi.Input

	ToDLPDictionariesIdmProfileMatchAccuracyAdpIdmProfilePtrOutput() DLPDictionariesIdmProfileMatchAccuracyAdpIdmProfilePtrOutput
	ToDLPDictionariesIdmProfileMatchAccuracyAdpIdmProfilePtrOutputWithContext(context.Context) DLPDictionariesIdmProfileMatchAccuracyAdpIdmProfilePtrOutput
}

type dlpdictionariesIdmProfileMatchAccuracyAdpIdmProfilePtrType DLPDictionariesIdmProfileMatchAccuracyAdpIdmProfileArgs

func DLPDictionariesIdmProfileMatchAccuracyAdpIdmProfilePtr(v *DLPDictionariesIdmProfileMatchAccuracyAdpIdmProfileArgs) DLPDictionariesIdmProfileMatchAccuracyAdpIdmProfilePtrInput {
	return (*dlpdictionariesIdmProfileMatchAccuracyAdpIdmProfilePtrType)(v)
}

func (*dlpdictionariesIdmProfileMatchAccuracyAdpIdmProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DLPDictionariesIdmProfileMatchAccuracyAdpIdmProfile)(nil)).Elem()
}

func (i *dlpdictionariesIdmProfileMatchAccuracyAdpIdmProfilePtrType) ToDLPDictionariesIdmProfileMatchAccuracyAdpIdmProfilePtrOutput() DLPDictionariesIdmProfileMatchAccuracyAdpIdmProfilePtrOutput {
	return i.ToDLPDictionariesIdmProfileMatchAccuracyAdpIdmProfilePtrOutputWithContext(context.Background())
}

func (i *dlpdictionariesIdmProfileMatchAccuracyAdpIdmProfilePtrType) ToDLPDictionariesIdmProfileMatchAccuracyAdpIdmProfilePtrOutputWithContext(ctx context.Context) DLPDictionariesIdmProfileMatchAccuracyAdpIdmProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DLPDictionariesIdmProfileMatchAccuracyAdpIdmProfilePtrOutput)
}

type DLPDictionariesIdmProfileMatchAccuracyAdpIdmProfileOutput struct{ *pulumi.OutputState }

func (DLPDictionariesIdmProfileMatchAccuracyAdpIdmProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DLPDictionariesIdmProfileMatchAccuracyAdpIdmProfile)(nil)).Elem()
}

func (o DLPDictionariesIdmProfileMatchAccuracyAdpIdmProfileOutput) ToDLPDictionariesIdmProfileMatchAccuracyAdpIdmProfileOutput() DLPDictionariesIdmProfileMatchAccuracyAdpIdmProfileOutput {
	return o
}

func (o DLPDictionariesIdmProfileMatchAccuracyAdpIdmProfileOutput) ToDLPDictionariesIdmProfileMatchAccuracyAdpIdmProfileOutputWithContext(ctx context.Context) DLPDictionariesIdmProfileMatchAccuracyAdpIdmProfileOutput {
	return o
}

func (o DLPDictionariesIdmProfileMatchAccuracyAdpIdmProfileOutput) ToDLPDictionariesIdmProfileMatchAccuracyAdpIdmProfilePtrOutput() DLPDictionariesIdmProfileMatchAccuracyAdpIdmProfilePtrOutput {
	return o.ToDLPDictionariesIdmProfileMatchAccuracyAdpIdmProfilePtrOutputWithContext(context.Background())
}

func (o DLPDictionariesIdmProfileMatchAccuracyAdpIdmProfileOutput) ToDLPDictionariesIdmProfileMatchAccuracyAdpIdmProfilePtrOutputWithContext(ctx context.Context) DLPDictionariesIdmProfileMatchAccuracyAdpIdmProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DLPDictionariesIdmProfileMatchAccuracyAdpIdmProfile) *DLPDictionariesIdmProfileMatchAccuracyAdpIdmProfile {
		return &v
	}).(DLPDictionariesIdmProfileMatchAccuracyAdpIdmProfilePtrOutput)
}

func (o DLPDictionariesIdmProfileMatchAccuracyAdpIdmProfileOutput) Extensions() pulumi.StringMapOutput {
	return o.ApplyT(func(v DLPDictionariesIdmProfileMatchAccuracyAdpIdmProfile) map[string]string { return v.Extensions }).(pulumi.StringMapOutput)
}

func (o DLPDictionariesIdmProfileMatchAccuracyAdpIdmProfileOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v DLPDictionariesIdmProfileMatchAccuracyAdpIdmProfile) *int { return v.Id }).(pulumi.IntPtrOutput)
}

type DLPDictionariesIdmProfileMatchAccuracyAdpIdmProfilePtrOutput struct{ *pulumi.OutputState }

func (DLPDictionariesIdmProfileMatchAccuracyAdpIdmProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DLPDictionariesIdmProfileMatchAccuracyAdpIdmProfile)(nil)).Elem()
}

func (o DLPDictionariesIdmProfileMatchAccuracyAdpIdmProfilePtrOutput) ToDLPDictionariesIdmProfileMatchAccuracyAdpIdmProfilePtrOutput() DLPDictionariesIdmProfileMatchAccuracyAdpIdmProfilePtrOutput {
	return o
}

func (o DLPDictionariesIdmProfileMatchAccuracyAdpIdmProfilePtrOutput) ToDLPDictionariesIdmProfileMatchAccuracyAdpIdmProfilePtrOutputWithContext(ctx context.Context) DLPDictionariesIdmProfileMatchAccuracyAdpIdmProfilePtrOutput {
	return o
}

func (o DLPDictionariesIdmProfileMatchAccuracyAdpIdmProfilePtrOutput) Elem() DLPDictionariesIdmProfileMatchAccuracyAdpIdmProfileOutput {
	return o.ApplyT(func(v *DLPDictionariesIdmProfileMatchAccuracyAdpIdmProfile) DLPDictionariesIdmProfileMatchAccuracyAdpIdmProfile {
		if v != nil {
			return *v
		}
		var ret DLPDictionariesIdmProfileMatchAccuracyAdpIdmProfile
		return ret
	}).(DLPDictionariesIdmProfileMatchAccuracyAdpIdmProfileOutput)
}

func (o DLPDictionariesIdmProfileMatchAccuracyAdpIdmProfilePtrOutput) Extensions() pulumi.StringMapOutput {
	return o.ApplyT(func(v *DLPDictionariesIdmProfileMatchAccuracyAdpIdmProfile) map[string]string {
		if v == nil {
			return nil
		}
		return v.Extensions
	}).(pulumi.StringMapOutput)
}

func (o DLPDictionariesIdmProfileMatchAccuracyAdpIdmProfilePtrOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DLPDictionariesIdmProfileMatchAccuracyAdpIdmProfile) *int {
		if v == nil {
			return nil
		}
		return v.Id
	}).(pulumi.IntPtrOutput)
}

type DLPDictionariesPattern struct {
	// The action applied to a DLP dictionary using patterns. The following values are supported:
	Action *string `pulumi:"action"`
	// DLP dictionary pattern
	Pattern *string `pulumi:"pattern"`
}

// DLPDictionariesPatternInput is an input type that accepts DLPDictionariesPatternArgs and DLPDictionariesPatternOutput values.
// You can construct a concrete instance of `DLPDictionariesPatternInput` via:
//
//	DLPDictionariesPatternArgs{...}
type DLPDictionariesPatternInput interface {
	pulumi.Input

	ToDLPDictionariesPatternOutput() DLPDictionariesPatternOutput
	ToDLPDictionariesPatternOutputWithContext(context.Context) DLPDictionariesPatternOutput
}

type DLPDictionariesPatternArgs struct {
	// The action applied to a DLP dictionary using patterns. The following values are supported:
	Action pulumi.StringPtrInput `pulumi:"action"`
	// DLP dictionary pattern
	Pattern pulumi.StringPtrInput `pulumi:"pattern"`
}

func (DLPDictionariesPatternArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DLPDictionariesPattern)(nil)).Elem()
}

func (i DLPDictionariesPatternArgs) ToDLPDictionariesPatternOutput() DLPDictionariesPatternOutput {
	return i.ToDLPDictionariesPatternOutputWithContext(context.Background())
}

func (i DLPDictionariesPatternArgs) ToDLPDictionariesPatternOutputWithContext(ctx context.Context) DLPDictionariesPatternOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DLPDictionariesPatternOutput)
}

// DLPDictionariesPatternArrayInput is an input type that accepts DLPDictionariesPatternArray and DLPDictionariesPatternArrayOutput values.
// You can construct a concrete instance of `DLPDictionariesPatternArrayInput` via:
//
//	DLPDictionariesPatternArray{ DLPDictionariesPatternArgs{...} }
type DLPDictionariesPatternArrayInput interface {
	pulumi.Input

	ToDLPDictionariesPatternArrayOutput() DLPDictionariesPatternArrayOutput
	ToDLPDictionariesPatternArrayOutputWithContext(context.Context) DLPDictionariesPatternArrayOutput
}

type DLPDictionariesPatternArray []DLPDictionariesPatternInput

func (DLPDictionariesPatternArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DLPDictionariesPattern)(nil)).Elem()
}

func (i DLPDictionariesPatternArray) ToDLPDictionariesPatternArrayOutput() DLPDictionariesPatternArrayOutput {
	return i.ToDLPDictionariesPatternArrayOutputWithContext(context.Background())
}

func (i DLPDictionariesPatternArray) ToDLPDictionariesPatternArrayOutputWithContext(ctx context.Context) DLPDictionariesPatternArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DLPDictionariesPatternArrayOutput)
}

type DLPDictionariesPatternOutput struct{ *pulumi.OutputState }

func (DLPDictionariesPatternOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DLPDictionariesPattern)(nil)).Elem()
}

func (o DLPDictionariesPatternOutput) ToDLPDictionariesPatternOutput() DLPDictionariesPatternOutput {
	return o
}

func (o DLPDictionariesPatternOutput) ToDLPDictionariesPatternOutputWithContext(ctx context.Context) DLPDictionariesPatternOutput {
	return o
}

// The action applied to a DLP dictionary using patterns. The following values are supported:
func (o DLPDictionariesPatternOutput) Action() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DLPDictionariesPattern) *string { return v.Action }).(pulumi.StringPtrOutput)
}

// DLP dictionary pattern
func (o DLPDictionariesPatternOutput) Pattern() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DLPDictionariesPattern) *string { return v.Pattern }).(pulumi.StringPtrOutput)
}

type DLPDictionariesPatternArrayOutput struct{ *pulumi.OutputState }

func (DLPDictionariesPatternArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DLPDictionariesPattern)(nil)).Elem()
}

func (o DLPDictionariesPatternArrayOutput) ToDLPDictionariesPatternArrayOutput() DLPDictionariesPatternArrayOutput {
	return o
}

func (o DLPDictionariesPatternArrayOutput) ToDLPDictionariesPatternArrayOutputWithContext(ctx context.Context) DLPDictionariesPatternArrayOutput {
	return o
}

func (o DLPDictionariesPatternArrayOutput) Index(i pulumi.IntInput) DLPDictionariesPatternOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DLPDictionariesPattern {
		return vs[0].([]DLPDictionariesPattern)[vs[1].(int)]
	}).(DLPDictionariesPatternOutput)
}

type DLPDictionariesPhrase struct {
	// The action applied to a DLP dictionary using patterns. The following values are supported:
	Action *string `pulumi:"action"`
	// DLP dictionary phrase
	Phrase *string `pulumi:"phrase"`
}

// DLPDictionariesPhraseInput is an input type that accepts DLPDictionariesPhraseArgs and DLPDictionariesPhraseOutput values.
// You can construct a concrete instance of `DLPDictionariesPhraseInput` via:
//
//	DLPDictionariesPhraseArgs{...}
type DLPDictionariesPhraseInput interface {
	pulumi.Input

	ToDLPDictionariesPhraseOutput() DLPDictionariesPhraseOutput
	ToDLPDictionariesPhraseOutputWithContext(context.Context) DLPDictionariesPhraseOutput
}

type DLPDictionariesPhraseArgs struct {
	// The action applied to a DLP dictionary using patterns. The following values are supported:
	Action pulumi.StringPtrInput `pulumi:"action"`
	// DLP dictionary phrase
	Phrase pulumi.StringPtrInput `pulumi:"phrase"`
}

func (DLPDictionariesPhraseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DLPDictionariesPhrase)(nil)).Elem()
}

func (i DLPDictionariesPhraseArgs) ToDLPDictionariesPhraseOutput() DLPDictionariesPhraseOutput {
	return i.ToDLPDictionariesPhraseOutputWithContext(context.Background())
}

func (i DLPDictionariesPhraseArgs) ToDLPDictionariesPhraseOutputWithContext(ctx context.Context) DLPDictionariesPhraseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DLPDictionariesPhraseOutput)
}

// DLPDictionariesPhraseArrayInput is an input type that accepts DLPDictionariesPhraseArray and DLPDictionariesPhraseArrayOutput values.
// You can construct a concrete instance of `DLPDictionariesPhraseArrayInput` via:
//
//	DLPDictionariesPhraseArray{ DLPDictionariesPhraseArgs{...} }
type DLPDictionariesPhraseArrayInput interface {
	pulumi.Input

	ToDLPDictionariesPhraseArrayOutput() DLPDictionariesPhraseArrayOutput
	ToDLPDictionariesPhraseArrayOutputWithContext(context.Context) DLPDictionariesPhraseArrayOutput
}

type DLPDictionariesPhraseArray []DLPDictionariesPhraseInput

func (DLPDictionariesPhraseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DLPDictionariesPhrase)(nil)).Elem()
}

func (i DLPDictionariesPhraseArray) ToDLPDictionariesPhraseArrayOutput() DLPDictionariesPhraseArrayOutput {
	return i.ToDLPDictionariesPhraseArrayOutputWithContext(context.Background())
}

func (i DLPDictionariesPhraseArray) ToDLPDictionariesPhraseArrayOutputWithContext(ctx context.Context) DLPDictionariesPhraseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DLPDictionariesPhraseArrayOutput)
}

type DLPDictionariesPhraseOutput struct{ *pulumi.OutputState }

func (DLPDictionariesPhraseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DLPDictionariesPhrase)(nil)).Elem()
}

func (o DLPDictionariesPhraseOutput) ToDLPDictionariesPhraseOutput() DLPDictionariesPhraseOutput {
	return o
}

func (o DLPDictionariesPhraseOutput) ToDLPDictionariesPhraseOutputWithContext(ctx context.Context) DLPDictionariesPhraseOutput {
	return o
}

// The action applied to a DLP dictionary using patterns. The following values are supported:
func (o DLPDictionariesPhraseOutput) Action() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DLPDictionariesPhrase) *string { return v.Action }).(pulumi.StringPtrOutput)
}

// DLP dictionary phrase
func (o DLPDictionariesPhraseOutput) Phrase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v DLPDictionariesPhrase) *string { return v.Phrase }).(pulumi.StringPtrOutput)
}

type DLPDictionariesPhraseArrayOutput struct{ *pulumi.OutputState }

func (DLPDictionariesPhraseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DLPDictionariesPhrase)(nil)).Elem()
}

func (o DLPDictionariesPhraseArrayOutput) ToDLPDictionariesPhraseArrayOutput() DLPDictionariesPhraseArrayOutput {
	return o
}

func (o DLPDictionariesPhraseArrayOutput) ToDLPDictionariesPhraseArrayOutputWithContext(ctx context.Context) DLPDictionariesPhraseArrayOutput {
	return o
}

func (o DLPDictionariesPhraseArrayOutput) Index(i pulumi.IntInput) DLPDictionariesPhraseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DLPDictionariesPhrase {
		return vs[0].([]DLPDictionariesPhrase)[vs[1].(int)]
	}).(DLPDictionariesPhraseOutput)
}

type DLPWebRulesAuditor struct {
	// Identifier that uniquely identifies an entity
	Id int `pulumi:"id"`
}

// DLPWebRulesAuditorInput is an input type that accepts DLPWebRulesAuditorArgs and DLPWebRulesAuditorOutput values.
// You can construct a concrete instance of `DLPWebRulesAuditorInput` via:
//
//	DLPWebRulesAuditorArgs{...}
type DLPWebRulesAuditorInput interface {
	pulumi.Input

	ToDLPWebRulesAuditorOutput() DLPWebRulesAuditorOutput
	ToDLPWebRulesAuditorOutputWithContext(context.Context) DLPWebRulesAuditorOutput
}

type DLPWebRulesAuditorArgs struct {
	// Identifier that uniquely identifies an entity
	Id pulumi.IntInput `pulumi:"id"`
}

func (DLPWebRulesAuditorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DLPWebRulesAuditor)(nil)).Elem()
}

func (i DLPWebRulesAuditorArgs) ToDLPWebRulesAuditorOutput() DLPWebRulesAuditorOutput {
	return i.ToDLPWebRulesAuditorOutputWithContext(context.Background())
}

func (i DLPWebRulesAuditorArgs) ToDLPWebRulesAuditorOutputWithContext(ctx context.Context) DLPWebRulesAuditorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DLPWebRulesAuditorOutput)
}

func (i DLPWebRulesAuditorArgs) ToDLPWebRulesAuditorPtrOutput() DLPWebRulesAuditorPtrOutput {
	return i.ToDLPWebRulesAuditorPtrOutputWithContext(context.Background())
}

func (i DLPWebRulesAuditorArgs) ToDLPWebRulesAuditorPtrOutputWithContext(ctx context.Context) DLPWebRulesAuditorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DLPWebRulesAuditorOutput).ToDLPWebRulesAuditorPtrOutputWithContext(ctx)
}

// DLPWebRulesAuditorPtrInput is an input type that accepts DLPWebRulesAuditorArgs, DLPWebRulesAuditorPtr and DLPWebRulesAuditorPtrOutput values.
// You can construct a concrete instance of `DLPWebRulesAuditorPtrInput` via:
//
//	        DLPWebRulesAuditorArgs{...}
//
//	or:
//
//	        nil
type DLPWebRulesAuditorPtrInput interface {
	pulumi.Input

	ToDLPWebRulesAuditorPtrOutput() DLPWebRulesAuditorPtrOutput
	ToDLPWebRulesAuditorPtrOutputWithContext(context.Context) DLPWebRulesAuditorPtrOutput
}

type dlpwebRulesAuditorPtrType DLPWebRulesAuditorArgs

func DLPWebRulesAuditorPtr(v *DLPWebRulesAuditorArgs) DLPWebRulesAuditorPtrInput {
	return (*dlpwebRulesAuditorPtrType)(v)
}

func (*dlpwebRulesAuditorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DLPWebRulesAuditor)(nil)).Elem()
}

func (i *dlpwebRulesAuditorPtrType) ToDLPWebRulesAuditorPtrOutput() DLPWebRulesAuditorPtrOutput {
	return i.ToDLPWebRulesAuditorPtrOutputWithContext(context.Background())
}

func (i *dlpwebRulesAuditorPtrType) ToDLPWebRulesAuditorPtrOutputWithContext(ctx context.Context) DLPWebRulesAuditorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DLPWebRulesAuditorPtrOutput)
}

type DLPWebRulesAuditorOutput struct{ *pulumi.OutputState }

func (DLPWebRulesAuditorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DLPWebRulesAuditor)(nil)).Elem()
}

func (o DLPWebRulesAuditorOutput) ToDLPWebRulesAuditorOutput() DLPWebRulesAuditorOutput {
	return o
}

func (o DLPWebRulesAuditorOutput) ToDLPWebRulesAuditorOutputWithContext(ctx context.Context) DLPWebRulesAuditorOutput {
	return o
}

func (o DLPWebRulesAuditorOutput) ToDLPWebRulesAuditorPtrOutput() DLPWebRulesAuditorPtrOutput {
	return o.ToDLPWebRulesAuditorPtrOutputWithContext(context.Background())
}

func (o DLPWebRulesAuditorOutput) ToDLPWebRulesAuditorPtrOutputWithContext(ctx context.Context) DLPWebRulesAuditorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DLPWebRulesAuditor) *DLPWebRulesAuditor {
		return &v
	}).(DLPWebRulesAuditorPtrOutput)
}

// Identifier that uniquely identifies an entity
func (o DLPWebRulesAuditorOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v DLPWebRulesAuditor) int { return v.Id }).(pulumi.IntOutput)
}

type DLPWebRulesAuditorPtrOutput struct{ *pulumi.OutputState }

func (DLPWebRulesAuditorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DLPWebRulesAuditor)(nil)).Elem()
}

func (o DLPWebRulesAuditorPtrOutput) ToDLPWebRulesAuditorPtrOutput() DLPWebRulesAuditorPtrOutput {
	return o
}

func (o DLPWebRulesAuditorPtrOutput) ToDLPWebRulesAuditorPtrOutputWithContext(ctx context.Context) DLPWebRulesAuditorPtrOutput {
	return o
}

func (o DLPWebRulesAuditorPtrOutput) Elem() DLPWebRulesAuditorOutput {
	return o.ApplyT(func(v *DLPWebRulesAuditor) DLPWebRulesAuditor {
		if v != nil {
			return *v
		}
		var ret DLPWebRulesAuditor
		return ret
	}).(DLPWebRulesAuditorOutput)
}

// Identifier that uniquely identifies an entity
func (o DLPWebRulesAuditorPtrOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DLPWebRulesAuditor) *int {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.IntPtrOutput)
}

type DLPWebRulesDepartments struct {
	// Identifier that uniquely identifies an entity
	Ids []int `pulumi:"ids"`
}

// DLPWebRulesDepartmentsInput is an input type that accepts DLPWebRulesDepartmentsArgs and DLPWebRulesDepartmentsOutput values.
// You can construct a concrete instance of `DLPWebRulesDepartmentsInput` via:
//
//	DLPWebRulesDepartmentsArgs{...}
type DLPWebRulesDepartmentsInput interface {
	pulumi.Input

	ToDLPWebRulesDepartmentsOutput() DLPWebRulesDepartmentsOutput
	ToDLPWebRulesDepartmentsOutputWithContext(context.Context) DLPWebRulesDepartmentsOutput
}

type DLPWebRulesDepartmentsArgs struct {
	// Identifier that uniquely identifies an entity
	Ids pulumi.IntArrayInput `pulumi:"ids"`
}

func (DLPWebRulesDepartmentsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DLPWebRulesDepartments)(nil)).Elem()
}

func (i DLPWebRulesDepartmentsArgs) ToDLPWebRulesDepartmentsOutput() DLPWebRulesDepartmentsOutput {
	return i.ToDLPWebRulesDepartmentsOutputWithContext(context.Background())
}

func (i DLPWebRulesDepartmentsArgs) ToDLPWebRulesDepartmentsOutputWithContext(ctx context.Context) DLPWebRulesDepartmentsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DLPWebRulesDepartmentsOutput)
}

func (i DLPWebRulesDepartmentsArgs) ToDLPWebRulesDepartmentsPtrOutput() DLPWebRulesDepartmentsPtrOutput {
	return i.ToDLPWebRulesDepartmentsPtrOutputWithContext(context.Background())
}

func (i DLPWebRulesDepartmentsArgs) ToDLPWebRulesDepartmentsPtrOutputWithContext(ctx context.Context) DLPWebRulesDepartmentsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DLPWebRulesDepartmentsOutput).ToDLPWebRulesDepartmentsPtrOutputWithContext(ctx)
}

// DLPWebRulesDepartmentsPtrInput is an input type that accepts DLPWebRulesDepartmentsArgs, DLPWebRulesDepartmentsPtr and DLPWebRulesDepartmentsPtrOutput values.
// You can construct a concrete instance of `DLPWebRulesDepartmentsPtrInput` via:
//
//	        DLPWebRulesDepartmentsArgs{...}
//
//	or:
//
//	        nil
type DLPWebRulesDepartmentsPtrInput interface {
	pulumi.Input

	ToDLPWebRulesDepartmentsPtrOutput() DLPWebRulesDepartmentsPtrOutput
	ToDLPWebRulesDepartmentsPtrOutputWithContext(context.Context) DLPWebRulesDepartmentsPtrOutput
}

type dlpwebRulesDepartmentsPtrType DLPWebRulesDepartmentsArgs

func DLPWebRulesDepartmentsPtr(v *DLPWebRulesDepartmentsArgs) DLPWebRulesDepartmentsPtrInput {
	return (*dlpwebRulesDepartmentsPtrType)(v)
}

func (*dlpwebRulesDepartmentsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DLPWebRulesDepartments)(nil)).Elem()
}

func (i *dlpwebRulesDepartmentsPtrType) ToDLPWebRulesDepartmentsPtrOutput() DLPWebRulesDepartmentsPtrOutput {
	return i.ToDLPWebRulesDepartmentsPtrOutputWithContext(context.Background())
}

func (i *dlpwebRulesDepartmentsPtrType) ToDLPWebRulesDepartmentsPtrOutputWithContext(ctx context.Context) DLPWebRulesDepartmentsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DLPWebRulesDepartmentsPtrOutput)
}

type DLPWebRulesDepartmentsOutput struct{ *pulumi.OutputState }

func (DLPWebRulesDepartmentsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DLPWebRulesDepartments)(nil)).Elem()
}

func (o DLPWebRulesDepartmentsOutput) ToDLPWebRulesDepartmentsOutput() DLPWebRulesDepartmentsOutput {
	return o
}

func (o DLPWebRulesDepartmentsOutput) ToDLPWebRulesDepartmentsOutputWithContext(ctx context.Context) DLPWebRulesDepartmentsOutput {
	return o
}

func (o DLPWebRulesDepartmentsOutput) ToDLPWebRulesDepartmentsPtrOutput() DLPWebRulesDepartmentsPtrOutput {
	return o.ToDLPWebRulesDepartmentsPtrOutputWithContext(context.Background())
}

func (o DLPWebRulesDepartmentsOutput) ToDLPWebRulesDepartmentsPtrOutputWithContext(ctx context.Context) DLPWebRulesDepartmentsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DLPWebRulesDepartments) *DLPWebRulesDepartments {
		return &v
	}).(DLPWebRulesDepartmentsPtrOutput)
}

// Identifier that uniquely identifies an entity
func (o DLPWebRulesDepartmentsOutput) Ids() pulumi.IntArrayOutput {
	return o.ApplyT(func(v DLPWebRulesDepartments) []int { return v.Ids }).(pulumi.IntArrayOutput)
}

type DLPWebRulesDepartmentsPtrOutput struct{ *pulumi.OutputState }

func (DLPWebRulesDepartmentsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DLPWebRulesDepartments)(nil)).Elem()
}

func (o DLPWebRulesDepartmentsPtrOutput) ToDLPWebRulesDepartmentsPtrOutput() DLPWebRulesDepartmentsPtrOutput {
	return o
}

func (o DLPWebRulesDepartmentsPtrOutput) ToDLPWebRulesDepartmentsPtrOutputWithContext(ctx context.Context) DLPWebRulesDepartmentsPtrOutput {
	return o
}

func (o DLPWebRulesDepartmentsPtrOutput) Elem() DLPWebRulesDepartmentsOutput {
	return o.ApplyT(func(v *DLPWebRulesDepartments) DLPWebRulesDepartments {
		if v != nil {
			return *v
		}
		var ret DLPWebRulesDepartments
		return ret
	}).(DLPWebRulesDepartmentsOutput)
}

// Identifier that uniquely identifies an entity
func (o DLPWebRulesDepartmentsPtrOutput) Ids() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *DLPWebRulesDepartments) []int {
		if v == nil {
			return nil
		}
		return v.Ids
	}).(pulumi.IntArrayOutput)
}

type DLPWebRulesDlpEngines struct {
	// Identifier that uniquely identifies an entity
	Ids []int `pulumi:"ids"`
}

// DLPWebRulesDlpEnginesInput is an input type that accepts DLPWebRulesDlpEnginesArgs and DLPWebRulesDlpEnginesOutput values.
// You can construct a concrete instance of `DLPWebRulesDlpEnginesInput` via:
//
//	DLPWebRulesDlpEnginesArgs{...}
type DLPWebRulesDlpEnginesInput interface {
	pulumi.Input

	ToDLPWebRulesDlpEnginesOutput() DLPWebRulesDlpEnginesOutput
	ToDLPWebRulesDlpEnginesOutputWithContext(context.Context) DLPWebRulesDlpEnginesOutput
}

type DLPWebRulesDlpEnginesArgs struct {
	// Identifier that uniquely identifies an entity
	Ids pulumi.IntArrayInput `pulumi:"ids"`
}

func (DLPWebRulesDlpEnginesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DLPWebRulesDlpEngines)(nil)).Elem()
}

func (i DLPWebRulesDlpEnginesArgs) ToDLPWebRulesDlpEnginesOutput() DLPWebRulesDlpEnginesOutput {
	return i.ToDLPWebRulesDlpEnginesOutputWithContext(context.Background())
}

func (i DLPWebRulesDlpEnginesArgs) ToDLPWebRulesDlpEnginesOutputWithContext(ctx context.Context) DLPWebRulesDlpEnginesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DLPWebRulesDlpEnginesOutput)
}

func (i DLPWebRulesDlpEnginesArgs) ToDLPWebRulesDlpEnginesPtrOutput() DLPWebRulesDlpEnginesPtrOutput {
	return i.ToDLPWebRulesDlpEnginesPtrOutputWithContext(context.Background())
}

func (i DLPWebRulesDlpEnginesArgs) ToDLPWebRulesDlpEnginesPtrOutputWithContext(ctx context.Context) DLPWebRulesDlpEnginesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DLPWebRulesDlpEnginesOutput).ToDLPWebRulesDlpEnginesPtrOutputWithContext(ctx)
}

// DLPWebRulesDlpEnginesPtrInput is an input type that accepts DLPWebRulesDlpEnginesArgs, DLPWebRulesDlpEnginesPtr and DLPWebRulesDlpEnginesPtrOutput values.
// You can construct a concrete instance of `DLPWebRulesDlpEnginesPtrInput` via:
//
//	        DLPWebRulesDlpEnginesArgs{...}
//
//	or:
//
//	        nil
type DLPWebRulesDlpEnginesPtrInput interface {
	pulumi.Input

	ToDLPWebRulesDlpEnginesPtrOutput() DLPWebRulesDlpEnginesPtrOutput
	ToDLPWebRulesDlpEnginesPtrOutputWithContext(context.Context) DLPWebRulesDlpEnginesPtrOutput
}

type dlpwebRulesDlpEnginesPtrType DLPWebRulesDlpEnginesArgs

func DLPWebRulesDlpEnginesPtr(v *DLPWebRulesDlpEnginesArgs) DLPWebRulesDlpEnginesPtrInput {
	return (*dlpwebRulesDlpEnginesPtrType)(v)
}

func (*dlpwebRulesDlpEnginesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DLPWebRulesDlpEngines)(nil)).Elem()
}

func (i *dlpwebRulesDlpEnginesPtrType) ToDLPWebRulesDlpEnginesPtrOutput() DLPWebRulesDlpEnginesPtrOutput {
	return i.ToDLPWebRulesDlpEnginesPtrOutputWithContext(context.Background())
}

func (i *dlpwebRulesDlpEnginesPtrType) ToDLPWebRulesDlpEnginesPtrOutputWithContext(ctx context.Context) DLPWebRulesDlpEnginesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DLPWebRulesDlpEnginesPtrOutput)
}

type DLPWebRulesDlpEnginesOutput struct{ *pulumi.OutputState }

func (DLPWebRulesDlpEnginesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DLPWebRulesDlpEngines)(nil)).Elem()
}

func (o DLPWebRulesDlpEnginesOutput) ToDLPWebRulesDlpEnginesOutput() DLPWebRulesDlpEnginesOutput {
	return o
}

func (o DLPWebRulesDlpEnginesOutput) ToDLPWebRulesDlpEnginesOutputWithContext(ctx context.Context) DLPWebRulesDlpEnginesOutput {
	return o
}

func (o DLPWebRulesDlpEnginesOutput) ToDLPWebRulesDlpEnginesPtrOutput() DLPWebRulesDlpEnginesPtrOutput {
	return o.ToDLPWebRulesDlpEnginesPtrOutputWithContext(context.Background())
}

func (o DLPWebRulesDlpEnginesOutput) ToDLPWebRulesDlpEnginesPtrOutputWithContext(ctx context.Context) DLPWebRulesDlpEnginesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DLPWebRulesDlpEngines) *DLPWebRulesDlpEngines {
		return &v
	}).(DLPWebRulesDlpEnginesPtrOutput)
}

// Identifier that uniquely identifies an entity
func (o DLPWebRulesDlpEnginesOutput) Ids() pulumi.IntArrayOutput {
	return o.ApplyT(func(v DLPWebRulesDlpEngines) []int { return v.Ids }).(pulumi.IntArrayOutput)
}

type DLPWebRulesDlpEnginesPtrOutput struct{ *pulumi.OutputState }

func (DLPWebRulesDlpEnginesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DLPWebRulesDlpEngines)(nil)).Elem()
}

func (o DLPWebRulesDlpEnginesPtrOutput) ToDLPWebRulesDlpEnginesPtrOutput() DLPWebRulesDlpEnginesPtrOutput {
	return o
}

func (o DLPWebRulesDlpEnginesPtrOutput) ToDLPWebRulesDlpEnginesPtrOutputWithContext(ctx context.Context) DLPWebRulesDlpEnginesPtrOutput {
	return o
}

func (o DLPWebRulesDlpEnginesPtrOutput) Elem() DLPWebRulesDlpEnginesOutput {
	return o.ApplyT(func(v *DLPWebRulesDlpEngines) DLPWebRulesDlpEngines {
		if v != nil {
			return *v
		}
		var ret DLPWebRulesDlpEngines
		return ret
	}).(DLPWebRulesDlpEnginesOutput)
}

// Identifier that uniquely identifies an entity
func (o DLPWebRulesDlpEnginesPtrOutput) Ids() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *DLPWebRulesDlpEngines) []int {
		if v == nil {
			return nil
		}
		return v.Ids
	}).(pulumi.IntArrayOutput)
}

type DLPWebRulesExcludedDepartments struct {
	// Identifier that uniquely identifies an entity
	Ids []int `pulumi:"ids"`
}

// DLPWebRulesExcludedDepartmentsInput is an input type that accepts DLPWebRulesExcludedDepartmentsArgs and DLPWebRulesExcludedDepartmentsOutput values.
// You can construct a concrete instance of `DLPWebRulesExcludedDepartmentsInput` via:
//
//	DLPWebRulesExcludedDepartmentsArgs{...}
type DLPWebRulesExcludedDepartmentsInput interface {
	pulumi.Input

	ToDLPWebRulesExcludedDepartmentsOutput() DLPWebRulesExcludedDepartmentsOutput
	ToDLPWebRulesExcludedDepartmentsOutputWithContext(context.Context) DLPWebRulesExcludedDepartmentsOutput
}

type DLPWebRulesExcludedDepartmentsArgs struct {
	// Identifier that uniquely identifies an entity
	Ids pulumi.IntArrayInput `pulumi:"ids"`
}

func (DLPWebRulesExcludedDepartmentsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DLPWebRulesExcludedDepartments)(nil)).Elem()
}

func (i DLPWebRulesExcludedDepartmentsArgs) ToDLPWebRulesExcludedDepartmentsOutput() DLPWebRulesExcludedDepartmentsOutput {
	return i.ToDLPWebRulesExcludedDepartmentsOutputWithContext(context.Background())
}

func (i DLPWebRulesExcludedDepartmentsArgs) ToDLPWebRulesExcludedDepartmentsOutputWithContext(ctx context.Context) DLPWebRulesExcludedDepartmentsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DLPWebRulesExcludedDepartmentsOutput)
}

func (i DLPWebRulesExcludedDepartmentsArgs) ToDLPWebRulesExcludedDepartmentsPtrOutput() DLPWebRulesExcludedDepartmentsPtrOutput {
	return i.ToDLPWebRulesExcludedDepartmentsPtrOutputWithContext(context.Background())
}

func (i DLPWebRulesExcludedDepartmentsArgs) ToDLPWebRulesExcludedDepartmentsPtrOutputWithContext(ctx context.Context) DLPWebRulesExcludedDepartmentsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DLPWebRulesExcludedDepartmentsOutput).ToDLPWebRulesExcludedDepartmentsPtrOutputWithContext(ctx)
}

// DLPWebRulesExcludedDepartmentsPtrInput is an input type that accepts DLPWebRulesExcludedDepartmentsArgs, DLPWebRulesExcludedDepartmentsPtr and DLPWebRulesExcludedDepartmentsPtrOutput values.
// You can construct a concrete instance of `DLPWebRulesExcludedDepartmentsPtrInput` via:
//
//	        DLPWebRulesExcludedDepartmentsArgs{...}
//
//	or:
//
//	        nil
type DLPWebRulesExcludedDepartmentsPtrInput interface {
	pulumi.Input

	ToDLPWebRulesExcludedDepartmentsPtrOutput() DLPWebRulesExcludedDepartmentsPtrOutput
	ToDLPWebRulesExcludedDepartmentsPtrOutputWithContext(context.Context) DLPWebRulesExcludedDepartmentsPtrOutput
}

type dlpwebRulesExcludedDepartmentsPtrType DLPWebRulesExcludedDepartmentsArgs

func DLPWebRulesExcludedDepartmentsPtr(v *DLPWebRulesExcludedDepartmentsArgs) DLPWebRulesExcludedDepartmentsPtrInput {
	return (*dlpwebRulesExcludedDepartmentsPtrType)(v)
}

func (*dlpwebRulesExcludedDepartmentsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DLPWebRulesExcludedDepartments)(nil)).Elem()
}

func (i *dlpwebRulesExcludedDepartmentsPtrType) ToDLPWebRulesExcludedDepartmentsPtrOutput() DLPWebRulesExcludedDepartmentsPtrOutput {
	return i.ToDLPWebRulesExcludedDepartmentsPtrOutputWithContext(context.Background())
}

func (i *dlpwebRulesExcludedDepartmentsPtrType) ToDLPWebRulesExcludedDepartmentsPtrOutputWithContext(ctx context.Context) DLPWebRulesExcludedDepartmentsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DLPWebRulesExcludedDepartmentsPtrOutput)
}

type DLPWebRulesExcludedDepartmentsOutput struct{ *pulumi.OutputState }

func (DLPWebRulesExcludedDepartmentsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DLPWebRulesExcludedDepartments)(nil)).Elem()
}

func (o DLPWebRulesExcludedDepartmentsOutput) ToDLPWebRulesExcludedDepartmentsOutput() DLPWebRulesExcludedDepartmentsOutput {
	return o
}

func (o DLPWebRulesExcludedDepartmentsOutput) ToDLPWebRulesExcludedDepartmentsOutputWithContext(ctx context.Context) DLPWebRulesExcludedDepartmentsOutput {
	return o
}

func (o DLPWebRulesExcludedDepartmentsOutput) ToDLPWebRulesExcludedDepartmentsPtrOutput() DLPWebRulesExcludedDepartmentsPtrOutput {
	return o.ToDLPWebRulesExcludedDepartmentsPtrOutputWithContext(context.Background())
}

func (o DLPWebRulesExcludedDepartmentsOutput) ToDLPWebRulesExcludedDepartmentsPtrOutputWithContext(ctx context.Context) DLPWebRulesExcludedDepartmentsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DLPWebRulesExcludedDepartments) *DLPWebRulesExcludedDepartments {
		return &v
	}).(DLPWebRulesExcludedDepartmentsPtrOutput)
}

// Identifier that uniquely identifies an entity
func (o DLPWebRulesExcludedDepartmentsOutput) Ids() pulumi.IntArrayOutput {
	return o.ApplyT(func(v DLPWebRulesExcludedDepartments) []int { return v.Ids }).(pulumi.IntArrayOutput)
}

type DLPWebRulesExcludedDepartmentsPtrOutput struct{ *pulumi.OutputState }

func (DLPWebRulesExcludedDepartmentsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DLPWebRulesExcludedDepartments)(nil)).Elem()
}

func (o DLPWebRulesExcludedDepartmentsPtrOutput) ToDLPWebRulesExcludedDepartmentsPtrOutput() DLPWebRulesExcludedDepartmentsPtrOutput {
	return o
}

func (o DLPWebRulesExcludedDepartmentsPtrOutput) ToDLPWebRulesExcludedDepartmentsPtrOutputWithContext(ctx context.Context) DLPWebRulesExcludedDepartmentsPtrOutput {
	return o
}

func (o DLPWebRulesExcludedDepartmentsPtrOutput) Elem() DLPWebRulesExcludedDepartmentsOutput {
	return o.ApplyT(func(v *DLPWebRulesExcludedDepartments) DLPWebRulesExcludedDepartments {
		if v != nil {
			return *v
		}
		var ret DLPWebRulesExcludedDepartments
		return ret
	}).(DLPWebRulesExcludedDepartmentsOutput)
}

// Identifier that uniquely identifies an entity
func (o DLPWebRulesExcludedDepartmentsPtrOutput) Ids() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *DLPWebRulesExcludedDepartments) []int {
		if v == nil {
			return nil
		}
		return v.Ids
	}).(pulumi.IntArrayOutput)
}

type DLPWebRulesExcludedGroups struct {
	// Identifier that uniquely identifies an entity
	Ids []int `pulumi:"ids"`
}

// DLPWebRulesExcludedGroupsInput is an input type that accepts DLPWebRulesExcludedGroupsArgs and DLPWebRulesExcludedGroupsOutput values.
// You can construct a concrete instance of `DLPWebRulesExcludedGroupsInput` via:
//
//	DLPWebRulesExcludedGroupsArgs{...}
type DLPWebRulesExcludedGroupsInput interface {
	pulumi.Input

	ToDLPWebRulesExcludedGroupsOutput() DLPWebRulesExcludedGroupsOutput
	ToDLPWebRulesExcludedGroupsOutputWithContext(context.Context) DLPWebRulesExcludedGroupsOutput
}

type DLPWebRulesExcludedGroupsArgs struct {
	// Identifier that uniquely identifies an entity
	Ids pulumi.IntArrayInput `pulumi:"ids"`
}

func (DLPWebRulesExcludedGroupsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DLPWebRulesExcludedGroups)(nil)).Elem()
}

func (i DLPWebRulesExcludedGroupsArgs) ToDLPWebRulesExcludedGroupsOutput() DLPWebRulesExcludedGroupsOutput {
	return i.ToDLPWebRulesExcludedGroupsOutputWithContext(context.Background())
}

func (i DLPWebRulesExcludedGroupsArgs) ToDLPWebRulesExcludedGroupsOutputWithContext(ctx context.Context) DLPWebRulesExcludedGroupsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DLPWebRulesExcludedGroupsOutput)
}

func (i DLPWebRulesExcludedGroupsArgs) ToDLPWebRulesExcludedGroupsPtrOutput() DLPWebRulesExcludedGroupsPtrOutput {
	return i.ToDLPWebRulesExcludedGroupsPtrOutputWithContext(context.Background())
}

func (i DLPWebRulesExcludedGroupsArgs) ToDLPWebRulesExcludedGroupsPtrOutputWithContext(ctx context.Context) DLPWebRulesExcludedGroupsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DLPWebRulesExcludedGroupsOutput).ToDLPWebRulesExcludedGroupsPtrOutputWithContext(ctx)
}

// DLPWebRulesExcludedGroupsPtrInput is an input type that accepts DLPWebRulesExcludedGroupsArgs, DLPWebRulesExcludedGroupsPtr and DLPWebRulesExcludedGroupsPtrOutput values.
// You can construct a concrete instance of `DLPWebRulesExcludedGroupsPtrInput` via:
//
//	        DLPWebRulesExcludedGroupsArgs{...}
//
//	or:
//
//	        nil
type DLPWebRulesExcludedGroupsPtrInput interface {
	pulumi.Input

	ToDLPWebRulesExcludedGroupsPtrOutput() DLPWebRulesExcludedGroupsPtrOutput
	ToDLPWebRulesExcludedGroupsPtrOutputWithContext(context.Context) DLPWebRulesExcludedGroupsPtrOutput
}

type dlpwebRulesExcludedGroupsPtrType DLPWebRulesExcludedGroupsArgs

func DLPWebRulesExcludedGroupsPtr(v *DLPWebRulesExcludedGroupsArgs) DLPWebRulesExcludedGroupsPtrInput {
	return (*dlpwebRulesExcludedGroupsPtrType)(v)
}

func (*dlpwebRulesExcludedGroupsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DLPWebRulesExcludedGroups)(nil)).Elem()
}

func (i *dlpwebRulesExcludedGroupsPtrType) ToDLPWebRulesExcludedGroupsPtrOutput() DLPWebRulesExcludedGroupsPtrOutput {
	return i.ToDLPWebRulesExcludedGroupsPtrOutputWithContext(context.Background())
}

func (i *dlpwebRulesExcludedGroupsPtrType) ToDLPWebRulesExcludedGroupsPtrOutputWithContext(ctx context.Context) DLPWebRulesExcludedGroupsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DLPWebRulesExcludedGroupsPtrOutput)
}

type DLPWebRulesExcludedGroupsOutput struct{ *pulumi.OutputState }

func (DLPWebRulesExcludedGroupsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DLPWebRulesExcludedGroups)(nil)).Elem()
}

func (o DLPWebRulesExcludedGroupsOutput) ToDLPWebRulesExcludedGroupsOutput() DLPWebRulesExcludedGroupsOutput {
	return o
}

func (o DLPWebRulesExcludedGroupsOutput) ToDLPWebRulesExcludedGroupsOutputWithContext(ctx context.Context) DLPWebRulesExcludedGroupsOutput {
	return o
}

func (o DLPWebRulesExcludedGroupsOutput) ToDLPWebRulesExcludedGroupsPtrOutput() DLPWebRulesExcludedGroupsPtrOutput {
	return o.ToDLPWebRulesExcludedGroupsPtrOutputWithContext(context.Background())
}

func (o DLPWebRulesExcludedGroupsOutput) ToDLPWebRulesExcludedGroupsPtrOutputWithContext(ctx context.Context) DLPWebRulesExcludedGroupsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DLPWebRulesExcludedGroups) *DLPWebRulesExcludedGroups {
		return &v
	}).(DLPWebRulesExcludedGroupsPtrOutput)
}

// Identifier that uniquely identifies an entity
func (o DLPWebRulesExcludedGroupsOutput) Ids() pulumi.IntArrayOutput {
	return o.ApplyT(func(v DLPWebRulesExcludedGroups) []int { return v.Ids }).(pulumi.IntArrayOutput)
}

type DLPWebRulesExcludedGroupsPtrOutput struct{ *pulumi.OutputState }

func (DLPWebRulesExcludedGroupsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DLPWebRulesExcludedGroups)(nil)).Elem()
}

func (o DLPWebRulesExcludedGroupsPtrOutput) ToDLPWebRulesExcludedGroupsPtrOutput() DLPWebRulesExcludedGroupsPtrOutput {
	return o
}

func (o DLPWebRulesExcludedGroupsPtrOutput) ToDLPWebRulesExcludedGroupsPtrOutputWithContext(ctx context.Context) DLPWebRulesExcludedGroupsPtrOutput {
	return o
}

func (o DLPWebRulesExcludedGroupsPtrOutput) Elem() DLPWebRulesExcludedGroupsOutput {
	return o.ApplyT(func(v *DLPWebRulesExcludedGroups) DLPWebRulesExcludedGroups {
		if v != nil {
			return *v
		}
		var ret DLPWebRulesExcludedGroups
		return ret
	}).(DLPWebRulesExcludedGroupsOutput)
}

// Identifier that uniquely identifies an entity
func (o DLPWebRulesExcludedGroupsPtrOutput) Ids() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *DLPWebRulesExcludedGroups) []int {
		if v == nil {
			return nil
		}
		return v.Ids
	}).(pulumi.IntArrayOutput)
}

type DLPWebRulesExcludedUsers struct {
	// Identifier that uniquely identifies an entity
	Ids []int `pulumi:"ids"`
}

// DLPWebRulesExcludedUsersInput is an input type that accepts DLPWebRulesExcludedUsersArgs and DLPWebRulesExcludedUsersOutput values.
// You can construct a concrete instance of `DLPWebRulesExcludedUsersInput` via:
//
//	DLPWebRulesExcludedUsersArgs{...}
type DLPWebRulesExcludedUsersInput interface {
	pulumi.Input

	ToDLPWebRulesExcludedUsersOutput() DLPWebRulesExcludedUsersOutput
	ToDLPWebRulesExcludedUsersOutputWithContext(context.Context) DLPWebRulesExcludedUsersOutput
}

type DLPWebRulesExcludedUsersArgs struct {
	// Identifier that uniquely identifies an entity
	Ids pulumi.IntArrayInput `pulumi:"ids"`
}

func (DLPWebRulesExcludedUsersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DLPWebRulesExcludedUsers)(nil)).Elem()
}

func (i DLPWebRulesExcludedUsersArgs) ToDLPWebRulesExcludedUsersOutput() DLPWebRulesExcludedUsersOutput {
	return i.ToDLPWebRulesExcludedUsersOutputWithContext(context.Background())
}

func (i DLPWebRulesExcludedUsersArgs) ToDLPWebRulesExcludedUsersOutputWithContext(ctx context.Context) DLPWebRulesExcludedUsersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DLPWebRulesExcludedUsersOutput)
}

func (i DLPWebRulesExcludedUsersArgs) ToDLPWebRulesExcludedUsersPtrOutput() DLPWebRulesExcludedUsersPtrOutput {
	return i.ToDLPWebRulesExcludedUsersPtrOutputWithContext(context.Background())
}

func (i DLPWebRulesExcludedUsersArgs) ToDLPWebRulesExcludedUsersPtrOutputWithContext(ctx context.Context) DLPWebRulesExcludedUsersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DLPWebRulesExcludedUsersOutput).ToDLPWebRulesExcludedUsersPtrOutputWithContext(ctx)
}

// DLPWebRulesExcludedUsersPtrInput is an input type that accepts DLPWebRulesExcludedUsersArgs, DLPWebRulesExcludedUsersPtr and DLPWebRulesExcludedUsersPtrOutput values.
// You can construct a concrete instance of `DLPWebRulesExcludedUsersPtrInput` via:
//
//	        DLPWebRulesExcludedUsersArgs{...}
//
//	or:
//
//	        nil
type DLPWebRulesExcludedUsersPtrInput interface {
	pulumi.Input

	ToDLPWebRulesExcludedUsersPtrOutput() DLPWebRulesExcludedUsersPtrOutput
	ToDLPWebRulesExcludedUsersPtrOutputWithContext(context.Context) DLPWebRulesExcludedUsersPtrOutput
}

type dlpwebRulesExcludedUsersPtrType DLPWebRulesExcludedUsersArgs

func DLPWebRulesExcludedUsersPtr(v *DLPWebRulesExcludedUsersArgs) DLPWebRulesExcludedUsersPtrInput {
	return (*dlpwebRulesExcludedUsersPtrType)(v)
}

func (*dlpwebRulesExcludedUsersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DLPWebRulesExcludedUsers)(nil)).Elem()
}

func (i *dlpwebRulesExcludedUsersPtrType) ToDLPWebRulesExcludedUsersPtrOutput() DLPWebRulesExcludedUsersPtrOutput {
	return i.ToDLPWebRulesExcludedUsersPtrOutputWithContext(context.Background())
}

func (i *dlpwebRulesExcludedUsersPtrType) ToDLPWebRulesExcludedUsersPtrOutputWithContext(ctx context.Context) DLPWebRulesExcludedUsersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DLPWebRulesExcludedUsersPtrOutput)
}

type DLPWebRulesExcludedUsersOutput struct{ *pulumi.OutputState }

func (DLPWebRulesExcludedUsersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DLPWebRulesExcludedUsers)(nil)).Elem()
}

func (o DLPWebRulesExcludedUsersOutput) ToDLPWebRulesExcludedUsersOutput() DLPWebRulesExcludedUsersOutput {
	return o
}

func (o DLPWebRulesExcludedUsersOutput) ToDLPWebRulesExcludedUsersOutputWithContext(ctx context.Context) DLPWebRulesExcludedUsersOutput {
	return o
}

func (o DLPWebRulesExcludedUsersOutput) ToDLPWebRulesExcludedUsersPtrOutput() DLPWebRulesExcludedUsersPtrOutput {
	return o.ToDLPWebRulesExcludedUsersPtrOutputWithContext(context.Background())
}

func (o DLPWebRulesExcludedUsersOutput) ToDLPWebRulesExcludedUsersPtrOutputWithContext(ctx context.Context) DLPWebRulesExcludedUsersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DLPWebRulesExcludedUsers) *DLPWebRulesExcludedUsers {
		return &v
	}).(DLPWebRulesExcludedUsersPtrOutput)
}

// Identifier that uniquely identifies an entity
func (o DLPWebRulesExcludedUsersOutput) Ids() pulumi.IntArrayOutput {
	return o.ApplyT(func(v DLPWebRulesExcludedUsers) []int { return v.Ids }).(pulumi.IntArrayOutput)
}

type DLPWebRulesExcludedUsersPtrOutput struct{ *pulumi.OutputState }

func (DLPWebRulesExcludedUsersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DLPWebRulesExcludedUsers)(nil)).Elem()
}

func (o DLPWebRulesExcludedUsersPtrOutput) ToDLPWebRulesExcludedUsersPtrOutput() DLPWebRulesExcludedUsersPtrOutput {
	return o
}

func (o DLPWebRulesExcludedUsersPtrOutput) ToDLPWebRulesExcludedUsersPtrOutputWithContext(ctx context.Context) DLPWebRulesExcludedUsersPtrOutput {
	return o
}

func (o DLPWebRulesExcludedUsersPtrOutput) Elem() DLPWebRulesExcludedUsersOutput {
	return o.ApplyT(func(v *DLPWebRulesExcludedUsers) DLPWebRulesExcludedUsers {
		if v != nil {
			return *v
		}
		var ret DLPWebRulesExcludedUsers
		return ret
	}).(DLPWebRulesExcludedUsersOutput)
}

// Identifier that uniquely identifies an entity
func (o DLPWebRulesExcludedUsersPtrOutput) Ids() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *DLPWebRulesExcludedUsers) []int {
		if v == nil {
			return nil
		}
		return v.Ids
	}).(pulumi.IntArrayOutput)
}

type DLPWebRulesGroups struct {
	// Identifier that uniquely identifies an entity
	Ids []int `pulumi:"ids"`
}

// DLPWebRulesGroupsInput is an input type that accepts DLPWebRulesGroupsArgs and DLPWebRulesGroupsOutput values.
// You can construct a concrete instance of `DLPWebRulesGroupsInput` via:
//
//	DLPWebRulesGroupsArgs{...}
type DLPWebRulesGroupsInput interface {
	pulumi.Input

	ToDLPWebRulesGroupsOutput() DLPWebRulesGroupsOutput
	ToDLPWebRulesGroupsOutputWithContext(context.Context) DLPWebRulesGroupsOutput
}

type DLPWebRulesGroupsArgs struct {
	// Identifier that uniquely identifies an entity
	Ids pulumi.IntArrayInput `pulumi:"ids"`
}

func (DLPWebRulesGroupsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DLPWebRulesGroups)(nil)).Elem()
}

func (i DLPWebRulesGroupsArgs) ToDLPWebRulesGroupsOutput() DLPWebRulesGroupsOutput {
	return i.ToDLPWebRulesGroupsOutputWithContext(context.Background())
}

func (i DLPWebRulesGroupsArgs) ToDLPWebRulesGroupsOutputWithContext(ctx context.Context) DLPWebRulesGroupsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DLPWebRulesGroupsOutput)
}

func (i DLPWebRulesGroupsArgs) ToDLPWebRulesGroupsPtrOutput() DLPWebRulesGroupsPtrOutput {
	return i.ToDLPWebRulesGroupsPtrOutputWithContext(context.Background())
}

func (i DLPWebRulesGroupsArgs) ToDLPWebRulesGroupsPtrOutputWithContext(ctx context.Context) DLPWebRulesGroupsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DLPWebRulesGroupsOutput).ToDLPWebRulesGroupsPtrOutputWithContext(ctx)
}

// DLPWebRulesGroupsPtrInput is an input type that accepts DLPWebRulesGroupsArgs, DLPWebRulesGroupsPtr and DLPWebRulesGroupsPtrOutput values.
// You can construct a concrete instance of `DLPWebRulesGroupsPtrInput` via:
//
//	        DLPWebRulesGroupsArgs{...}
//
//	or:
//
//	        nil
type DLPWebRulesGroupsPtrInput interface {
	pulumi.Input

	ToDLPWebRulesGroupsPtrOutput() DLPWebRulesGroupsPtrOutput
	ToDLPWebRulesGroupsPtrOutputWithContext(context.Context) DLPWebRulesGroupsPtrOutput
}

type dlpwebRulesGroupsPtrType DLPWebRulesGroupsArgs

func DLPWebRulesGroupsPtr(v *DLPWebRulesGroupsArgs) DLPWebRulesGroupsPtrInput {
	return (*dlpwebRulesGroupsPtrType)(v)
}

func (*dlpwebRulesGroupsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DLPWebRulesGroups)(nil)).Elem()
}

func (i *dlpwebRulesGroupsPtrType) ToDLPWebRulesGroupsPtrOutput() DLPWebRulesGroupsPtrOutput {
	return i.ToDLPWebRulesGroupsPtrOutputWithContext(context.Background())
}

func (i *dlpwebRulesGroupsPtrType) ToDLPWebRulesGroupsPtrOutputWithContext(ctx context.Context) DLPWebRulesGroupsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DLPWebRulesGroupsPtrOutput)
}

type DLPWebRulesGroupsOutput struct{ *pulumi.OutputState }

func (DLPWebRulesGroupsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DLPWebRulesGroups)(nil)).Elem()
}

func (o DLPWebRulesGroupsOutput) ToDLPWebRulesGroupsOutput() DLPWebRulesGroupsOutput {
	return o
}

func (o DLPWebRulesGroupsOutput) ToDLPWebRulesGroupsOutputWithContext(ctx context.Context) DLPWebRulesGroupsOutput {
	return o
}

func (o DLPWebRulesGroupsOutput) ToDLPWebRulesGroupsPtrOutput() DLPWebRulesGroupsPtrOutput {
	return o.ToDLPWebRulesGroupsPtrOutputWithContext(context.Background())
}

func (o DLPWebRulesGroupsOutput) ToDLPWebRulesGroupsPtrOutputWithContext(ctx context.Context) DLPWebRulesGroupsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DLPWebRulesGroups) *DLPWebRulesGroups {
		return &v
	}).(DLPWebRulesGroupsPtrOutput)
}

// Identifier that uniquely identifies an entity
func (o DLPWebRulesGroupsOutput) Ids() pulumi.IntArrayOutput {
	return o.ApplyT(func(v DLPWebRulesGroups) []int { return v.Ids }).(pulumi.IntArrayOutput)
}

type DLPWebRulesGroupsPtrOutput struct{ *pulumi.OutputState }

func (DLPWebRulesGroupsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DLPWebRulesGroups)(nil)).Elem()
}

func (o DLPWebRulesGroupsPtrOutput) ToDLPWebRulesGroupsPtrOutput() DLPWebRulesGroupsPtrOutput {
	return o
}

func (o DLPWebRulesGroupsPtrOutput) ToDLPWebRulesGroupsPtrOutputWithContext(ctx context.Context) DLPWebRulesGroupsPtrOutput {
	return o
}

func (o DLPWebRulesGroupsPtrOutput) Elem() DLPWebRulesGroupsOutput {
	return o.ApplyT(func(v *DLPWebRulesGroups) DLPWebRulesGroups {
		if v != nil {
			return *v
		}
		var ret DLPWebRulesGroups
		return ret
	}).(DLPWebRulesGroupsOutput)
}

// Identifier that uniquely identifies an entity
func (o DLPWebRulesGroupsPtrOutput) Ids() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *DLPWebRulesGroups) []int {
		if v == nil {
			return nil
		}
		return v.Ids
	}).(pulumi.IntArrayOutput)
}

type DLPWebRulesIcapServer struct {
	// Identifier that uniquely identifies an entity
	Id int `pulumi:"id"`
}

// DLPWebRulesIcapServerInput is an input type that accepts DLPWebRulesIcapServerArgs and DLPWebRulesIcapServerOutput values.
// You can construct a concrete instance of `DLPWebRulesIcapServerInput` via:
//
//	DLPWebRulesIcapServerArgs{...}
type DLPWebRulesIcapServerInput interface {
	pulumi.Input

	ToDLPWebRulesIcapServerOutput() DLPWebRulesIcapServerOutput
	ToDLPWebRulesIcapServerOutputWithContext(context.Context) DLPWebRulesIcapServerOutput
}

type DLPWebRulesIcapServerArgs struct {
	// Identifier that uniquely identifies an entity
	Id pulumi.IntInput `pulumi:"id"`
}

func (DLPWebRulesIcapServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DLPWebRulesIcapServer)(nil)).Elem()
}

func (i DLPWebRulesIcapServerArgs) ToDLPWebRulesIcapServerOutput() DLPWebRulesIcapServerOutput {
	return i.ToDLPWebRulesIcapServerOutputWithContext(context.Background())
}

func (i DLPWebRulesIcapServerArgs) ToDLPWebRulesIcapServerOutputWithContext(ctx context.Context) DLPWebRulesIcapServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DLPWebRulesIcapServerOutput)
}

func (i DLPWebRulesIcapServerArgs) ToDLPWebRulesIcapServerPtrOutput() DLPWebRulesIcapServerPtrOutput {
	return i.ToDLPWebRulesIcapServerPtrOutputWithContext(context.Background())
}

func (i DLPWebRulesIcapServerArgs) ToDLPWebRulesIcapServerPtrOutputWithContext(ctx context.Context) DLPWebRulesIcapServerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DLPWebRulesIcapServerOutput).ToDLPWebRulesIcapServerPtrOutputWithContext(ctx)
}

// DLPWebRulesIcapServerPtrInput is an input type that accepts DLPWebRulesIcapServerArgs, DLPWebRulesIcapServerPtr and DLPWebRulesIcapServerPtrOutput values.
// You can construct a concrete instance of `DLPWebRulesIcapServerPtrInput` via:
//
//	        DLPWebRulesIcapServerArgs{...}
//
//	or:
//
//	        nil
type DLPWebRulesIcapServerPtrInput interface {
	pulumi.Input

	ToDLPWebRulesIcapServerPtrOutput() DLPWebRulesIcapServerPtrOutput
	ToDLPWebRulesIcapServerPtrOutputWithContext(context.Context) DLPWebRulesIcapServerPtrOutput
}

type dlpwebRulesIcapServerPtrType DLPWebRulesIcapServerArgs

func DLPWebRulesIcapServerPtr(v *DLPWebRulesIcapServerArgs) DLPWebRulesIcapServerPtrInput {
	return (*dlpwebRulesIcapServerPtrType)(v)
}

func (*dlpwebRulesIcapServerPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DLPWebRulesIcapServer)(nil)).Elem()
}

func (i *dlpwebRulesIcapServerPtrType) ToDLPWebRulesIcapServerPtrOutput() DLPWebRulesIcapServerPtrOutput {
	return i.ToDLPWebRulesIcapServerPtrOutputWithContext(context.Background())
}

func (i *dlpwebRulesIcapServerPtrType) ToDLPWebRulesIcapServerPtrOutputWithContext(ctx context.Context) DLPWebRulesIcapServerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DLPWebRulesIcapServerPtrOutput)
}

type DLPWebRulesIcapServerOutput struct{ *pulumi.OutputState }

func (DLPWebRulesIcapServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DLPWebRulesIcapServer)(nil)).Elem()
}

func (o DLPWebRulesIcapServerOutput) ToDLPWebRulesIcapServerOutput() DLPWebRulesIcapServerOutput {
	return o
}

func (o DLPWebRulesIcapServerOutput) ToDLPWebRulesIcapServerOutputWithContext(ctx context.Context) DLPWebRulesIcapServerOutput {
	return o
}

func (o DLPWebRulesIcapServerOutput) ToDLPWebRulesIcapServerPtrOutput() DLPWebRulesIcapServerPtrOutput {
	return o.ToDLPWebRulesIcapServerPtrOutputWithContext(context.Background())
}

func (o DLPWebRulesIcapServerOutput) ToDLPWebRulesIcapServerPtrOutputWithContext(ctx context.Context) DLPWebRulesIcapServerPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DLPWebRulesIcapServer) *DLPWebRulesIcapServer {
		return &v
	}).(DLPWebRulesIcapServerPtrOutput)
}

// Identifier that uniquely identifies an entity
func (o DLPWebRulesIcapServerOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v DLPWebRulesIcapServer) int { return v.Id }).(pulumi.IntOutput)
}

type DLPWebRulesIcapServerPtrOutput struct{ *pulumi.OutputState }

func (DLPWebRulesIcapServerPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DLPWebRulesIcapServer)(nil)).Elem()
}

func (o DLPWebRulesIcapServerPtrOutput) ToDLPWebRulesIcapServerPtrOutput() DLPWebRulesIcapServerPtrOutput {
	return o
}

func (o DLPWebRulesIcapServerPtrOutput) ToDLPWebRulesIcapServerPtrOutputWithContext(ctx context.Context) DLPWebRulesIcapServerPtrOutput {
	return o
}

func (o DLPWebRulesIcapServerPtrOutput) Elem() DLPWebRulesIcapServerOutput {
	return o.ApplyT(func(v *DLPWebRulesIcapServer) DLPWebRulesIcapServer {
		if v != nil {
			return *v
		}
		var ret DLPWebRulesIcapServer
		return ret
	}).(DLPWebRulesIcapServerOutput)
}

// Identifier that uniquely identifies an entity
func (o DLPWebRulesIcapServerPtrOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DLPWebRulesIcapServer) *int {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.IntPtrOutput)
}

type DLPWebRulesLabels struct {
	// Identifier that uniquely identifies an entity
	Ids []int `pulumi:"ids"`
}

// DLPWebRulesLabelsInput is an input type that accepts DLPWebRulesLabelsArgs and DLPWebRulesLabelsOutput values.
// You can construct a concrete instance of `DLPWebRulesLabelsInput` via:
//
//	DLPWebRulesLabelsArgs{...}
type DLPWebRulesLabelsInput interface {
	pulumi.Input

	ToDLPWebRulesLabelsOutput() DLPWebRulesLabelsOutput
	ToDLPWebRulesLabelsOutputWithContext(context.Context) DLPWebRulesLabelsOutput
}

type DLPWebRulesLabelsArgs struct {
	// Identifier that uniquely identifies an entity
	Ids pulumi.IntArrayInput `pulumi:"ids"`
}

func (DLPWebRulesLabelsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DLPWebRulesLabels)(nil)).Elem()
}

func (i DLPWebRulesLabelsArgs) ToDLPWebRulesLabelsOutput() DLPWebRulesLabelsOutput {
	return i.ToDLPWebRulesLabelsOutputWithContext(context.Background())
}

func (i DLPWebRulesLabelsArgs) ToDLPWebRulesLabelsOutputWithContext(ctx context.Context) DLPWebRulesLabelsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DLPWebRulesLabelsOutput)
}

func (i DLPWebRulesLabelsArgs) ToDLPWebRulesLabelsPtrOutput() DLPWebRulesLabelsPtrOutput {
	return i.ToDLPWebRulesLabelsPtrOutputWithContext(context.Background())
}

func (i DLPWebRulesLabelsArgs) ToDLPWebRulesLabelsPtrOutputWithContext(ctx context.Context) DLPWebRulesLabelsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DLPWebRulesLabelsOutput).ToDLPWebRulesLabelsPtrOutputWithContext(ctx)
}

// DLPWebRulesLabelsPtrInput is an input type that accepts DLPWebRulesLabelsArgs, DLPWebRulesLabelsPtr and DLPWebRulesLabelsPtrOutput values.
// You can construct a concrete instance of `DLPWebRulesLabelsPtrInput` via:
//
//	        DLPWebRulesLabelsArgs{...}
//
//	or:
//
//	        nil
type DLPWebRulesLabelsPtrInput interface {
	pulumi.Input

	ToDLPWebRulesLabelsPtrOutput() DLPWebRulesLabelsPtrOutput
	ToDLPWebRulesLabelsPtrOutputWithContext(context.Context) DLPWebRulesLabelsPtrOutput
}

type dlpwebRulesLabelsPtrType DLPWebRulesLabelsArgs

func DLPWebRulesLabelsPtr(v *DLPWebRulesLabelsArgs) DLPWebRulesLabelsPtrInput {
	return (*dlpwebRulesLabelsPtrType)(v)
}

func (*dlpwebRulesLabelsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DLPWebRulesLabels)(nil)).Elem()
}

func (i *dlpwebRulesLabelsPtrType) ToDLPWebRulesLabelsPtrOutput() DLPWebRulesLabelsPtrOutput {
	return i.ToDLPWebRulesLabelsPtrOutputWithContext(context.Background())
}

func (i *dlpwebRulesLabelsPtrType) ToDLPWebRulesLabelsPtrOutputWithContext(ctx context.Context) DLPWebRulesLabelsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DLPWebRulesLabelsPtrOutput)
}

type DLPWebRulesLabelsOutput struct{ *pulumi.OutputState }

func (DLPWebRulesLabelsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DLPWebRulesLabels)(nil)).Elem()
}

func (o DLPWebRulesLabelsOutput) ToDLPWebRulesLabelsOutput() DLPWebRulesLabelsOutput {
	return o
}

func (o DLPWebRulesLabelsOutput) ToDLPWebRulesLabelsOutputWithContext(ctx context.Context) DLPWebRulesLabelsOutput {
	return o
}

func (o DLPWebRulesLabelsOutput) ToDLPWebRulesLabelsPtrOutput() DLPWebRulesLabelsPtrOutput {
	return o.ToDLPWebRulesLabelsPtrOutputWithContext(context.Background())
}

func (o DLPWebRulesLabelsOutput) ToDLPWebRulesLabelsPtrOutputWithContext(ctx context.Context) DLPWebRulesLabelsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DLPWebRulesLabels) *DLPWebRulesLabels {
		return &v
	}).(DLPWebRulesLabelsPtrOutput)
}

// Identifier that uniquely identifies an entity
func (o DLPWebRulesLabelsOutput) Ids() pulumi.IntArrayOutput {
	return o.ApplyT(func(v DLPWebRulesLabels) []int { return v.Ids }).(pulumi.IntArrayOutput)
}

type DLPWebRulesLabelsPtrOutput struct{ *pulumi.OutputState }

func (DLPWebRulesLabelsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DLPWebRulesLabels)(nil)).Elem()
}

func (o DLPWebRulesLabelsPtrOutput) ToDLPWebRulesLabelsPtrOutput() DLPWebRulesLabelsPtrOutput {
	return o
}

func (o DLPWebRulesLabelsPtrOutput) ToDLPWebRulesLabelsPtrOutputWithContext(ctx context.Context) DLPWebRulesLabelsPtrOutput {
	return o
}

func (o DLPWebRulesLabelsPtrOutput) Elem() DLPWebRulesLabelsOutput {
	return o.ApplyT(func(v *DLPWebRulesLabels) DLPWebRulesLabels {
		if v != nil {
			return *v
		}
		var ret DLPWebRulesLabels
		return ret
	}).(DLPWebRulesLabelsOutput)
}

// Identifier that uniquely identifies an entity
func (o DLPWebRulesLabelsPtrOutput) Ids() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *DLPWebRulesLabels) []int {
		if v == nil {
			return nil
		}
		return v.Ids
	}).(pulumi.IntArrayOutput)
}

type DLPWebRulesLocationGroups struct {
	// Identifier that uniquely identifies an entity
	Ids []int `pulumi:"ids"`
}

// DLPWebRulesLocationGroupsInput is an input type that accepts DLPWebRulesLocationGroupsArgs and DLPWebRulesLocationGroupsOutput values.
// You can construct a concrete instance of `DLPWebRulesLocationGroupsInput` via:
//
//	DLPWebRulesLocationGroupsArgs{...}
type DLPWebRulesLocationGroupsInput interface {
	pulumi.Input

	ToDLPWebRulesLocationGroupsOutput() DLPWebRulesLocationGroupsOutput
	ToDLPWebRulesLocationGroupsOutputWithContext(context.Context) DLPWebRulesLocationGroupsOutput
}

type DLPWebRulesLocationGroupsArgs struct {
	// Identifier that uniquely identifies an entity
	Ids pulumi.IntArrayInput `pulumi:"ids"`
}

func (DLPWebRulesLocationGroupsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DLPWebRulesLocationGroups)(nil)).Elem()
}

func (i DLPWebRulesLocationGroupsArgs) ToDLPWebRulesLocationGroupsOutput() DLPWebRulesLocationGroupsOutput {
	return i.ToDLPWebRulesLocationGroupsOutputWithContext(context.Background())
}

func (i DLPWebRulesLocationGroupsArgs) ToDLPWebRulesLocationGroupsOutputWithContext(ctx context.Context) DLPWebRulesLocationGroupsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DLPWebRulesLocationGroupsOutput)
}

func (i DLPWebRulesLocationGroupsArgs) ToDLPWebRulesLocationGroupsPtrOutput() DLPWebRulesLocationGroupsPtrOutput {
	return i.ToDLPWebRulesLocationGroupsPtrOutputWithContext(context.Background())
}

func (i DLPWebRulesLocationGroupsArgs) ToDLPWebRulesLocationGroupsPtrOutputWithContext(ctx context.Context) DLPWebRulesLocationGroupsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DLPWebRulesLocationGroupsOutput).ToDLPWebRulesLocationGroupsPtrOutputWithContext(ctx)
}

// DLPWebRulesLocationGroupsPtrInput is an input type that accepts DLPWebRulesLocationGroupsArgs, DLPWebRulesLocationGroupsPtr and DLPWebRulesLocationGroupsPtrOutput values.
// You can construct a concrete instance of `DLPWebRulesLocationGroupsPtrInput` via:
//
//	        DLPWebRulesLocationGroupsArgs{...}
//
//	or:
//
//	        nil
type DLPWebRulesLocationGroupsPtrInput interface {
	pulumi.Input

	ToDLPWebRulesLocationGroupsPtrOutput() DLPWebRulesLocationGroupsPtrOutput
	ToDLPWebRulesLocationGroupsPtrOutputWithContext(context.Context) DLPWebRulesLocationGroupsPtrOutput
}

type dlpwebRulesLocationGroupsPtrType DLPWebRulesLocationGroupsArgs

func DLPWebRulesLocationGroupsPtr(v *DLPWebRulesLocationGroupsArgs) DLPWebRulesLocationGroupsPtrInput {
	return (*dlpwebRulesLocationGroupsPtrType)(v)
}

func (*dlpwebRulesLocationGroupsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DLPWebRulesLocationGroups)(nil)).Elem()
}

func (i *dlpwebRulesLocationGroupsPtrType) ToDLPWebRulesLocationGroupsPtrOutput() DLPWebRulesLocationGroupsPtrOutput {
	return i.ToDLPWebRulesLocationGroupsPtrOutputWithContext(context.Background())
}

func (i *dlpwebRulesLocationGroupsPtrType) ToDLPWebRulesLocationGroupsPtrOutputWithContext(ctx context.Context) DLPWebRulesLocationGroupsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DLPWebRulesLocationGroupsPtrOutput)
}

type DLPWebRulesLocationGroupsOutput struct{ *pulumi.OutputState }

func (DLPWebRulesLocationGroupsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DLPWebRulesLocationGroups)(nil)).Elem()
}

func (o DLPWebRulesLocationGroupsOutput) ToDLPWebRulesLocationGroupsOutput() DLPWebRulesLocationGroupsOutput {
	return o
}

func (o DLPWebRulesLocationGroupsOutput) ToDLPWebRulesLocationGroupsOutputWithContext(ctx context.Context) DLPWebRulesLocationGroupsOutput {
	return o
}

func (o DLPWebRulesLocationGroupsOutput) ToDLPWebRulesLocationGroupsPtrOutput() DLPWebRulesLocationGroupsPtrOutput {
	return o.ToDLPWebRulesLocationGroupsPtrOutputWithContext(context.Background())
}

func (o DLPWebRulesLocationGroupsOutput) ToDLPWebRulesLocationGroupsPtrOutputWithContext(ctx context.Context) DLPWebRulesLocationGroupsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DLPWebRulesLocationGroups) *DLPWebRulesLocationGroups {
		return &v
	}).(DLPWebRulesLocationGroupsPtrOutput)
}

// Identifier that uniquely identifies an entity
func (o DLPWebRulesLocationGroupsOutput) Ids() pulumi.IntArrayOutput {
	return o.ApplyT(func(v DLPWebRulesLocationGroups) []int { return v.Ids }).(pulumi.IntArrayOutput)
}

type DLPWebRulesLocationGroupsPtrOutput struct{ *pulumi.OutputState }

func (DLPWebRulesLocationGroupsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DLPWebRulesLocationGroups)(nil)).Elem()
}

func (o DLPWebRulesLocationGroupsPtrOutput) ToDLPWebRulesLocationGroupsPtrOutput() DLPWebRulesLocationGroupsPtrOutput {
	return o
}

func (o DLPWebRulesLocationGroupsPtrOutput) ToDLPWebRulesLocationGroupsPtrOutputWithContext(ctx context.Context) DLPWebRulesLocationGroupsPtrOutput {
	return o
}

func (o DLPWebRulesLocationGroupsPtrOutput) Elem() DLPWebRulesLocationGroupsOutput {
	return o.ApplyT(func(v *DLPWebRulesLocationGroups) DLPWebRulesLocationGroups {
		if v != nil {
			return *v
		}
		var ret DLPWebRulesLocationGroups
		return ret
	}).(DLPWebRulesLocationGroupsOutput)
}

// Identifier that uniquely identifies an entity
func (o DLPWebRulesLocationGroupsPtrOutput) Ids() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *DLPWebRulesLocationGroups) []int {
		if v == nil {
			return nil
		}
		return v.Ids
	}).(pulumi.IntArrayOutput)
}

type DLPWebRulesLocations struct {
	// Identifier that uniquely identifies an entity
	Ids []int `pulumi:"ids"`
}

// DLPWebRulesLocationsInput is an input type that accepts DLPWebRulesLocationsArgs and DLPWebRulesLocationsOutput values.
// You can construct a concrete instance of `DLPWebRulesLocationsInput` via:
//
//	DLPWebRulesLocationsArgs{...}
type DLPWebRulesLocationsInput interface {
	pulumi.Input

	ToDLPWebRulesLocationsOutput() DLPWebRulesLocationsOutput
	ToDLPWebRulesLocationsOutputWithContext(context.Context) DLPWebRulesLocationsOutput
}

type DLPWebRulesLocationsArgs struct {
	// Identifier that uniquely identifies an entity
	Ids pulumi.IntArrayInput `pulumi:"ids"`
}

func (DLPWebRulesLocationsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DLPWebRulesLocations)(nil)).Elem()
}

func (i DLPWebRulesLocationsArgs) ToDLPWebRulesLocationsOutput() DLPWebRulesLocationsOutput {
	return i.ToDLPWebRulesLocationsOutputWithContext(context.Background())
}

func (i DLPWebRulesLocationsArgs) ToDLPWebRulesLocationsOutputWithContext(ctx context.Context) DLPWebRulesLocationsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DLPWebRulesLocationsOutput)
}

func (i DLPWebRulesLocationsArgs) ToDLPWebRulesLocationsPtrOutput() DLPWebRulesLocationsPtrOutput {
	return i.ToDLPWebRulesLocationsPtrOutputWithContext(context.Background())
}

func (i DLPWebRulesLocationsArgs) ToDLPWebRulesLocationsPtrOutputWithContext(ctx context.Context) DLPWebRulesLocationsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DLPWebRulesLocationsOutput).ToDLPWebRulesLocationsPtrOutputWithContext(ctx)
}

// DLPWebRulesLocationsPtrInput is an input type that accepts DLPWebRulesLocationsArgs, DLPWebRulesLocationsPtr and DLPWebRulesLocationsPtrOutput values.
// You can construct a concrete instance of `DLPWebRulesLocationsPtrInput` via:
//
//	        DLPWebRulesLocationsArgs{...}
//
//	or:
//
//	        nil
type DLPWebRulesLocationsPtrInput interface {
	pulumi.Input

	ToDLPWebRulesLocationsPtrOutput() DLPWebRulesLocationsPtrOutput
	ToDLPWebRulesLocationsPtrOutputWithContext(context.Context) DLPWebRulesLocationsPtrOutput
}

type dlpwebRulesLocationsPtrType DLPWebRulesLocationsArgs

func DLPWebRulesLocationsPtr(v *DLPWebRulesLocationsArgs) DLPWebRulesLocationsPtrInput {
	return (*dlpwebRulesLocationsPtrType)(v)
}

func (*dlpwebRulesLocationsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DLPWebRulesLocations)(nil)).Elem()
}

func (i *dlpwebRulesLocationsPtrType) ToDLPWebRulesLocationsPtrOutput() DLPWebRulesLocationsPtrOutput {
	return i.ToDLPWebRulesLocationsPtrOutputWithContext(context.Background())
}

func (i *dlpwebRulesLocationsPtrType) ToDLPWebRulesLocationsPtrOutputWithContext(ctx context.Context) DLPWebRulesLocationsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DLPWebRulesLocationsPtrOutput)
}

type DLPWebRulesLocationsOutput struct{ *pulumi.OutputState }

func (DLPWebRulesLocationsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DLPWebRulesLocations)(nil)).Elem()
}

func (o DLPWebRulesLocationsOutput) ToDLPWebRulesLocationsOutput() DLPWebRulesLocationsOutput {
	return o
}

func (o DLPWebRulesLocationsOutput) ToDLPWebRulesLocationsOutputWithContext(ctx context.Context) DLPWebRulesLocationsOutput {
	return o
}

func (o DLPWebRulesLocationsOutput) ToDLPWebRulesLocationsPtrOutput() DLPWebRulesLocationsPtrOutput {
	return o.ToDLPWebRulesLocationsPtrOutputWithContext(context.Background())
}

func (o DLPWebRulesLocationsOutput) ToDLPWebRulesLocationsPtrOutputWithContext(ctx context.Context) DLPWebRulesLocationsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DLPWebRulesLocations) *DLPWebRulesLocations {
		return &v
	}).(DLPWebRulesLocationsPtrOutput)
}

// Identifier that uniquely identifies an entity
func (o DLPWebRulesLocationsOutput) Ids() pulumi.IntArrayOutput {
	return o.ApplyT(func(v DLPWebRulesLocations) []int { return v.Ids }).(pulumi.IntArrayOutput)
}

type DLPWebRulesLocationsPtrOutput struct{ *pulumi.OutputState }

func (DLPWebRulesLocationsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DLPWebRulesLocations)(nil)).Elem()
}

func (o DLPWebRulesLocationsPtrOutput) ToDLPWebRulesLocationsPtrOutput() DLPWebRulesLocationsPtrOutput {
	return o
}

func (o DLPWebRulesLocationsPtrOutput) ToDLPWebRulesLocationsPtrOutputWithContext(ctx context.Context) DLPWebRulesLocationsPtrOutput {
	return o
}

func (o DLPWebRulesLocationsPtrOutput) Elem() DLPWebRulesLocationsOutput {
	return o.ApplyT(func(v *DLPWebRulesLocations) DLPWebRulesLocations {
		if v != nil {
			return *v
		}
		var ret DLPWebRulesLocations
		return ret
	}).(DLPWebRulesLocationsOutput)
}

// Identifier that uniquely identifies an entity
func (o DLPWebRulesLocationsPtrOutput) Ids() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *DLPWebRulesLocations) []int {
		if v == nil {
			return nil
		}
		return v.Ids
	}).(pulumi.IntArrayOutput)
}

type DLPWebRulesNotificationTemplate struct {
	// Identifier that uniquely identifies an entity
	Id int `pulumi:"id"`
}

// DLPWebRulesNotificationTemplateInput is an input type that accepts DLPWebRulesNotificationTemplateArgs and DLPWebRulesNotificationTemplateOutput values.
// You can construct a concrete instance of `DLPWebRulesNotificationTemplateInput` via:
//
//	DLPWebRulesNotificationTemplateArgs{...}
type DLPWebRulesNotificationTemplateInput interface {
	pulumi.Input

	ToDLPWebRulesNotificationTemplateOutput() DLPWebRulesNotificationTemplateOutput
	ToDLPWebRulesNotificationTemplateOutputWithContext(context.Context) DLPWebRulesNotificationTemplateOutput
}

type DLPWebRulesNotificationTemplateArgs struct {
	// Identifier that uniquely identifies an entity
	Id pulumi.IntInput `pulumi:"id"`
}

func (DLPWebRulesNotificationTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DLPWebRulesNotificationTemplate)(nil)).Elem()
}

func (i DLPWebRulesNotificationTemplateArgs) ToDLPWebRulesNotificationTemplateOutput() DLPWebRulesNotificationTemplateOutput {
	return i.ToDLPWebRulesNotificationTemplateOutputWithContext(context.Background())
}

func (i DLPWebRulesNotificationTemplateArgs) ToDLPWebRulesNotificationTemplateOutputWithContext(ctx context.Context) DLPWebRulesNotificationTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DLPWebRulesNotificationTemplateOutput)
}

func (i DLPWebRulesNotificationTemplateArgs) ToDLPWebRulesNotificationTemplatePtrOutput() DLPWebRulesNotificationTemplatePtrOutput {
	return i.ToDLPWebRulesNotificationTemplatePtrOutputWithContext(context.Background())
}

func (i DLPWebRulesNotificationTemplateArgs) ToDLPWebRulesNotificationTemplatePtrOutputWithContext(ctx context.Context) DLPWebRulesNotificationTemplatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DLPWebRulesNotificationTemplateOutput).ToDLPWebRulesNotificationTemplatePtrOutputWithContext(ctx)
}

// DLPWebRulesNotificationTemplatePtrInput is an input type that accepts DLPWebRulesNotificationTemplateArgs, DLPWebRulesNotificationTemplatePtr and DLPWebRulesNotificationTemplatePtrOutput values.
// You can construct a concrete instance of `DLPWebRulesNotificationTemplatePtrInput` via:
//
//	        DLPWebRulesNotificationTemplateArgs{...}
//
//	or:
//
//	        nil
type DLPWebRulesNotificationTemplatePtrInput interface {
	pulumi.Input

	ToDLPWebRulesNotificationTemplatePtrOutput() DLPWebRulesNotificationTemplatePtrOutput
	ToDLPWebRulesNotificationTemplatePtrOutputWithContext(context.Context) DLPWebRulesNotificationTemplatePtrOutput
}

type dlpwebRulesNotificationTemplatePtrType DLPWebRulesNotificationTemplateArgs

func DLPWebRulesNotificationTemplatePtr(v *DLPWebRulesNotificationTemplateArgs) DLPWebRulesNotificationTemplatePtrInput {
	return (*dlpwebRulesNotificationTemplatePtrType)(v)
}

func (*dlpwebRulesNotificationTemplatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DLPWebRulesNotificationTemplate)(nil)).Elem()
}

func (i *dlpwebRulesNotificationTemplatePtrType) ToDLPWebRulesNotificationTemplatePtrOutput() DLPWebRulesNotificationTemplatePtrOutput {
	return i.ToDLPWebRulesNotificationTemplatePtrOutputWithContext(context.Background())
}

func (i *dlpwebRulesNotificationTemplatePtrType) ToDLPWebRulesNotificationTemplatePtrOutputWithContext(ctx context.Context) DLPWebRulesNotificationTemplatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DLPWebRulesNotificationTemplatePtrOutput)
}

type DLPWebRulesNotificationTemplateOutput struct{ *pulumi.OutputState }

func (DLPWebRulesNotificationTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DLPWebRulesNotificationTemplate)(nil)).Elem()
}

func (o DLPWebRulesNotificationTemplateOutput) ToDLPWebRulesNotificationTemplateOutput() DLPWebRulesNotificationTemplateOutput {
	return o
}

func (o DLPWebRulesNotificationTemplateOutput) ToDLPWebRulesNotificationTemplateOutputWithContext(ctx context.Context) DLPWebRulesNotificationTemplateOutput {
	return o
}

func (o DLPWebRulesNotificationTemplateOutput) ToDLPWebRulesNotificationTemplatePtrOutput() DLPWebRulesNotificationTemplatePtrOutput {
	return o.ToDLPWebRulesNotificationTemplatePtrOutputWithContext(context.Background())
}

func (o DLPWebRulesNotificationTemplateOutput) ToDLPWebRulesNotificationTemplatePtrOutputWithContext(ctx context.Context) DLPWebRulesNotificationTemplatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DLPWebRulesNotificationTemplate) *DLPWebRulesNotificationTemplate {
		return &v
	}).(DLPWebRulesNotificationTemplatePtrOutput)
}

// Identifier that uniquely identifies an entity
func (o DLPWebRulesNotificationTemplateOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v DLPWebRulesNotificationTemplate) int { return v.Id }).(pulumi.IntOutput)
}

type DLPWebRulesNotificationTemplatePtrOutput struct{ *pulumi.OutputState }

func (DLPWebRulesNotificationTemplatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DLPWebRulesNotificationTemplate)(nil)).Elem()
}

func (o DLPWebRulesNotificationTemplatePtrOutput) ToDLPWebRulesNotificationTemplatePtrOutput() DLPWebRulesNotificationTemplatePtrOutput {
	return o
}

func (o DLPWebRulesNotificationTemplatePtrOutput) ToDLPWebRulesNotificationTemplatePtrOutputWithContext(ctx context.Context) DLPWebRulesNotificationTemplatePtrOutput {
	return o
}

func (o DLPWebRulesNotificationTemplatePtrOutput) Elem() DLPWebRulesNotificationTemplateOutput {
	return o.ApplyT(func(v *DLPWebRulesNotificationTemplate) DLPWebRulesNotificationTemplate {
		if v != nil {
			return *v
		}
		var ret DLPWebRulesNotificationTemplate
		return ret
	}).(DLPWebRulesNotificationTemplateOutput)
}

// Identifier that uniquely identifies an entity
func (o DLPWebRulesNotificationTemplatePtrOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DLPWebRulesNotificationTemplate) *int {
		if v == nil {
			return nil
		}
		return &v.Id
	}).(pulumi.IntPtrOutput)
}

type DLPWebRulesTimeWindows struct {
	// Identifier that uniquely identifies an entity
	Ids []int `pulumi:"ids"`
}

// DLPWebRulesTimeWindowsInput is an input type that accepts DLPWebRulesTimeWindowsArgs and DLPWebRulesTimeWindowsOutput values.
// You can construct a concrete instance of `DLPWebRulesTimeWindowsInput` via:
//
//	DLPWebRulesTimeWindowsArgs{...}
type DLPWebRulesTimeWindowsInput interface {
	pulumi.Input

	ToDLPWebRulesTimeWindowsOutput() DLPWebRulesTimeWindowsOutput
	ToDLPWebRulesTimeWindowsOutputWithContext(context.Context) DLPWebRulesTimeWindowsOutput
}

type DLPWebRulesTimeWindowsArgs struct {
	// Identifier that uniquely identifies an entity
	Ids pulumi.IntArrayInput `pulumi:"ids"`
}

func (DLPWebRulesTimeWindowsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DLPWebRulesTimeWindows)(nil)).Elem()
}

func (i DLPWebRulesTimeWindowsArgs) ToDLPWebRulesTimeWindowsOutput() DLPWebRulesTimeWindowsOutput {
	return i.ToDLPWebRulesTimeWindowsOutputWithContext(context.Background())
}

func (i DLPWebRulesTimeWindowsArgs) ToDLPWebRulesTimeWindowsOutputWithContext(ctx context.Context) DLPWebRulesTimeWindowsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DLPWebRulesTimeWindowsOutput)
}

func (i DLPWebRulesTimeWindowsArgs) ToDLPWebRulesTimeWindowsPtrOutput() DLPWebRulesTimeWindowsPtrOutput {
	return i.ToDLPWebRulesTimeWindowsPtrOutputWithContext(context.Background())
}

func (i DLPWebRulesTimeWindowsArgs) ToDLPWebRulesTimeWindowsPtrOutputWithContext(ctx context.Context) DLPWebRulesTimeWindowsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DLPWebRulesTimeWindowsOutput).ToDLPWebRulesTimeWindowsPtrOutputWithContext(ctx)
}

// DLPWebRulesTimeWindowsPtrInput is an input type that accepts DLPWebRulesTimeWindowsArgs, DLPWebRulesTimeWindowsPtr and DLPWebRulesTimeWindowsPtrOutput values.
// You can construct a concrete instance of `DLPWebRulesTimeWindowsPtrInput` via:
//
//	        DLPWebRulesTimeWindowsArgs{...}
//
//	or:
//
//	        nil
type DLPWebRulesTimeWindowsPtrInput interface {
	pulumi.Input

	ToDLPWebRulesTimeWindowsPtrOutput() DLPWebRulesTimeWindowsPtrOutput
	ToDLPWebRulesTimeWindowsPtrOutputWithContext(context.Context) DLPWebRulesTimeWindowsPtrOutput
}

type dlpwebRulesTimeWindowsPtrType DLPWebRulesTimeWindowsArgs

func DLPWebRulesTimeWindowsPtr(v *DLPWebRulesTimeWindowsArgs) DLPWebRulesTimeWindowsPtrInput {
	return (*dlpwebRulesTimeWindowsPtrType)(v)
}

func (*dlpwebRulesTimeWindowsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DLPWebRulesTimeWindows)(nil)).Elem()
}

func (i *dlpwebRulesTimeWindowsPtrType) ToDLPWebRulesTimeWindowsPtrOutput() DLPWebRulesTimeWindowsPtrOutput {
	return i.ToDLPWebRulesTimeWindowsPtrOutputWithContext(context.Background())
}

func (i *dlpwebRulesTimeWindowsPtrType) ToDLPWebRulesTimeWindowsPtrOutputWithContext(ctx context.Context) DLPWebRulesTimeWindowsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DLPWebRulesTimeWindowsPtrOutput)
}

type DLPWebRulesTimeWindowsOutput struct{ *pulumi.OutputState }

func (DLPWebRulesTimeWindowsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DLPWebRulesTimeWindows)(nil)).Elem()
}

func (o DLPWebRulesTimeWindowsOutput) ToDLPWebRulesTimeWindowsOutput() DLPWebRulesTimeWindowsOutput {
	return o
}

func (o DLPWebRulesTimeWindowsOutput) ToDLPWebRulesTimeWindowsOutputWithContext(ctx context.Context) DLPWebRulesTimeWindowsOutput {
	return o
}

func (o DLPWebRulesTimeWindowsOutput) ToDLPWebRulesTimeWindowsPtrOutput() DLPWebRulesTimeWindowsPtrOutput {
	return o.ToDLPWebRulesTimeWindowsPtrOutputWithContext(context.Background())
}

func (o DLPWebRulesTimeWindowsOutput) ToDLPWebRulesTimeWindowsPtrOutputWithContext(ctx context.Context) DLPWebRulesTimeWindowsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DLPWebRulesTimeWindows) *DLPWebRulesTimeWindows {
		return &v
	}).(DLPWebRulesTimeWindowsPtrOutput)
}

// Identifier that uniquely identifies an entity
func (o DLPWebRulesTimeWindowsOutput) Ids() pulumi.IntArrayOutput {
	return o.ApplyT(func(v DLPWebRulesTimeWindows) []int { return v.Ids }).(pulumi.IntArrayOutput)
}

type DLPWebRulesTimeWindowsPtrOutput struct{ *pulumi.OutputState }

func (DLPWebRulesTimeWindowsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DLPWebRulesTimeWindows)(nil)).Elem()
}

func (o DLPWebRulesTimeWindowsPtrOutput) ToDLPWebRulesTimeWindowsPtrOutput() DLPWebRulesTimeWindowsPtrOutput {
	return o
}

func (o DLPWebRulesTimeWindowsPtrOutput) ToDLPWebRulesTimeWindowsPtrOutputWithContext(ctx context.Context) DLPWebRulesTimeWindowsPtrOutput {
	return o
}

func (o DLPWebRulesTimeWindowsPtrOutput) Elem() DLPWebRulesTimeWindowsOutput {
	return o.ApplyT(func(v *DLPWebRulesTimeWindows) DLPWebRulesTimeWindows {
		if v != nil {
			return *v
		}
		var ret DLPWebRulesTimeWindows
		return ret
	}).(DLPWebRulesTimeWindowsOutput)
}

// Identifier that uniquely identifies an entity
func (o DLPWebRulesTimeWindowsPtrOutput) Ids() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *DLPWebRulesTimeWindows) []int {
		if v == nil {
			return nil
		}
		return v.Ids
	}).(pulumi.IntArrayOutput)
}

type DLPWebRulesUrlCategories struct {
	// Identifier that uniquely identifies an entity
	Ids []int `pulumi:"ids"`
}

// DLPWebRulesUrlCategoriesInput is an input type that accepts DLPWebRulesUrlCategoriesArgs and DLPWebRulesUrlCategoriesOutput values.
// You can construct a concrete instance of `DLPWebRulesUrlCategoriesInput` via:
//
//	DLPWebRulesUrlCategoriesArgs{...}
type DLPWebRulesUrlCategoriesInput interface {
	pulumi.Input

	ToDLPWebRulesUrlCategoriesOutput() DLPWebRulesUrlCategoriesOutput
	ToDLPWebRulesUrlCategoriesOutputWithContext(context.Context) DLPWebRulesUrlCategoriesOutput
}

type DLPWebRulesUrlCategoriesArgs struct {
	// Identifier that uniquely identifies an entity
	Ids pulumi.IntArrayInput `pulumi:"ids"`
}

func (DLPWebRulesUrlCategoriesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DLPWebRulesUrlCategories)(nil)).Elem()
}

func (i DLPWebRulesUrlCategoriesArgs) ToDLPWebRulesUrlCategoriesOutput() DLPWebRulesUrlCategoriesOutput {
	return i.ToDLPWebRulesUrlCategoriesOutputWithContext(context.Background())
}

func (i DLPWebRulesUrlCategoriesArgs) ToDLPWebRulesUrlCategoriesOutputWithContext(ctx context.Context) DLPWebRulesUrlCategoriesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DLPWebRulesUrlCategoriesOutput)
}

func (i DLPWebRulesUrlCategoriesArgs) ToDLPWebRulesUrlCategoriesPtrOutput() DLPWebRulesUrlCategoriesPtrOutput {
	return i.ToDLPWebRulesUrlCategoriesPtrOutputWithContext(context.Background())
}

func (i DLPWebRulesUrlCategoriesArgs) ToDLPWebRulesUrlCategoriesPtrOutputWithContext(ctx context.Context) DLPWebRulesUrlCategoriesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DLPWebRulesUrlCategoriesOutput).ToDLPWebRulesUrlCategoriesPtrOutputWithContext(ctx)
}

// DLPWebRulesUrlCategoriesPtrInput is an input type that accepts DLPWebRulesUrlCategoriesArgs, DLPWebRulesUrlCategoriesPtr and DLPWebRulesUrlCategoriesPtrOutput values.
// You can construct a concrete instance of `DLPWebRulesUrlCategoriesPtrInput` via:
//
//	        DLPWebRulesUrlCategoriesArgs{...}
//
//	or:
//
//	        nil
type DLPWebRulesUrlCategoriesPtrInput interface {
	pulumi.Input

	ToDLPWebRulesUrlCategoriesPtrOutput() DLPWebRulesUrlCategoriesPtrOutput
	ToDLPWebRulesUrlCategoriesPtrOutputWithContext(context.Context) DLPWebRulesUrlCategoriesPtrOutput
}

type dlpwebRulesUrlCategoriesPtrType DLPWebRulesUrlCategoriesArgs

func DLPWebRulesUrlCategoriesPtr(v *DLPWebRulesUrlCategoriesArgs) DLPWebRulesUrlCategoriesPtrInput {
	return (*dlpwebRulesUrlCategoriesPtrType)(v)
}

func (*dlpwebRulesUrlCategoriesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DLPWebRulesUrlCategories)(nil)).Elem()
}

func (i *dlpwebRulesUrlCategoriesPtrType) ToDLPWebRulesUrlCategoriesPtrOutput() DLPWebRulesUrlCategoriesPtrOutput {
	return i.ToDLPWebRulesUrlCategoriesPtrOutputWithContext(context.Background())
}

func (i *dlpwebRulesUrlCategoriesPtrType) ToDLPWebRulesUrlCategoriesPtrOutputWithContext(ctx context.Context) DLPWebRulesUrlCategoriesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DLPWebRulesUrlCategoriesPtrOutput)
}

type DLPWebRulesUrlCategoriesOutput struct{ *pulumi.OutputState }

func (DLPWebRulesUrlCategoriesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DLPWebRulesUrlCategories)(nil)).Elem()
}

func (o DLPWebRulesUrlCategoriesOutput) ToDLPWebRulesUrlCategoriesOutput() DLPWebRulesUrlCategoriesOutput {
	return o
}

func (o DLPWebRulesUrlCategoriesOutput) ToDLPWebRulesUrlCategoriesOutputWithContext(ctx context.Context) DLPWebRulesUrlCategoriesOutput {
	return o
}

func (o DLPWebRulesUrlCategoriesOutput) ToDLPWebRulesUrlCategoriesPtrOutput() DLPWebRulesUrlCategoriesPtrOutput {
	return o.ToDLPWebRulesUrlCategoriesPtrOutputWithContext(context.Background())
}

func (o DLPWebRulesUrlCategoriesOutput) ToDLPWebRulesUrlCategoriesPtrOutputWithContext(ctx context.Context) DLPWebRulesUrlCategoriesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DLPWebRulesUrlCategories) *DLPWebRulesUrlCategories {
		return &v
	}).(DLPWebRulesUrlCategoriesPtrOutput)
}

// Identifier that uniquely identifies an entity
func (o DLPWebRulesUrlCategoriesOutput) Ids() pulumi.IntArrayOutput {
	return o.ApplyT(func(v DLPWebRulesUrlCategories) []int { return v.Ids }).(pulumi.IntArrayOutput)
}

type DLPWebRulesUrlCategoriesPtrOutput struct{ *pulumi.OutputState }

func (DLPWebRulesUrlCategoriesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DLPWebRulesUrlCategories)(nil)).Elem()
}

func (o DLPWebRulesUrlCategoriesPtrOutput) ToDLPWebRulesUrlCategoriesPtrOutput() DLPWebRulesUrlCategoriesPtrOutput {
	return o
}

func (o DLPWebRulesUrlCategoriesPtrOutput) ToDLPWebRulesUrlCategoriesPtrOutputWithContext(ctx context.Context) DLPWebRulesUrlCategoriesPtrOutput {
	return o
}

func (o DLPWebRulesUrlCategoriesPtrOutput) Elem() DLPWebRulesUrlCategoriesOutput {
	return o.ApplyT(func(v *DLPWebRulesUrlCategories) DLPWebRulesUrlCategories {
		if v != nil {
			return *v
		}
		var ret DLPWebRulesUrlCategories
		return ret
	}).(DLPWebRulesUrlCategoriesOutput)
}

// Identifier that uniquely identifies an entity
func (o DLPWebRulesUrlCategoriesPtrOutput) Ids() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *DLPWebRulesUrlCategories) []int {
		if v == nil {
			return nil
		}
		return v.Ids
	}).(pulumi.IntArrayOutput)
}

type DLPWebRulesUsers struct {
	// Identifier that uniquely identifies an entity
	Ids []int `pulumi:"ids"`
}

// DLPWebRulesUsersInput is an input type that accepts DLPWebRulesUsersArgs and DLPWebRulesUsersOutput values.
// You can construct a concrete instance of `DLPWebRulesUsersInput` via:
//
//	DLPWebRulesUsersArgs{...}
type DLPWebRulesUsersInput interface {
	pulumi.Input

	ToDLPWebRulesUsersOutput() DLPWebRulesUsersOutput
	ToDLPWebRulesUsersOutputWithContext(context.Context) DLPWebRulesUsersOutput
}

type DLPWebRulesUsersArgs struct {
	// Identifier that uniquely identifies an entity
	Ids pulumi.IntArrayInput `pulumi:"ids"`
}

func (DLPWebRulesUsersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*DLPWebRulesUsers)(nil)).Elem()
}

func (i DLPWebRulesUsersArgs) ToDLPWebRulesUsersOutput() DLPWebRulesUsersOutput {
	return i.ToDLPWebRulesUsersOutputWithContext(context.Background())
}

func (i DLPWebRulesUsersArgs) ToDLPWebRulesUsersOutputWithContext(ctx context.Context) DLPWebRulesUsersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DLPWebRulesUsersOutput)
}

func (i DLPWebRulesUsersArgs) ToDLPWebRulesUsersPtrOutput() DLPWebRulesUsersPtrOutput {
	return i.ToDLPWebRulesUsersPtrOutputWithContext(context.Background())
}

func (i DLPWebRulesUsersArgs) ToDLPWebRulesUsersPtrOutputWithContext(ctx context.Context) DLPWebRulesUsersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DLPWebRulesUsersOutput).ToDLPWebRulesUsersPtrOutputWithContext(ctx)
}

// DLPWebRulesUsersPtrInput is an input type that accepts DLPWebRulesUsersArgs, DLPWebRulesUsersPtr and DLPWebRulesUsersPtrOutput values.
// You can construct a concrete instance of `DLPWebRulesUsersPtrInput` via:
//
//	        DLPWebRulesUsersArgs{...}
//
//	or:
//
//	        nil
type DLPWebRulesUsersPtrInput interface {
	pulumi.Input

	ToDLPWebRulesUsersPtrOutput() DLPWebRulesUsersPtrOutput
	ToDLPWebRulesUsersPtrOutputWithContext(context.Context) DLPWebRulesUsersPtrOutput
}

type dlpwebRulesUsersPtrType DLPWebRulesUsersArgs

func DLPWebRulesUsersPtr(v *DLPWebRulesUsersArgs) DLPWebRulesUsersPtrInput {
	return (*dlpwebRulesUsersPtrType)(v)
}

func (*dlpwebRulesUsersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DLPWebRulesUsers)(nil)).Elem()
}

func (i *dlpwebRulesUsersPtrType) ToDLPWebRulesUsersPtrOutput() DLPWebRulesUsersPtrOutput {
	return i.ToDLPWebRulesUsersPtrOutputWithContext(context.Background())
}

func (i *dlpwebRulesUsersPtrType) ToDLPWebRulesUsersPtrOutputWithContext(ctx context.Context) DLPWebRulesUsersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DLPWebRulesUsersPtrOutput)
}

type DLPWebRulesUsersOutput struct{ *pulumi.OutputState }

func (DLPWebRulesUsersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DLPWebRulesUsers)(nil)).Elem()
}

func (o DLPWebRulesUsersOutput) ToDLPWebRulesUsersOutput() DLPWebRulesUsersOutput {
	return o
}

func (o DLPWebRulesUsersOutput) ToDLPWebRulesUsersOutputWithContext(ctx context.Context) DLPWebRulesUsersOutput {
	return o
}

func (o DLPWebRulesUsersOutput) ToDLPWebRulesUsersPtrOutput() DLPWebRulesUsersPtrOutput {
	return o.ToDLPWebRulesUsersPtrOutputWithContext(context.Background())
}

func (o DLPWebRulesUsersOutput) ToDLPWebRulesUsersPtrOutputWithContext(ctx context.Context) DLPWebRulesUsersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v DLPWebRulesUsers) *DLPWebRulesUsers {
		return &v
	}).(DLPWebRulesUsersPtrOutput)
}

// Identifier that uniquely identifies an entity
func (o DLPWebRulesUsersOutput) Ids() pulumi.IntArrayOutput {
	return o.ApplyT(func(v DLPWebRulesUsers) []int { return v.Ids }).(pulumi.IntArrayOutput)
}

type DLPWebRulesUsersPtrOutput struct{ *pulumi.OutputState }

func (DLPWebRulesUsersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DLPWebRulesUsers)(nil)).Elem()
}

func (o DLPWebRulesUsersPtrOutput) ToDLPWebRulesUsersPtrOutput() DLPWebRulesUsersPtrOutput {
	return o
}

func (o DLPWebRulesUsersPtrOutput) ToDLPWebRulesUsersPtrOutputWithContext(ctx context.Context) DLPWebRulesUsersPtrOutput {
	return o
}

func (o DLPWebRulesUsersPtrOutput) Elem() DLPWebRulesUsersOutput {
	return o.ApplyT(func(v *DLPWebRulesUsers) DLPWebRulesUsers {
		if v != nil {
			return *v
		}
		var ret DLPWebRulesUsers
		return ret
	}).(DLPWebRulesUsersOutput)
}

// Identifier that uniquely identifies an entity
func (o DLPWebRulesUsersPtrOutput) Ids() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *DLPWebRulesUsers) []int {
		if v == nil {
			return nil
		}
		return v.Ids
	}).(pulumi.IntArrayOutput)
}

type GetDLPDictionariesExactDataMatchDetail struct {
	DictionaryEdmMappingId int    `pulumi:"dictionaryEdmMappingId"`
	PrimaryField           int    `pulumi:"primaryField"`
	SchemaId               int    `pulumi:"schemaId"`
	SecondaryFieldMatchOn  string `pulumi:"secondaryFieldMatchOn"`
	SecondaryFields        []int  `pulumi:"secondaryFields"`
}

// GetDLPDictionariesExactDataMatchDetailInput is an input type that accepts GetDLPDictionariesExactDataMatchDetailArgs and GetDLPDictionariesExactDataMatchDetailOutput values.
// You can construct a concrete instance of `GetDLPDictionariesExactDataMatchDetailInput` via:
//
//	GetDLPDictionariesExactDataMatchDetailArgs{...}
type GetDLPDictionariesExactDataMatchDetailInput interface {
	pulumi.Input

	ToGetDLPDictionariesExactDataMatchDetailOutput() GetDLPDictionariesExactDataMatchDetailOutput
	ToGetDLPDictionariesExactDataMatchDetailOutputWithContext(context.Context) GetDLPDictionariesExactDataMatchDetailOutput
}

type GetDLPDictionariesExactDataMatchDetailArgs struct {
	DictionaryEdmMappingId pulumi.IntInput      `pulumi:"dictionaryEdmMappingId"`
	PrimaryField           pulumi.IntInput      `pulumi:"primaryField"`
	SchemaId               pulumi.IntInput      `pulumi:"schemaId"`
	SecondaryFieldMatchOn  pulumi.StringInput   `pulumi:"secondaryFieldMatchOn"`
	SecondaryFields        pulumi.IntArrayInput `pulumi:"secondaryFields"`
}

func (GetDLPDictionariesExactDataMatchDetailArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDLPDictionariesExactDataMatchDetail)(nil)).Elem()
}

func (i GetDLPDictionariesExactDataMatchDetailArgs) ToGetDLPDictionariesExactDataMatchDetailOutput() GetDLPDictionariesExactDataMatchDetailOutput {
	return i.ToGetDLPDictionariesExactDataMatchDetailOutputWithContext(context.Background())
}

func (i GetDLPDictionariesExactDataMatchDetailArgs) ToGetDLPDictionariesExactDataMatchDetailOutputWithContext(ctx context.Context) GetDLPDictionariesExactDataMatchDetailOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDLPDictionariesExactDataMatchDetailOutput)
}

// GetDLPDictionariesExactDataMatchDetailArrayInput is an input type that accepts GetDLPDictionariesExactDataMatchDetailArray and GetDLPDictionariesExactDataMatchDetailArrayOutput values.
// You can construct a concrete instance of `GetDLPDictionariesExactDataMatchDetailArrayInput` via:
//
//	GetDLPDictionariesExactDataMatchDetailArray{ GetDLPDictionariesExactDataMatchDetailArgs{...} }
type GetDLPDictionariesExactDataMatchDetailArrayInput interface {
	pulumi.Input

	ToGetDLPDictionariesExactDataMatchDetailArrayOutput() GetDLPDictionariesExactDataMatchDetailArrayOutput
	ToGetDLPDictionariesExactDataMatchDetailArrayOutputWithContext(context.Context) GetDLPDictionariesExactDataMatchDetailArrayOutput
}

type GetDLPDictionariesExactDataMatchDetailArray []GetDLPDictionariesExactDataMatchDetailInput

func (GetDLPDictionariesExactDataMatchDetailArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDLPDictionariesExactDataMatchDetail)(nil)).Elem()
}

func (i GetDLPDictionariesExactDataMatchDetailArray) ToGetDLPDictionariesExactDataMatchDetailArrayOutput() GetDLPDictionariesExactDataMatchDetailArrayOutput {
	return i.ToGetDLPDictionariesExactDataMatchDetailArrayOutputWithContext(context.Background())
}

func (i GetDLPDictionariesExactDataMatchDetailArray) ToGetDLPDictionariesExactDataMatchDetailArrayOutputWithContext(ctx context.Context) GetDLPDictionariesExactDataMatchDetailArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDLPDictionariesExactDataMatchDetailArrayOutput)
}

type GetDLPDictionariesExactDataMatchDetailOutput struct{ *pulumi.OutputState }

func (GetDLPDictionariesExactDataMatchDetailOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDLPDictionariesExactDataMatchDetail)(nil)).Elem()
}

func (o GetDLPDictionariesExactDataMatchDetailOutput) ToGetDLPDictionariesExactDataMatchDetailOutput() GetDLPDictionariesExactDataMatchDetailOutput {
	return o
}

func (o GetDLPDictionariesExactDataMatchDetailOutput) ToGetDLPDictionariesExactDataMatchDetailOutputWithContext(ctx context.Context) GetDLPDictionariesExactDataMatchDetailOutput {
	return o
}

func (o GetDLPDictionariesExactDataMatchDetailOutput) DictionaryEdmMappingId() pulumi.IntOutput {
	return o.ApplyT(func(v GetDLPDictionariesExactDataMatchDetail) int { return v.DictionaryEdmMappingId }).(pulumi.IntOutput)
}

func (o GetDLPDictionariesExactDataMatchDetailOutput) PrimaryField() pulumi.IntOutput {
	return o.ApplyT(func(v GetDLPDictionariesExactDataMatchDetail) int { return v.PrimaryField }).(pulumi.IntOutput)
}

func (o GetDLPDictionariesExactDataMatchDetailOutput) SchemaId() pulumi.IntOutput {
	return o.ApplyT(func(v GetDLPDictionariesExactDataMatchDetail) int { return v.SchemaId }).(pulumi.IntOutput)
}

func (o GetDLPDictionariesExactDataMatchDetailOutput) SecondaryFieldMatchOn() pulumi.StringOutput {
	return o.ApplyT(func(v GetDLPDictionariesExactDataMatchDetail) string { return v.SecondaryFieldMatchOn }).(pulumi.StringOutput)
}

func (o GetDLPDictionariesExactDataMatchDetailOutput) SecondaryFields() pulumi.IntArrayOutput {
	return o.ApplyT(func(v GetDLPDictionariesExactDataMatchDetail) []int { return v.SecondaryFields }).(pulumi.IntArrayOutput)
}

type GetDLPDictionariesExactDataMatchDetailArrayOutput struct{ *pulumi.OutputState }

func (GetDLPDictionariesExactDataMatchDetailArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDLPDictionariesExactDataMatchDetail)(nil)).Elem()
}

func (o GetDLPDictionariesExactDataMatchDetailArrayOutput) ToGetDLPDictionariesExactDataMatchDetailArrayOutput() GetDLPDictionariesExactDataMatchDetailArrayOutput {
	return o
}

func (o GetDLPDictionariesExactDataMatchDetailArrayOutput) ToGetDLPDictionariesExactDataMatchDetailArrayOutputWithContext(ctx context.Context) GetDLPDictionariesExactDataMatchDetailArrayOutput {
	return o
}

func (o GetDLPDictionariesExactDataMatchDetailArrayOutput) Index(i pulumi.IntInput) GetDLPDictionariesExactDataMatchDetailOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDLPDictionariesExactDataMatchDetail {
		return vs[0].([]GetDLPDictionariesExactDataMatchDetail)[vs[1].(int)]
	}).(GetDLPDictionariesExactDataMatchDetailOutput)
}

type GetDLPDictionariesIdmProfileMatchAccuracy struct {
	AdpIdmProfiles []GetDLPDictionariesIdmProfileMatchAccuracyAdpIdmProfile `pulumi:"adpIdmProfiles"`
	MatchAccuracy  string                                                   `pulumi:"matchAccuracy"`
}

// GetDLPDictionariesIdmProfileMatchAccuracyInput is an input type that accepts GetDLPDictionariesIdmProfileMatchAccuracyArgs and GetDLPDictionariesIdmProfileMatchAccuracyOutput values.
// You can construct a concrete instance of `GetDLPDictionariesIdmProfileMatchAccuracyInput` via:
//
//	GetDLPDictionariesIdmProfileMatchAccuracyArgs{...}
type GetDLPDictionariesIdmProfileMatchAccuracyInput interface {
	pulumi.Input

	ToGetDLPDictionariesIdmProfileMatchAccuracyOutput() GetDLPDictionariesIdmProfileMatchAccuracyOutput
	ToGetDLPDictionariesIdmProfileMatchAccuracyOutputWithContext(context.Context) GetDLPDictionariesIdmProfileMatchAccuracyOutput
}

type GetDLPDictionariesIdmProfileMatchAccuracyArgs struct {
	AdpIdmProfiles GetDLPDictionariesIdmProfileMatchAccuracyAdpIdmProfileArrayInput `pulumi:"adpIdmProfiles"`
	MatchAccuracy  pulumi.StringInput                                               `pulumi:"matchAccuracy"`
}

func (GetDLPDictionariesIdmProfileMatchAccuracyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDLPDictionariesIdmProfileMatchAccuracy)(nil)).Elem()
}

func (i GetDLPDictionariesIdmProfileMatchAccuracyArgs) ToGetDLPDictionariesIdmProfileMatchAccuracyOutput() GetDLPDictionariesIdmProfileMatchAccuracyOutput {
	return i.ToGetDLPDictionariesIdmProfileMatchAccuracyOutputWithContext(context.Background())
}

func (i GetDLPDictionariesIdmProfileMatchAccuracyArgs) ToGetDLPDictionariesIdmProfileMatchAccuracyOutputWithContext(ctx context.Context) GetDLPDictionariesIdmProfileMatchAccuracyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDLPDictionariesIdmProfileMatchAccuracyOutput)
}

// GetDLPDictionariesIdmProfileMatchAccuracyArrayInput is an input type that accepts GetDLPDictionariesIdmProfileMatchAccuracyArray and GetDLPDictionariesIdmProfileMatchAccuracyArrayOutput values.
// You can construct a concrete instance of `GetDLPDictionariesIdmProfileMatchAccuracyArrayInput` via:
//
//	GetDLPDictionariesIdmProfileMatchAccuracyArray{ GetDLPDictionariesIdmProfileMatchAccuracyArgs{...} }
type GetDLPDictionariesIdmProfileMatchAccuracyArrayInput interface {
	pulumi.Input

	ToGetDLPDictionariesIdmProfileMatchAccuracyArrayOutput() GetDLPDictionariesIdmProfileMatchAccuracyArrayOutput
	ToGetDLPDictionariesIdmProfileMatchAccuracyArrayOutputWithContext(context.Context) GetDLPDictionariesIdmProfileMatchAccuracyArrayOutput
}

type GetDLPDictionariesIdmProfileMatchAccuracyArray []GetDLPDictionariesIdmProfileMatchAccuracyInput

func (GetDLPDictionariesIdmProfileMatchAccuracyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDLPDictionariesIdmProfileMatchAccuracy)(nil)).Elem()
}

func (i GetDLPDictionariesIdmProfileMatchAccuracyArray) ToGetDLPDictionariesIdmProfileMatchAccuracyArrayOutput() GetDLPDictionariesIdmProfileMatchAccuracyArrayOutput {
	return i.ToGetDLPDictionariesIdmProfileMatchAccuracyArrayOutputWithContext(context.Background())
}

func (i GetDLPDictionariesIdmProfileMatchAccuracyArray) ToGetDLPDictionariesIdmProfileMatchAccuracyArrayOutputWithContext(ctx context.Context) GetDLPDictionariesIdmProfileMatchAccuracyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDLPDictionariesIdmProfileMatchAccuracyArrayOutput)
}

type GetDLPDictionariesIdmProfileMatchAccuracyOutput struct{ *pulumi.OutputState }

func (GetDLPDictionariesIdmProfileMatchAccuracyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDLPDictionariesIdmProfileMatchAccuracy)(nil)).Elem()
}

func (o GetDLPDictionariesIdmProfileMatchAccuracyOutput) ToGetDLPDictionariesIdmProfileMatchAccuracyOutput() GetDLPDictionariesIdmProfileMatchAccuracyOutput {
	return o
}

func (o GetDLPDictionariesIdmProfileMatchAccuracyOutput) ToGetDLPDictionariesIdmProfileMatchAccuracyOutputWithContext(ctx context.Context) GetDLPDictionariesIdmProfileMatchAccuracyOutput {
	return o
}

func (o GetDLPDictionariesIdmProfileMatchAccuracyOutput) AdpIdmProfiles() GetDLPDictionariesIdmProfileMatchAccuracyAdpIdmProfileArrayOutput {
	return o.ApplyT(func(v GetDLPDictionariesIdmProfileMatchAccuracy) []GetDLPDictionariesIdmProfileMatchAccuracyAdpIdmProfile {
		return v.AdpIdmProfiles
	}).(GetDLPDictionariesIdmProfileMatchAccuracyAdpIdmProfileArrayOutput)
}

func (o GetDLPDictionariesIdmProfileMatchAccuracyOutput) MatchAccuracy() pulumi.StringOutput {
	return o.ApplyT(func(v GetDLPDictionariesIdmProfileMatchAccuracy) string { return v.MatchAccuracy }).(pulumi.StringOutput)
}

type GetDLPDictionariesIdmProfileMatchAccuracyArrayOutput struct{ *pulumi.OutputState }

func (GetDLPDictionariesIdmProfileMatchAccuracyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDLPDictionariesIdmProfileMatchAccuracy)(nil)).Elem()
}

func (o GetDLPDictionariesIdmProfileMatchAccuracyArrayOutput) ToGetDLPDictionariesIdmProfileMatchAccuracyArrayOutput() GetDLPDictionariesIdmProfileMatchAccuracyArrayOutput {
	return o
}

func (o GetDLPDictionariesIdmProfileMatchAccuracyArrayOutput) ToGetDLPDictionariesIdmProfileMatchAccuracyArrayOutputWithContext(ctx context.Context) GetDLPDictionariesIdmProfileMatchAccuracyArrayOutput {
	return o
}

func (o GetDLPDictionariesIdmProfileMatchAccuracyArrayOutput) Index(i pulumi.IntInput) GetDLPDictionariesIdmProfileMatchAccuracyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDLPDictionariesIdmProfileMatchAccuracy {
		return vs[0].([]GetDLPDictionariesIdmProfileMatchAccuracy)[vs[1].(int)]
	}).(GetDLPDictionariesIdmProfileMatchAccuracyOutput)
}

type GetDLPDictionariesIdmProfileMatchAccuracyAdpIdmProfile struct {
	Extensions map[string]string `pulumi:"extensions"`
	// Unique identifier for the DLP dictionary
	Id int `pulumi:"id"`
}

// GetDLPDictionariesIdmProfileMatchAccuracyAdpIdmProfileInput is an input type that accepts GetDLPDictionariesIdmProfileMatchAccuracyAdpIdmProfileArgs and GetDLPDictionariesIdmProfileMatchAccuracyAdpIdmProfileOutput values.
// You can construct a concrete instance of `GetDLPDictionariesIdmProfileMatchAccuracyAdpIdmProfileInput` via:
//
//	GetDLPDictionariesIdmProfileMatchAccuracyAdpIdmProfileArgs{...}
type GetDLPDictionariesIdmProfileMatchAccuracyAdpIdmProfileInput interface {
	pulumi.Input

	ToGetDLPDictionariesIdmProfileMatchAccuracyAdpIdmProfileOutput() GetDLPDictionariesIdmProfileMatchAccuracyAdpIdmProfileOutput
	ToGetDLPDictionariesIdmProfileMatchAccuracyAdpIdmProfileOutputWithContext(context.Context) GetDLPDictionariesIdmProfileMatchAccuracyAdpIdmProfileOutput
}

type GetDLPDictionariesIdmProfileMatchAccuracyAdpIdmProfileArgs struct {
	Extensions pulumi.StringMapInput `pulumi:"extensions"`
	// Unique identifier for the DLP dictionary
	Id pulumi.IntInput `pulumi:"id"`
}

func (GetDLPDictionariesIdmProfileMatchAccuracyAdpIdmProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDLPDictionariesIdmProfileMatchAccuracyAdpIdmProfile)(nil)).Elem()
}

func (i GetDLPDictionariesIdmProfileMatchAccuracyAdpIdmProfileArgs) ToGetDLPDictionariesIdmProfileMatchAccuracyAdpIdmProfileOutput() GetDLPDictionariesIdmProfileMatchAccuracyAdpIdmProfileOutput {
	return i.ToGetDLPDictionariesIdmProfileMatchAccuracyAdpIdmProfileOutputWithContext(context.Background())
}

func (i GetDLPDictionariesIdmProfileMatchAccuracyAdpIdmProfileArgs) ToGetDLPDictionariesIdmProfileMatchAccuracyAdpIdmProfileOutputWithContext(ctx context.Context) GetDLPDictionariesIdmProfileMatchAccuracyAdpIdmProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDLPDictionariesIdmProfileMatchAccuracyAdpIdmProfileOutput)
}

// GetDLPDictionariesIdmProfileMatchAccuracyAdpIdmProfileArrayInput is an input type that accepts GetDLPDictionariesIdmProfileMatchAccuracyAdpIdmProfileArray and GetDLPDictionariesIdmProfileMatchAccuracyAdpIdmProfileArrayOutput values.
// You can construct a concrete instance of `GetDLPDictionariesIdmProfileMatchAccuracyAdpIdmProfileArrayInput` via:
//
//	GetDLPDictionariesIdmProfileMatchAccuracyAdpIdmProfileArray{ GetDLPDictionariesIdmProfileMatchAccuracyAdpIdmProfileArgs{...} }
type GetDLPDictionariesIdmProfileMatchAccuracyAdpIdmProfileArrayInput interface {
	pulumi.Input

	ToGetDLPDictionariesIdmProfileMatchAccuracyAdpIdmProfileArrayOutput() GetDLPDictionariesIdmProfileMatchAccuracyAdpIdmProfileArrayOutput
	ToGetDLPDictionariesIdmProfileMatchAccuracyAdpIdmProfileArrayOutputWithContext(context.Context) GetDLPDictionariesIdmProfileMatchAccuracyAdpIdmProfileArrayOutput
}

type GetDLPDictionariesIdmProfileMatchAccuracyAdpIdmProfileArray []GetDLPDictionariesIdmProfileMatchAccuracyAdpIdmProfileInput

func (GetDLPDictionariesIdmProfileMatchAccuracyAdpIdmProfileArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDLPDictionariesIdmProfileMatchAccuracyAdpIdmProfile)(nil)).Elem()
}

func (i GetDLPDictionariesIdmProfileMatchAccuracyAdpIdmProfileArray) ToGetDLPDictionariesIdmProfileMatchAccuracyAdpIdmProfileArrayOutput() GetDLPDictionariesIdmProfileMatchAccuracyAdpIdmProfileArrayOutput {
	return i.ToGetDLPDictionariesIdmProfileMatchAccuracyAdpIdmProfileArrayOutputWithContext(context.Background())
}

func (i GetDLPDictionariesIdmProfileMatchAccuracyAdpIdmProfileArray) ToGetDLPDictionariesIdmProfileMatchAccuracyAdpIdmProfileArrayOutputWithContext(ctx context.Context) GetDLPDictionariesIdmProfileMatchAccuracyAdpIdmProfileArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDLPDictionariesIdmProfileMatchAccuracyAdpIdmProfileArrayOutput)
}

type GetDLPDictionariesIdmProfileMatchAccuracyAdpIdmProfileOutput struct{ *pulumi.OutputState }

func (GetDLPDictionariesIdmProfileMatchAccuracyAdpIdmProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDLPDictionariesIdmProfileMatchAccuracyAdpIdmProfile)(nil)).Elem()
}

func (o GetDLPDictionariesIdmProfileMatchAccuracyAdpIdmProfileOutput) ToGetDLPDictionariesIdmProfileMatchAccuracyAdpIdmProfileOutput() GetDLPDictionariesIdmProfileMatchAccuracyAdpIdmProfileOutput {
	return o
}

func (o GetDLPDictionariesIdmProfileMatchAccuracyAdpIdmProfileOutput) ToGetDLPDictionariesIdmProfileMatchAccuracyAdpIdmProfileOutputWithContext(ctx context.Context) GetDLPDictionariesIdmProfileMatchAccuracyAdpIdmProfileOutput {
	return o
}

func (o GetDLPDictionariesIdmProfileMatchAccuracyAdpIdmProfileOutput) Extensions() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetDLPDictionariesIdmProfileMatchAccuracyAdpIdmProfile) map[string]string { return v.Extensions }).(pulumi.StringMapOutput)
}

// Unique identifier for the DLP dictionary
func (o GetDLPDictionariesIdmProfileMatchAccuracyAdpIdmProfileOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v GetDLPDictionariesIdmProfileMatchAccuracyAdpIdmProfile) int { return v.Id }).(pulumi.IntOutput)
}

type GetDLPDictionariesIdmProfileMatchAccuracyAdpIdmProfileArrayOutput struct{ *pulumi.OutputState }

func (GetDLPDictionariesIdmProfileMatchAccuracyAdpIdmProfileArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDLPDictionariesIdmProfileMatchAccuracyAdpIdmProfile)(nil)).Elem()
}

func (o GetDLPDictionariesIdmProfileMatchAccuracyAdpIdmProfileArrayOutput) ToGetDLPDictionariesIdmProfileMatchAccuracyAdpIdmProfileArrayOutput() GetDLPDictionariesIdmProfileMatchAccuracyAdpIdmProfileArrayOutput {
	return o
}

func (o GetDLPDictionariesIdmProfileMatchAccuracyAdpIdmProfileArrayOutput) ToGetDLPDictionariesIdmProfileMatchAccuracyAdpIdmProfileArrayOutputWithContext(ctx context.Context) GetDLPDictionariesIdmProfileMatchAccuracyAdpIdmProfileArrayOutput {
	return o
}

func (o GetDLPDictionariesIdmProfileMatchAccuracyAdpIdmProfileArrayOutput) Index(i pulumi.IntInput) GetDLPDictionariesIdmProfileMatchAccuracyAdpIdmProfileOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDLPDictionariesIdmProfileMatchAccuracyAdpIdmProfile {
		return vs[0].([]GetDLPDictionariesIdmProfileMatchAccuracyAdpIdmProfile)[vs[1].(int)]
	}).(GetDLPDictionariesIdmProfileMatchAccuracyAdpIdmProfileOutput)
}

type GetDLPDictionariesPattern struct {
	// (String) The action applied to a DLP dictionary using patterns
	Action string `pulumi:"action"`
	// (String) DLP dictionary pattern
	Pattern string `pulumi:"pattern"`
}

// GetDLPDictionariesPatternInput is an input type that accepts GetDLPDictionariesPatternArgs and GetDLPDictionariesPatternOutput values.
// You can construct a concrete instance of `GetDLPDictionariesPatternInput` via:
//
//	GetDLPDictionariesPatternArgs{...}
type GetDLPDictionariesPatternInput interface {
	pulumi.Input

	ToGetDLPDictionariesPatternOutput() GetDLPDictionariesPatternOutput
	ToGetDLPDictionariesPatternOutputWithContext(context.Context) GetDLPDictionariesPatternOutput
}

type GetDLPDictionariesPatternArgs struct {
	// (String) The action applied to a DLP dictionary using patterns
	Action pulumi.StringInput `pulumi:"action"`
	// (String) DLP dictionary pattern
	Pattern pulumi.StringInput `pulumi:"pattern"`
}

func (GetDLPDictionariesPatternArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDLPDictionariesPattern)(nil)).Elem()
}

func (i GetDLPDictionariesPatternArgs) ToGetDLPDictionariesPatternOutput() GetDLPDictionariesPatternOutput {
	return i.ToGetDLPDictionariesPatternOutputWithContext(context.Background())
}

func (i GetDLPDictionariesPatternArgs) ToGetDLPDictionariesPatternOutputWithContext(ctx context.Context) GetDLPDictionariesPatternOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDLPDictionariesPatternOutput)
}

// GetDLPDictionariesPatternArrayInput is an input type that accepts GetDLPDictionariesPatternArray and GetDLPDictionariesPatternArrayOutput values.
// You can construct a concrete instance of `GetDLPDictionariesPatternArrayInput` via:
//
//	GetDLPDictionariesPatternArray{ GetDLPDictionariesPatternArgs{...} }
type GetDLPDictionariesPatternArrayInput interface {
	pulumi.Input

	ToGetDLPDictionariesPatternArrayOutput() GetDLPDictionariesPatternArrayOutput
	ToGetDLPDictionariesPatternArrayOutputWithContext(context.Context) GetDLPDictionariesPatternArrayOutput
}

type GetDLPDictionariesPatternArray []GetDLPDictionariesPatternInput

func (GetDLPDictionariesPatternArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDLPDictionariesPattern)(nil)).Elem()
}

func (i GetDLPDictionariesPatternArray) ToGetDLPDictionariesPatternArrayOutput() GetDLPDictionariesPatternArrayOutput {
	return i.ToGetDLPDictionariesPatternArrayOutputWithContext(context.Background())
}

func (i GetDLPDictionariesPatternArray) ToGetDLPDictionariesPatternArrayOutputWithContext(ctx context.Context) GetDLPDictionariesPatternArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDLPDictionariesPatternArrayOutput)
}

type GetDLPDictionariesPatternOutput struct{ *pulumi.OutputState }

func (GetDLPDictionariesPatternOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDLPDictionariesPattern)(nil)).Elem()
}

func (o GetDLPDictionariesPatternOutput) ToGetDLPDictionariesPatternOutput() GetDLPDictionariesPatternOutput {
	return o
}

func (o GetDLPDictionariesPatternOutput) ToGetDLPDictionariesPatternOutputWithContext(ctx context.Context) GetDLPDictionariesPatternOutput {
	return o
}

// (String) The action applied to a DLP dictionary using patterns
func (o GetDLPDictionariesPatternOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v GetDLPDictionariesPattern) string { return v.Action }).(pulumi.StringOutput)
}

// (String) DLP dictionary pattern
func (o GetDLPDictionariesPatternOutput) Pattern() pulumi.StringOutput {
	return o.ApplyT(func(v GetDLPDictionariesPattern) string { return v.Pattern }).(pulumi.StringOutput)
}

type GetDLPDictionariesPatternArrayOutput struct{ *pulumi.OutputState }

func (GetDLPDictionariesPatternArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDLPDictionariesPattern)(nil)).Elem()
}

func (o GetDLPDictionariesPatternArrayOutput) ToGetDLPDictionariesPatternArrayOutput() GetDLPDictionariesPatternArrayOutput {
	return o
}

func (o GetDLPDictionariesPatternArrayOutput) ToGetDLPDictionariesPatternArrayOutputWithContext(ctx context.Context) GetDLPDictionariesPatternArrayOutput {
	return o
}

func (o GetDLPDictionariesPatternArrayOutput) Index(i pulumi.IntInput) GetDLPDictionariesPatternOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDLPDictionariesPattern {
		return vs[0].([]GetDLPDictionariesPattern)[vs[1].(int)]
	}).(GetDLPDictionariesPatternOutput)
}

type GetDLPDictionariesPhrase struct {
	// (String) The action applied to a DLP dictionary using patterns
	Action string `pulumi:"action"`
	Phrase string `pulumi:"phrase"`
}

// GetDLPDictionariesPhraseInput is an input type that accepts GetDLPDictionariesPhraseArgs and GetDLPDictionariesPhraseOutput values.
// You can construct a concrete instance of `GetDLPDictionariesPhraseInput` via:
//
//	GetDLPDictionariesPhraseArgs{...}
type GetDLPDictionariesPhraseInput interface {
	pulumi.Input

	ToGetDLPDictionariesPhraseOutput() GetDLPDictionariesPhraseOutput
	ToGetDLPDictionariesPhraseOutputWithContext(context.Context) GetDLPDictionariesPhraseOutput
}

type GetDLPDictionariesPhraseArgs struct {
	// (String) The action applied to a DLP dictionary using patterns
	Action pulumi.StringInput `pulumi:"action"`
	Phrase pulumi.StringInput `pulumi:"phrase"`
}

func (GetDLPDictionariesPhraseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDLPDictionariesPhrase)(nil)).Elem()
}

func (i GetDLPDictionariesPhraseArgs) ToGetDLPDictionariesPhraseOutput() GetDLPDictionariesPhraseOutput {
	return i.ToGetDLPDictionariesPhraseOutputWithContext(context.Background())
}

func (i GetDLPDictionariesPhraseArgs) ToGetDLPDictionariesPhraseOutputWithContext(ctx context.Context) GetDLPDictionariesPhraseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDLPDictionariesPhraseOutput)
}

// GetDLPDictionariesPhraseArrayInput is an input type that accepts GetDLPDictionariesPhraseArray and GetDLPDictionariesPhraseArrayOutput values.
// You can construct a concrete instance of `GetDLPDictionariesPhraseArrayInput` via:
//
//	GetDLPDictionariesPhraseArray{ GetDLPDictionariesPhraseArgs{...} }
type GetDLPDictionariesPhraseArrayInput interface {
	pulumi.Input

	ToGetDLPDictionariesPhraseArrayOutput() GetDLPDictionariesPhraseArrayOutput
	ToGetDLPDictionariesPhraseArrayOutputWithContext(context.Context) GetDLPDictionariesPhraseArrayOutput
}

type GetDLPDictionariesPhraseArray []GetDLPDictionariesPhraseInput

func (GetDLPDictionariesPhraseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDLPDictionariesPhrase)(nil)).Elem()
}

func (i GetDLPDictionariesPhraseArray) ToGetDLPDictionariesPhraseArrayOutput() GetDLPDictionariesPhraseArrayOutput {
	return i.ToGetDLPDictionariesPhraseArrayOutputWithContext(context.Background())
}

func (i GetDLPDictionariesPhraseArray) ToGetDLPDictionariesPhraseArrayOutputWithContext(ctx context.Context) GetDLPDictionariesPhraseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDLPDictionariesPhraseArrayOutput)
}

type GetDLPDictionariesPhraseOutput struct{ *pulumi.OutputState }

func (GetDLPDictionariesPhraseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDLPDictionariesPhrase)(nil)).Elem()
}

func (o GetDLPDictionariesPhraseOutput) ToGetDLPDictionariesPhraseOutput() GetDLPDictionariesPhraseOutput {
	return o
}

func (o GetDLPDictionariesPhraseOutput) ToGetDLPDictionariesPhraseOutputWithContext(ctx context.Context) GetDLPDictionariesPhraseOutput {
	return o
}

// (String) The action applied to a DLP dictionary using patterns
func (o GetDLPDictionariesPhraseOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v GetDLPDictionariesPhrase) string { return v.Action }).(pulumi.StringOutput)
}

func (o GetDLPDictionariesPhraseOutput) Phrase() pulumi.StringOutput {
	return o.ApplyT(func(v GetDLPDictionariesPhrase) string { return v.Phrase }).(pulumi.StringOutput)
}

type GetDLPDictionariesPhraseArrayOutput struct{ *pulumi.OutputState }

func (GetDLPDictionariesPhraseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDLPDictionariesPhrase)(nil)).Elem()
}

func (o GetDLPDictionariesPhraseArrayOutput) ToGetDLPDictionariesPhraseArrayOutput() GetDLPDictionariesPhraseArrayOutput {
	return o
}

func (o GetDLPDictionariesPhraseArrayOutput) ToGetDLPDictionariesPhraseArrayOutputWithContext(ctx context.Context) GetDLPDictionariesPhraseArrayOutput {
	return o
}

func (o GetDLPDictionariesPhraseArrayOutput) Index(i pulumi.IntInput) GetDLPDictionariesPhraseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDLPDictionariesPhrase {
		return vs[0].([]GetDLPDictionariesPhrase)[vs[1].(int)]
	}).(GetDLPDictionariesPhraseOutput)
}

type GetDLPWebRulesAuditor struct {
	Extensions map[string]string `pulumi:"extensions"`
	// Identifier that uniquely identifies an entity
	Id int `pulumi:"id"`
	// The DLP policy rule name.
	// rules.
	Name string `pulumi:"name"`
}

// GetDLPWebRulesAuditorInput is an input type that accepts GetDLPWebRulesAuditorArgs and GetDLPWebRulesAuditorOutput values.
// You can construct a concrete instance of `GetDLPWebRulesAuditorInput` via:
//
//	GetDLPWebRulesAuditorArgs{...}
type GetDLPWebRulesAuditorInput interface {
	pulumi.Input

	ToGetDLPWebRulesAuditorOutput() GetDLPWebRulesAuditorOutput
	ToGetDLPWebRulesAuditorOutputWithContext(context.Context) GetDLPWebRulesAuditorOutput
}

type GetDLPWebRulesAuditorArgs struct {
	Extensions pulumi.StringMapInput `pulumi:"extensions"`
	// Identifier that uniquely identifies an entity
	Id pulumi.IntInput `pulumi:"id"`
	// The DLP policy rule name.
	// rules.
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetDLPWebRulesAuditorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDLPWebRulesAuditor)(nil)).Elem()
}

func (i GetDLPWebRulesAuditorArgs) ToGetDLPWebRulesAuditorOutput() GetDLPWebRulesAuditorOutput {
	return i.ToGetDLPWebRulesAuditorOutputWithContext(context.Background())
}

func (i GetDLPWebRulesAuditorArgs) ToGetDLPWebRulesAuditorOutputWithContext(ctx context.Context) GetDLPWebRulesAuditorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDLPWebRulesAuditorOutput)
}

// GetDLPWebRulesAuditorArrayInput is an input type that accepts GetDLPWebRulesAuditorArray and GetDLPWebRulesAuditorArrayOutput values.
// You can construct a concrete instance of `GetDLPWebRulesAuditorArrayInput` via:
//
//	GetDLPWebRulesAuditorArray{ GetDLPWebRulesAuditorArgs{...} }
type GetDLPWebRulesAuditorArrayInput interface {
	pulumi.Input

	ToGetDLPWebRulesAuditorArrayOutput() GetDLPWebRulesAuditorArrayOutput
	ToGetDLPWebRulesAuditorArrayOutputWithContext(context.Context) GetDLPWebRulesAuditorArrayOutput
}

type GetDLPWebRulesAuditorArray []GetDLPWebRulesAuditorInput

func (GetDLPWebRulesAuditorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDLPWebRulesAuditor)(nil)).Elem()
}

func (i GetDLPWebRulesAuditorArray) ToGetDLPWebRulesAuditorArrayOutput() GetDLPWebRulesAuditorArrayOutput {
	return i.ToGetDLPWebRulesAuditorArrayOutputWithContext(context.Background())
}

func (i GetDLPWebRulesAuditorArray) ToGetDLPWebRulesAuditorArrayOutputWithContext(ctx context.Context) GetDLPWebRulesAuditorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDLPWebRulesAuditorArrayOutput)
}

type GetDLPWebRulesAuditorOutput struct{ *pulumi.OutputState }

func (GetDLPWebRulesAuditorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDLPWebRulesAuditor)(nil)).Elem()
}

func (o GetDLPWebRulesAuditorOutput) ToGetDLPWebRulesAuditorOutput() GetDLPWebRulesAuditorOutput {
	return o
}

func (o GetDLPWebRulesAuditorOutput) ToGetDLPWebRulesAuditorOutputWithContext(ctx context.Context) GetDLPWebRulesAuditorOutput {
	return o
}

func (o GetDLPWebRulesAuditorOutput) Extensions() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetDLPWebRulesAuditor) map[string]string { return v.Extensions }).(pulumi.StringMapOutput)
}

// Identifier that uniquely identifies an entity
func (o GetDLPWebRulesAuditorOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v GetDLPWebRulesAuditor) int { return v.Id }).(pulumi.IntOutput)
}

// The DLP policy rule name.
// rules.
func (o GetDLPWebRulesAuditorOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetDLPWebRulesAuditor) string { return v.Name }).(pulumi.StringOutput)
}

type GetDLPWebRulesAuditorArrayOutput struct{ *pulumi.OutputState }

func (GetDLPWebRulesAuditorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDLPWebRulesAuditor)(nil)).Elem()
}

func (o GetDLPWebRulesAuditorArrayOutput) ToGetDLPWebRulesAuditorArrayOutput() GetDLPWebRulesAuditorArrayOutput {
	return o
}

func (o GetDLPWebRulesAuditorArrayOutput) ToGetDLPWebRulesAuditorArrayOutputWithContext(ctx context.Context) GetDLPWebRulesAuditorArrayOutput {
	return o
}

func (o GetDLPWebRulesAuditorArrayOutput) Index(i pulumi.IntInput) GetDLPWebRulesAuditorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDLPWebRulesAuditor {
		return vs[0].([]GetDLPWebRulesAuditor)[vs[1].(int)]
	}).(GetDLPWebRulesAuditorOutput)
}

type GetDLPWebRulesDepartment struct {
	Extensions map[string]string `pulumi:"extensions"`
	// Identifier that uniquely identifies an entity
	Id int `pulumi:"id"`
	// The DLP policy rule name.
	// rules.
	Name string `pulumi:"name"`
}

// GetDLPWebRulesDepartmentInput is an input type that accepts GetDLPWebRulesDepartmentArgs and GetDLPWebRulesDepartmentOutput values.
// You can construct a concrete instance of `GetDLPWebRulesDepartmentInput` via:
//
//	GetDLPWebRulesDepartmentArgs{...}
type GetDLPWebRulesDepartmentInput interface {
	pulumi.Input

	ToGetDLPWebRulesDepartmentOutput() GetDLPWebRulesDepartmentOutput
	ToGetDLPWebRulesDepartmentOutputWithContext(context.Context) GetDLPWebRulesDepartmentOutput
}

type GetDLPWebRulesDepartmentArgs struct {
	Extensions pulumi.StringMapInput `pulumi:"extensions"`
	// Identifier that uniquely identifies an entity
	Id pulumi.IntInput `pulumi:"id"`
	// The DLP policy rule name.
	// rules.
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetDLPWebRulesDepartmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDLPWebRulesDepartment)(nil)).Elem()
}

func (i GetDLPWebRulesDepartmentArgs) ToGetDLPWebRulesDepartmentOutput() GetDLPWebRulesDepartmentOutput {
	return i.ToGetDLPWebRulesDepartmentOutputWithContext(context.Background())
}

func (i GetDLPWebRulesDepartmentArgs) ToGetDLPWebRulesDepartmentOutputWithContext(ctx context.Context) GetDLPWebRulesDepartmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDLPWebRulesDepartmentOutput)
}

// GetDLPWebRulesDepartmentArrayInput is an input type that accepts GetDLPWebRulesDepartmentArray and GetDLPWebRulesDepartmentArrayOutput values.
// You can construct a concrete instance of `GetDLPWebRulesDepartmentArrayInput` via:
//
//	GetDLPWebRulesDepartmentArray{ GetDLPWebRulesDepartmentArgs{...} }
type GetDLPWebRulesDepartmentArrayInput interface {
	pulumi.Input

	ToGetDLPWebRulesDepartmentArrayOutput() GetDLPWebRulesDepartmentArrayOutput
	ToGetDLPWebRulesDepartmentArrayOutputWithContext(context.Context) GetDLPWebRulesDepartmentArrayOutput
}

type GetDLPWebRulesDepartmentArray []GetDLPWebRulesDepartmentInput

func (GetDLPWebRulesDepartmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDLPWebRulesDepartment)(nil)).Elem()
}

func (i GetDLPWebRulesDepartmentArray) ToGetDLPWebRulesDepartmentArrayOutput() GetDLPWebRulesDepartmentArrayOutput {
	return i.ToGetDLPWebRulesDepartmentArrayOutputWithContext(context.Background())
}

func (i GetDLPWebRulesDepartmentArray) ToGetDLPWebRulesDepartmentArrayOutputWithContext(ctx context.Context) GetDLPWebRulesDepartmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDLPWebRulesDepartmentArrayOutput)
}

type GetDLPWebRulesDepartmentOutput struct{ *pulumi.OutputState }

func (GetDLPWebRulesDepartmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDLPWebRulesDepartment)(nil)).Elem()
}

func (o GetDLPWebRulesDepartmentOutput) ToGetDLPWebRulesDepartmentOutput() GetDLPWebRulesDepartmentOutput {
	return o
}

func (o GetDLPWebRulesDepartmentOutput) ToGetDLPWebRulesDepartmentOutputWithContext(ctx context.Context) GetDLPWebRulesDepartmentOutput {
	return o
}

func (o GetDLPWebRulesDepartmentOutput) Extensions() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetDLPWebRulesDepartment) map[string]string { return v.Extensions }).(pulumi.StringMapOutput)
}

// Identifier that uniquely identifies an entity
func (o GetDLPWebRulesDepartmentOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v GetDLPWebRulesDepartment) int { return v.Id }).(pulumi.IntOutput)
}

// The DLP policy rule name.
// rules.
func (o GetDLPWebRulesDepartmentOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetDLPWebRulesDepartment) string { return v.Name }).(pulumi.StringOutput)
}

type GetDLPWebRulesDepartmentArrayOutput struct{ *pulumi.OutputState }

func (GetDLPWebRulesDepartmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDLPWebRulesDepartment)(nil)).Elem()
}

func (o GetDLPWebRulesDepartmentArrayOutput) ToGetDLPWebRulesDepartmentArrayOutput() GetDLPWebRulesDepartmentArrayOutput {
	return o
}

func (o GetDLPWebRulesDepartmentArrayOutput) ToGetDLPWebRulesDepartmentArrayOutputWithContext(ctx context.Context) GetDLPWebRulesDepartmentArrayOutput {
	return o
}

func (o GetDLPWebRulesDepartmentArrayOutput) Index(i pulumi.IntInput) GetDLPWebRulesDepartmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDLPWebRulesDepartment {
		return vs[0].([]GetDLPWebRulesDepartment)[vs[1].(int)]
	}).(GetDLPWebRulesDepartmentOutput)
}

type GetDLPWebRulesDlpEngine struct {
	Extensions map[string]string `pulumi:"extensions"`
	// Identifier that uniquely identifies an entity
	Id int `pulumi:"id"`
	// The DLP policy rule name.
	// rules.
	Name string `pulumi:"name"`
}

// GetDLPWebRulesDlpEngineInput is an input type that accepts GetDLPWebRulesDlpEngineArgs and GetDLPWebRulesDlpEngineOutput values.
// You can construct a concrete instance of `GetDLPWebRulesDlpEngineInput` via:
//
//	GetDLPWebRulesDlpEngineArgs{...}
type GetDLPWebRulesDlpEngineInput interface {
	pulumi.Input

	ToGetDLPWebRulesDlpEngineOutput() GetDLPWebRulesDlpEngineOutput
	ToGetDLPWebRulesDlpEngineOutputWithContext(context.Context) GetDLPWebRulesDlpEngineOutput
}

type GetDLPWebRulesDlpEngineArgs struct {
	Extensions pulumi.StringMapInput `pulumi:"extensions"`
	// Identifier that uniquely identifies an entity
	Id pulumi.IntInput `pulumi:"id"`
	// The DLP policy rule name.
	// rules.
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetDLPWebRulesDlpEngineArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDLPWebRulesDlpEngine)(nil)).Elem()
}

func (i GetDLPWebRulesDlpEngineArgs) ToGetDLPWebRulesDlpEngineOutput() GetDLPWebRulesDlpEngineOutput {
	return i.ToGetDLPWebRulesDlpEngineOutputWithContext(context.Background())
}

func (i GetDLPWebRulesDlpEngineArgs) ToGetDLPWebRulesDlpEngineOutputWithContext(ctx context.Context) GetDLPWebRulesDlpEngineOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDLPWebRulesDlpEngineOutput)
}

// GetDLPWebRulesDlpEngineArrayInput is an input type that accepts GetDLPWebRulesDlpEngineArray and GetDLPWebRulesDlpEngineArrayOutput values.
// You can construct a concrete instance of `GetDLPWebRulesDlpEngineArrayInput` via:
//
//	GetDLPWebRulesDlpEngineArray{ GetDLPWebRulesDlpEngineArgs{...} }
type GetDLPWebRulesDlpEngineArrayInput interface {
	pulumi.Input

	ToGetDLPWebRulesDlpEngineArrayOutput() GetDLPWebRulesDlpEngineArrayOutput
	ToGetDLPWebRulesDlpEngineArrayOutputWithContext(context.Context) GetDLPWebRulesDlpEngineArrayOutput
}

type GetDLPWebRulesDlpEngineArray []GetDLPWebRulesDlpEngineInput

func (GetDLPWebRulesDlpEngineArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDLPWebRulesDlpEngine)(nil)).Elem()
}

func (i GetDLPWebRulesDlpEngineArray) ToGetDLPWebRulesDlpEngineArrayOutput() GetDLPWebRulesDlpEngineArrayOutput {
	return i.ToGetDLPWebRulesDlpEngineArrayOutputWithContext(context.Background())
}

func (i GetDLPWebRulesDlpEngineArray) ToGetDLPWebRulesDlpEngineArrayOutputWithContext(ctx context.Context) GetDLPWebRulesDlpEngineArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDLPWebRulesDlpEngineArrayOutput)
}

type GetDLPWebRulesDlpEngineOutput struct{ *pulumi.OutputState }

func (GetDLPWebRulesDlpEngineOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDLPWebRulesDlpEngine)(nil)).Elem()
}

func (o GetDLPWebRulesDlpEngineOutput) ToGetDLPWebRulesDlpEngineOutput() GetDLPWebRulesDlpEngineOutput {
	return o
}

func (o GetDLPWebRulesDlpEngineOutput) ToGetDLPWebRulesDlpEngineOutputWithContext(ctx context.Context) GetDLPWebRulesDlpEngineOutput {
	return o
}

func (o GetDLPWebRulesDlpEngineOutput) Extensions() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetDLPWebRulesDlpEngine) map[string]string { return v.Extensions }).(pulumi.StringMapOutput)
}

// Identifier that uniquely identifies an entity
func (o GetDLPWebRulesDlpEngineOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v GetDLPWebRulesDlpEngine) int { return v.Id }).(pulumi.IntOutput)
}

// The DLP policy rule name.
// rules.
func (o GetDLPWebRulesDlpEngineOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetDLPWebRulesDlpEngine) string { return v.Name }).(pulumi.StringOutput)
}

type GetDLPWebRulesDlpEngineArrayOutput struct{ *pulumi.OutputState }

func (GetDLPWebRulesDlpEngineArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDLPWebRulesDlpEngine)(nil)).Elem()
}

func (o GetDLPWebRulesDlpEngineArrayOutput) ToGetDLPWebRulesDlpEngineArrayOutput() GetDLPWebRulesDlpEngineArrayOutput {
	return o
}

func (o GetDLPWebRulesDlpEngineArrayOutput) ToGetDLPWebRulesDlpEngineArrayOutputWithContext(ctx context.Context) GetDLPWebRulesDlpEngineArrayOutput {
	return o
}

func (o GetDLPWebRulesDlpEngineArrayOutput) Index(i pulumi.IntInput) GetDLPWebRulesDlpEngineOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDLPWebRulesDlpEngine {
		return vs[0].([]GetDLPWebRulesDlpEngine)[vs[1].(int)]
	}).(GetDLPWebRulesDlpEngineOutput)
}

type GetDLPWebRulesExcludedDepartment struct {
	Extensions map[string]string `pulumi:"extensions"`
	// Identifier that uniquely identifies an entity
	Id int `pulumi:"id"`
}

// GetDLPWebRulesExcludedDepartmentInput is an input type that accepts GetDLPWebRulesExcludedDepartmentArgs and GetDLPWebRulesExcludedDepartmentOutput values.
// You can construct a concrete instance of `GetDLPWebRulesExcludedDepartmentInput` via:
//
//	GetDLPWebRulesExcludedDepartmentArgs{...}
type GetDLPWebRulesExcludedDepartmentInput interface {
	pulumi.Input

	ToGetDLPWebRulesExcludedDepartmentOutput() GetDLPWebRulesExcludedDepartmentOutput
	ToGetDLPWebRulesExcludedDepartmentOutputWithContext(context.Context) GetDLPWebRulesExcludedDepartmentOutput
}

type GetDLPWebRulesExcludedDepartmentArgs struct {
	Extensions pulumi.StringMapInput `pulumi:"extensions"`
	// Identifier that uniquely identifies an entity
	Id pulumi.IntInput `pulumi:"id"`
}

func (GetDLPWebRulesExcludedDepartmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDLPWebRulesExcludedDepartment)(nil)).Elem()
}

func (i GetDLPWebRulesExcludedDepartmentArgs) ToGetDLPWebRulesExcludedDepartmentOutput() GetDLPWebRulesExcludedDepartmentOutput {
	return i.ToGetDLPWebRulesExcludedDepartmentOutputWithContext(context.Background())
}

func (i GetDLPWebRulesExcludedDepartmentArgs) ToGetDLPWebRulesExcludedDepartmentOutputWithContext(ctx context.Context) GetDLPWebRulesExcludedDepartmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDLPWebRulesExcludedDepartmentOutput)
}

// GetDLPWebRulesExcludedDepartmentArrayInput is an input type that accepts GetDLPWebRulesExcludedDepartmentArray and GetDLPWebRulesExcludedDepartmentArrayOutput values.
// You can construct a concrete instance of `GetDLPWebRulesExcludedDepartmentArrayInput` via:
//
//	GetDLPWebRulesExcludedDepartmentArray{ GetDLPWebRulesExcludedDepartmentArgs{...} }
type GetDLPWebRulesExcludedDepartmentArrayInput interface {
	pulumi.Input

	ToGetDLPWebRulesExcludedDepartmentArrayOutput() GetDLPWebRulesExcludedDepartmentArrayOutput
	ToGetDLPWebRulesExcludedDepartmentArrayOutputWithContext(context.Context) GetDLPWebRulesExcludedDepartmentArrayOutput
}

type GetDLPWebRulesExcludedDepartmentArray []GetDLPWebRulesExcludedDepartmentInput

func (GetDLPWebRulesExcludedDepartmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDLPWebRulesExcludedDepartment)(nil)).Elem()
}

func (i GetDLPWebRulesExcludedDepartmentArray) ToGetDLPWebRulesExcludedDepartmentArrayOutput() GetDLPWebRulesExcludedDepartmentArrayOutput {
	return i.ToGetDLPWebRulesExcludedDepartmentArrayOutputWithContext(context.Background())
}

func (i GetDLPWebRulesExcludedDepartmentArray) ToGetDLPWebRulesExcludedDepartmentArrayOutputWithContext(ctx context.Context) GetDLPWebRulesExcludedDepartmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDLPWebRulesExcludedDepartmentArrayOutput)
}

type GetDLPWebRulesExcludedDepartmentOutput struct{ *pulumi.OutputState }

func (GetDLPWebRulesExcludedDepartmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDLPWebRulesExcludedDepartment)(nil)).Elem()
}

func (o GetDLPWebRulesExcludedDepartmentOutput) ToGetDLPWebRulesExcludedDepartmentOutput() GetDLPWebRulesExcludedDepartmentOutput {
	return o
}

func (o GetDLPWebRulesExcludedDepartmentOutput) ToGetDLPWebRulesExcludedDepartmentOutputWithContext(ctx context.Context) GetDLPWebRulesExcludedDepartmentOutput {
	return o
}

func (o GetDLPWebRulesExcludedDepartmentOutput) Extensions() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetDLPWebRulesExcludedDepartment) map[string]string { return v.Extensions }).(pulumi.StringMapOutput)
}

// Identifier that uniquely identifies an entity
func (o GetDLPWebRulesExcludedDepartmentOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v GetDLPWebRulesExcludedDepartment) int { return v.Id }).(pulumi.IntOutput)
}

type GetDLPWebRulesExcludedDepartmentArrayOutput struct{ *pulumi.OutputState }

func (GetDLPWebRulesExcludedDepartmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDLPWebRulesExcludedDepartment)(nil)).Elem()
}

func (o GetDLPWebRulesExcludedDepartmentArrayOutput) ToGetDLPWebRulesExcludedDepartmentArrayOutput() GetDLPWebRulesExcludedDepartmentArrayOutput {
	return o
}

func (o GetDLPWebRulesExcludedDepartmentArrayOutput) ToGetDLPWebRulesExcludedDepartmentArrayOutputWithContext(ctx context.Context) GetDLPWebRulesExcludedDepartmentArrayOutput {
	return o
}

func (o GetDLPWebRulesExcludedDepartmentArrayOutput) Index(i pulumi.IntInput) GetDLPWebRulesExcludedDepartmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDLPWebRulesExcludedDepartment {
		return vs[0].([]GetDLPWebRulesExcludedDepartment)[vs[1].(int)]
	}).(GetDLPWebRulesExcludedDepartmentOutput)
}

type GetDLPWebRulesExcludedGroup struct {
	Extensions map[string]string `pulumi:"extensions"`
	// Identifier that uniquely identifies an entity
	Id int `pulumi:"id"`
}

// GetDLPWebRulesExcludedGroupInput is an input type that accepts GetDLPWebRulesExcludedGroupArgs and GetDLPWebRulesExcludedGroupOutput values.
// You can construct a concrete instance of `GetDLPWebRulesExcludedGroupInput` via:
//
//	GetDLPWebRulesExcludedGroupArgs{...}
type GetDLPWebRulesExcludedGroupInput interface {
	pulumi.Input

	ToGetDLPWebRulesExcludedGroupOutput() GetDLPWebRulesExcludedGroupOutput
	ToGetDLPWebRulesExcludedGroupOutputWithContext(context.Context) GetDLPWebRulesExcludedGroupOutput
}

type GetDLPWebRulesExcludedGroupArgs struct {
	Extensions pulumi.StringMapInput `pulumi:"extensions"`
	// Identifier that uniquely identifies an entity
	Id pulumi.IntInput `pulumi:"id"`
}

func (GetDLPWebRulesExcludedGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDLPWebRulesExcludedGroup)(nil)).Elem()
}

func (i GetDLPWebRulesExcludedGroupArgs) ToGetDLPWebRulesExcludedGroupOutput() GetDLPWebRulesExcludedGroupOutput {
	return i.ToGetDLPWebRulesExcludedGroupOutputWithContext(context.Background())
}

func (i GetDLPWebRulesExcludedGroupArgs) ToGetDLPWebRulesExcludedGroupOutputWithContext(ctx context.Context) GetDLPWebRulesExcludedGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDLPWebRulesExcludedGroupOutput)
}

// GetDLPWebRulesExcludedGroupArrayInput is an input type that accepts GetDLPWebRulesExcludedGroupArray and GetDLPWebRulesExcludedGroupArrayOutput values.
// You can construct a concrete instance of `GetDLPWebRulesExcludedGroupArrayInput` via:
//
//	GetDLPWebRulesExcludedGroupArray{ GetDLPWebRulesExcludedGroupArgs{...} }
type GetDLPWebRulesExcludedGroupArrayInput interface {
	pulumi.Input

	ToGetDLPWebRulesExcludedGroupArrayOutput() GetDLPWebRulesExcludedGroupArrayOutput
	ToGetDLPWebRulesExcludedGroupArrayOutputWithContext(context.Context) GetDLPWebRulesExcludedGroupArrayOutput
}

type GetDLPWebRulesExcludedGroupArray []GetDLPWebRulesExcludedGroupInput

func (GetDLPWebRulesExcludedGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDLPWebRulesExcludedGroup)(nil)).Elem()
}

func (i GetDLPWebRulesExcludedGroupArray) ToGetDLPWebRulesExcludedGroupArrayOutput() GetDLPWebRulesExcludedGroupArrayOutput {
	return i.ToGetDLPWebRulesExcludedGroupArrayOutputWithContext(context.Background())
}

func (i GetDLPWebRulesExcludedGroupArray) ToGetDLPWebRulesExcludedGroupArrayOutputWithContext(ctx context.Context) GetDLPWebRulesExcludedGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDLPWebRulesExcludedGroupArrayOutput)
}

type GetDLPWebRulesExcludedGroupOutput struct{ *pulumi.OutputState }

func (GetDLPWebRulesExcludedGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDLPWebRulesExcludedGroup)(nil)).Elem()
}

func (o GetDLPWebRulesExcludedGroupOutput) ToGetDLPWebRulesExcludedGroupOutput() GetDLPWebRulesExcludedGroupOutput {
	return o
}

func (o GetDLPWebRulesExcludedGroupOutput) ToGetDLPWebRulesExcludedGroupOutputWithContext(ctx context.Context) GetDLPWebRulesExcludedGroupOutput {
	return o
}

func (o GetDLPWebRulesExcludedGroupOutput) Extensions() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetDLPWebRulesExcludedGroup) map[string]string { return v.Extensions }).(pulumi.StringMapOutput)
}

// Identifier that uniquely identifies an entity
func (o GetDLPWebRulesExcludedGroupOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v GetDLPWebRulesExcludedGroup) int { return v.Id }).(pulumi.IntOutput)
}

type GetDLPWebRulesExcludedGroupArrayOutput struct{ *pulumi.OutputState }

func (GetDLPWebRulesExcludedGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDLPWebRulesExcludedGroup)(nil)).Elem()
}

func (o GetDLPWebRulesExcludedGroupArrayOutput) ToGetDLPWebRulesExcludedGroupArrayOutput() GetDLPWebRulesExcludedGroupArrayOutput {
	return o
}

func (o GetDLPWebRulesExcludedGroupArrayOutput) ToGetDLPWebRulesExcludedGroupArrayOutputWithContext(ctx context.Context) GetDLPWebRulesExcludedGroupArrayOutput {
	return o
}

func (o GetDLPWebRulesExcludedGroupArrayOutput) Index(i pulumi.IntInput) GetDLPWebRulesExcludedGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDLPWebRulesExcludedGroup {
		return vs[0].([]GetDLPWebRulesExcludedGroup)[vs[1].(int)]
	}).(GetDLPWebRulesExcludedGroupOutput)
}

type GetDLPWebRulesExcludedUser struct {
	Extensions map[string]string `pulumi:"extensions"`
	// Identifier that uniquely identifies an entity
	Id int `pulumi:"id"`
}

// GetDLPWebRulesExcludedUserInput is an input type that accepts GetDLPWebRulesExcludedUserArgs and GetDLPWebRulesExcludedUserOutput values.
// You can construct a concrete instance of `GetDLPWebRulesExcludedUserInput` via:
//
//	GetDLPWebRulesExcludedUserArgs{...}
type GetDLPWebRulesExcludedUserInput interface {
	pulumi.Input

	ToGetDLPWebRulesExcludedUserOutput() GetDLPWebRulesExcludedUserOutput
	ToGetDLPWebRulesExcludedUserOutputWithContext(context.Context) GetDLPWebRulesExcludedUserOutput
}

type GetDLPWebRulesExcludedUserArgs struct {
	Extensions pulumi.StringMapInput `pulumi:"extensions"`
	// Identifier that uniquely identifies an entity
	Id pulumi.IntInput `pulumi:"id"`
}

func (GetDLPWebRulesExcludedUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDLPWebRulesExcludedUser)(nil)).Elem()
}

func (i GetDLPWebRulesExcludedUserArgs) ToGetDLPWebRulesExcludedUserOutput() GetDLPWebRulesExcludedUserOutput {
	return i.ToGetDLPWebRulesExcludedUserOutputWithContext(context.Background())
}

func (i GetDLPWebRulesExcludedUserArgs) ToGetDLPWebRulesExcludedUserOutputWithContext(ctx context.Context) GetDLPWebRulesExcludedUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDLPWebRulesExcludedUserOutput)
}

// GetDLPWebRulesExcludedUserArrayInput is an input type that accepts GetDLPWebRulesExcludedUserArray and GetDLPWebRulesExcludedUserArrayOutput values.
// You can construct a concrete instance of `GetDLPWebRulesExcludedUserArrayInput` via:
//
//	GetDLPWebRulesExcludedUserArray{ GetDLPWebRulesExcludedUserArgs{...} }
type GetDLPWebRulesExcludedUserArrayInput interface {
	pulumi.Input

	ToGetDLPWebRulesExcludedUserArrayOutput() GetDLPWebRulesExcludedUserArrayOutput
	ToGetDLPWebRulesExcludedUserArrayOutputWithContext(context.Context) GetDLPWebRulesExcludedUserArrayOutput
}

type GetDLPWebRulesExcludedUserArray []GetDLPWebRulesExcludedUserInput

func (GetDLPWebRulesExcludedUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDLPWebRulesExcludedUser)(nil)).Elem()
}

func (i GetDLPWebRulesExcludedUserArray) ToGetDLPWebRulesExcludedUserArrayOutput() GetDLPWebRulesExcludedUserArrayOutput {
	return i.ToGetDLPWebRulesExcludedUserArrayOutputWithContext(context.Background())
}

func (i GetDLPWebRulesExcludedUserArray) ToGetDLPWebRulesExcludedUserArrayOutputWithContext(ctx context.Context) GetDLPWebRulesExcludedUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDLPWebRulesExcludedUserArrayOutput)
}

type GetDLPWebRulesExcludedUserOutput struct{ *pulumi.OutputState }

func (GetDLPWebRulesExcludedUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDLPWebRulesExcludedUser)(nil)).Elem()
}

func (o GetDLPWebRulesExcludedUserOutput) ToGetDLPWebRulesExcludedUserOutput() GetDLPWebRulesExcludedUserOutput {
	return o
}

func (o GetDLPWebRulesExcludedUserOutput) ToGetDLPWebRulesExcludedUserOutputWithContext(ctx context.Context) GetDLPWebRulesExcludedUserOutput {
	return o
}

func (o GetDLPWebRulesExcludedUserOutput) Extensions() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetDLPWebRulesExcludedUser) map[string]string { return v.Extensions }).(pulumi.StringMapOutput)
}

// Identifier that uniquely identifies an entity
func (o GetDLPWebRulesExcludedUserOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v GetDLPWebRulesExcludedUser) int { return v.Id }).(pulumi.IntOutput)
}

type GetDLPWebRulesExcludedUserArrayOutput struct{ *pulumi.OutputState }

func (GetDLPWebRulesExcludedUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDLPWebRulesExcludedUser)(nil)).Elem()
}

func (o GetDLPWebRulesExcludedUserArrayOutput) ToGetDLPWebRulesExcludedUserArrayOutput() GetDLPWebRulesExcludedUserArrayOutput {
	return o
}

func (o GetDLPWebRulesExcludedUserArrayOutput) ToGetDLPWebRulesExcludedUserArrayOutputWithContext(ctx context.Context) GetDLPWebRulesExcludedUserArrayOutput {
	return o
}

func (o GetDLPWebRulesExcludedUserArrayOutput) Index(i pulumi.IntInput) GetDLPWebRulesExcludedUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDLPWebRulesExcludedUser {
		return vs[0].([]GetDLPWebRulesExcludedUser)[vs[1].(int)]
	}).(GetDLPWebRulesExcludedUserOutput)
}

type GetDLPWebRulesGroup struct {
	Extensions map[string]string `pulumi:"extensions"`
	// Identifier that uniquely identifies an entity
	Id int `pulumi:"id"`
	// The DLP policy rule name.
	// rules.
	Name string `pulumi:"name"`
}

// GetDLPWebRulesGroupInput is an input type that accepts GetDLPWebRulesGroupArgs and GetDLPWebRulesGroupOutput values.
// You can construct a concrete instance of `GetDLPWebRulesGroupInput` via:
//
//	GetDLPWebRulesGroupArgs{...}
type GetDLPWebRulesGroupInput interface {
	pulumi.Input

	ToGetDLPWebRulesGroupOutput() GetDLPWebRulesGroupOutput
	ToGetDLPWebRulesGroupOutputWithContext(context.Context) GetDLPWebRulesGroupOutput
}

type GetDLPWebRulesGroupArgs struct {
	Extensions pulumi.StringMapInput `pulumi:"extensions"`
	// Identifier that uniquely identifies an entity
	Id pulumi.IntInput `pulumi:"id"`
	// The DLP policy rule name.
	// rules.
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetDLPWebRulesGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDLPWebRulesGroup)(nil)).Elem()
}

func (i GetDLPWebRulesGroupArgs) ToGetDLPWebRulesGroupOutput() GetDLPWebRulesGroupOutput {
	return i.ToGetDLPWebRulesGroupOutputWithContext(context.Background())
}

func (i GetDLPWebRulesGroupArgs) ToGetDLPWebRulesGroupOutputWithContext(ctx context.Context) GetDLPWebRulesGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDLPWebRulesGroupOutput)
}

// GetDLPWebRulesGroupArrayInput is an input type that accepts GetDLPWebRulesGroupArray and GetDLPWebRulesGroupArrayOutput values.
// You can construct a concrete instance of `GetDLPWebRulesGroupArrayInput` via:
//
//	GetDLPWebRulesGroupArray{ GetDLPWebRulesGroupArgs{...} }
type GetDLPWebRulesGroupArrayInput interface {
	pulumi.Input

	ToGetDLPWebRulesGroupArrayOutput() GetDLPWebRulesGroupArrayOutput
	ToGetDLPWebRulesGroupArrayOutputWithContext(context.Context) GetDLPWebRulesGroupArrayOutput
}

type GetDLPWebRulesGroupArray []GetDLPWebRulesGroupInput

func (GetDLPWebRulesGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDLPWebRulesGroup)(nil)).Elem()
}

func (i GetDLPWebRulesGroupArray) ToGetDLPWebRulesGroupArrayOutput() GetDLPWebRulesGroupArrayOutput {
	return i.ToGetDLPWebRulesGroupArrayOutputWithContext(context.Background())
}

func (i GetDLPWebRulesGroupArray) ToGetDLPWebRulesGroupArrayOutputWithContext(ctx context.Context) GetDLPWebRulesGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDLPWebRulesGroupArrayOutput)
}

type GetDLPWebRulesGroupOutput struct{ *pulumi.OutputState }

func (GetDLPWebRulesGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDLPWebRulesGroup)(nil)).Elem()
}

func (o GetDLPWebRulesGroupOutput) ToGetDLPWebRulesGroupOutput() GetDLPWebRulesGroupOutput {
	return o
}

func (o GetDLPWebRulesGroupOutput) ToGetDLPWebRulesGroupOutputWithContext(ctx context.Context) GetDLPWebRulesGroupOutput {
	return o
}

func (o GetDLPWebRulesGroupOutput) Extensions() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetDLPWebRulesGroup) map[string]string { return v.Extensions }).(pulumi.StringMapOutput)
}

// Identifier that uniquely identifies an entity
func (o GetDLPWebRulesGroupOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v GetDLPWebRulesGroup) int { return v.Id }).(pulumi.IntOutput)
}

// The DLP policy rule name.
// rules.
func (o GetDLPWebRulesGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetDLPWebRulesGroup) string { return v.Name }).(pulumi.StringOutput)
}

type GetDLPWebRulesGroupArrayOutput struct{ *pulumi.OutputState }

func (GetDLPWebRulesGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDLPWebRulesGroup)(nil)).Elem()
}

func (o GetDLPWebRulesGroupArrayOutput) ToGetDLPWebRulesGroupArrayOutput() GetDLPWebRulesGroupArrayOutput {
	return o
}

func (o GetDLPWebRulesGroupArrayOutput) ToGetDLPWebRulesGroupArrayOutputWithContext(ctx context.Context) GetDLPWebRulesGroupArrayOutput {
	return o
}

func (o GetDLPWebRulesGroupArrayOutput) Index(i pulumi.IntInput) GetDLPWebRulesGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDLPWebRulesGroup {
		return vs[0].([]GetDLPWebRulesGroup)[vs[1].(int)]
	}).(GetDLPWebRulesGroupOutput)
}

type GetDLPWebRulesIcapServer struct {
	Extensions map[string]string `pulumi:"extensions"`
	// Identifier that uniquely identifies an entity
	Id int `pulumi:"id"`
	// The DLP policy rule name.
	// rules.
	Name string `pulumi:"name"`
}

// GetDLPWebRulesIcapServerInput is an input type that accepts GetDLPWebRulesIcapServerArgs and GetDLPWebRulesIcapServerOutput values.
// You can construct a concrete instance of `GetDLPWebRulesIcapServerInput` via:
//
//	GetDLPWebRulesIcapServerArgs{...}
type GetDLPWebRulesIcapServerInput interface {
	pulumi.Input

	ToGetDLPWebRulesIcapServerOutput() GetDLPWebRulesIcapServerOutput
	ToGetDLPWebRulesIcapServerOutputWithContext(context.Context) GetDLPWebRulesIcapServerOutput
}

type GetDLPWebRulesIcapServerArgs struct {
	Extensions pulumi.StringMapInput `pulumi:"extensions"`
	// Identifier that uniquely identifies an entity
	Id pulumi.IntInput `pulumi:"id"`
	// The DLP policy rule name.
	// rules.
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetDLPWebRulesIcapServerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDLPWebRulesIcapServer)(nil)).Elem()
}

func (i GetDLPWebRulesIcapServerArgs) ToGetDLPWebRulesIcapServerOutput() GetDLPWebRulesIcapServerOutput {
	return i.ToGetDLPWebRulesIcapServerOutputWithContext(context.Background())
}

func (i GetDLPWebRulesIcapServerArgs) ToGetDLPWebRulesIcapServerOutputWithContext(ctx context.Context) GetDLPWebRulesIcapServerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDLPWebRulesIcapServerOutput)
}

// GetDLPWebRulesIcapServerArrayInput is an input type that accepts GetDLPWebRulesIcapServerArray and GetDLPWebRulesIcapServerArrayOutput values.
// You can construct a concrete instance of `GetDLPWebRulesIcapServerArrayInput` via:
//
//	GetDLPWebRulesIcapServerArray{ GetDLPWebRulesIcapServerArgs{...} }
type GetDLPWebRulesIcapServerArrayInput interface {
	pulumi.Input

	ToGetDLPWebRulesIcapServerArrayOutput() GetDLPWebRulesIcapServerArrayOutput
	ToGetDLPWebRulesIcapServerArrayOutputWithContext(context.Context) GetDLPWebRulesIcapServerArrayOutput
}

type GetDLPWebRulesIcapServerArray []GetDLPWebRulesIcapServerInput

func (GetDLPWebRulesIcapServerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDLPWebRulesIcapServer)(nil)).Elem()
}

func (i GetDLPWebRulesIcapServerArray) ToGetDLPWebRulesIcapServerArrayOutput() GetDLPWebRulesIcapServerArrayOutput {
	return i.ToGetDLPWebRulesIcapServerArrayOutputWithContext(context.Background())
}

func (i GetDLPWebRulesIcapServerArray) ToGetDLPWebRulesIcapServerArrayOutputWithContext(ctx context.Context) GetDLPWebRulesIcapServerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDLPWebRulesIcapServerArrayOutput)
}

type GetDLPWebRulesIcapServerOutput struct{ *pulumi.OutputState }

func (GetDLPWebRulesIcapServerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDLPWebRulesIcapServer)(nil)).Elem()
}

func (o GetDLPWebRulesIcapServerOutput) ToGetDLPWebRulesIcapServerOutput() GetDLPWebRulesIcapServerOutput {
	return o
}

func (o GetDLPWebRulesIcapServerOutput) ToGetDLPWebRulesIcapServerOutputWithContext(ctx context.Context) GetDLPWebRulesIcapServerOutput {
	return o
}

func (o GetDLPWebRulesIcapServerOutput) Extensions() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetDLPWebRulesIcapServer) map[string]string { return v.Extensions }).(pulumi.StringMapOutput)
}

// Identifier that uniquely identifies an entity
func (o GetDLPWebRulesIcapServerOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v GetDLPWebRulesIcapServer) int { return v.Id }).(pulumi.IntOutput)
}

// The DLP policy rule name.
// rules.
func (o GetDLPWebRulesIcapServerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetDLPWebRulesIcapServer) string { return v.Name }).(pulumi.StringOutput)
}

type GetDLPWebRulesIcapServerArrayOutput struct{ *pulumi.OutputState }

func (GetDLPWebRulesIcapServerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDLPWebRulesIcapServer)(nil)).Elem()
}

func (o GetDLPWebRulesIcapServerArrayOutput) ToGetDLPWebRulesIcapServerArrayOutput() GetDLPWebRulesIcapServerArrayOutput {
	return o
}

func (o GetDLPWebRulesIcapServerArrayOutput) ToGetDLPWebRulesIcapServerArrayOutputWithContext(ctx context.Context) GetDLPWebRulesIcapServerArrayOutput {
	return o
}

func (o GetDLPWebRulesIcapServerArrayOutput) Index(i pulumi.IntInput) GetDLPWebRulesIcapServerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDLPWebRulesIcapServer {
		return vs[0].([]GetDLPWebRulesIcapServer)[vs[1].(int)]
	}).(GetDLPWebRulesIcapServerOutput)
}

type GetDLPWebRulesLabel struct {
	Extensions map[string]string `pulumi:"extensions"`
	// Identifier that uniquely identifies an entity
	Id int `pulumi:"id"`
	// The DLP policy rule name.
	// rules.
	Name string `pulumi:"name"`
}

// GetDLPWebRulesLabelInput is an input type that accepts GetDLPWebRulesLabelArgs and GetDLPWebRulesLabelOutput values.
// You can construct a concrete instance of `GetDLPWebRulesLabelInput` via:
//
//	GetDLPWebRulesLabelArgs{...}
type GetDLPWebRulesLabelInput interface {
	pulumi.Input

	ToGetDLPWebRulesLabelOutput() GetDLPWebRulesLabelOutput
	ToGetDLPWebRulesLabelOutputWithContext(context.Context) GetDLPWebRulesLabelOutput
}

type GetDLPWebRulesLabelArgs struct {
	Extensions pulumi.StringMapInput `pulumi:"extensions"`
	// Identifier that uniquely identifies an entity
	Id pulumi.IntInput `pulumi:"id"`
	// The DLP policy rule name.
	// rules.
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetDLPWebRulesLabelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDLPWebRulesLabel)(nil)).Elem()
}

func (i GetDLPWebRulesLabelArgs) ToGetDLPWebRulesLabelOutput() GetDLPWebRulesLabelOutput {
	return i.ToGetDLPWebRulesLabelOutputWithContext(context.Background())
}

func (i GetDLPWebRulesLabelArgs) ToGetDLPWebRulesLabelOutputWithContext(ctx context.Context) GetDLPWebRulesLabelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDLPWebRulesLabelOutput)
}

// GetDLPWebRulesLabelArrayInput is an input type that accepts GetDLPWebRulesLabelArray and GetDLPWebRulesLabelArrayOutput values.
// You can construct a concrete instance of `GetDLPWebRulesLabelArrayInput` via:
//
//	GetDLPWebRulesLabelArray{ GetDLPWebRulesLabelArgs{...} }
type GetDLPWebRulesLabelArrayInput interface {
	pulumi.Input

	ToGetDLPWebRulesLabelArrayOutput() GetDLPWebRulesLabelArrayOutput
	ToGetDLPWebRulesLabelArrayOutputWithContext(context.Context) GetDLPWebRulesLabelArrayOutput
}

type GetDLPWebRulesLabelArray []GetDLPWebRulesLabelInput

func (GetDLPWebRulesLabelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDLPWebRulesLabel)(nil)).Elem()
}

func (i GetDLPWebRulesLabelArray) ToGetDLPWebRulesLabelArrayOutput() GetDLPWebRulesLabelArrayOutput {
	return i.ToGetDLPWebRulesLabelArrayOutputWithContext(context.Background())
}

func (i GetDLPWebRulesLabelArray) ToGetDLPWebRulesLabelArrayOutputWithContext(ctx context.Context) GetDLPWebRulesLabelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDLPWebRulesLabelArrayOutput)
}

type GetDLPWebRulesLabelOutput struct{ *pulumi.OutputState }

func (GetDLPWebRulesLabelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDLPWebRulesLabel)(nil)).Elem()
}

func (o GetDLPWebRulesLabelOutput) ToGetDLPWebRulesLabelOutput() GetDLPWebRulesLabelOutput {
	return o
}

func (o GetDLPWebRulesLabelOutput) ToGetDLPWebRulesLabelOutputWithContext(ctx context.Context) GetDLPWebRulesLabelOutput {
	return o
}

func (o GetDLPWebRulesLabelOutput) Extensions() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetDLPWebRulesLabel) map[string]string { return v.Extensions }).(pulumi.StringMapOutput)
}

// Identifier that uniquely identifies an entity
func (o GetDLPWebRulesLabelOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v GetDLPWebRulesLabel) int { return v.Id }).(pulumi.IntOutput)
}

// The DLP policy rule name.
// rules.
func (o GetDLPWebRulesLabelOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetDLPWebRulesLabel) string { return v.Name }).(pulumi.StringOutput)
}

type GetDLPWebRulesLabelArrayOutput struct{ *pulumi.OutputState }

func (GetDLPWebRulesLabelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDLPWebRulesLabel)(nil)).Elem()
}

func (o GetDLPWebRulesLabelArrayOutput) ToGetDLPWebRulesLabelArrayOutput() GetDLPWebRulesLabelArrayOutput {
	return o
}

func (o GetDLPWebRulesLabelArrayOutput) ToGetDLPWebRulesLabelArrayOutputWithContext(ctx context.Context) GetDLPWebRulesLabelArrayOutput {
	return o
}

func (o GetDLPWebRulesLabelArrayOutput) Index(i pulumi.IntInput) GetDLPWebRulesLabelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDLPWebRulesLabel {
		return vs[0].([]GetDLPWebRulesLabel)[vs[1].(int)]
	}).(GetDLPWebRulesLabelOutput)
}

type GetDLPWebRulesLastModifiedBy struct {
	Extensions map[string]string `pulumi:"extensions"`
	// Identifier that uniquely identifies an entity
	Id int `pulumi:"id"`
	// The DLP policy rule name.
	// rules.
	Name string `pulumi:"name"`
}

// GetDLPWebRulesLastModifiedByInput is an input type that accepts GetDLPWebRulesLastModifiedByArgs and GetDLPWebRulesLastModifiedByOutput values.
// You can construct a concrete instance of `GetDLPWebRulesLastModifiedByInput` via:
//
//	GetDLPWebRulesLastModifiedByArgs{...}
type GetDLPWebRulesLastModifiedByInput interface {
	pulumi.Input

	ToGetDLPWebRulesLastModifiedByOutput() GetDLPWebRulesLastModifiedByOutput
	ToGetDLPWebRulesLastModifiedByOutputWithContext(context.Context) GetDLPWebRulesLastModifiedByOutput
}

type GetDLPWebRulesLastModifiedByArgs struct {
	Extensions pulumi.StringMapInput `pulumi:"extensions"`
	// Identifier that uniquely identifies an entity
	Id pulumi.IntInput `pulumi:"id"`
	// The DLP policy rule name.
	// rules.
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetDLPWebRulesLastModifiedByArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDLPWebRulesLastModifiedBy)(nil)).Elem()
}

func (i GetDLPWebRulesLastModifiedByArgs) ToGetDLPWebRulesLastModifiedByOutput() GetDLPWebRulesLastModifiedByOutput {
	return i.ToGetDLPWebRulesLastModifiedByOutputWithContext(context.Background())
}

func (i GetDLPWebRulesLastModifiedByArgs) ToGetDLPWebRulesLastModifiedByOutputWithContext(ctx context.Context) GetDLPWebRulesLastModifiedByOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDLPWebRulesLastModifiedByOutput)
}

// GetDLPWebRulesLastModifiedByArrayInput is an input type that accepts GetDLPWebRulesLastModifiedByArray and GetDLPWebRulesLastModifiedByArrayOutput values.
// You can construct a concrete instance of `GetDLPWebRulesLastModifiedByArrayInput` via:
//
//	GetDLPWebRulesLastModifiedByArray{ GetDLPWebRulesLastModifiedByArgs{...} }
type GetDLPWebRulesLastModifiedByArrayInput interface {
	pulumi.Input

	ToGetDLPWebRulesLastModifiedByArrayOutput() GetDLPWebRulesLastModifiedByArrayOutput
	ToGetDLPWebRulesLastModifiedByArrayOutputWithContext(context.Context) GetDLPWebRulesLastModifiedByArrayOutput
}

type GetDLPWebRulesLastModifiedByArray []GetDLPWebRulesLastModifiedByInput

func (GetDLPWebRulesLastModifiedByArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDLPWebRulesLastModifiedBy)(nil)).Elem()
}

func (i GetDLPWebRulesLastModifiedByArray) ToGetDLPWebRulesLastModifiedByArrayOutput() GetDLPWebRulesLastModifiedByArrayOutput {
	return i.ToGetDLPWebRulesLastModifiedByArrayOutputWithContext(context.Background())
}

func (i GetDLPWebRulesLastModifiedByArray) ToGetDLPWebRulesLastModifiedByArrayOutputWithContext(ctx context.Context) GetDLPWebRulesLastModifiedByArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDLPWebRulesLastModifiedByArrayOutput)
}

type GetDLPWebRulesLastModifiedByOutput struct{ *pulumi.OutputState }

func (GetDLPWebRulesLastModifiedByOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDLPWebRulesLastModifiedBy)(nil)).Elem()
}

func (o GetDLPWebRulesLastModifiedByOutput) ToGetDLPWebRulesLastModifiedByOutput() GetDLPWebRulesLastModifiedByOutput {
	return o
}

func (o GetDLPWebRulesLastModifiedByOutput) ToGetDLPWebRulesLastModifiedByOutputWithContext(ctx context.Context) GetDLPWebRulesLastModifiedByOutput {
	return o
}

func (o GetDLPWebRulesLastModifiedByOutput) Extensions() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetDLPWebRulesLastModifiedBy) map[string]string { return v.Extensions }).(pulumi.StringMapOutput)
}

// Identifier that uniquely identifies an entity
func (o GetDLPWebRulesLastModifiedByOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v GetDLPWebRulesLastModifiedBy) int { return v.Id }).(pulumi.IntOutput)
}

// The DLP policy rule name.
// rules.
func (o GetDLPWebRulesLastModifiedByOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetDLPWebRulesLastModifiedBy) string { return v.Name }).(pulumi.StringOutput)
}

type GetDLPWebRulesLastModifiedByArrayOutput struct{ *pulumi.OutputState }

func (GetDLPWebRulesLastModifiedByArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDLPWebRulesLastModifiedBy)(nil)).Elem()
}

func (o GetDLPWebRulesLastModifiedByArrayOutput) ToGetDLPWebRulesLastModifiedByArrayOutput() GetDLPWebRulesLastModifiedByArrayOutput {
	return o
}

func (o GetDLPWebRulesLastModifiedByArrayOutput) ToGetDLPWebRulesLastModifiedByArrayOutputWithContext(ctx context.Context) GetDLPWebRulesLastModifiedByArrayOutput {
	return o
}

func (o GetDLPWebRulesLastModifiedByArrayOutput) Index(i pulumi.IntInput) GetDLPWebRulesLastModifiedByOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDLPWebRulesLastModifiedBy {
		return vs[0].([]GetDLPWebRulesLastModifiedBy)[vs[1].(int)]
	}).(GetDLPWebRulesLastModifiedByOutput)
}

type GetDLPWebRulesLocation struct {
	Extensions map[string]string `pulumi:"extensions"`
	// Identifier that uniquely identifies an entity
	Id int `pulumi:"id"`
	// The DLP policy rule name.
	// rules.
	Name string `pulumi:"name"`
}

// GetDLPWebRulesLocationInput is an input type that accepts GetDLPWebRulesLocationArgs and GetDLPWebRulesLocationOutput values.
// You can construct a concrete instance of `GetDLPWebRulesLocationInput` via:
//
//	GetDLPWebRulesLocationArgs{...}
type GetDLPWebRulesLocationInput interface {
	pulumi.Input

	ToGetDLPWebRulesLocationOutput() GetDLPWebRulesLocationOutput
	ToGetDLPWebRulesLocationOutputWithContext(context.Context) GetDLPWebRulesLocationOutput
}

type GetDLPWebRulesLocationArgs struct {
	Extensions pulumi.StringMapInput `pulumi:"extensions"`
	// Identifier that uniquely identifies an entity
	Id pulumi.IntInput `pulumi:"id"`
	// The DLP policy rule name.
	// rules.
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetDLPWebRulesLocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDLPWebRulesLocation)(nil)).Elem()
}

func (i GetDLPWebRulesLocationArgs) ToGetDLPWebRulesLocationOutput() GetDLPWebRulesLocationOutput {
	return i.ToGetDLPWebRulesLocationOutputWithContext(context.Background())
}

func (i GetDLPWebRulesLocationArgs) ToGetDLPWebRulesLocationOutputWithContext(ctx context.Context) GetDLPWebRulesLocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDLPWebRulesLocationOutput)
}

// GetDLPWebRulesLocationArrayInput is an input type that accepts GetDLPWebRulesLocationArray and GetDLPWebRulesLocationArrayOutput values.
// You can construct a concrete instance of `GetDLPWebRulesLocationArrayInput` via:
//
//	GetDLPWebRulesLocationArray{ GetDLPWebRulesLocationArgs{...} }
type GetDLPWebRulesLocationArrayInput interface {
	pulumi.Input

	ToGetDLPWebRulesLocationArrayOutput() GetDLPWebRulesLocationArrayOutput
	ToGetDLPWebRulesLocationArrayOutputWithContext(context.Context) GetDLPWebRulesLocationArrayOutput
}

type GetDLPWebRulesLocationArray []GetDLPWebRulesLocationInput

func (GetDLPWebRulesLocationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDLPWebRulesLocation)(nil)).Elem()
}

func (i GetDLPWebRulesLocationArray) ToGetDLPWebRulesLocationArrayOutput() GetDLPWebRulesLocationArrayOutput {
	return i.ToGetDLPWebRulesLocationArrayOutputWithContext(context.Background())
}

func (i GetDLPWebRulesLocationArray) ToGetDLPWebRulesLocationArrayOutputWithContext(ctx context.Context) GetDLPWebRulesLocationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDLPWebRulesLocationArrayOutput)
}

type GetDLPWebRulesLocationOutput struct{ *pulumi.OutputState }

func (GetDLPWebRulesLocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDLPWebRulesLocation)(nil)).Elem()
}

func (o GetDLPWebRulesLocationOutput) ToGetDLPWebRulesLocationOutput() GetDLPWebRulesLocationOutput {
	return o
}

func (o GetDLPWebRulesLocationOutput) ToGetDLPWebRulesLocationOutputWithContext(ctx context.Context) GetDLPWebRulesLocationOutput {
	return o
}

func (o GetDLPWebRulesLocationOutput) Extensions() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetDLPWebRulesLocation) map[string]string { return v.Extensions }).(pulumi.StringMapOutput)
}

// Identifier that uniquely identifies an entity
func (o GetDLPWebRulesLocationOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v GetDLPWebRulesLocation) int { return v.Id }).(pulumi.IntOutput)
}

// The DLP policy rule name.
// rules.
func (o GetDLPWebRulesLocationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetDLPWebRulesLocation) string { return v.Name }).(pulumi.StringOutput)
}

type GetDLPWebRulesLocationArrayOutput struct{ *pulumi.OutputState }

func (GetDLPWebRulesLocationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDLPWebRulesLocation)(nil)).Elem()
}

func (o GetDLPWebRulesLocationArrayOutput) ToGetDLPWebRulesLocationArrayOutput() GetDLPWebRulesLocationArrayOutput {
	return o
}

func (o GetDLPWebRulesLocationArrayOutput) ToGetDLPWebRulesLocationArrayOutputWithContext(ctx context.Context) GetDLPWebRulesLocationArrayOutput {
	return o
}

func (o GetDLPWebRulesLocationArrayOutput) Index(i pulumi.IntInput) GetDLPWebRulesLocationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDLPWebRulesLocation {
		return vs[0].([]GetDLPWebRulesLocation)[vs[1].(int)]
	}).(GetDLPWebRulesLocationOutput)
}

type GetDLPWebRulesLocationGroup struct {
	Extensions map[string]string `pulumi:"extensions"`
	// Identifier that uniquely identifies an entity
	Id int `pulumi:"id"`
	// The DLP policy rule name.
	// rules.
	Name string `pulumi:"name"`
}

// GetDLPWebRulesLocationGroupInput is an input type that accepts GetDLPWebRulesLocationGroupArgs and GetDLPWebRulesLocationGroupOutput values.
// You can construct a concrete instance of `GetDLPWebRulesLocationGroupInput` via:
//
//	GetDLPWebRulesLocationGroupArgs{...}
type GetDLPWebRulesLocationGroupInput interface {
	pulumi.Input

	ToGetDLPWebRulesLocationGroupOutput() GetDLPWebRulesLocationGroupOutput
	ToGetDLPWebRulesLocationGroupOutputWithContext(context.Context) GetDLPWebRulesLocationGroupOutput
}

type GetDLPWebRulesLocationGroupArgs struct {
	Extensions pulumi.StringMapInput `pulumi:"extensions"`
	// Identifier that uniquely identifies an entity
	Id pulumi.IntInput `pulumi:"id"`
	// The DLP policy rule name.
	// rules.
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetDLPWebRulesLocationGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDLPWebRulesLocationGroup)(nil)).Elem()
}

func (i GetDLPWebRulesLocationGroupArgs) ToGetDLPWebRulesLocationGroupOutput() GetDLPWebRulesLocationGroupOutput {
	return i.ToGetDLPWebRulesLocationGroupOutputWithContext(context.Background())
}

func (i GetDLPWebRulesLocationGroupArgs) ToGetDLPWebRulesLocationGroupOutputWithContext(ctx context.Context) GetDLPWebRulesLocationGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDLPWebRulesLocationGroupOutput)
}

// GetDLPWebRulesLocationGroupArrayInput is an input type that accepts GetDLPWebRulesLocationGroupArray and GetDLPWebRulesLocationGroupArrayOutput values.
// You can construct a concrete instance of `GetDLPWebRulesLocationGroupArrayInput` via:
//
//	GetDLPWebRulesLocationGroupArray{ GetDLPWebRulesLocationGroupArgs{...} }
type GetDLPWebRulesLocationGroupArrayInput interface {
	pulumi.Input

	ToGetDLPWebRulesLocationGroupArrayOutput() GetDLPWebRulesLocationGroupArrayOutput
	ToGetDLPWebRulesLocationGroupArrayOutputWithContext(context.Context) GetDLPWebRulesLocationGroupArrayOutput
}

type GetDLPWebRulesLocationGroupArray []GetDLPWebRulesLocationGroupInput

func (GetDLPWebRulesLocationGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDLPWebRulesLocationGroup)(nil)).Elem()
}

func (i GetDLPWebRulesLocationGroupArray) ToGetDLPWebRulesLocationGroupArrayOutput() GetDLPWebRulesLocationGroupArrayOutput {
	return i.ToGetDLPWebRulesLocationGroupArrayOutputWithContext(context.Background())
}

func (i GetDLPWebRulesLocationGroupArray) ToGetDLPWebRulesLocationGroupArrayOutputWithContext(ctx context.Context) GetDLPWebRulesLocationGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDLPWebRulesLocationGroupArrayOutput)
}

type GetDLPWebRulesLocationGroupOutput struct{ *pulumi.OutputState }

func (GetDLPWebRulesLocationGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDLPWebRulesLocationGroup)(nil)).Elem()
}

func (o GetDLPWebRulesLocationGroupOutput) ToGetDLPWebRulesLocationGroupOutput() GetDLPWebRulesLocationGroupOutput {
	return o
}

func (o GetDLPWebRulesLocationGroupOutput) ToGetDLPWebRulesLocationGroupOutputWithContext(ctx context.Context) GetDLPWebRulesLocationGroupOutput {
	return o
}

func (o GetDLPWebRulesLocationGroupOutput) Extensions() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetDLPWebRulesLocationGroup) map[string]string { return v.Extensions }).(pulumi.StringMapOutput)
}

// Identifier that uniquely identifies an entity
func (o GetDLPWebRulesLocationGroupOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v GetDLPWebRulesLocationGroup) int { return v.Id }).(pulumi.IntOutput)
}

// The DLP policy rule name.
// rules.
func (o GetDLPWebRulesLocationGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetDLPWebRulesLocationGroup) string { return v.Name }).(pulumi.StringOutput)
}

type GetDLPWebRulesLocationGroupArrayOutput struct{ *pulumi.OutputState }

func (GetDLPWebRulesLocationGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDLPWebRulesLocationGroup)(nil)).Elem()
}

func (o GetDLPWebRulesLocationGroupArrayOutput) ToGetDLPWebRulesLocationGroupArrayOutput() GetDLPWebRulesLocationGroupArrayOutput {
	return o
}

func (o GetDLPWebRulesLocationGroupArrayOutput) ToGetDLPWebRulesLocationGroupArrayOutputWithContext(ctx context.Context) GetDLPWebRulesLocationGroupArrayOutput {
	return o
}

func (o GetDLPWebRulesLocationGroupArrayOutput) Index(i pulumi.IntInput) GetDLPWebRulesLocationGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDLPWebRulesLocationGroup {
		return vs[0].([]GetDLPWebRulesLocationGroup)[vs[1].(int)]
	}).(GetDLPWebRulesLocationGroupOutput)
}

type GetDLPWebRulesNotificationTemplate struct {
	Extensions map[string]string `pulumi:"extensions"`
	// Identifier that uniquely identifies an entity
	Id int `pulumi:"id"`
	// The DLP policy rule name.
	// rules.
	Name string `pulumi:"name"`
}

// GetDLPWebRulesNotificationTemplateInput is an input type that accepts GetDLPWebRulesNotificationTemplateArgs and GetDLPWebRulesNotificationTemplateOutput values.
// You can construct a concrete instance of `GetDLPWebRulesNotificationTemplateInput` via:
//
//	GetDLPWebRulesNotificationTemplateArgs{...}
type GetDLPWebRulesNotificationTemplateInput interface {
	pulumi.Input

	ToGetDLPWebRulesNotificationTemplateOutput() GetDLPWebRulesNotificationTemplateOutput
	ToGetDLPWebRulesNotificationTemplateOutputWithContext(context.Context) GetDLPWebRulesNotificationTemplateOutput
}

type GetDLPWebRulesNotificationTemplateArgs struct {
	Extensions pulumi.StringMapInput `pulumi:"extensions"`
	// Identifier that uniquely identifies an entity
	Id pulumi.IntInput `pulumi:"id"`
	// The DLP policy rule name.
	// rules.
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetDLPWebRulesNotificationTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDLPWebRulesNotificationTemplate)(nil)).Elem()
}

func (i GetDLPWebRulesNotificationTemplateArgs) ToGetDLPWebRulesNotificationTemplateOutput() GetDLPWebRulesNotificationTemplateOutput {
	return i.ToGetDLPWebRulesNotificationTemplateOutputWithContext(context.Background())
}

func (i GetDLPWebRulesNotificationTemplateArgs) ToGetDLPWebRulesNotificationTemplateOutputWithContext(ctx context.Context) GetDLPWebRulesNotificationTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDLPWebRulesNotificationTemplateOutput)
}

// GetDLPWebRulesNotificationTemplateArrayInput is an input type that accepts GetDLPWebRulesNotificationTemplateArray and GetDLPWebRulesNotificationTemplateArrayOutput values.
// You can construct a concrete instance of `GetDLPWebRulesNotificationTemplateArrayInput` via:
//
//	GetDLPWebRulesNotificationTemplateArray{ GetDLPWebRulesNotificationTemplateArgs{...} }
type GetDLPWebRulesNotificationTemplateArrayInput interface {
	pulumi.Input

	ToGetDLPWebRulesNotificationTemplateArrayOutput() GetDLPWebRulesNotificationTemplateArrayOutput
	ToGetDLPWebRulesNotificationTemplateArrayOutputWithContext(context.Context) GetDLPWebRulesNotificationTemplateArrayOutput
}

type GetDLPWebRulesNotificationTemplateArray []GetDLPWebRulesNotificationTemplateInput

func (GetDLPWebRulesNotificationTemplateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDLPWebRulesNotificationTemplate)(nil)).Elem()
}

func (i GetDLPWebRulesNotificationTemplateArray) ToGetDLPWebRulesNotificationTemplateArrayOutput() GetDLPWebRulesNotificationTemplateArrayOutput {
	return i.ToGetDLPWebRulesNotificationTemplateArrayOutputWithContext(context.Background())
}

func (i GetDLPWebRulesNotificationTemplateArray) ToGetDLPWebRulesNotificationTemplateArrayOutputWithContext(ctx context.Context) GetDLPWebRulesNotificationTemplateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDLPWebRulesNotificationTemplateArrayOutput)
}

type GetDLPWebRulesNotificationTemplateOutput struct{ *pulumi.OutputState }

func (GetDLPWebRulesNotificationTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDLPWebRulesNotificationTemplate)(nil)).Elem()
}

func (o GetDLPWebRulesNotificationTemplateOutput) ToGetDLPWebRulesNotificationTemplateOutput() GetDLPWebRulesNotificationTemplateOutput {
	return o
}

func (o GetDLPWebRulesNotificationTemplateOutput) ToGetDLPWebRulesNotificationTemplateOutputWithContext(ctx context.Context) GetDLPWebRulesNotificationTemplateOutput {
	return o
}

func (o GetDLPWebRulesNotificationTemplateOutput) Extensions() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetDLPWebRulesNotificationTemplate) map[string]string { return v.Extensions }).(pulumi.StringMapOutput)
}

// Identifier that uniquely identifies an entity
func (o GetDLPWebRulesNotificationTemplateOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v GetDLPWebRulesNotificationTemplate) int { return v.Id }).(pulumi.IntOutput)
}

// The DLP policy rule name.
// rules.
func (o GetDLPWebRulesNotificationTemplateOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetDLPWebRulesNotificationTemplate) string { return v.Name }).(pulumi.StringOutput)
}

type GetDLPWebRulesNotificationTemplateArrayOutput struct{ *pulumi.OutputState }

func (GetDLPWebRulesNotificationTemplateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDLPWebRulesNotificationTemplate)(nil)).Elem()
}

func (o GetDLPWebRulesNotificationTemplateArrayOutput) ToGetDLPWebRulesNotificationTemplateArrayOutput() GetDLPWebRulesNotificationTemplateArrayOutput {
	return o
}

func (o GetDLPWebRulesNotificationTemplateArrayOutput) ToGetDLPWebRulesNotificationTemplateArrayOutputWithContext(ctx context.Context) GetDLPWebRulesNotificationTemplateArrayOutput {
	return o
}

func (o GetDLPWebRulesNotificationTemplateArrayOutput) Index(i pulumi.IntInput) GetDLPWebRulesNotificationTemplateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDLPWebRulesNotificationTemplate {
		return vs[0].([]GetDLPWebRulesNotificationTemplate)[vs[1].(int)]
	}).(GetDLPWebRulesNotificationTemplateOutput)
}

type GetDLPWebRulesTimeWindow struct {
	Extensions map[string]string `pulumi:"extensions"`
	// Identifier that uniquely identifies an entity
	Id int `pulumi:"id"`
	// The DLP policy rule name.
	// rules.
	Name string `pulumi:"name"`
}

// GetDLPWebRulesTimeWindowInput is an input type that accepts GetDLPWebRulesTimeWindowArgs and GetDLPWebRulesTimeWindowOutput values.
// You can construct a concrete instance of `GetDLPWebRulesTimeWindowInput` via:
//
//	GetDLPWebRulesTimeWindowArgs{...}
type GetDLPWebRulesTimeWindowInput interface {
	pulumi.Input

	ToGetDLPWebRulesTimeWindowOutput() GetDLPWebRulesTimeWindowOutput
	ToGetDLPWebRulesTimeWindowOutputWithContext(context.Context) GetDLPWebRulesTimeWindowOutput
}

type GetDLPWebRulesTimeWindowArgs struct {
	Extensions pulumi.StringMapInput `pulumi:"extensions"`
	// Identifier that uniquely identifies an entity
	Id pulumi.IntInput `pulumi:"id"`
	// The DLP policy rule name.
	// rules.
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetDLPWebRulesTimeWindowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDLPWebRulesTimeWindow)(nil)).Elem()
}

func (i GetDLPWebRulesTimeWindowArgs) ToGetDLPWebRulesTimeWindowOutput() GetDLPWebRulesTimeWindowOutput {
	return i.ToGetDLPWebRulesTimeWindowOutputWithContext(context.Background())
}

func (i GetDLPWebRulesTimeWindowArgs) ToGetDLPWebRulesTimeWindowOutputWithContext(ctx context.Context) GetDLPWebRulesTimeWindowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDLPWebRulesTimeWindowOutput)
}

// GetDLPWebRulesTimeWindowArrayInput is an input type that accepts GetDLPWebRulesTimeWindowArray and GetDLPWebRulesTimeWindowArrayOutput values.
// You can construct a concrete instance of `GetDLPWebRulesTimeWindowArrayInput` via:
//
//	GetDLPWebRulesTimeWindowArray{ GetDLPWebRulesTimeWindowArgs{...} }
type GetDLPWebRulesTimeWindowArrayInput interface {
	pulumi.Input

	ToGetDLPWebRulesTimeWindowArrayOutput() GetDLPWebRulesTimeWindowArrayOutput
	ToGetDLPWebRulesTimeWindowArrayOutputWithContext(context.Context) GetDLPWebRulesTimeWindowArrayOutput
}

type GetDLPWebRulesTimeWindowArray []GetDLPWebRulesTimeWindowInput

func (GetDLPWebRulesTimeWindowArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDLPWebRulesTimeWindow)(nil)).Elem()
}

func (i GetDLPWebRulesTimeWindowArray) ToGetDLPWebRulesTimeWindowArrayOutput() GetDLPWebRulesTimeWindowArrayOutput {
	return i.ToGetDLPWebRulesTimeWindowArrayOutputWithContext(context.Background())
}

func (i GetDLPWebRulesTimeWindowArray) ToGetDLPWebRulesTimeWindowArrayOutputWithContext(ctx context.Context) GetDLPWebRulesTimeWindowArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDLPWebRulesTimeWindowArrayOutput)
}

type GetDLPWebRulesTimeWindowOutput struct{ *pulumi.OutputState }

func (GetDLPWebRulesTimeWindowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDLPWebRulesTimeWindow)(nil)).Elem()
}

func (o GetDLPWebRulesTimeWindowOutput) ToGetDLPWebRulesTimeWindowOutput() GetDLPWebRulesTimeWindowOutput {
	return o
}

func (o GetDLPWebRulesTimeWindowOutput) ToGetDLPWebRulesTimeWindowOutputWithContext(ctx context.Context) GetDLPWebRulesTimeWindowOutput {
	return o
}

func (o GetDLPWebRulesTimeWindowOutput) Extensions() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetDLPWebRulesTimeWindow) map[string]string { return v.Extensions }).(pulumi.StringMapOutput)
}

// Identifier that uniquely identifies an entity
func (o GetDLPWebRulesTimeWindowOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v GetDLPWebRulesTimeWindow) int { return v.Id }).(pulumi.IntOutput)
}

// The DLP policy rule name.
// rules.
func (o GetDLPWebRulesTimeWindowOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetDLPWebRulesTimeWindow) string { return v.Name }).(pulumi.StringOutput)
}

type GetDLPWebRulesTimeWindowArrayOutput struct{ *pulumi.OutputState }

func (GetDLPWebRulesTimeWindowArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDLPWebRulesTimeWindow)(nil)).Elem()
}

func (o GetDLPWebRulesTimeWindowArrayOutput) ToGetDLPWebRulesTimeWindowArrayOutput() GetDLPWebRulesTimeWindowArrayOutput {
	return o
}

func (o GetDLPWebRulesTimeWindowArrayOutput) ToGetDLPWebRulesTimeWindowArrayOutputWithContext(ctx context.Context) GetDLPWebRulesTimeWindowArrayOutput {
	return o
}

func (o GetDLPWebRulesTimeWindowArrayOutput) Index(i pulumi.IntInput) GetDLPWebRulesTimeWindowOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDLPWebRulesTimeWindow {
		return vs[0].([]GetDLPWebRulesTimeWindow)[vs[1].(int)]
	}).(GetDLPWebRulesTimeWindowOutput)
}

type GetDLPWebRulesUrlCategory struct {
	Extensions map[string]string `pulumi:"extensions"`
	// Identifier that uniquely identifies an entity
	Id int `pulumi:"id"`
	// The DLP policy rule name.
	// rules.
	Name string `pulumi:"name"`
}

// GetDLPWebRulesUrlCategoryInput is an input type that accepts GetDLPWebRulesUrlCategoryArgs and GetDLPWebRulesUrlCategoryOutput values.
// You can construct a concrete instance of `GetDLPWebRulesUrlCategoryInput` via:
//
//	GetDLPWebRulesUrlCategoryArgs{...}
type GetDLPWebRulesUrlCategoryInput interface {
	pulumi.Input

	ToGetDLPWebRulesUrlCategoryOutput() GetDLPWebRulesUrlCategoryOutput
	ToGetDLPWebRulesUrlCategoryOutputWithContext(context.Context) GetDLPWebRulesUrlCategoryOutput
}

type GetDLPWebRulesUrlCategoryArgs struct {
	Extensions pulumi.StringMapInput `pulumi:"extensions"`
	// Identifier that uniquely identifies an entity
	Id pulumi.IntInput `pulumi:"id"`
	// The DLP policy rule name.
	// rules.
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetDLPWebRulesUrlCategoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDLPWebRulesUrlCategory)(nil)).Elem()
}

func (i GetDLPWebRulesUrlCategoryArgs) ToGetDLPWebRulesUrlCategoryOutput() GetDLPWebRulesUrlCategoryOutput {
	return i.ToGetDLPWebRulesUrlCategoryOutputWithContext(context.Background())
}

func (i GetDLPWebRulesUrlCategoryArgs) ToGetDLPWebRulesUrlCategoryOutputWithContext(ctx context.Context) GetDLPWebRulesUrlCategoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDLPWebRulesUrlCategoryOutput)
}

// GetDLPWebRulesUrlCategoryArrayInput is an input type that accepts GetDLPWebRulesUrlCategoryArray and GetDLPWebRulesUrlCategoryArrayOutput values.
// You can construct a concrete instance of `GetDLPWebRulesUrlCategoryArrayInput` via:
//
//	GetDLPWebRulesUrlCategoryArray{ GetDLPWebRulesUrlCategoryArgs{...} }
type GetDLPWebRulesUrlCategoryArrayInput interface {
	pulumi.Input

	ToGetDLPWebRulesUrlCategoryArrayOutput() GetDLPWebRulesUrlCategoryArrayOutput
	ToGetDLPWebRulesUrlCategoryArrayOutputWithContext(context.Context) GetDLPWebRulesUrlCategoryArrayOutput
}

type GetDLPWebRulesUrlCategoryArray []GetDLPWebRulesUrlCategoryInput

func (GetDLPWebRulesUrlCategoryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDLPWebRulesUrlCategory)(nil)).Elem()
}

func (i GetDLPWebRulesUrlCategoryArray) ToGetDLPWebRulesUrlCategoryArrayOutput() GetDLPWebRulesUrlCategoryArrayOutput {
	return i.ToGetDLPWebRulesUrlCategoryArrayOutputWithContext(context.Background())
}

func (i GetDLPWebRulesUrlCategoryArray) ToGetDLPWebRulesUrlCategoryArrayOutputWithContext(ctx context.Context) GetDLPWebRulesUrlCategoryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDLPWebRulesUrlCategoryArrayOutput)
}

type GetDLPWebRulesUrlCategoryOutput struct{ *pulumi.OutputState }

func (GetDLPWebRulesUrlCategoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDLPWebRulesUrlCategory)(nil)).Elem()
}

func (o GetDLPWebRulesUrlCategoryOutput) ToGetDLPWebRulesUrlCategoryOutput() GetDLPWebRulesUrlCategoryOutput {
	return o
}

func (o GetDLPWebRulesUrlCategoryOutput) ToGetDLPWebRulesUrlCategoryOutputWithContext(ctx context.Context) GetDLPWebRulesUrlCategoryOutput {
	return o
}

func (o GetDLPWebRulesUrlCategoryOutput) Extensions() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetDLPWebRulesUrlCategory) map[string]string { return v.Extensions }).(pulumi.StringMapOutput)
}

// Identifier that uniquely identifies an entity
func (o GetDLPWebRulesUrlCategoryOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v GetDLPWebRulesUrlCategory) int { return v.Id }).(pulumi.IntOutput)
}

// The DLP policy rule name.
// rules.
func (o GetDLPWebRulesUrlCategoryOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetDLPWebRulesUrlCategory) string { return v.Name }).(pulumi.StringOutput)
}

type GetDLPWebRulesUrlCategoryArrayOutput struct{ *pulumi.OutputState }

func (GetDLPWebRulesUrlCategoryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDLPWebRulesUrlCategory)(nil)).Elem()
}

func (o GetDLPWebRulesUrlCategoryArrayOutput) ToGetDLPWebRulesUrlCategoryArrayOutput() GetDLPWebRulesUrlCategoryArrayOutput {
	return o
}

func (o GetDLPWebRulesUrlCategoryArrayOutput) ToGetDLPWebRulesUrlCategoryArrayOutputWithContext(ctx context.Context) GetDLPWebRulesUrlCategoryArrayOutput {
	return o
}

func (o GetDLPWebRulesUrlCategoryArrayOutput) Index(i pulumi.IntInput) GetDLPWebRulesUrlCategoryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDLPWebRulesUrlCategory {
		return vs[0].([]GetDLPWebRulesUrlCategory)[vs[1].(int)]
	}).(GetDLPWebRulesUrlCategoryOutput)
}

type GetDLPWebRulesUser struct {
	Extensions map[string]string `pulumi:"extensions"`
	// Identifier that uniquely identifies an entity
	Id int `pulumi:"id"`
	// The DLP policy rule name.
	// rules.
	Name string `pulumi:"name"`
}

// GetDLPWebRulesUserInput is an input type that accepts GetDLPWebRulesUserArgs and GetDLPWebRulesUserOutput values.
// You can construct a concrete instance of `GetDLPWebRulesUserInput` via:
//
//	GetDLPWebRulesUserArgs{...}
type GetDLPWebRulesUserInput interface {
	pulumi.Input

	ToGetDLPWebRulesUserOutput() GetDLPWebRulesUserOutput
	ToGetDLPWebRulesUserOutputWithContext(context.Context) GetDLPWebRulesUserOutput
}

type GetDLPWebRulesUserArgs struct {
	Extensions pulumi.StringMapInput `pulumi:"extensions"`
	// Identifier that uniquely identifies an entity
	Id pulumi.IntInput `pulumi:"id"`
	// The DLP policy rule name.
	// rules.
	Name pulumi.StringInput `pulumi:"name"`
}

func (GetDLPWebRulesUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDLPWebRulesUser)(nil)).Elem()
}

func (i GetDLPWebRulesUserArgs) ToGetDLPWebRulesUserOutput() GetDLPWebRulesUserOutput {
	return i.ToGetDLPWebRulesUserOutputWithContext(context.Background())
}

func (i GetDLPWebRulesUserArgs) ToGetDLPWebRulesUserOutputWithContext(ctx context.Context) GetDLPWebRulesUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDLPWebRulesUserOutput)
}

// GetDLPWebRulesUserArrayInput is an input type that accepts GetDLPWebRulesUserArray and GetDLPWebRulesUserArrayOutput values.
// You can construct a concrete instance of `GetDLPWebRulesUserArrayInput` via:
//
//	GetDLPWebRulesUserArray{ GetDLPWebRulesUserArgs{...} }
type GetDLPWebRulesUserArrayInput interface {
	pulumi.Input

	ToGetDLPWebRulesUserArrayOutput() GetDLPWebRulesUserArrayOutput
	ToGetDLPWebRulesUserArrayOutputWithContext(context.Context) GetDLPWebRulesUserArrayOutput
}

type GetDLPWebRulesUserArray []GetDLPWebRulesUserInput

func (GetDLPWebRulesUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDLPWebRulesUser)(nil)).Elem()
}

func (i GetDLPWebRulesUserArray) ToGetDLPWebRulesUserArrayOutput() GetDLPWebRulesUserArrayOutput {
	return i.ToGetDLPWebRulesUserArrayOutputWithContext(context.Background())
}

func (i GetDLPWebRulesUserArray) ToGetDLPWebRulesUserArrayOutputWithContext(ctx context.Context) GetDLPWebRulesUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetDLPWebRulesUserArrayOutput)
}

type GetDLPWebRulesUserOutput struct{ *pulumi.OutputState }

func (GetDLPWebRulesUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetDLPWebRulesUser)(nil)).Elem()
}

func (o GetDLPWebRulesUserOutput) ToGetDLPWebRulesUserOutput() GetDLPWebRulesUserOutput {
	return o
}

func (o GetDLPWebRulesUserOutput) ToGetDLPWebRulesUserOutputWithContext(ctx context.Context) GetDLPWebRulesUserOutput {
	return o
}

func (o GetDLPWebRulesUserOutput) Extensions() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetDLPWebRulesUser) map[string]string { return v.Extensions }).(pulumi.StringMapOutput)
}

// Identifier that uniquely identifies an entity
func (o GetDLPWebRulesUserOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v GetDLPWebRulesUser) int { return v.Id }).(pulumi.IntOutput)
}

// The DLP policy rule name.
// rules.
func (o GetDLPWebRulesUserOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetDLPWebRulesUser) string { return v.Name }).(pulumi.StringOutput)
}

type GetDLPWebRulesUserArrayOutput struct{ *pulumi.OutputState }

func (GetDLPWebRulesUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetDLPWebRulesUser)(nil)).Elem()
}

func (o GetDLPWebRulesUserArrayOutput) ToGetDLPWebRulesUserArrayOutput() GetDLPWebRulesUserArrayOutput {
	return o
}

func (o GetDLPWebRulesUserArrayOutput) ToGetDLPWebRulesUserArrayOutputWithContext(ctx context.Context) GetDLPWebRulesUserArrayOutput {
	return o
}

func (o GetDLPWebRulesUserArrayOutput) Index(i pulumi.IntInput) GetDLPWebRulesUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetDLPWebRulesUser {
		return vs[0].([]GetDLPWebRulesUser)[vs[1].(int)]
	}).(GetDLPWebRulesUserOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DLPDictionariesExactDataMatchDetailInput)(nil)).Elem(), DLPDictionariesExactDataMatchDetailArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DLPDictionariesExactDataMatchDetailArrayInput)(nil)).Elem(), DLPDictionariesExactDataMatchDetailArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DLPDictionariesIdmProfileMatchAccuracyInput)(nil)).Elem(), DLPDictionariesIdmProfileMatchAccuracyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DLPDictionariesIdmProfileMatchAccuracyArrayInput)(nil)).Elem(), DLPDictionariesIdmProfileMatchAccuracyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DLPDictionariesIdmProfileMatchAccuracyAdpIdmProfileInput)(nil)).Elem(), DLPDictionariesIdmProfileMatchAccuracyAdpIdmProfileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DLPDictionariesIdmProfileMatchAccuracyAdpIdmProfilePtrInput)(nil)).Elem(), DLPDictionariesIdmProfileMatchAccuracyAdpIdmProfileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DLPDictionariesPatternInput)(nil)).Elem(), DLPDictionariesPatternArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DLPDictionariesPatternArrayInput)(nil)).Elem(), DLPDictionariesPatternArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DLPDictionariesPhraseInput)(nil)).Elem(), DLPDictionariesPhraseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DLPDictionariesPhraseArrayInput)(nil)).Elem(), DLPDictionariesPhraseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DLPWebRulesAuditorInput)(nil)).Elem(), DLPWebRulesAuditorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DLPWebRulesAuditorPtrInput)(nil)).Elem(), DLPWebRulesAuditorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DLPWebRulesDepartmentsInput)(nil)).Elem(), DLPWebRulesDepartmentsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DLPWebRulesDepartmentsPtrInput)(nil)).Elem(), DLPWebRulesDepartmentsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DLPWebRulesDlpEnginesInput)(nil)).Elem(), DLPWebRulesDlpEnginesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DLPWebRulesDlpEnginesPtrInput)(nil)).Elem(), DLPWebRulesDlpEnginesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DLPWebRulesExcludedDepartmentsInput)(nil)).Elem(), DLPWebRulesExcludedDepartmentsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DLPWebRulesExcludedDepartmentsPtrInput)(nil)).Elem(), DLPWebRulesExcludedDepartmentsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DLPWebRulesExcludedGroupsInput)(nil)).Elem(), DLPWebRulesExcludedGroupsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DLPWebRulesExcludedGroupsPtrInput)(nil)).Elem(), DLPWebRulesExcludedGroupsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DLPWebRulesExcludedUsersInput)(nil)).Elem(), DLPWebRulesExcludedUsersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DLPWebRulesExcludedUsersPtrInput)(nil)).Elem(), DLPWebRulesExcludedUsersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DLPWebRulesGroupsInput)(nil)).Elem(), DLPWebRulesGroupsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DLPWebRulesGroupsPtrInput)(nil)).Elem(), DLPWebRulesGroupsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DLPWebRulesIcapServerInput)(nil)).Elem(), DLPWebRulesIcapServerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DLPWebRulesIcapServerPtrInput)(nil)).Elem(), DLPWebRulesIcapServerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DLPWebRulesLabelsInput)(nil)).Elem(), DLPWebRulesLabelsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DLPWebRulesLabelsPtrInput)(nil)).Elem(), DLPWebRulesLabelsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DLPWebRulesLocationGroupsInput)(nil)).Elem(), DLPWebRulesLocationGroupsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DLPWebRulesLocationGroupsPtrInput)(nil)).Elem(), DLPWebRulesLocationGroupsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DLPWebRulesLocationsInput)(nil)).Elem(), DLPWebRulesLocationsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DLPWebRulesLocationsPtrInput)(nil)).Elem(), DLPWebRulesLocationsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DLPWebRulesNotificationTemplateInput)(nil)).Elem(), DLPWebRulesNotificationTemplateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DLPWebRulesNotificationTemplatePtrInput)(nil)).Elem(), DLPWebRulesNotificationTemplateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DLPWebRulesTimeWindowsInput)(nil)).Elem(), DLPWebRulesTimeWindowsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DLPWebRulesTimeWindowsPtrInput)(nil)).Elem(), DLPWebRulesTimeWindowsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DLPWebRulesUrlCategoriesInput)(nil)).Elem(), DLPWebRulesUrlCategoriesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DLPWebRulesUrlCategoriesPtrInput)(nil)).Elem(), DLPWebRulesUrlCategoriesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DLPWebRulesUsersInput)(nil)).Elem(), DLPWebRulesUsersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*DLPWebRulesUsersPtrInput)(nil)).Elem(), DLPWebRulesUsersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDLPDictionariesExactDataMatchDetailInput)(nil)).Elem(), GetDLPDictionariesExactDataMatchDetailArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDLPDictionariesExactDataMatchDetailArrayInput)(nil)).Elem(), GetDLPDictionariesExactDataMatchDetailArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDLPDictionariesIdmProfileMatchAccuracyInput)(nil)).Elem(), GetDLPDictionariesIdmProfileMatchAccuracyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDLPDictionariesIdmProfileMatchAccuracyArrayInput)(nil)).Elem(), GetDLPDictionariesIdmProfileMatchAccuracyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDLPDictionariesIdmProfileMatchAccuracyAdpIdmProfileInput)(nil)).Elem(), GetDLPDictionariesIdmProfileMatchAccuracyAdpIdmProfileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDLPDictionariesIdmProfileMatchAccuracyAdpIdmProfileArrayInput)(nil)).Elem(), GetDLPDictionariesIdmProfileMatchAccuracyAdpIdmProfileArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDLPDictionariesPatternInput)(nil)).Elem(), GetDLPDictionariesPatternArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDLPDictionariesPatternArrayInput)(nil)).Elem(), GetDLPDictionariesPatternArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDLPDictionariesPhraseInput)(nil)).Elem(), GetDLPDictionariesPhraseArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDLPDictionariesPhraseArrayInput)(nil)).Elem(), GetDLPDictionariesPhraseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDLPWebRulesAuditorInput)(nil)).Elem(), GetDLPWebRulesAuditorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDLPWebRulesAuditorArrayInput)(nil)).Elem(), GetDLPWebRulesAuditorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDLPWebRulesDepartmentInput)(nil)).Elem(), GetDLPWebRulesDepartmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDLPWebRulesDepartmentArrayInput)(nil)).Elem(), GetDLPWebRulesDepartmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDLPWebRulesDlpEngineInput)(nil)).Elem(), GetDLPWebRulesDlpEngineArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDLPWebRulesDlpEngineArrayInput)(nil)).Elem(), GetDLPWebRulesDlpEngineArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDLPWebRulesExcludedDepartmentInput)(nil)).Elem(), GetDLPWebRulesExcludedDepartmentArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDLPWebRulesExcludedDepartmentArrayInput)(nil)).Elem(), GetDLPWebRulesExcludedDepartmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDLPWebRulesExcludedGroupInput)(nil)).Elem(), GetDLPWebRulesExcludedGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDLPWebRulesExcludedGroupArrayInput)(nil)).Elem(), GetDLPWebRulesExcludedGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDLPWebRulesExcludedUserInput)(nil)).Elem(), GetDLPWebRulesExcludedUserArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDLPWebRulesExcludedUserArrayInput)(nil)).Elem(), GetDLPWebRulesExcludedUserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDLPWebRulesGroupInput)(nil)).Elem(), GetDLPWebRulesGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDLPWebRulesGroupArrayInput)(nil)).Elem(), GetDLPWebRulesGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDLPWebRulesIcapServerInput)(nil)).Elem(), GetDLPWebRulesIcapServerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDLPWebRulesIcapServerArrayInput)(nil)).Elem(), GetDLPWebRulesIcapServerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDLPWebRulesLabelInput)(nil)).Elem(), GetDLPWebRulesLabelArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDLPWebRulesLabelArrayInput)(nil)).Elem(), GetDLPWebRulesLabelArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDLPWebRulesLastModifiedByInput)(nil)).Elem(), GetDLPWebRulesLastModifiedByArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDLPWebRulesLastModifiedByArrayInput)(nil)).Elem(), GetDLPWebRulesLastModifiedByArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDLPWebRulesLocationInput)(nil)).Elem(), GetDLPWebRulesLocationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDLPWebRulesLocationArrayInput)(nil)).Elem(), GetDLPWebRulesLocationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDLPWebRulesLocationGroupInput)(nil)).Elem(), GetDLPWebRulesLocationGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDLPWebRulesLocationGroupArrayInput)(nil)).Elem(), GetDLPWebRulesLocationGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDLPWebRulesNotificationTemplateInput)(nil)).Elem(), GetDLPWebRulesNotificationTemplateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDLPWebRulesNotificationTemplateArrayInput)(nil)).Elem(), GetDLPWebRulesNotificationTemplateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDLPWebRulesTimeWindowInput)(nil)).Elem(), GetDLPWebRulesTimeWindowArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDLPWebRulesTimeWindowArrayInput)(nil)).Elem(), GetDLPWebRulesTimeWindowArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDLPWebRulesUrlCategoryInput)(nil)).Elem(), GetDLPWebRulesUrlCategoryArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDLPWebRulesUrlCategoryArrayInput)(nil)).Elem(), GetDLPWebRulesUrlCategoryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDLPWebRulesUserInput)(nil)).Elem(), GetDLPWebRulesUserArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetDLPWebRulesUserArrayInput)(nil)).Elem(), GetDLPWebRulesUserArray{})
	pulumi.RegisterOutputType(DLPDictionariesExactDataMatchDetailOutput{})
	pulumi.RegisterOutputType(DLPDictionariesExactDataMatchDetailArrayOutput{})
	pulumi.RegisterOutputType(DLPDictionariesIdmProfileMatchAccuracyOutput{})
	pulumi.RegisterOutputType(DLPDictionariesIdmProfileMatchAccuracyArrayOutput{})
	pulumi.RegisterOutputType(DLPDictionariesIdmProfileMatchAccuracyAdpIdmProfileOutput{})
	pulumi.RegisterOutputType(DLPDictionariesIdmProfileMatchAccuracyAdpIdmProfilePtrOutput{})
	pulumi.RegisterOutputType(DLPDictionariesPatternOutput{})
	pulumi.RegisterOutputType(DLPDictionariesPatternArrayOutput{})
	pulumi.RegisterOutputType(DLPDictionariesPhraseOutput{})
	pulumi.RegisterOutputType(DLPDictionariesPhraseArrayOutput{})
	pulumi.RegisterOutputType(DLPWebRulesAuditorOutput{})
	pulumi.RegisterOutputType(DLPWebRulesAuditorPtrOutput{})
	pulumi.RegisterOutputType(DLPWebRulesDepartmentsOutput{})
	pulumi.RegisterOutputType(DLPWebRulesDepartmentsPtrOutput{})
	pulumi.RegisterOutputType(DLPWebRulesDlpEnginesOutput{})
	pulumi.RegisterOutputType(DLPWebRulesDlpEnginesPtrOutput{})
	pulumi.RegisterOutputType(DLPWebRulesExcludedDepartmentsOutput{})
	pulumi.RegisterOutputType(DLPWebRulesExcludedDepartmentsPtrOutput{})
	pulumi.RegisterOutputType(DLPWebRulesExcludedGroupsOutput{})
	pulumi.RegisterOutputType(DLPWebRulesExcludedGroupsPtrOutput{})
	pulumi.RegisterOutputType(DLPWebRulesExcludedUsersOutput{})
	pulumi.RegisterOutputType(DLPWebRulesExcludedUsersPtrOutput{})
	pulumi.RegisterOutputType(DLPWebRulesGroupsOutput{})
	pulumi.RegisterOutputType(DLPWebRulesGroupsPtrOutput{})
	pulumi.RegisterOutputType(DLPWebRulesIcapServerOutput{})
	pulumi.RegisterOutputType(DLPWebRulesIcapServerPtrOutput{})
	pulumi.RegisterOutputType(DLPWebRulesLabelsOutput{})
	pulumi.RegisterOutputType(DLPWebRulesLabelsPtrOutput{})
	pulumi.RegisterOutputType(DLPWebRulesLocationGroupsOutput{})
	pulumi.RegisterOutputType(DLPWebRulesLocationGroupsPtrOutput{})
	pulumi.RegisterOutputType(DLPWebRulesLocationsOutput{})
	pulumi.RegisterOutputType(DLPWebRulesLocationsPtrOutput{})
	pulumi.RegisterOutputType(DLPWebRulesNotificationTemplateOutput{})
	pulumi.RegisterOutputType(DLPWebRulesNotificationTemplatePtrOutput{})
	pulumi.RegisterOutputType(DLPWebRulesTimeWindowsOutput{})
	pulumi.RegisterOutputType(DLPWebRulesTimeWindowsPtrOutput{})
	pulumi.RegisterOutputType(DLPWebRulesUrlCategoriesOutput{})
	pulumi.RegisterOutputType(DLPWebRulesUrlCategoriesPtrOutput{})
	pulumi.RegisterOutputType(DLPWebRulesUsersOutput{})
	pulumi.RegisterOutputType(DLPWebRulesUsersPtrOutput{})
	pulumi.RegisterOutputType(GetDLPDictionariesExactDataMatchDetailOutput{})
	pulumi.RegisterOutputType(GetDLPDictionariesExactDataMatchDetailArrayOutput{})
	pulumi.RegisterOutputType(GetDLPDictionariesIdmProfileMatchAccuracyOutput{})
	pulumi.RegisterOutputType(GetDLPDictionariesIdmProfileMatchAccuracyArrayOutput{})
	pulumi.RegisterOutputType(GetDLPDictionariesIdmProfileMatchAccuracyAdpIdmProfileOutput{})
	pulumi.RegisterOutputType(GetDLPDictionariesIdmProfileMatchAccuracyAdpIdmProfileArrayOutput{})
	pulumi.RegisterOutputType(GetDLPDictionariesPatternOutput{})
	pulumi.RegisterOutputType(GetDLPDictionariesPatternArrayOutput{})
	pulumi.RegisterOutputType(GetDLPDictionariesPhraseOutput{})
	pulumi.RegisterOutputType(GetDLPDictionariesPhraseArrayOutput{})
	pulumi.RegisterOutputType(GetDLPWebRulesAuditorOutput{})
	pulumi.RegisterOutputType(GetDLPWebRulesAuditorArrayOutput{})
	pulumi.RegisterOutputType(GetDLPWebRulesDepartmentOutput{})
	pulumi.RegisterOutputType(GetDLPWebRulesDepartmentArrayOutput{})
	pulumi.RegisterOutputType(GetDLPWebRulesDlpEngineOutput{})
	pulumi.RegisterOutputType(GetDLPWebRulesDlpEngineArrayOutput{})
	pulumi.RegisterOutputType(GetDLPWebRulesExcludedDepartmentOutput{})
	pulumi.RegisterOutputType(GetDLPWebRulesExcludedDepartmentArrayOutput{})
	pulumi.RegisterOutputType(GetDLPWebRulesExcludedGroupOutput{})
	pulumi.RegisterOutputType(GetDLPWebRulesExcludedGroupArrayOutput{})
	pulumi.RegisterOutputType(GetDLPWebRulesExcludedUserOutput{})
	pulumi.RegisterOutputType(GetDLPWebRulesExcludedUserArrayOutput{})
	pulumi.RegisterOutputType(GetDLPWebRulesGroupOutput{})
	pulumi.RegisterOutputType(GetDLPWebRulesGroupArrayOutput{})
	pulumi.RegisterOutputType(GetDLPWebRulesIcapServerOutput{})
	pulumi.RegisterOutputType(GetDLPWebRulesIcapServerArrayOutput{})
	pulumi.RegisterOutputType(GetDLPWebRulesLabelOutput{})
	pulumi.RegisterOutputType(GetDLPWebRulesLabelArrayOutput{})
	pulumi.RegisterOutputType(GetDLPWebRulesLastModifiedByOutput{})
	pulumi.RegisterOutputType(GetDLPWebRulesLastModifiedByArrayOutput{})
	pulumi.RegisterOutputType(GetDLPWebRulesLocationOutput{})
	pulumi.RegisterOutputType(GetDLPWebRulesLocationArrayOutput{})
	pulumi.RegisterOutputType(GetDLPWebRulesLocationGroupOutput{})
	pulumi.RegisterOutputType(GetDLPWebRulesLocationGroupArrayOutput{})
	pulumi.RegisterOutputType(GetDLPWebRulesNotificationTemplateOutput{})
	pulumi.RegisterOutputType(GetDLPWebRulesNotificationTemplateArrayOutput{})
	pulumi.RegisterOutputType(GetDLPWebRulesTimeWindowOutput{})
	pulumi.RegisterOutputType(GetDLPWebRulesTimeWindowArrayOutput{})
	pulumi.RegisterOutputType(GetDLPWebRulesUrlCategoryOutput{})
	pulumi.RegisterOutputType(GetDLPWebRulesUrlCategoryArrayOutput{})
	pulumi.RegisterOutputType(GetDLPWebRulesUserOutput{})
	pulumi.RegisterOutputType(GetDLPWebRulesUserArrayOutput{})
}
