// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package dlp

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The **zia_dlp_web_rules** resource allows the creation and management of ZIA DLP Web Rules in the Zscaler Internet Access cloud or via the API.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/zscaler/pulumi-zia/sdk/go/zia/DLP"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := DLP.NewDLPWebRules(ctx, "test", &DLP.DLPWebRulesArgs{
//				Action: pulumi.String("ALLOW"),
//				CloudApplications: pulumi.StringArray{
//					pulumi.String("ZENDESK"),
//					pulumi.String("LUCKY_ORANGE"),
//					pulumi.String("MICROSOFT_POWERAPPS"),
//					pulumi.String("MICROSOFTLIVEMEETING"),
//				},
//				Description: pulumi.String("Test"),
//				FileTypes:   pulumi.StringArray{},
//				MatchOnly:   pulumi.Bool(false),
//				MinSize:     pulumi.Int(20),
//				OcrEnabled:  pulumi.Bool(false),
//				Order:       pulumi.Int(1),
//				Protocols: pulumi.StringArray{
//					pulumi.String("HTTPS_RULE"),
//					pulumi.String("HTTP_RULE"),
//				},
//				Rank:                     pulumi.Int(7),
//				State:                    pulumi.String("ENABLED"),
//				WithoutContentInspection: pulumi.Bool(false),
//				ZscalerIncidentReciever:  pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type DLPWebRules struct {
	pulumi.CustomResourceState

	// The access privilege for this DLP policy rule based on the admin's state. The supported values are:
	AccessControl pulumi.StringOutput `pulumi:"accessControl"`
	// The action taken when traffic matches the DLP policy rule criteria. The supported values are:
	Action pulumi.StringOutput `pulumi:"action"`
	// The auditor to which the DLP policy rule must be applied.
	Auditor DLPWebRulesAuditorOutput `pulumi:"auditor"`
	// The list of cloud applications to which the DLP policy rule must be applied. For the complete list of supported cloud applications refer to the  [ZIA API documentation](https://help.zscaler.com/zia/data-loss-prevention#/webDlpRules-post)
	CloudApplications pulumi.StringArrayOutput `pulumi:"cloudApplications"`
	// The name-ID pairs of the departments that are excluded from the DLP policy rule.
	Departments DLPWebRulesDepartmentsOutput `pulumi:"departments"`
	// The description of the DLP policy rule.
	Description pulumi.StringOutput `pulumi:"description"`
	// The list of DLP engines to which the DLP policy rule must be applied.
	DlpEngines DLPWebRulesDlpEnginesOutput `pulumi:"dlpEngines"`
	// The name-ID pairs of the groups that are excluded from the DLP policy rule. Maximum of up to `256` departments.
	ExcludedDepartments DLPWebRulesExcludedDepartmentsOutput `pulumi:"excludedDepartments"`
	// The name-ID pairs of the groups that are excluded from the DLP policy rule. Maximum of up to `256` groups.
	ExcludedGroups DLPWebRulesExcludedGroupsOutput `pulumi:"excludedGroups"`
	// The name-ID pairs of the users that are excluded from the DLP policy rule. Maximum of up to `256` users.
	ExcludedUsers DLPWebRulesExcludedUsersOutput `pulumi:"excludedUsers"`
	// The email address of an external auditor to whom DLP email notifications are sent.
	ExternalAuditorEmail pulumi.StringOutput `pulumi:"externalAuditorEmail"`
	// The list of file types to which the DLP policy rule must be applied. For the complete list of supported file types refer to the  [ZIA API documentation](https://help.zscaler.com/zia/data-loss-prevention#/webDlpRules-post)
	FileTypes pulumi.StringArrayOutput `pulumi:"fileTypes"`
	// The Name-ID pairs of groups to which the DLP policy rule must be applied. Maximum of up to `8` groups. When not used it implies `Any` to apply the rule to all groups.
	Groups DLPWebRulesGroupsOutput `pulumi:"groups"`
	// The DLP server, using ICAP, to which the transaction content is forwarded.
	IcapServer DLPWebRulesIcapServerOutput `pulumi:"icapServer"`
	// The Name-ID pairs of rule labels associated to the DLP policy rule.
	Labels DLPWebRulesLabelsOutput `pulumi:"labels"`
	// The Name-ID pairs of locations groups to which the DLP policy rule must be applied. Maximum of up to `32` location groups. When not used it implies `Any` to apply the rule to all location groups.
	LocationGroups DLPWebRulesLocationGroupsOutput `pulumi:"locationGroups"`
	// The Name-ID pairs of locations to which the DLP policy rule must be applied. Maximum of up to `8` locations. When not used it implies `Any` to apply the rule to all locations.
	Locations DLPWebRulesLocationsOutput `pulumi:"locations"`
	// The match only criteria for DLP engines.
	MatchOnly pulumi.BoolOutput `pulumi:"matchOnly"`
	// The minimum file size (in KB) used for evaluation of the DLP policy rule.
	MinSize pulumi.IntOutput `pulumi:"minSize"`
	// The DLP policy rule name.
	Name pulumi.StringOutput `pulumi:"name"`
	// The template used for DLP notification emails.
	NotificationTemplate DLPWebRulesNotificationTemplateOutput `pulumi:"notificationTemplate"`
	// Enables or disables image file scanning.
	OcrEnabled pulumi.BoolOutput `pulumi:"ocrEnabled"`
	// The rule order of execution for the DLP policy rule with respect to other rules.
	Order pulumi.IntOutput `pulumi:"order"`
	// The protocol criteria specified for the DLP policy rule.
	Protocols pulumi.StringArrayOutput `pulumi:"protocols"`
	// Admin rank of the admin who creates this rule
	Rank   pulumi.IntPtrOutput `pulumi:"rank"`
	RuleId pulumi.IntOutput    `pulumi:"ruleId"`
	// Enables or disables the DLP policy rule.. The supported values are:
	State pulumi.StringOutput `pulumi:"state"`
	// The Name-ID pairs of time windows to which the DLP policy rule must be applied. Maximum of up to `2` time intervals. When not used it implies `always` to apply the rule to all time intervals.
	TimeWindows DLPWebRulesTimeWindowsOutput `pulumi:"timeWindows"`
	// The list of URL categories to which the DLP policy rule must be applied.
	UrlCategories DLPWebRulesUrlCategoriesOutput `pulumi:"urlCategories"`
	// The Name-ID pairs of users to which the DLP policy rule must be applied. Maximum of up to `4` users. When not used it implies `Any` to apply the rule to all users.
	Users DLPWebRulesUsersOutput `pulumi:"users"`
	// Indicates a DLP policy rule without content inspection, when the value is set to true.
	WithoutContentInspection pulumi.BoolOutput `pulumi:"withoutContentInspection"`
	// Indicates whether a Zscaler Incident Receiver is associated to the DLP policy rule.
	ZscalerIncidentReciever pulumi.BoolOutput `pulumi:"zscalerIncidentReciever"`
}

// NewDLPWebRules registers a new resource with the given unique name, arguments, and options.
func NewDLPWebRules(ctx *pulumi.Context,
	name string, args *DLPWebRulesArgs, opts ...pulumi.ResourceOption) (*DLPWebRules, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Order == nil {
		return nil, errors.New("invalid value for required argument 'Order'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource DLPWebRules
	err := ctx.RegisterResource("zia:DLP/dLPWebRules:DLPWebRules", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDLPWebRules gets an existing DLPWebRules resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDLPWebRules(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DLPWebRulesState, opts ...pulumi.ResourceOption) (*DLPWebRules, error) {
	var resource DLPWebRules
	err := ctx.ReadResource("zia:DLP/dLPWebRules:DLPWebRules", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DLPWebRules resources.
type dlpwebRulesState struct {
	// The access privilege for this DLP policy rule based on the admin's state. The supported values are:
	AccessControl *string `pulumi:"accessControl"`
	// The action taken when traffic matches the DLP policy rule criteria. The supported values are:
	Action *string `pulumi:"action"`
	// The auditor to which the DLP policy rule must be applied.
	Auditor *DLPWebRulesAuditor `pulumi:"auditor"`
	// The list of cloud applications to which the DLP policy rule must be applied. For the complete list of supported cloud applications refer to the  [ZIA API documentation](https://help.zscaler.com/zia/data-loss-prevention#/webDlpRules-post)
	CloudApplications []string `pulumi:"cloudApplications"`
	// The name-ID pairs of the departments that are excluded from the DLP policy rule.
	Departments *DLPWebRulesDepartments `pulumi:"departments"`
	// The description of the DLP policy rule.
	Description *string `pulumi:"description"`
	// The list of DLP engines to which the DLP policy rule must be applied.
	DlpEngines *DLPWebRulesDlpEngines `pulumi:"dlpEngines"`
	// The name-ID pairs of the groups that are excluded from the DLP policy rule. Maximum of up to `256` departments.
	ExcludedDepartments *DLPWebRulesExcludedDepartments `pulumi:"excludedDepartments"`
	// The name-ID pairs of the groups that are excluded from the DLP policy rule. Maximum of up to `256` groups.
	ExcludedGroups *DLPWebRulesExcludedGroups `pulumi:"excludedGroups"`
	// The name-ID pairs of the users that are excluded from the DLP policy rule. Maximum of up to `256` users.
	ExcludedUsers *DLPWebRulesExcludedUsers `pulumi:"excludedUsers"`
	// The email address of an external auditor to whom DLP email notifications are sent.
	ExternalAuditorEmail *string `pulumi:"externalAuditorEmail"`
	// The list of file types to which the DLP policy rule must be applied. For the complete list of supported file types refer to the  [ZIA API documentation](https://help.zscaler.com/zia/data-loss-prevention#/webDlpRules-post)
	FileTypes []string `pulumi:"fileTypes"`
	// The Name-ID pairs of groups to which the DLP policy rule must be applied. Maximum of up to `8` groups. When not used it implies `Any` to apply the rule to all groups.
	Groups *DLPWebRulesGroups `pulumi:"groups"`
	// The DLP server, using ICAP, to which the transaction content is forwarded.
	IcapServer *DLPWebRulesIcapServer `pulumi:"icapServer"`
	// The Name-ID pairs of rule labels associated to the DLP policy rule.
	Labels *DLPWebRulesLabels `pulumi:"labels"`
	// The Name-ID pairs of locations groups to which the DLP policy rule must be applied. Maximum of up to `32` location groups. When not used it implies `Any` to apply the rule to all location groups.
	LocationGroups *DLPWebRulesLocationGroups `pulumi:"locationGroups"`
	// The Name-ID pairs of locations to which the DLP policy rule must be applied. Maximum of up to `8` locations. When not used it implies `Any` to apply the rule to all locations.
	Locations *DLPWebRulesLocations `pulumi:"locations"`
	// The match only criteria for DLP engines.
	MatchOnly *bool `pulumi:"matchOnly"`
	// The minimum file size (in KB) used for evaluation of the DLP policy rule.
	MinSize *int `pulumi:"minSize"`
	// The DLP policy rule name.
	Name *string `pulumi:"name"`
	// The template used for DLP notification emails.
	NotificationTemplate *DLPWebRulesNotificationTemplate `pulumi:"notificationTemplate"`
	// Enables or disables image file scanning.
	OcrEnabled *bool `pulumi:"ocrEnabled"`
	// The rule order of execution for the DLP policy rule with respect to other rules.
	Order *int `pulumi:"order"`
	// The protocol criteria specified for the DLP policy rule.
	Protocols []string `pulumi:"protocols"`
	// Admin rank of the admin who creates this rule
	Rank   *int `pulumi:"rank"`
	RuleId *int `pulumi:"ruleId"`
	// Enables or disables the DLP policy rule.. The supported values are:
	State *string `pulumi:"state"`
	// The Name-ID pairs of time windows to which the DLP policy rule must be applied. Maximum of up to `2` time intervals. When not used it implies `always` to apply the rule to all time intervals.
	TimeWindows *DLPWebRulesTimeWindows `pulumi:"timeWindows"`
	// The list of URL categories to which the DLP policy rule must be applied.
	UrlCategories *DLPWebRulesUrlCategories `pulumi:"urlCategories"`
	// The Name-ID pairs of users to which the DLP policy rule must be applied. Maximum of up to `4` users. When not used it implies `Any` to apply the rule to all users.
	Users *DLPWebRulesUsers `pulumi:"users"`
	// Indicates a DLP policy rule without content inspection, when the value is set to true.
	WithoutContentInspection *bool `pulumi:"withoutContentInspection"`
	// Indicates whether a Zscaler Incident Receiver is associated to the DLP policy rule.
	ZscalerIncidentReciever *bool `pulumi:"zscalerIncidentReciever"`
}

type DLPWebRulesState struct {
	// The access privilege for this DLP policy rule based on the admin's state. The supported values are:
	AccessControl pulumi.StringPtrInput
	// The action taken when traffic matches the DLP policy rule criteria. The supported values are:
	Action pulumi.StringPtrInput
	// The auditor to which the DLP policy rule must be applied.
	Auditor DLPWebRulesAuditorPtrInput
	// The list of cloud applications to which the DLP policy rule must be applied. For the complete list of supported cloud applications refer to the  [ZIA API documentation](https://help.zscaler.com/zia/data-loss-prevention#/webDlpRules-post)
	CloudApplications pulumi.StringArrayInput
	// The name-ID pairs of the departments that are excluded from the DLP policy rule.
	Departments DLPWebRulesDepartmentsPtrInput
	// The description of the DLP policy rule.
	Description pulumi.StringPtrInput
	// The list of DLP engines to which the DLP policy rule must be applied.
	DlpEngines DLPWebRulesDlpEnginesPtrInput
	// The name-ID pairs of the groups that are excluded from the DLP policy rule. Maximum of up to `256` departments.
	ExcludedDepartments DLPWebRulesExcludedDepartmentsPtrInput
	// The name-ID pairs of the groups that are excluded from the DLP policy rule. Maximum of up to `256` groups.
	ExcludedGroups DLPWebRulesExcludedGroupsPtrInput
	// The name-ID pairs of the users that are excluded from the DLP policy rule. Maximum of up to `256` users.
	ExcludedUsers DLPWebRulesExcludedUsersPtrInput
	// The email address of an external auditor to whom DLP email notifications are sent.
	ExternalAuditorEmail pulumi.StringPtrInput
	// The list of file types to which the DLP policy rule must be applied. For the complete list of supported file types refer to the  [ZIA API documentation](https://help.zscaler.com/zia/data-loss-prevention#/webDlpRules-post)
	FileTypes pulumi.StringArrayInput
	// The Name-ID pairs of groups to which the DLP policy rule must be applied. Maximum of up to `8` groups. When not used it implies `Any` to apply the rule to all groups.
	Groups DLPWebRulesGroupsPtrInput
	// The DLP server, using ICAP, to which the transaction content is forwarded.
	IcapServer DLPWebRulesIcapServerPtrInput
	// The Name-ID pairs of rule labels associated to the DLP policy rule.
	Labels DLPWebRulesLabelsPtrInput
	// The Name-ID pairs of locations groups to which the DLP policy rule must be applied. Maximum of up to `32` location groups. When not used it implies `Any` to apply the rule to all location groups.
	LocationGroups DLPWebRulesLocationGroupsPtrInput
	// The Name-ID pairs of locations to which the DLP policy rule must be applied. Maximum of up to `8` locations. When not used it implies `Any` to apply the rule to all locations.
	Locations DLPWebRulesLocationsPtrInput
	// The match only criteria for DLP engines.
	MatchOnly pulumi.BoolPtrInput
	// The minimum file size (in KB) used for evaluation of the DLP policy rule.
	MinSize pulumi.IntPtrInput
	// The DLP policy rule name.
	Name pulumi.StringPtrInput
	// The template used for DLP notification emails.
	NotificationTemplate DLPWebRulesNotificationTemplatePtrInput
	// Enables or disables image file scanning.
	OcrEnabled pulumi.BoolPtrInput
	// The rule order of execution for the DLP policy rule with respect to other rules.
	Order pulumi.IntPtrInput
	// The protocol criteria specified for the DLP policy rule.
	Protocols pulumi.StringArrayInput
	// Admin rank of the admin who creates this rule
	Rank   pulumi.IntPtrInput
	RuleId pulumi.IntPtrInput
	// Enables or disables the DLP policy rule.. The supported values are:
	State pulumi.StringPtrInput
	// The Name-ID pairs of time windows to which the DLP policy rule must be applied. Maximum of up to `2` time intervals. When not used it implies `always` to apply the rule to all time intervals.
	TimeWindows DLPWebRulesTimeWindowsPtrInput
	// The list of URL categories to which the DLP policy rule must be applied.
	UrlCategories DLPWebRulesUrlCategoriesPtrInput
	// The Name-ID pairs of users to which the DLP policy rule must be applied. Maximum of up to `4` users. When not used it implies `Any` to apply the rule to all users.
	Users DLPWebRulesUsersPtrInput
	// Indicates a DLP policy rule without content inspection, when the value is set to true.
	WithoutContentInspection pulumi.BoolPtrInput
	// Indicates whether a Zscaler Incident Receiver is associated to the DLP policy rule.
	ZscalerIncidentReciever pulumi.BoolPtrInput
}

func (DLPWebRulesState) ElementType() reflect.Type {
	return reflect.TypeOf((*dlpwebRulesState)(nil)).Elem()
}

type dlpwebRulesArgs struct {
	// The access privilege for this DLP policy rule based on the admin's state. The supported values are:
	AccessControl *string `pulumi:"accessControl"`
	// The action taken when traffic matches the DLP policy rule criteria. The supported values are:
	Action *string `pulumi:"action"`
	// The auditor to which the DLP policy rule must be applied.
	Auditor *DLPWebRulesAuditor `pulumi:"auditor"`
	// The list of cloud applications to which the DLP policy rule must be applied. For the complete list of supported cloud applications refer to the  [ZIA API documentation](https://help.zscaler.com/zia/data-loss-prevention#/webDlpRules-post)
	CloudApplications []string `pulumi:"cloudApplications"`
	// The name-ID pairs of the departments that are excluded from the DLP policy rule.
	Departments *DLPWebRulesDepartments `pulumi:"departments"`
	// The description of the DLP policy rule.
	Description *string `pulumi:"description"`
	// The list of DLP engines to which the DLP policy rule must be applied.
	DlpEngines *DLPWebRulesDlpEngines `pulumi:"dlpEngines"`
	// The name-ID pairs of the groups that are excluded from the DLP policy rule. Maximum of up to `256` departments.
	ExcludedDepartments *DLPWebRulesExcludedDepartments `pulumi:"excludedDepartments"`
	// The name-ID pairs of the groups that are excluded from the DLP policy rule. Maximum of up to `256` groups.
	ExcludedGroups *DLPWebRulesExcludedGroups `pulumi:"excludedGroups"`
	// The name-ID pairs of the users that are excluded from the DLP policy rule. Maximum of up to `256` users.
	ExcludedUsers *DLPWebRulesExcludedUsers `pulumi:"excludedUsers"`
	// The email address of an external auditor to whom DLP email notifications are sent.
	ExternalAuditorEmail *string `pulumi:"externalAuditorEmail"`
	// The list of file types to which the DLP policy rule must be applied. For the complete list of supported file types refer to the  [ZIA API documentation](https://help.zscaler.com/zia/data-loss-prevention#/webDlpRules-post)
	FileTypes []string `pulumi:"fileTypes"`
	// The Name-ID pairs of groups to which the DLP policy rule must be applied. Maximum of up to `8` groups. When not used it implies `Any` to apply the rule to all groups.
	Groups *DLPWebRulesGroups `pulumi:"groups"`
	// The DLP server, using ICAP, to which the transaction content is forwarded.
	IcapServer *DLPWebRulesIcapServer `pulumi:"icapServer"`
	// The Name-ID pairs of rule labels associated to the DLP policy rule.
	Labels *DLPWebRulesLabels `pulumi:"labels"`
	// The Name-ID pairs of locations groups to which the DLP policy rule must be applied. Maximum of up to `32` location groups. When not used it implies `Any` to apply the rule to all location groups.
	LocationGroups *DLPWebRulesLocationGroups `pulumi:"locationGroups"`
	// The Name-ID pairs of locations to which the DLP policy rule must be applied. Maximum of up to `8` locations. When not used it implies `Any` to apply the rule to all locations.
	Locations *DLPWebRulesLocations `pulumi:"locations"`
	// The match only criteria for DLP engines.
	MatchOnly *bool `pulumi:"matchOnly"`
	// The minimum file size (in KB) used for evaluation of the DLP policy rule.
	MinSize *int `pulumi:"minSize"`
	// The DLP policy rule name.
	Name *string `pulumi:"name"`
	// The template used for DLP notification emails.
	NotificationTemplate *DLPWebRulesNotificationTemplate `pulumi:"notificationTemplate"`
	// Enables or disables image file scanning.
	OcrEnabled *bool `pulumi:"ocrEnabled"`
	// The rule order of execution for the DLP policy rule with respect to other rules.
	Order int `pulumi:"order"`
	// The protocol criteria specified for the DLP policy rule.
	Protocols []string `pulumi:"protocols"`
	// Admin rank of the admin who creates this rule
	Rank *int `pulumi:"rank"`
	// Enables or disables the DLP policy rule.. The supported values are:
	State *string `pulumi:"state"`
	// The Name-ID pairs of time windows to which the DLP policy rule must be applied. Maximum of up to `2` time intervals. When not used it implies `always` to apply the rule to all time intervals.
	TimeWindows *DLPWebRulesTimeWindows `pulumi:"timeWindows"`
	// The list of URL categories to which the DLP policy rule must be applied.
	UrlCategories *DLPWebRulesUrlCategories `pulumi:"urlCategories"`
	// The Name-ID pairs of users to which the DLP policy rule must be applied. Maximum of up to `4` users. When not used it implies `Any` to apply the rule to all users.
	Users *DLPWebRulesUsers `pulumi:"users"`
	// Indicates a DLP policy rule without content inspection, when the value is set to true.
	WithoutContentInspection *bool `pulumi:"withoutContentInspection"`
	// Indicates whether a Zscaler Incident Receiver is associated to the DLP policy rule.
	ZscalerIncidentReciever *bool `pulumi:"zscalerIncidentReciever"`
}

// The set of arguments for constructing a DLPWebRules resource.
type DLPWebRulesArgs struct {
	// The access privilege for this DLP policy rule based on the admin's state. The supported values are:
	AccessControl pulumi.StringPtrInput
	// The action taken when traffic matches the DLP policy rule criteria. The supported values are:
	Action pulumi.StringPtrInput
	// The auditor to which the DLP policy rule must be applied.
	Auditor DLPWebRulesAuditorPtrInput
	// The list of cloud applications to which the DLP policy rule must be applied. For the complete list of supported cloud applications refer to the  [ZIA API documentation](https://help.zscaler.com/zia/data-loss-prevention#/webDlpRules-post)
	CloudApplications pulumi.StringArrayInput
	// The name-ID pairs of the departments that are excluded from the DLP policy rule.
	Departments DLPWebRulesDepartmentsPtrInput
	// The description of the DLP policy rule.
	Description pulumi.StringPtrInput
	// The list of DLP engines to which the DLP policy rule must be applied.
	DlpEngines DLPWebRulesDlpEnginesPtrInput
	// The name-ID pairs of the groups that are excluded from the DLP policy rule. Maximum of up to `256` departments.
	ExcludedDepartments DLPWebRulesExcludedDepartmentsPtrInput
	// The name-ID pairs of the groups that are excluded from the DLP policy rule. Maximum of up to `256` groups.
	ExcludedGroups DLPWebRulesExcludedGroupsPtrInput
	// The name-ID pairs of the users that are excluded from the DLP policy rule. Maximum of up to `256` users.
	ExcludedUsers DLPWebRulesExcludedUsersPtrInput
	// The email address of an external auditor to whom DLP email notifications are sent.
	ExternalAuditorEmail pulumi.StringPtrInput
	// The list of file types to which the DLP policy rule must be applied. For the complete list of supported file types refer to the  [ZIA API documentation](https://help.zscaler.com/zia/data-loss-prevention#/webDlpRules-post)
	FileTypes pulumi.StringArrayInput
	// The Name-ID pairs of groups to which the DLP policy rule must be applied. Maximum of up to `8` groups. When not used it implies `Any` to apply the rule to all groups.
	Groups DLPWebRulesGroupsPtrInput
	// The DLP server, using ICAP, to which the transaction content is forwarded.
	IcapServer DLPWebRulesIcapServerPtrInput
	// The Name-ID pairs of rule labels associated to the DLP policy rule.
	Labels DLPWebRulesLabelsPtrInput
	// The Name-ID pairs of locations groups to which the DLP policy rule must be applied. Maximum of up to `32` location groups. When not used it implies `Any` to apply the rule to all location groups.
	LocationGroups DLPWebRulesLocationGroupsPtrInput
	// The Name-ID pairs of locations to which the DLP policy rule must be applied. Maximum of up to `8` locations. When not used it implies `Any` to apply the rule to all locations.
	Locations DLPWebRulesLocationsPtrInput
	// The match only criteria for DLP engines.
	MatchOnly pulumi.BoolPtrInput
	// The minimum file size (in KB) used for evaluation of the DLP policy rule.
	MinSize pulumi.IntPtrInput
	// The DLP policy rule name.
	Name pulumi.StringPtrInput
	// The template used for DLP notification emails.
	NotificationTemplate DLPWebRulesNotificationTemplatePtrInput
	// Enables or disables image file scanning.
	OcrEnabled pulumi.BoolPtrInput
	// The rule order of execution for the DLP policy rule with respect to other rules.
	Order pulumi.IntInput
	// The protocol criteria specified for the DLP policy rule.
	Protocols pulumi.StringArrayInput
	// Admin rank of the admin who creates this rule
	Rank pulumi.IntPtrInput
	// Enables or disables the DLP policy rule.. The supported values are:
	State pulumi.StringPtrInput
	// The Name-ID pairs of time windows to which the DLP policy rule must be applied. Maximum of up to `2` time intervals. When not used it implies `always` to apply the rule to all time intervals.
	TimeWindows DLPWebRulesTimeWindowsPtrInput
	// The list of URL categories to which the DLP policy rule must be applied.
	UrlCategories DLPWebRulesUrlCategoriesPtrInput
	// The Name-ID pairs of users to which the DLP policy rule must be applied. Maximum of up to `4` users. When not used it implies `Any` to apply the rule to all users.
	Users DLPWebRulesUsersPtrInput
	// Indicates a DLP policy rule without content inspection, when the value is set to true.
	WithoutContentInspection pulumi.BoolPtrInput
	// Indicates whether a Zscaler Incident Receiver is associated to the DLP policy rule.
	ZscalerIncidentReciever pulumi.BoolPtrInput
}

func (DLPWebRulesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dlpwebRulesArgs)(nil)).Elem()
}

type DLPWebRulesInput interface {
	pulumi.Input

	ToDLPWebRulesOutput() DLPWebRulesOutput
	ToDLPWebRulesOutputWithContext(ctx context.Context) DLPWebRulesOutput
}

func (*DLPWebRules) ElementType() reflect.Type {
	return reflect.TypeOf((**DLPWebRules)(nil)).Elem()
}

func (i *DLPWebRules) ToDLPWebRulesOutput() DLPWebRulesOutput {
	return i.ToDLPWebRulesOutputWithContext(context.Background())
}

func (i *DLPWebRules) ToDLPWebRulesOutputWithContext(ctx context.Context) DLPWebRulesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DLPWebRulesOutput)
}

// DLPWebRulesArrayInput is an input type that accepts DLPWebRulesArray and DLPWebRulesArrayOutput values.
// You can construct a concrete instance of `DLPWebRulesArrayInput` via:
//
//	DLPWebRulesArray{ DLPWebRulesArgs{...} }
type DLPWebRulesArrayInput interface {
	pulumi.Input

	ToDLPWebRulesArrayOutput() DLPWebRulesArrayOutput
	ToDLPWebRulesArrayOutputWithContext(context.Context) DLPWebRulesArrayOutput
}

type DLPWebRulesArray []DLPWebRulesInput

func (DLPWebRulesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DLPWebRules)(nil)).Elem()
}

func (i DLPWebRulesArray) ToDLPWebRulesArrayOutput() DLPWebRulesArrayOutput {
	return i.ToDLPWebRulesArrayOutputWithContext(context.Background())
}

func (i DLPWebRulesArray) ToDLPWebRulesArrayOutputWithContext(ctx context.Context) DLPWebRulesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DLPWebRulesArrayOutput)
}

// DLPWebRulesMapInput is an input type that accepts DLPWebRulesMap and DLPWebRulesMapOutput values.
// You can construct a concrete instance of `DLPWebRulesMapInput` via:
//
//	DLPWebRulesMap{ "key": DLPWebRulesArgs{...} }
type DLPWebRulesMapInput interface {
	pulumi.Input

	ToDLPWebRulesMapOutput() DLPWebRulesMapOutput
	ToDLPWebRulesMapOutputWithContext(context.Context) DLPWebRulesMapOutput
}

type DLPWebRulesMap map[string]DLPWebRulesInput

func (DLPWebRulesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DLPWebRules)(nil)).Elem()
}

func (i DLPWebRulesMap) ToDLPWebRulesMapOutput() DLPWebRulesMapOutput {
	return i.ToDLPWebRulesMapOutputWithContext(context.Background())
}

func (i DLPWebRulesMap) ToDLPWebRulesMapOutputWithContext(ctx context.Context) DLPWebRulesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DLPWebRulesMapOutput)
}

type DLPWebRulesOutput struct{ *pulumi.OutputState }

func (DLPWebRulesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DLPWebRules)(nil)).Elem()
}

func (o DLPWebRulesOutput) ToDLPWebRulesOutput() DLPWebRulesOutput {
	return o
}

func (o DLPWebRulesOutput) ToDLPWebRulesOutputWithContext(ctx context.Context) DLPWebRulesOutput {
	return o
}

// The access privilege for this DLP policy rule based on the admin's state. The supported values are:
func (o DLPWebRulesOutput) AccessControl() pulumi.StringOutput {
	return o.ApplyT(func(v *DLPWebRules) pulumi.StringOutput { return v.AccessControl }).(pulumi.StringOutput)
}

// The action taken when traffic matches the DLP policy rule criteria. The supported values are:
func (o DLPWebRulesOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v *DLPWebRules) pulumi.StringOutput { return v.Action }).(pulumi.StringOutput)
}

// The auditor to which the DLP policy rule must be applied.
func (o DLPWebRulesOutput) Auditor() DLPWebRulesAuditorOutput {
	return o.ApplyT(func(v *DLPWebRules) DLPWebRulesAuditorOutput { return v.Auditor }).(DLPWebRulesAuditorOutput)
}

// The list of cloud applications to which the DLP policy rule must be applied. For the complete list of supported cloud applications refer to the  [ZIA API documentation](https://help.zscaler.com/zia/data-loss-prevention#/webDlpRules-post)
func (o DLPWebRulesOutput) CloudApplications() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DLPWebRules) pulumi.StringArrayOutput { return v.CloudApplications }).(pulumi.StringArrayOutput)
}

// The name-ID pairs of the departments that are excluded from the DLP policy rule.
func (o DLPWebRulesOutput) Departments() DLPWebRulesDepartmentsOutput {
	return o.ApplyT(func(v *DLPWebRules) DLPWebRulesDepartmentsOutput { return v.Departments }).(DLPWebRulesDepartmentsOutput)
}

// The description of the DLP policy rule.
func (o DLPWebRulesOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *DLPWebRules) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// The list of DLP engines to which the DLP policy rule must be applied.
func (o DLPWebRulesOutput) DlpEngines() DLPWebRulesDlpEnginesOutput {
	return o.ApplyT(func(v *DLPWebRules) DLPWebRulesDlpEnginesOutput { return v.DlpEngines }).(DLPWebRulesDlpEnginesOutput)
}

// The name-ID pairs of the groups that are excluded from the DLP policy rule. Maximum of up to `256` departments.
func (o DLPWebRulesOutput) ExcludedDepartments() DLPWebRulesExcludedDepartmentsOutput {
	return o.ApplyT(func(v *DLPWebRules) DLPWebRulesExcludedDepartmentsOutput { return v.ExcludedDepartments }).(DLPWebRulesExcludedDepartmentsOutput)
}

// The name-ID pairs of the groups that are excluded from the DLP policy rule. Maximum of up to `256` groups.
func (o DLPWebRulesOutput) ExcludedGroups() DLPWebRulesExcludedGroupsOutput {
	return o.ApplyT(func(v *DLPWebRules) DLPWebRulesExcludedGroupsOutput { return v.ExcludedGroups }).(DLPWebRulesExcludedGroupsOutput)
}

// The name-ID pairs of the users that are excluded from the DLP policy rule. Maximum of up to `256` users.
func (o DLPWebRulesOutput) ExcludedUsers() DLPWebRulesExcludedUsersOutput {
	return o.ApplyT(func(v *DLPWebRules) DLPWebRulesExcludedUsersOutput { return v.ExcludedUsers }).(DLPWebRulesExcludedUsersOutput)
}

// The email address of an external auditor to whom DLP email notifications are sent.
func (o DLPWebRulesOutput) ExternalAuditorEmail() pulumi.StringOutput {
	return o.ApplyT(func(v *DLPWebRules) pulumi.StringOutput { return v.ExternalAuditorEmail }).(pulumi.StringOutput)
}

// The list of file types to which the DLP policy rule must be applied. For the complete list of supported file types refer to the  [ZIA API documentation](https://help.zscaler.com/zia/data-loss-prevention#/webDlpRules-post)
func (o DLPWebRulesOutput) FileTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DLPWebRules) pulumi.StringArrayOutput { return v.FileTypes }).(pulumi.StringArrayOutput)
}

// The Name-ID pairs of groups to which the DLP policy rule must be applied. Maximum of up to `8` groups. When not used it implies `Any` to apply the rule to all groups.
func (o DLPWebRulesOutput) Groups() DLPWebRulesGroupsOutput {
	return o.ApplyT(func(v *DLPWebRules) DLPWebRulesGroupsOutput { return v.Groups }).(DLPWebRulesGroupsOutput)
}

// The DLP server, using ICAP, to which the transaction content is forwarded.
func (o DLPWebRulesOutput) IcapServer() DLPWebRulesIcapServerOutput {
	return o.ApplyT(func(v *DLPWebRules) DLPWebRulesIcapServerOutput { return v.IcapServer }).(DLPWebRulesIcapServerOutput)
}

// The Name-ID pairs of rule labels associated to the DLP policy rule.
func (o DLPWebRulesOutput) Labels() DLPWebRulesLabelsOutput {
	return o.ApplyT(func(v *DLPWebRules) DLPWebRulesLabelsOutput { return v.Labels }).(DLPWebRulesLabelsOutput)
}

// The Name-ID pairs of locations groups to which the DLP policy rule must be applied. Maximum of up to `32` location groups. When not used it implies `Any` to apply the rule to all location groups.
func (o DLPWebRulesOutput) LocationGroups() DLPWebRulesLocationGroupsOutput {
	return o.ApplyT(func(v *DLPWebRules) DLPWebRulesLocationGroupsOutput { return v.LocationGroups }).(DLPWebRulesLocationGroupsOutput)
}

// The Name-ID pairs of locations to which the DLP policy rule must be applied. Maximum of up to `8` locations. When not used it implies `Any` to apply the rule to all locations.
func (o DLPWebRulesOutput) Locations() DLPWebRulesLocationsOutput {
	return o.ApplyT(func(v *DLPWebRules) DLPWebRulesLocationsOutput { return v.Locations }).(DLPWebRulesLocationsOutput)
}

// The match only criteria for DLP engines.
func (o DLPWebRulesOutput) MatchOnly() pulumi.BoolOutput {
	return o.ApplyT(func(v *DLPWebRules) pulumi.BoolOutput { return v.MatchOnly }).(pulumi.BoolOutput)
}

// The minimum file size (in KB) used for evaluation of the DLP policy rule.
func (o DLPWebRulesOutput) MinSize() pulumi.IntOutput {
	return o.ApplyT(func(v *DLPWebRules) pulumi.IntOutput { return v.MinSize }).(pulumi.IntOutput)
}

// The DLP policy rule name.
func (o DLPWebRulesOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DLPWebRules) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The template used for DLP notification emails.
func (o DLPWebRulesOutput) NotificationTemplate() DLPWebRulesNotificationTemplateOutput {
	return o.ApplyT(func(v *DLPWebRules) DLPWebRulesNotificationTemplateOutput { return v.NotificationTemplate }).(DLPWebRulesNotificationTemplateOutput)
}

// Enables or disables image file scanning.
func (o DLPWebRulesOutput) OcrEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *DLPWebRules) pulumi.BoolOutput { return v.OcrEnabled }).(pulumi.BoolOutput)
}

// The rule order of execution for the DLP policy rule with respect to other rules.
func (o DLPWebRulesOutput) Order() pulumi.IntOutput {
	return o.ApplyT(func(v *DLPWebRules) pulumi.IntOutput { return v.Order }).(pulumi.IntOutput)
}

// The protocol criteria specified for the DLP policy rule.
func (o DLPWebRulesOutput) Protocols() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DLPWebRules) pulumi.StringArrayOutput { return v.Protocols }).(pulumi.StringArrayOutput)
}

// Admin rank of the admin who creates this rule
func (o DLPWebRulesOutput) Rank() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *DLPWebRules) pulumi.IntPtrOutput { return v.Rank }).(pulumi.IntPtrOutput)
}

func (o DLPWebRulesOutput) RuleId() pulumi.IntOutput {
	return o.ApplyT(func(v *DLPWebRules) pulumi.IntOutput { return v.RuleId }).(pulumi.IntOutput)
}

// Enables or disables the DLP policy rule.. The supported values are:
func (o DLPWebRulesOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *DLPWebRules) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// The Name-ID pairs of time windows to which the DLP policy rule must be applied. Maximum of up to `2` time intervals. When not used it implies `always` to apply the rule to all time intervals.
func (o DLPWebRulesOutput) TimeWindows() DLPWebRulesTimeWindowsOutput {
	return o.ApplyT(func(v *DLPWebRules) DLPWebRulesTimeWindowsOutput { return v.TimeWindows }).(DLPWebRulesTimeWindowsOutput)
}

// The list of URL categories to which the DLP policy rule must be applied.
func (o DLPWebRulesOutput) UrlCategories() DLPWebRulesUrlCategoriesOutput {
	return o.ApplyT(func(v *DLPWebRules) DLPWebRulesUrlCategoriesOutput { return v.UrlCategories }).(DLPWebRulesUrlCategoriesOutput)
}

// The Name-ID pairs of users to which the DLP policy rule must be applied. Maximum of up to `4` users. When not used it implies `Any` to apply the rule to all users.
func (o DLPWebRulesOutput) Users() DLPWebRulesUsersOutput {
	return o.ApplyT(func(v *DLPWebRules) DLPWebRulesUsersOutput { return v.Users }).(DLPWebRulesUsersOutput)
}

// Indicates a DLP policy rule without content inspection, when the value is set to true.
func (o DLPWebRulesOutput) WithoutContentInspection() pulumi.BoolOutput {
	return o.ApplyT(func(v *DLPWebRules) pulumi.BoolOutput { return v.WithoutContentInspection }).(pulumi.BoolOutput)
}

// Indicates whether a Zscaler Incident Receiver is associated to the DLP policy rule.
func (o DLPWebRulesOutput) ZscalerIncidentReciever() pulumi.BoolOutput {
	return o.ApplyT(func(v *DLPWebRules) pulumi.BoolOutput { return v.ZscalerIncidentReciever }).(pulumi.BoolOutput)
}

type DLPWebRulesArrayOutput struct{ *pulumi.OutputState }

func (DLPWebRulesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DLPWebRules)(nil)).Elem()
}

func (o DLPWebRulesArrayOutput) ToDLPWebRulesArrayOutput() DLPWebRulesArrayOutput {
	return o
}

func (o DLPWebRulesArrayOutput) ToDLPWebRulesArrayOutputWithContext(ctx context.Context) DLPWebRulesArrayOutput {
	return o
}

func (o DLPWebRulesArrayOutput) Index(i pulumi.IntInput) DLPWebRulesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DLPWebRules {
		return vs[0].([]*DLPWebRules)[vs[1].(int)]
	}).(DLPWebRulesOutput)
}

type DLPWebRulesMapOutput struct{ *pulumi.OutputState }

func (DLPWebRulesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DLPWebRules)(nil)).Elem()
}

func (o DLPWebRulesMapOutput) ToDLPWebRulesMapOutput() DLPWebRulesMapOutput {
	return o
}

func (o DLPWebRulesMapOutput) ToDLPWebRulesMapOutputWithContext(ctx context.Context) DLPWebRulesMapOutput {
	return o
}

func (o DLPWebRulesMapOutput) MapIndex(k pulumi.StringInput) DLPWebRulesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DLPWebRules {
		return vs[0].(map[string]*DLPWebRules)[vs[1].(string)]
	}).(DLPWebRulesOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DLPWebRulesInput)(nil)).Elem(), &DLPWebRules{})
	pulumi.RegisterInputType(reflect.TypeOf((*DLPWebRulesArrayInput)(nil)).Elem(), DLPWebRulesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DLPWebRulesMapInput)(nil)).Elem(), DLPWebRulesMap{})
	pulumi.RegisterOutputType(DLPWebRulesOutput{})
	pulumi.RegisterOutputType(DLPWebRulesArrayOutput{})
	pulumi.RegisterOutputType(DLPWebRulesMapOutput{})
}
