// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package users

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The **zia_user_management** resource allows the creation and management of local user account in the Zscaler Internet Access cloud. The user account resource can then be associated with several different types of resource within the ZIA tenant.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/zscaler/pulumi-zia/sdk/go/zia/Departments"
//	"github.com/zscaler/pulumi-zia/sdk/go/zia/Groups"
//	"github.com/zscaler/pulumi-zia/sdk/go/zia/Users"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			normalInternet, err := Groups.GetGroupManagement(ctx, &groups.GetGroupManagementArgs{
//				Name: pulumi.StringRef("Normal_Internet"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			engineering, err := Departments.GetDepartmentManagement(ctx, &departments.GetDepartmentManagementArgs{
//				Name: pulumi.StringRef("Engineering"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = Users.NewUserManagement(ctx, "johnAshcroft", &Users.UserManagementArgs{
//				Email:    pulumi.String("john.ashcroft@acme.com"),
//				Password: pulumi.String("P@ssw0rd123*"),
//				Groups: &users.UserManagementGroupsArgs{
//					Ids: *pulumi.Int(normalInternet.Id),
//				},
//				Department: &users.UserManagementDepartmentArgs{
//					Id: *pulumi.Int(engineering.Id),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ## Optional
//
// The following attributes are supported:
//
// * `comments` - (Optional) Additional information about this user.
// * `tempAuthEmail` - (Optional) Temporary Authentication Email. If you enabled one-time tokens or links, enter the email address to which the Zscaler service sends the tokens or links. If this is empty, the service will send the email to the User email.
type UserManagement struct {
	pulumi.CustomResourceState

	// Additional information about this user.
	Comments pulumi.StringPtrOutput `pulumi:"comments"`
	// Department a user belongs to
	Department UserManagementDepartmentPtrOutput `pulumi:"department"`
	// User email consists of a user name and domain name. It does not have to be a valid email address, but it must be unique and its domain must belong to the organization.
	Email pulumi.StringOutput `pulumi:"email"`
	// List of Groups a user belongs to. Groups are used in policies.
	Groups UserManagementGroupsOutput `pulumi:"groups"`
	// User name. This appears when choosing users for policies.
	Name pulumi.StringOutput `pulumi:"name"`
	// User's password. Applicable only when authentication type is Hosted DB. Password strength must follow what is defined in the auth settings.
	Password pulumi.StringOutput `pulumi:"password"`
	// Temporary Authentication Email. If you enabled one-time tokens or links, enter the email address to which the Zscaler
	// service sends the tokens or links. If this is empty, the service will send the email to the User email.
	TempAuthEmail pulumi.StringPtrOutput `pulumi:"tempAuthEmail"`
	UserId        pulumi.IntOutput       `pulumi:"userId"`
}

// NewUserManagement registers a new resource with the given unique name, arguments, and options.
func NewUserManagement(ctx *pulumi.Context,
	name string, args *UserManagementArgs, opts ...pulumi.ResourceOption) (*UserManagement, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Email == nil {
		return nil, errors.New("invalid value for required argument 'Email'")
	}
	if args.Password == nil {
		return nil, errors.New("invalid value for required argument 'Password'")
	}
	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
	})
	opts = append(opts, secrets)
	opts = pkgResourceDefaultOpts(opts)
	var resource UserManagement
	err := ctx.RegisterResource("zia:Users/userManagement:UserManagement", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetUserManagement gets an existing UserManagement resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetUserManagement(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *UserManagementState, opts ...pulumi.ResourceOption) (*UserManagement, error) {
	var resource UserManagement
	err := ctx.ReadResource("zia:Users/userManagement:UserManagement", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering UserManagement resources.
type userManagementState struct {
	// Additional information about this user.
	Comments *string `pulumi:"comments"`
	// Department a user belongs to
	Department *UserManagementDepartment `pulumi:"department"`
	// User email consists of a user name and domain name. It does not have to be a valid email address, but it must be unique and its domain must belong to the organization.
	Email *string `pulumi:"email"`
	// List of Groups a user belongs to. Groups are used in policies.
	Groups *UserManagementGroups `pulumi:"groups"`
	// User name. This appears when choosing users for policies.
	Name *string `pulumi:"name"`
	// User's password. Applicable only when authentication type is Hosted DB. Password strength must follow what is defined in the auth settings.
	Password *string `pulumi:"password"`
	// Temporary Authentication Email. If you enabled one-time tokens or links, enter the email address to which the Zscaler
	// service sends the tokens or links. If this is empty, the service will send the email to the User email.
	TempAuthEmail *string `pulumi:"tempAuthEmail"`
	UserId        *int    `pulumi:"userId"`
}

type UserManagementState struct {
	// Additional information about this user.
	Comments pulumi.StringPtrInput
	// Department a user belongs to
	Department UserManagementDepartmentPtrInput
	// User email consists of a user name and domain name. It does not have to be a valid email address, but it must be unique and its domain must belong to the organization.
	Email pulumi.StringPtrInput
	// List of Groups a user belongs to. Groups are used in policies.
	Groups UserManagementGroupsPtrInput
	// User name. This appears when choosing users for policies.
	Name pulumi.StringPtrInput
	// User's password. Applicable only when authentication type is Hosted DB. Password strength must follow what is defined in the auth settings.
	Password pulumi.StringPtrInput
	// Temporary Authentication Email. If you enabled one-time tokens or links, enter the email address to which the Zscaler
	// service sends the tokens or links. If this is empty, the service will send the email to the User email.
	TempAuthEmail pulumi.StringPtrInput
	UserId        pulumi.IntPtrInput
}

func (UserManagementState) ElementType() reflect.Type {
	return reflect.TypeOf((*userManagementState)(nil)).Elem()
}

type userManagementArgs struct {
	// Additional information about this user.
	Comments *string `pulumi:"comments"`
	// Department a user belongs to
	Department *UserManagementDepartment `pulumi:"department"`
	// User email consists of a user name and domain name. It does not have to be a valid email address, but it must be unique and its domain must belong to the organization.
	Email string `pulumi:"email"`
	// List of Groups a user belongs to. Groups are used in policies.
	Groups *UserManagementGroups `pulumi:"groups"`
	// User name. This appears when choosing users for policies.
	Name *string `pulumi:"name"`
	// User's password. Applicable only when authentication type is Hosted DB. Password strength must follow what is defined in the auth settings.
	Password string `pulumi:"password"`
	// Temporary Authentication Email. If you enabled one-time tokens or links, enter the email address to which the Zscaler
	// service sends the tokens or links. If this is empty, the service will send the email to the User email.
	TempAuthEmail *string `pulumi:"tempAuthEmail"`
}

// The set of arguments for constructing a UserManagement resource.
type UserManagementArgs struct {
	// Additional information about this user.
	Comments pulumi.StringPtrInput
	// Department a user belongs to
	Department UserManagementDepartmentPtrInput
	// User email consists of a user name and domain name. It does not have to be a valid email address, but it must be unique and its domain must belong to the organization.
	Email pulumi.StringInput
	// List of Groups a user belongs to. Groups are used in policies.
	Groups UserManagementGroupsPtrInput
	// User name. This appears when choosing users for policies.
	Name pulumi.StringPtrInput
	// User's password. Applicable only when authentication type is Hosted DB. Password strength must follow what is defined in the auth settings.
	Password pulumi.StringInput
	// Temporary Authentication Email. If you enabled one-time tokens or links, enter the email address to which the Zscaler
	// service sends the tokens or links. If this is empty, the service will send the email to the User email.
	TempAuthEmail pulumi.StringPtrInput
}

func (UserManagementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*userManagementArgs)(nil)).Elem()
}

type UserManagementInput interface {
	pulumi.Input

	ToUserManagementOutput() UserManagementOutput
	ToUserManagementOutputWithContext(ctx context.Context) UserManagementOutput
}

func (*UserManagement) ElementType() reflect.Type {
	return reflect.TypeOf((**UserManagement)(nil)).Elem()
}

func (i *UserManagement) ToUserManagementOutput() UserManagementOutput {
	return i.ToUserManagementOutputWithContext(context.Background())
}

func (i *UserManagement) ToUserManagementOutputWithContext(ctx context.Context) UserManagementOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserManagementOutput)
}

// UserManagementArrayInput is an input type that accepts UserManagementArray and UserManagementArrayOutput values.
// You can construct a concrete instance of `UserManagementArrayInput` via:
//
//	UserManagementArray{ UserManagementArgs{...} }
type UserManagementArrayInput interface {
	pulumi.Input

	ToUserManagementArrayOutput() UserManagementArrayOutput
	ToUserManagementArrayOutputWithContext(context.Context) UserManagementArrayOutput
}

type UserManagementArray []UserManagementInput

func (UserManagementArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserManagement)(nil)).Elem()
}

func (i UserManagementArray) ToUserManagementArrayOutput() UserManagementArrayOutput {
	return i.ToUserManagementArrayOutputWithContext(context.Background())
}

func (i UserManagementArray) ToUserManagementArrayOutputWithContext(ctx context.Context) UserManagementArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserManagementArrayOutput)
}

// UserManagementMapInput is an input type that accepts UserManagementMap and UserManagementMapOutput values.
// You can construct a concrete instance of `UserManagementMapInput` via:
//
//	UserManagementMap{ "key": UserManagementArgs{...} }
type UserManagementMapInput interface {
	pulumi.Input

	ToUserManagementMapOutput() UserManagementMapOutput
	ToUserManagementMapOutputWithContext(context.Context) UserManagementMapOutput
}

type UserManagementMap map[string]UserManagementInput

func (UserManagementMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserManagement)(nil)).Elem()
}

func (i UserManagementMap) ToUserManagementMapOutput() UserManagementMapOutput {
	return i.ToUserManagementMapOutputWithContext(context.Background())
}

func (i UserManagementMap) ToUserManagementMapOutputWithContext(ctx context.Context) UserManagementMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserManagementMapOutput)
}

type UserManagementOutput struct{ *pulumi.OutputState }

func (UserManagementOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserManagement)(nil)).Elem()
}

func (o UserManagementOutput) ToUserManagementOutput() UserManagementOutput {
	return o
}

func (o UserManagementOutput) ToUserManagementOutputWithContext(ctx context.Context) UserManagementOutput {
	return o
}

// Additional information about this user.
func (o UserManagementOutput) Comments() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserManagement) pulumi.StringPtrOutput { return v.Comments }).(pulumi.StringPtrOutput)
}

// Department a user belongs to
func (o UserManagementOutput) Department() UserManagementDepartmentPtrOutput {
	return o.ApplyT(func(v *UserManagement) UserManagementDepartmentPtrOutput { return v.Department }).(UserManagementDepartmentPtrOutput)
}

// User email consists of a user name and domain name. It does not have to be a valid email address, but it must be unique and its domain must belong to the organization.
func (o UserManagementOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v *UserManagement) pulumi.StringOutput { return v.Email }).(pulumi.StringOutput)
}

// List of Groups a user belongs to. Groups are used in policies.
func (o UserManagementOutput) Groups() UserManagementGroupsOutput {
	return o.ApplyT(func(v *UserManagement) UserManagementGroupsOutput { return v.Groups }).(UserManagementGroupsOutput)
}

// User name. This appears when choosing users for policies.
func (o UserManagementOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *UserManagement) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// User's password. Applicable only when authentication type is Hosted DB. Password strength must follow what is defined in the auth settings.
func (o UserManagementOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v *UserManagement) pulumi.StringOutput { return v.Password }).(pulumi.StringOutput)
}

// Temporary Authentication Email. If you enabled one-time tokens or links, enter the email address to which the Zscaler
// service sends the tokens or links. If this is empty, the service will send the email to the User email.
func (o UserManagementOutput) TempAuthEmail() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserManagement) pulumi.StringPtrOutput { return v.TempAuthEmail }).(pulumi.StringPtrOutput)
}

func (o UserManagementOutput) UserId() pulumi.IntOutput {
	return o.ApplyT(func(v *UserManagement) pulumi.IntOutput { return v.UserId }).(pulumi.IntOutput)
}

type UserManagementArrayOutput struct{ *pulumi.OutputState }

func (UserManagementArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*UserManagement)(nil)).Elem()
}

func (o UserManagementArrayOutput) ToUserManagementArrayOutput() UserManagementArrayOutput {
	return o
}

func (o UserManagementArrayOutput) ToUserManagementArrayOutputWithContext(ctx context.Context) UserManagementArrayOutput {
	return o
}

func (o UserManagementArrayOutput) Index(i pulumi.IntInput) UserManagementOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *UserManagement {
		return vs[0].([]*UserManagement)[vs[1].(int)]
	}).(UserManagementOutput)
}

type UserManagementMapOutput struct{ *pulumi.OutputState }

func (UserManagementMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*UserManagement)(nil)).Elem()
}

func (o UserManagementMapOutput) ToUserManagementMapOutput() UserManagementMapOutput {
	return o
}

func (o UserManagementMapOutput) ToUserManagementMapOutputWithContext(ctx context.Context) UserManagementMapOutput {
	return o
}

func (o UserManagementMapOutput) MapIndex(k pulumi.StringInput) UserManagementOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *UserManagement {
		return vs[0].(map[string]*UserManagement)[vs[1].(string)]
	}).(UserManagementOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*UserManagementInput)(nil)).Elem(), &UserManagement{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserManagementArrayInput)(nil)).Elem(), UserManagementArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserManagementMapInput)(nil)).Elem(), UserManagementMap{})
	pulumi.RegisterOutputType(UserManagementOutput{})
	pulumi.RegisterOutputType(UserManagementArrayOutput{})
	pulumi.RegisterOutputType(UserManagementMapOutput{})
}
