// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package zia

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use the **zia_traffic_forwarding_vpn_credentials** data source to get information about VPN credentials that can be associated to locations. VPN is one way to route traffic from customer locations to the cloud. Site-to-Site IPSec VPN credentials can be identified by the cloud through one of the following methods:
//
// * Common Name (CN) of IPSec Certificate
// * VPN User FQDN - requires VPN_SITE_TO_SITE subscription
// * VPN IP Address - requires VPN_SITE_TO_SITE subscription
// * Extended Authentication (XAUTH) or hosted mobile UserID - requires VPN_MOBILE subscription
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-zia/sdk/go/zia"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := zia.LookupZIATrafficForwardingVPNCredentials(ctx, &zia.LookupZIATrafficForwardingVPNCredentialsArgs{
//				Fqdn: pulumi.StringRef("sjc-1-37@acme.com"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-zia/sdk/go/zia"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := zia.LookupZIATrafficForwardingVPNCredentials(ctx, &zia.LookupZIATrafficForwardingVPNCredentialsArgs{
//				IpAddress: pulumi.StringRef("1.1.1.1"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupZIATrafficForwardingVPNCredentials(ctx *pulumi.Context, args *LookupZIATrafficForwardingVPNCredentialsArgs, opts ...pulumi.InvokeOption) (*LookupZIATrafficForwardingVPNCredentialsResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv LookupZIATrafficForwardingVPNCredentialsResult
	err := ctx.Invoke("zia:index/getZIATrafficForwardingVPNCredentials:getZIATrafficForwardingVPNCredentials", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getZIATrafficForwardingVPNCredentials.
type LookupZIATrafficForwardingVPNCredentialsArgs struct {
	// (String) Fully Qualified Domain Name. Applicable only to `UFQDN` or `XAUTH` (or `HOSTED_MOBILE_USERS`) auth type.
	Fqdn *string `pulumi:"fqdn"`
	// Unique identifer of the GRE virtual IP address (VIP)
	Id *int `pulumi:"id"`
	// Filter based on an IP address range.
	IpAddress *string `pulumi:"ipAddress"`
	// (String) VPN authentication type (i.e., how the VPN credential is sent to the server). It is not modifiable after VpnCredential is created.
	Type *string `pulumi:"type"`
}

// A collection of values returned by getZIATrafficForwardingVPNCredentials.
type LookupZIATrafficForwardingVPNCredentialsResult struct {
	// (String) Additional information about this VPN credential.
	Comments string `pulumi:"comments"`
	// (String) Fully Qualified Domain Name. Applicable only to `UFQDN` or `XAUTH` (or `HOSTED_MOBILE_USERS`) auth type.
	Fqdn *string `pulumi:"fqdn"`
	// (Number) Identifier that uniquely identifies an entity
	Id        int     `pulumi:"id"`
	IpAddress *string `pulumi:"ipAddress"`
	// (Set of Object) Location that is associated to this VPN credential. Non-existence means not associated to any location.
	Locations []GetZIATrafficForwardingVPNCredentialsLocation `pulumi:"locations"`
	// (Set of Object) SD-WAN Partner that manages the location. If a partner does not manage the locaton, this is set to Self.
	ManagedBies []GetZIATrafficForwardingVPNCredentialsManagedBy `pulumi:"managedBies"`
	// (String) Pre-shared key. This is a required field for `UFQDN` and `IP` auth type.
	PreSharedKey string `pulumi:"preSharedKey"`
	// (String) VPN authentication type (i.e., how the VPN credential is sent to the server). It is not modifiable after VpnCredential is created.
	Type string `pulumi:"type"`
}

func LookupZIATrafficForwardingVPNCredentialsOutput(ctx *pulumi.Context, args LookupZIATrafficForwardingVPNCredentialsOutputArgs, opts ...pulumi.InvokeOption) LookupZIATrafficForwardingVPNCredentialsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupZIATrafficForwardingVPNCredentialsResult, error) {
			args := v.(LookupZIATrafficForwardingVPNCredentialsArgs)
			r, err := LookupZIATrafficForwardingVPNCredentials(ctx, &args, opts...)
			var s LookupZIATrafficForwardingVPNCredentialsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupZIATrafficForwardingVPNCredentialsResultOutput)
}

// A collection of arguments for invoking getZIATrafficForwardingVPNCredentials.
type LookupZIATrafficForwardingVPNCredentialsOutputArgs struct {
	// (String) Fully Qualified Domain Name. Applicable only to `UFQDN` or `XAUTH` (or `HOSTED_MOBILE_USERS`) auth type.
	Fqdn pulumi.StringPtrInput `pulumi:"fqdn"`
	// Unique identifer of the GRE virtual IP address (VIP)
	Id pulumi.IntPtrInput `pulumi:"id"`
	// Filter based on an IP address range.
	IpAddress pulumi.StringPtrInput `pulumi:"ipAddress"`
	// (String) VPN authentication type (i.e., how the VPN credential is sent to the server). It is not modifiable after VpnCredential is created.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (LookupZIATrafficForwardingVPNCredentialsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupZIATrafficForwardingVPNCredentialsArgs)(nil)).Elem()
}

// A collection of values returned by getZIATrafficForwardingVPNCredentials.
type LookupZIATrafficForwardingVPNCredentialsResultOutput struct{ *pulumi.OutputState }

func (LookupZIATrafficForwardingVPNCredentialsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupZIATrafficForwardingVPNCredentialsResult)(nil)).Elem()
}

func (o LookupZIATrafficForwardingVPNCredentialsResultOutput) ToLookupZIATrafficForwardingVPNCredentialsResultOutput() LookupZIATrafficForwardingVPNCredentialsResultOutput {
	return o
}

func (o LookupZIATrafficForwardingVPNCredentialsResultOutput) ToLookupZIATrafficForwardingVPNCredentialsResultOutputWithContext(ctx context.Context) LookupZIATrafficForwardingVPNCredentialsResultOutput {
	return o
}

// (String) Additional information about this VPN credential.
func (o LookupZIATrafficForwardingVPNCredentialsResultOutput) Comments() pulumi.StringOutput {
	return o.ApplyT(func(v LookupZIATrafficForwardingVPNCredentialsResult) string { return v.Comments }).(pulumi.StringOutput)
}

// (String) Fully Qualified Domain Name. Applicable only to `UFQDN` or `XAUTH` (or `HOSTED_MOBILE_USERS`) auth type.
func (o LookupZIATrafficForwardingVPNCredentialsResultOutput) Fqdn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupZIATrafficForwardingVPNCredentialsResult) *string { return v.Fqdn }).(pulumi.StringPtrOutput)
}

// (Number) Identifier that uniquely identifies an entity
func (o LookupZIATrafficForwardingVPNCredentialsResultOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v LookupZIATrafficForwardingVPNCredentialsResult) int { return v.Id }).(pulumi.IntOutput)
}

func (o LookupZIATrafficForwardingVPNCredentialsResultOutput) IpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupZIATrafficForwardingVPNCredentialsResult) *string { return v.IpAddress }).(pulumi.StringPtrOutput)
}

// (Set of Object) Location that is associated to this VPN credential. Non-existence means not associated to any location.
func (o LookupZIATrafficForwardingVPNCredentialsResultOutput) Locations() GetZIATrafficForwardingVPNCredentialsLocationArrayOutput {
	return o.ApplyT(func(v LookupZIATrafficForwardingVPNCredentialsResult) []GetZIATrafficForwardingVPNCredentialsLocation {
		return v.Locations
	}).(GetZIATrafficForwardingVPNCredentialsLocationArrayOutput)
}

// (Set of Object) SD-WAN Partner that manages the location. If a partner does not manage the locaton, this is set to Self.
func (o LookupZIATrafficForwardingVPNCredentialsResultOutput) ManagedBies() GetZIATrafficForwardingVPNCredentialsManagedByArrayOutput {
	return o.ApplyT(func(v LookupZIATrafficForwardingVPNCredentialsResult) []GetZIATrafficForwardingVPNCredentialsManagedBy {
		return v.ManagedBies
	}).(GetZIATrafficForwardingVPNCredentialsManagedByArrayOutput)
}

// (String) Pre-shared key. This is a required field for `UFQDN` and `IP` auth type.
func (o LookupZIATrafficForwardingVPNCredentialsResultOutput) PreSharedKey() pulumi.StringOutput {
	return o.ApplyT(func(v LookupZIATrafficForwardingVPNCredentialsResult) string { return v.PreSharedKey }).(pulumi.StringOutput)
}

// (String) VPN authentication type (i.e., how the VPN credential is sent to the server). It is not modifiable after VpnCredential is created.
func (o LookupZIATrafficForwardingVPNCredentialsResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupZIATrafficForwardingVPNCredentialsResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupZIATrafficForwardingVPNCredentialsResultOutput{})
}
