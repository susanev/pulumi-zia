// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package zia

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ZIAFirewallFilteringDestinationGroups struct {
	pulumi.CustomResourceState

	// Destination IP addresses within the group
	Addresses pulumi.StringArrayOutput `pulumi:"addresses"`
	// Destination countries for which the rule is applicable. If not set, the rule is not restricted to specific destination
	// countries.
	Countries pulumi.StringArrayOutput `pulumi:"countries"`
	// Additional information about the destination IP group
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// List of URL categories for which rule must be applied
	IpCategories pulumi.StringArrayOutput `pulumi:"ipCategories"`
	// Unique identifer for the destination IP group
	IpDestinationId pulumi.IntOutput `pulumi:"ipDestinationId"`
	// Destination IP group name
	Name pulumi.StringOutput `pulumi:"name"`
	// Destination IP group type (i.e., the group can contain destination IP addresses or FQDNs)
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewZIAFirewallFilteringDestinationGroups registers a new resource with the given unique name, arguments, and options.
func NewZIAFirewallFilteringDestinationGroups(ctx *pulumi.Context,
	name string, args *ZIAFirewallFilteringDestinationGroupsArgs, opts ...pulumi.ResourceOption) (*ZIAFirewallFilteringDestinationGroups, error) {
	if args == nil {
		args = &ZIAFirewallFilteringDestinationGroupsArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource ZIAFirewallFilteringDestinationGroups
	err := ctx.RegisterResource("zia:index/zIAFirewallFilteringDestinationGroups:ZIAFirewallFilteringDestinationGroups", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetZIAFirewallFilteringDestinationGroups gets an existing ZIAFirewallFilteringDestinationGroups resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetZIAFirewallFilteringDestinationGroups(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ZIAFirewallFilteringDestinationGroupsState, opts ...pulumi.ResourceOption) (*ZIAFirewallFilteringDestinationGroups, error) {
	var resource ZIAFirewallFilteringDestinationGroups
	err := ctx.ReadResource("zia:index/zIAFirewallFilteringDestinationGroups:ZIAFirewallFilteringDestinationGroups", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ZIAFirewallFilteringDestinationGroups resources.
type ziafirewallFilteringDestinationGroupsState struct {
	// Destination IP addresses within the group
	Addresses []string `pulumi:"addresses"`
	// Destination countries for which the rule is applicable. If not set, the rule is not restricted to specific destination
	// countries.
	Countries []string `pulumi:"countries"`
	// Additional information about the destination IP group
	Description *string `pulumi:"description"`
	// List of URL categories for which rule must be applied
	IpCategories []string `pulumi:"ipCategories"`
	// Unique identifer for the destination IP group
	IpDestinationId *int `pulumi:"ipDestinationId"`
	// Destination IP group name
	Name *string `pulumi:"name"`
	// Destination IP group type (i.e., the group can contain destination IP addresses or FQDNs)
	Type *string `pulumi:"type"`
}

type ZIAFirewallFilteringDestinationGroupsState struct {
	// Destination IP addresses within the group
	Addresses pulumi.StringArrayInput
	// Destination countries for which the rule is applicable. If not set, the rule is not restricted to specific destination
	// countries.
	Countries pulumi.StringArrayInput
	// Additional information about the destination IP group
	Description pulumi.StringPtrInput
	// List of URL categories for which rule must be applied
	IpCategories pulumi.StringArrayInput
	// Unique identifer for the destination IP group
	IpDestinationId pulumi.IntPtrInput
	// Destination IP group name
	Name pulumi.StringPtrInput
	// Destination IP group type (i.e., the group can contain destination IP addresses or FQDNs)
	Type pulumi.StringPtrInput
}

func (ZIAFirewallFilteringDestinationGroupsState) ElementType() reflect.Type {
	return reflect.TypeOf((*ziafirewallFilteringDestinationGroupsState)(nil)).Elem()
}

type ziafirewallFilteringDestinationGroupsArgs struct {
	// Destination IP addresses within the group
	Addresses []string `pulumi:"addresses"`
	// Destination countries for which the rule is applicable. If not set, the rule is not restricted to specific destination
	// countries.
	Countries []string `pulumi:"countries"`
	// Additional information about the destination IP group
	Description *string `pulumi:"description"`
	// List of URL categories for which rule must be applied
	IpCategories []string `pulumi:"ipCategories"`
	// Destination IP group name
	Name *string `pulumi:"name"`
	// Destination IP group type (i.e., the group can contain destination IP addresses or FQDNs)
	Type *string `pulumi:"type"`
}

// The set of arguments for constructing a ZIAFirewallFilteringDestinationGroups resource.
type ZIAFirewallFilteringDestinationGroupsArgs struct {
	// Destination IP addresses within the group
	Addresses pulumi.StringArrayInput
	// Destination countries for which the rule is applicable. If not set, the rule is not restricted to specific destination
	// countries.
	Countries pulumi.StringArrayInput
	// Additional information about the destination IP group
	Description pulumi.StringPtrInput
	// List of URL categories for which rule must be applied
	IpCategories pulumi.StringArrayInput
	// Destination IP group name
	Name pulumi.StringPtrInput
	// Destination IP group type (i.e., the group can contain destination IP addresses or FQDNs)
	Type pulumi.StringPtrInput
}

func (ZIAFirewallFilteringDestinationGroupsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ziafirewallFilteringDestinationGroupsArgs)(nil)).Elem()
}

type ZIAFirewallFilteringDestinationGroupsInput interface {
	pulumi.Input

	ToZIAFirewallFilteringDestinationGroupsOutput() ZIAFirewallFilteringDestinationGroupsOutput
	ToZIAFirewallFilteringDestinationGroupsOutputWithContext(ctx context.Context) ZIAFirewallFilteringDestinationGroupsOutput
}

func (*ZIAFirewallFilteringDestinationGroups) ElementType() reflect.Type {
	return reflect.TypeOf((**ZIAFirewallFilteringDestinationGroups)(nil)).Elem()
}

func (i *ZIAFirewallFilteringDestinationGroups) ToZIAFirewallFilteringDestinationGroupsOutput() ZIAFirewallFilteringDestinationGroupsOutput {
	return i.ToZIAFirewallFilteringDestinationGroupsOutputWithContext(context.Background())
}

func (i *ZIAFirewallFilteringDestinationGroups) ToZIAFirewallFilteringDestinationGroupsOutputWithContext(ctx context.Context) ZIAFirewallFilteringDestinationGroupsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZIAFirewallFilteringDestinationGroupsOutput)
}

// ZIAFirewallFilteringDestinationGroupsArrayInput is an input type that accepts ZIAFirewallFilteringDestinationGroupsArray and ZIAFirewallFilteringDestinationGroupsArrayOutput values.
// You can construct a concrete instance of `ZIAFirewallFilteringDestinationGroupsArrayInput` via:
//
//	ZIAFirewallFilteringDestinationGroupsArray{ ZIAFirewallFilteringDestinationGroupsArgs{...} }
type ZIAFirewallFilteringDestinationGroupsArrayInput interface {
	pulumi.Input

	ToZIAFirewallFilteringDestinationGroupsArrayOutput() ZIAFirewallFilteringDestinationGroupsArrayOutput
	ToZIAFirewallFilteringDestinationGroupsArrayOutputWithContext(context.Context) ZIAFirewallFilteringDestinationGroupsArrayOutput
}

type ZIAFirewallFilteringDestinationGroupsArray []ZIAFirewallFilteringDestinationGroupsInput

func (ZIAFirewallFilteringDestinationGroupsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ZIAFirewallFilteringDestinationGroups)(nil)).Elem()
}

func (i ZIAFirewallFilteringDestinationGroupsArray) ToZIAFirewallFilteringDestinationGroupsArrayOutput() ZIAFirewallFilteringDestinationGroupsArrayOutput {
	return i.ToZIAFirewallFilteringDestinationGroupsArrayOutputWithContext(context.Background())
}

func (i ZIAFirewallFilteringDestinationGroupsArray) ToZIAFirewallFilteringDestinationGroupsArrayOutputWithContext(ctx context.Context) ZIAFirewallFilteringDestinationGroupsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZIAFirewallFilteringDestinationGroupsArrayOutput)
}

// ZIAFirewallFilteringDestinationGroupsMapInput is an input type that accepts ZIAFirewallFilteringDestinationGroupsMap and ZIAFirewallFilteringDestinationGroupsMapOutput values.
// You can construct a concrete instance of `ZIAFirewallFilteringDestinationGroupsMapInput` via:
//
//	ZIAFirewallFilteringDestinationGroupsMap{ "key": ZIAFirewallFilteringDestinationGroupsArgs{...} }
type ZIAFirewallFilteringDestinationGroupsMapInput interface {
	pulumi.Input

	ToZIAFirewallFilteringDestinationGroupsMapOutput() ZIAFirewallFilteringDestinationGroupsMapOutput
	ToZIAFirewallFilteringDestinationGroupsMapOutputWithContext(context.Context) ZIAFirewallFilteringDestinationGroupsMapOutput
}

type ZIAFirewallFilteringDestinationGroupsMap map[string]ZIAFirewallFilteringDestinationGroupsInput

func (ZIAFirewallFilteringDestinationGroupsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ZIAFirewallFilteringDestinationGroups)(nil)).Elem()
}

func (i ZIAFirewallFilteringDestinationGroupsMap) ToZIAFirewallFilteringDestinationGroupsMapOutput() ZIAFirewallFilteringDestinationGroupsMapOutput {
	return i.ToZIAFirewallFilteringDestinationGroupsMapOutputWithContext(context.Background())
}

func (i ZIAFirewallFilteringDestinationGroupsMap) ToZIAFirewallFilteringDestinationGroupsMapOutputWithContext(ctx context.Context) ZIAFirewallFilteringDestinationGroupsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZIAFirewallFilteringDestinationGroupsMapOutput)
}

type ZIAFirewallFilteringDestinationGroupsOutput struct{ *pulumi.OutputState }

func (ZIAFirewallFilteringDestinationGroupsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ZIAFirewallFilteringDestinationGroups)(nil)).Elem()
}

func (o ZIAFirewallFilteringDestinationGroupsOutput) ToZIAFirewallFilteringDestinationGroupsOutput() ZIAFirewallFilteringDestinationGroupsOutput {
	return o
}

func (o ZIAFirewallFilteringDestinationGroupsOutput) ToZIAFirewallFilteringDestinationGroupsOutputWithContext(ctx context.Context) ZIAFirewallFilteringDestinationGroupsOutput {
	return o
}

// Destination IP addresses within the group
func (o ZIAFirewallFilteringDestinationGroupsOutput) Addresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ZIAFirewallFilteringDestinationGroups) pulumi.StringArrayOutput { return v.Addresses }).(pulumi.StringArrayOutput)
}

// Destination countries for which the rule is applicable. If not set, the rule is not restricted to specific destination
// countries.
func (o ZIAFirewallFilteringDestinationGroupsOutput) Countries() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ZIAFirewallFilteringDestinationGroups) pulumi.StringArrayOutput { return v.Countries }).(pulumi.StringArrayOutput)
}

// Additional information about the destination IP group
func (o ZIAFirewallFilteringDestinationGroupsOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ZIAFirewallFilteringDestinationGroups) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// List of URL categories for which rule must be applied
func (o ZIAFirewallFilteringDestinationGroupsOutput) IpCategories() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ZIAFirewallFilteringDestinationGroups) pulumi.StringArrayOutput { return v.IpCategories }).(pulumi.StringArrayOutput)
}

// Unique identifer for the destination IP group
func (o ZIAFirewallFilteringDestinationGroupsOutput) IpDestinationId() pulumi.IntOutput {
	return o.ApplyT(func(v *ZIAFirewallFilteringDestinationGroups) pulumi.IntOutput { return v.IpDestinationId }).(pulumi.IntOutput)
}

// Destination IP group name
func (o ZIAFirewallFilteringDestinationGroupsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ZIAFirewallFilteringDestinationGroups) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Destination IP group type (i.e., the group can contain destination IP addresses or FQDNs)
func (o ZIAFirewallFilteringDestinationGroupsOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *ZIAFirewallFilteringDestinationGroups) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type ZIAFirewallFilteringDestinationGroupsArrayOutput struct{ *pulumi.OutputState }

func (ZIAFirewallFilteringDestinationGroupsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ZIAFirewallFilteringDestinationGroups)(nil)).Elem()
}

func (o ZIAFirewallFilteringDestinationGroupsArrayOutput) ToZIAFirewallFilteringDestinationGroupsArrayOutput() ZIAFirewallFilteringDestinationGroupsArrayOutput {
	return o
}

func (o ZIAFirewallFilteringDestinationGroupsArrayOutput) ToZIAFirewallFilteringDestinationGroupsArrayOutputWithContext(ctx context.Context) ZIAFirewallFilteringDestinationGroupsArrayOutput {
	return o
}

func (o ZIAFirewallFilteringDestinationGroupsArrayOutput) Index(i pulumi.IntInput) ZIAFirewallFilteringDestinationGroupsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ZIAFirewallFilteringDestinationGroups {
		return vs[0].([]*ZIAFirewallFilteringDestinationGroups)[vs[1].(int)]
	}).(ZIAFirewallFilteringDestinationGroupsOutput)
}

type ZIAFirewallFilteringDestinationGroupsMapOutput struct{ *pulumi.OutputState }

func (ZIAFirewallFilteringDestinationGroupsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ZIAFirewallFilteringDestinationGroups)(nil)).Elem()
}

func (o ZIAFirewallFilteringDestinationGroupsMapOutput) ToZIAFirewallFilteringDestinationGroupsMapOutput() ZIAFirewallFilteringDestinationGroupsMapOutput {
	return o
}

func (o ZIAFirewallFilteringDestinationGroupsMapOutput) ToZIAFirewallFilteringDestinationGroupsMapOutputWithContext(ctx context.Context) ZIAFirewallFilteringDestinationGroupsMapOutput {
	return o
}

func (o ZIAFirewallFilteringDestinationGroupsMapOutput) MapIndex(k pulumi.StringInput) ZIAFirewallFilteringDestinationGroupsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ZIAFirewallFilteringDestinationGroups {
		return vs[0].(map[string]*ZIAFirewallFilteringDestinationGroups)[vs[1].(string)]
	}).(ZIAFirewallFilteringDestinationGroupsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ZIAFirewallFilteringDestinationGroupsInput)(nil)).Elem(), &ZIAFirewallFilteringDestinationGroups{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZIAFirewallFilteringDestinationGroupsArrayInput)(nil)).Elem(), ZIAFirewallFilteringDestinationGroupsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZIAFirewallFilteringDestinationGroupsMapInput)(nil)).Elem(), ZIAFirewallFilteringDestinationGroupsMap{})
	pulumi.RegisterOutputType(ZIAFirewallFilteringDestinationGroupsOutput{})
	pulumi.RegisterOutputType(ZIAFirewallFilteringDestinationGroupsArrayOutput{})
	pulumi.RegisterOutputType(ZIAFirewallFilteringDestinationGroupsMapOutput{})
}
