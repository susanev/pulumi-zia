// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package activation

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/zscaler/pulumi-zia/sdk/go/zia/Activation"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Activation.GetActivationStatus(ctx, nil, nil)
//			if err != nil {
//				return err
//			}
//			_, err = Activation.NewActivationStatus(ctx, "activationActivation/activationStatusActivationStatus", &Activation.ActivationStatusArgs{
//				Status: pulumi.String("ACTIVE"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Activation is not an importable resource.
type ActivationStatus struct {
	pulumi.CustomResourceState

	// Activates configuration changes.
	Status pulumi.StringOutput `pulumi:"status"`
}

// NewActivationStatus registers a new resource with the given unique name, arguments, and options.
func NewActivationStatus(ctx *pulumi.Context,
	name string, args *ActivationStatusArgs, opts ...pulumi.ResourceOption) (*ActivationStatus, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Status == nil {
		return nil, errors.New("invalid value for required argument 'Status'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource ActivationStatus
	err := ctx.RegisterResource("zia:Activation/activationStatus:ActivationStatus", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetActivationStatus gets an existing ActivationStatus resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetActivationStatus(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ActivationStatusState, opts ...pulumi.ResourceOption) (*ActivationStatus, error) {
	var resource ActivationStatus
	err := ctx.ReadResource("zia:Activation/activationStatus:ActivationStatus", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ActivationStatus resources.
type activationStatusState struct {
	// Activates configuration changes.
	Status *string `pulumi:"status"`
}

type ActivationStatusState struct {
	// Activates configuration changes.
	Status pulumi.StringPtrInput
}

func (ActivationStatusState) ElementType() reflect.Type {
	return reflect.TypeOf((*activationStatusState)(nil)).Elem()
}

type activationStatusArgs struct {
	// Activates configuration changes.
	Status string `pulumi:"status"`
}

// The set of arguments for constructing a ActivationStatus resource.
type ActivationStatusArgs struct {
	// Activates configuration changes.
	Status pulumi.StringInput
}

func (ActivationStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*activationStatusArgs)(nil)).Elem()
}

type ActivationStatusInput interface {
	pulumi.Input

	ToActivationStatusOutput() ActivationStatusOutput
	ToActivationStatusOutputWithContext(ctx context.Context) ActivationStatusOutput
}

func (*ActivationStatus) ElementType() reflect.Type {
	return reflect.TypeOf((**ActivationStatus)(nil)).Elem()
}

func (i *ActivationStatus) ToActivationStatusOutput() ActivationStatusOutput {
	return i.ToActivationStatusOutputWithContext(context.Background())
}

func (i *ActivationStatus) ToActivationStatusOutputWithContext(ctx context.Context) ActivationStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActivationStatusOutput)
}

// ActivationStatusArrayInput is an input type that accepts ActivationStatusArray and ActivationStatusArrayOutput values.
// You can construct a concrete instance of `ActivationStatusArrayInput` via:
//
//	ActivationStatusArray{ ActivationStatusArgs{...} }
type ActivationStatusArrayInput interface {
	pulumi.Input

	ToActivationStatusArrayOutput() ActivationStatusArrayOutput
	ToActivationStatusArrayOutputWithContext(context.Context) ActivationStatusArrayOutput
}

type ActivationStatusArray []ActivationStatusInput

func (ActivationStatusArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ActivationStatus)(nil)).Elem()
}

func (i ActivationStatusArray) ToActivationStatusArrayOutput() ActivationStatusArrayOutput {
	return i.ToActivationStatusArrayOutputWithContext(context.Background())
}

func (i ActivationStatusArray) ToActivationStatusArrayOutputWithContext(ctx context.Context) ActivationStatusArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActivationStatusArrayOutput)
}

// ActivationStatusMapInput is an input type that accepts ActivationStatusMap and ActivationStatusMapOutput values.
// You can construct a concrete instance of `ActivationStatusMapInput` via:
//
//	ActivationStatusMap{ "key": ActivationStatusArgs{...} }
type ActivationStatusMapInput interface {
	pulumi.Input

	ToActivationStatusMapOutput() ActivationStatusMapOutput
	ToActivationStatusMapOutputWithContext(context.Context) ActivationStatusMapOutput
}

type ActivationStatusMap map[string]ActivationStatusInput

func (ActivationStatusMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ActivationStatus)(nil)).Elem()
}

func (i ActivationStatusMap) ToActivationStatusMapOutput() ActivationStatusMapOutput {
	return i.ToActivationStatusMapOutputWithContext(context.Background())
}

func (i ActivationStatusMap) ToActivationStatusMapOutputWithContext(ctx context.Context) ActivationStatusMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ActivationStatusMapOutput)
}

type ActivationStatusOutput struct{ *pulumi.OutputState }

func (ActivationStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ActivationStatus)(nil)).Elem()
}

func (o ActivationStatusOutput) ToActivationStatusOutput() ActivationStatusOutput {
	return o
}

func (o ActivationStatusOutput) ToActivationStatusOutputWithContext(ctx context.Context) ActivationStatusOutput {
	return o
}

// Activates configuration changes.
func (o ActivationStatusOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *ActivationStatus) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

type ActivationStatusArrayOutput struct{ *pulumi.OutputState }

func (ActivationStatusArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ActivationStatus)(nil)).Elem()
}

func (o ActivationStatusArrayOutput) ToActivationStatusArrayOutput() ActivationStatusArrayOutput {
	return o
}

func (o ActivationStatusArrayOutput) ToActivationStatusArrayOutputWithContext(ctx context.Context) ActivationStatusArrayOutput {
	return o
}

func (o ActivationStatusArrayOutput) Index(i pulumi.IntInput) ActivationStatusOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ActivationStatus {
		return vs[0].([]*ActivationStatus)[vs[1].(int)]
	}).(ActivationStatusOutput)
}

type ActivationStatusMapOutput struct{ *pulumi.OutputState }

func (ActivationStatusMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ActivationStatus)(nil)).Elem()
}

func (o ActivationStatusMapOutput) ToActivationStatusMapOutput() ActivationStatusMapOutput {
	return o
}

func (o ActivationStatusMapOutput) ToActivationStatusMapOutputWithContext(ctx context.Context) ActivationStatusMapOutput {
	return o
}

func (o ActivationStatusMapOutput) MapIndex(k pulumi.StringInput) ActivationStatusOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ActivationStatus {
		return vs[0].(map[string]*ActivationStatus)[vs[1].(string)]
	}).(ActivationStatusOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ActivationStatusInput)(nil)).Elem(), &ActivationStatus{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActivationStatusArrayInput)(nil)).Elem(), ActivationStatusArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ActivationStatusMapInput)(nil)).Elem(), ActivationStatusMap{})
	pulumi.RegisterOutputType(ActivationStatusOutput{})
	pulumi.RegisterOutputType(ActivationStatusArrayOutput{})
	pulumi.RegisterOutputType(ActivationStatusMapOutput{})
}
