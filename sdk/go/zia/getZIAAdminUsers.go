// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package zia

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use the **zia_admin_users** data source to get information about an admin user account created in the Zscaler Internet Access cloud or via the API. This data source can then be associated with a ZIA administrator role.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-zia/sdk/go/zia"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := zia.LookupZIAAdminUsers(ctx, &zia.LookupZIAAdminUsersArgs{
//				LoginName: pulumi.StringRef("john.doe@example.com"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-zia/sdk/go/zia"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := zia.LookupZIAAdminUsers(ctx, &zia.LookupZIAAdminUsersArgs{
//				Username: pulumi.StringRef("John Doe"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupZIAAdminUsers(ctx *pulumi.Context, args *LookupZIAAdminUsersArgs, opts ...pulumi.InvokeOption) (*LookupZIAAdminUsersResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv LookupZIAAdminUsersResult
	err := ctx.Invoke("zia:index/getZIAAdminUsers:getZIAAdminUsers", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getZIAAdminUsers.
type LookupZIAAdminUsersArgs struct {
	// The ID of the admin user to be exported.
	Id *int `pulumi:"id"`
	// The email address of the admin user to be exported.
	LoginName *string `pulumi:"loginName"`
	// The username of the admin user to be exported.
	Username *string `pulumi:"username"`
}

// A collection of values returned by getZIAAdminUsers.
type LookupZIAAdminUsersResult struct {
	// (Set of Object) The admin's scope. Only applicable for the LOCATION_GROUP admin scope type, in which case this attribute gives the list of ID/name pairs of locations within the location group.
	AdminScopes []GetZIAAdminUsersAdminScope `pulumi:"adminScopes"`
	// (String) Additional information about the admin or auditor.
	Comments string `pulumi:"comments"`
	// (Boolean) Indicates whether or not the admin account is disabled.
	Disabled bool `pulumi:"disabled"`
	// (String) Admin or auditor's email address.
	Email string `pulumi:"email"`
	// (List of Object)
	ExecMobileAppTokens []GetZIAAdminUsersExecMobileAppToken `pulumi:"execMobileAppTokens"`
	// (Number) Identifier that uniquely identifies an entity
	Id int `pulumi:"id"`
	// (Boolean) Indicates whether the user is an auditor. This attribute is subject to change.
	IsAuditor bool `pulumi:"isAuditor"`
	// (Boolean) Indicates whether or not Executive Insights App access is enabled for the admin.
	IsExecMobileAppEnabled bool `pulumi:"isExecMobileAppEnabled"`
	// (Boolean) Indicates whether or not the admin can be edited or deleted.
	IsNonEditable bool `pulumi:"isNonEditable"`
	// (Boolean) Indicates whether or not an admin's password has expired.
	IsPasswordExpired bool `pulumi:"isPasswordExpired"`
	// (Boolean) The default is true when SAML Authentication is disabled. When SAML Authentication is enabled, this can be set to false in order to force the admin to login via SSO only.
	IsPasswordLoginAllowed bool `pulumi:"isPasswordLoginAllowed"`
	// (Boolean) Communication setting for Product Update.
	IsProductUpdateCommEnabled bool `pulumi:"isProductUpdateCommEnabled"`
	// (Boolean) Communication for Security Report is enabled.
	IsSecurityReportCommEnabled bool `pulumi:"isSecurityReportCommEnabled"`
	// (Boolean) Communication setting for Service Update.
	IsServiceUpdateCommEnabled bool   `pulumi:"isServiceUpdateCommEnabled"`
	LoginName                  string `pulumi:"loginName"`
	PwdLastModifiedTime        int    `pulumi:"pwdLastModifiedTime"`
	// (Set of Object) Role of the admin. This is not required for an auditor.
	Roles    []GetZIAAdminUsersRole `pulumi:"roles"`
	Username string                 `pulumi:"username"`
}

func LookupZIAAdminUsersOutput(ctx *pulumi.Context, args LookupZIAAdminUsersOutputArgs, opts ...pulumi.InvokeOption) LookupZIAAdminUsersResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupZIAAdminUsersResult, error) {
			args := v.(LookupZIAAdminUsersArgs)
			r, err := LookupZIAAdminUsers(ctx, &args, opts...)
			var s LookupZIAAdminUsersResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupZIAAdminUsersResultOutput)
}

// A collection of arguments for invoking getZIAAdminUsers.
type LookupZIAAdminUsersOutputArgs struct {
	// The ID of the admin user to be exported.
	Id pulumi.IntPtrInput `pulumi:"id"`
	// The email address of the admin user to be exported.
	LoginName pulumi.StringPtrInput `pulumi:"loginName"`
	// The username of the admin user to be exported.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (LookupZIAAdminUsersOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupZIAAdminUsersArgs)(nil)).Elem()
}

// A collection of values returned by getZIAAdminUsers.
type LookupZIAAdminUsersResultOutput struct{ *pulumi.OutputState }

func (LookupZIAAdminUsersResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupZIAAdminUsersResult)(nil)).Elem()
}

func (o LookupZIAAdminUsersResultOutput) ToLookupZIAAdminUsersResultOutput() LookupZIAAdminUsersResultOutput {
	return o
}

func (o LookupZIAAdminUsersResultOutput) ToLookupZIAAdminUsersResultOutputWithContext(ctx context.Context) LookupZIAAdminUsersResultOutput {
	return o
}

// (Set of Object) The admin's scope. Only applicable for the LOCATION_GROUP admin scope type, in which case this attribute gives the list of ID/name pairs of locations within the location group.
func (o LookupZIAAdminUsersResultOutput) AdminScopes() GetZIAAdminUsersAdminScopeArrayOutput {
	return o.ApplyT(func(v LookupZIAAdminUsersResult) []GetZIAAdminUsersAdminScope { return v.AdminScopes }).(GetZIAAdminUsersAdminScopeArrayOutput)
}

// (String) Additional information about the admin or auditor.
func (o LookupZIAAdminUsersResultOutput) Comments() pulumi.StringOutput {
	return o.ApplyT(func(v LookupZIAAdminUsersResult) string { return v.Comments }).(pulumi.StringOutput)
}

// (Boolean) Indicates whether or not the admin account is disabled.
func (o LookupZIAAdminUsersResultOutput) Disabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupZIAAdminUsersResult) bool { return v.Disabled }).(pulumi.BoolOutput)
}

// (String) Admin or auditor's email address.
func (o LookupZIAAdminUsersResultOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v LookupZIAAdminUsersResult) string { return v.Email }).(pulumi.StringOutput)
}

// (List of Object)
func (o LookupZIAAdminUsersResultOutput) ExecMobileAppTokens() GetZIAAdminUsersExecMobileAppTokenArrayOutput {
	return o.ApplyT(func(v LookupZIAAdminUsersResult) []GetZIAAdminUsersExecMobileAppToken { return v.ExecMobileAppTokens }).(GetZIAAdminUsersExecMobileAppTokenArrayOutput)
}

// (Number) Identifier that uniquely identifies an entity
func (o LookupZIAAdminUsersResultOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v LookupZIAAdminUsersResult) int { return v.Id }).(pulumi.IntOutput)
}

// (Boolean) Indicates whether the user is an auditor. This attribute is subject to change.
func (o LookupZIAAdminUsersResultOutput) IsAuditor() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupZIAAdminUsersResult) bool { return v.IsAuditor }).(pulumi.BoolOutput)
}

// (Boolean) Indicates whether or not Executive Insights App access is enabled for the admin.
func (o LookupZIAAdminUsersResultOutput) IsExecMobileAppEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupZIAAdminUsersResult) bool { return v.IsExecMobileAppEnabled }).(pulumi.BoolOutput)
}

// (Boolean) Indicates whether or not the admin can be edited or deleted.
func (o LookupZIAAdminUsersResultOutput) IsNonEditable() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupZIAAdminUsersResult) bool { return v.IsNonEditable }).(pulumi.BoolOutput)
}

// (Boolean) Indicates whether or not an admin's password has expired.
func (o LookupZIAAdminUsersResultOutput) IsPasswordExpired() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupZIAAdminUsersResult) bool { return v.IsPasswordExpired }).(pulumi.BoolOutput)
}

// (Boolean) The default is true when SAML Authentication is disabled. When SAML Authentication is enabled, this can be set to false in order to force the admin to login via SSO only.
func (o LookupZIAAdminUsersResultOutput) IsPasswordLoginAllowed() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupZIAAdminUsersResult) bool { return v.IsPasswordLoginAllowed }).(pulumi.BoolOutput)
}

// (Boolean) Communication setting for Product Update.
func (o LookupZIAAdminUsersResultOutput) IsProductUpdateCommEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupZIAAdminUsersResult) bool { return v.IsProductUpdateCommEnabled }).(pulumi.BoolOutput)
}

// (Boolean) Communication for Security Report is enabled.
func (o LookupZIAAdminUsersResultOutput) IsSecurityReportCommEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupZIAAdminUsersResult) bool { return v.IsSecurityReportCommEnabled }).(pulumi.BoolOutput)
}

// (Boolean) Communication setting for Service Update.
func (o LookupZIAAdminUsersResultOutput) IsServiceUpdateCommEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupZIAAdminUsersResult) bool { return v.IsServiceUpdateCommEnabled }).(pulumi.BoolOutput)
}

func (o LookupZIAAdminUsersResultOutput) LoginName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupZIAAdminUsersResult) string { return v.LoginName }).(pulumi.StringOutput)
}

func (o LookupZIAAdminUsersResultOutput) PwdLastModifiedTime() pulumi.IntOutput {
	return o.ApplyT(func(v LookupZIAAdminUsersResult) int { return v.PwdLastModifiedTime }).(pulumi.IntOutput)
}

// (Set of Object) Role of the admin. This is not required for an auditor.
func (o LookupZIAAdminUsersResultOutput) Roles() GetZIAAdminUsersRoleArrayOutput {
	return o.ApplyT(func(v LookupZIAAdminUsersResult) []GetZIAAdminUsersRole { return v.Roles }).(GetZIAAdminUsersRoleArrayOutput)
}

func (o LookupZIAAdminUsersResultOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v LookupZIAAdminUsersResult) string { return v.Username }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupZIAAdminUsersResultOutput{})
}
