// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package firewall

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use the **zia_firewall_filtering_rule** data source to get information about a cloud firewall rule available in the Zscaler Internet Access cloud firewall.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/zscaler/pulumi-zia/sdk/go/zia/Firewall"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Firewall.GetFirewallFilteringRule(ctx, &firewall.GetFirewallFilteringRuleArgs{
//				Name: pulumi.StringRef("Office 365 One Click Rule"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupFirewallFilteringRule(ctx *pulumi.Context, args *LookupFirewallFilteringRuleArgs, opts ...pulumi.InvokeOption) (*LookupFirewallFilteringRuleResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv LookupFirewallFilteringRuleResult
	err := ctx.Invoke("zia:Firewall/getFirewallFilteringRule:getFirewallFilteringRule", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getFirewallFilteringRule.
type LookupFirewallFilteringRuleArgs struct {
	// (Optional) Choose the action of the service when packets match the rule. The following actions are accepted: `ALLOW`, `BLOCK_DROP`, `BLOCK_RESET`, `BLOCK_ICMP`, `EVAL_NWAPP`
	Action *string `pulumi:"action"`
	// (Optional) Enter additional notes or information. The description cannot exceed 10,240 characters.
	Description *string `pulumi:"description"`
	// Unique identifier for the Firewall Filtering policy rule
	Id *int `pulumi:"id"`
	// (Number)
	LastModifiedTime *int `pulumi:"lastModifiedTime"`
	// Name of the Firewall Filtering policy rule
	Name *string `pulumi:"name"`
	// (Optional) An enabled rule is actively enforced. A disabled rule is not actively enforced but does not lose its place in the Rule Order. The service skips it and moves to the next rule.
	State *string `pulumi:"state"`
}

// A collection of values returned by getFirewallFilteringRule.
type LookupFirewallFilteringRuleResult struct {
	// (String)
	AccessControl string `pulumi:"accessControl"`
	// (Optional) Choose the action of the service when packets match the rule. The following actions are accepted: `ALLOW`, `BLOCK_DROP`, `BLOCK_RESET`, `BLOCK_ICMP`, `EVAL_NWAPP`
	Action *string `pulumi:"action"`
	// Application service groups on which this rule is applied
	AppServiceGroups []GetFirewallFilteringRuleAppServiceGroup `pulumi:"appServiceGroups"`
	// Application services on which this rule is applied
	AppServices []GetFirewallFilteringRuleAppService `pulumi:"appServices"`
	// (Boolean)
	DefaultRule bool `pulumi:"defaultRule"`
	// (Optional) Apply to any number of departments When not used it implies `Any` to apply the rule to all departments.
	Departments []GetFirewallFilteringRuleDepartment `pulumi:"departments"`
	// (Optional) Enter additional notes or information. The description cannot exceed 10,240 characters.
	Description *string `pulumi:"description"`
	// ** - (Optional) -  IP addresses and fully qualified domain names (FQDNs), if the domain has multiple destination IP addresses or if its IP addresses may change. For IP addresses, you can enter individual IP addresses, subnets, or address ranges. If adding multiple items, hit Enter after each entry.
	DestAddresses []string `pulumi:"destAddresses"`
	// ** - (Optional) Identify destinations based on the location of a server, select Any to apply the rule to all countries or select the countries to which you want to control traffic.
	DestCountries []string `pulumi:"destCountries"`
	// ** - (Optional) identify destinations based on the URL category of the domain, select Any to apply the rule to all categories or select the specific categories you want to control.
	DestIpCategories []string `pulumi:"destIpCategories"`
	// ** - (Optional) Any number of destination IP address groups that you want to control with this rule.
	DestIpGroups []string `pulumi:"destIpGroups"`
	// (Boolean)
	EnableFullLogging bool `pulumi:"enableFullLogging"`
	// (Optional) You can manually select up to `8` groups. When not used it implies `Any` to apply the rule to all groups.
	Groups []GetFirewallFilteringRuleGroup `pulumi:"groups"`
	// (Number) The ID of this resource.
	Id int `pulumi:"id"`
	// Labels that are applicable to the rule.
	Labels           []GetFirewallFilteringRuleLabel          `pulumi:"labels"`
	LastModifiedBies []GetFirewallFilteringRuleLastModifiedBy `pulumi:"lastModifiedBies"`
	// (Number)
	LastModifiedTime *int `pulumi:"lastModifiedTime"`
	// (Optional) You can manually select up to `32` location groups. When not used it implies `Any` to apply the rule to all location groups.
	LocationGroups []GetFirewallFilteringRuleLocationGroup `pulumi:"locationGroups"`
	// (Optional) You can manually select up to `8` locations. When not used it implies `Any` to apply the rule to all groups.
	Locations []GetFirewallFilteringRuleLocation `pulumi:"locations"`
	// (String) The configured name of the entity
	Name string `pulumi:"name"`
	// (Optional) Any number of application groups that you want to control with this rule. The service provides predefined applications that you can group, but not modify
	NwApplicationGroups []GetFirewallFilteringRuleNwApplicationGroup `pulumi:"nwApplicationGroups"`
	// (Optional) When not used it applies the rule to all applications. The service provides predefined applications, which you can group, but not modify.
	NwApplications []string `pulumi:"nwApplications"`
	// (Optional) Any number of predefined or custom network service groups to which the rule applies.
	NwServiceGroups []GetFirewallFilteringRuleNwServiceGroup `pulumi:"nwServiceGroups"`
	// (Optional) When not used it applies the rule to all network services or you can select specific network services. The Zscaler firewall has predefined services and you can configure up to `1,024` additional custom services.
	NwServices []GetFirewallFilteringRuleNwService `pulumi:"nwServices"`
	// (Required) Policy rules are evaluated in ascending numerical order (Rule 1 before Rule 2, and so on), and the Rule Order reflects this rule's place in the order.
	Order int `pulumi:"order"`
	// (Boolean)
	Predefined bool `pulumi:"predefined"`
	// (Optional) By default, the admin ranking is disabled. To use this feature, you must enable admin rank. The default value is `7`.
	Rank int `pulumi:"rank"`
	// (Optional) Any number of source IP address groups that you want to control with this rule.
	SrcIpGroups []string `pulumi:"srcIpGroups"`
	// (Optional) You can enter individual IP addresses, subnets, or address ranges.
	SrcIps []string `pulumi:"srcIps"`
	// (Optional) An enabled rule is actively enforced. A disabled rule is not actively enforced but does not lose its place in the Rule Order. The service skips it and moves to the next rule.
	State *string `pulumi:"state"`
	// (Optional) You can manually select up to `2` time intervals. When not used it implies `always` to apply the rule to all time intervals.
	TimeWindows []GetFirewallFilteringRuleTimeWindow `pulumi:"timeWindows"`
	// (Optional) You can manually select up to `4` general and/or special users. When not used it implies `Any` to apply the rule to all users.
	Users []GetFirewallFilteringRuleUser `pulumi:"users"`
}

func LookupFirewallFilteringRuleOutput(ctx *pulumi.Context, args LookupFirewallFilteringRuleOutputArgs, opts ...pulumi.InvokeOption) LookupFirewallFilteringRuleResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupFirewallFilteringRuleResult, error) {
			args := v.(LookupFirewallFilteringRuleArgs)
			r, err := LookupFirewallFilteringRule(ctx, &args, opts...)
			var s LookupFirewallFilteringRuleResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupFirewallFilteringRuleResultOutput)
}

// A collection of arguments for invoking getFirewallFilteringRule.
type LookupFirewallFilteringRuleOutputArgs struct {
	// (Optional) Choose the action of the service when packets match the rule. The following actions are accepted: `ALLOW`, `BLOCK_DROP`, `BLOCK_RESET`, `BLOCK_ICMP`, `EVAL_NWAPP`
	Action pulumi.StringPtrInput `pulumi:"action"`
	// (Optional) Enter additional notes or information. The description cannot exceed 10,240 characters.
	Description pulumi.StringPtrInput `pulumi:"description"`
	// Unique identifier for the Firewall Filtering policy rule
	Id pulumi.IntPtrInput `pulumi:"id"`
	// (Number)
	LastModifiedTime pulumi.IntPtrInput `pulumi:"lastModifiedTime"`
	// Name of the Firewall Filtering policy rule
	Name pulumi.StringPtrInput `pulumi:"name"`
	// (Optional) An enabled rule is actively enforced. A disabled rule is not actively enforced but does not lose its place in the Rule Order. The service skips it and moves to the next rule.
	State pulumi.StringPtrInput `pulumi:"state"`
}

func (LookupFirewallFilteringRuleOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupFirewallFilteringRuleArgs)(nil)).Elem()
}

// A collection of values returned by getFirewallFilteringRule.
type LookupFirewallFilteringRuleResultOutput struct{ *pulumi.OutputState }

func (LookupFirewallFilteringRuleResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupFirewallFilteringRuleResult)(nil)).Elem()
}

func (o LookupFirewallFilteringRuleResultOutput) ToLookupFirewallFilteringRuleResultOutput() LookupFirewallFilteringRuleResultOutput {
	return o
}

func (o LookupFirewallFilteringRuleResultOutput) ToLookupFirewallFilteringRuleResultOutputWithContext(ctx context.Context) LookupFirewallFilteringRuleResultOutput {
	return o
}

// (String)
func (o LookupFirewallFilteringRuleResultOutput) AccessControl() pulumi.StringOutput {
	return o.ApplyT(func(v LookupFirewallFilteringRuleResult) string { return v.AccessControl }).(pulumi.StringOutput)
}

// (Optional) Choose the action of the service when packets match the rule. The following actions are accepted: `ALLOW`, `BLOCK_DROP`, `BLOCK_RESET`, `BLOCK_ICMP`, `EVAL_NWAPP`
func (o LookupFirewallFilteringRuleResultOutput) Action() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupFirewallFilteringRuleResult) *string { return v.Action }).(pulumi.StringPtrOutput)
}

// Application service groups on which this rule is applied
func (o LookupFirewallFilteringRuleResultOutput) AppServiceGroups() GetFirewallFilteringRuleAppServiceGroupArrayOutput {
	return o.ApplyT(func(v LookupFirewallFilteringRuleResult) []GetFirewallFilteringRuleAppServiceGroup {
		return v.AppServiceGroups
	}).(GetFirewallFilteringRuleAppServiceGroupArrayOutput)
}

// Application services on which this rule is applied
func (o LookupFirewallFilteringRuleResultOutput) AppServices() GetFirewallFilteringRuleAppServiceArrayOutput {
	return o.ApplyT(func(v LookupFirewallFilteringRuleResult) []GetFirewallFilteringRuleAppService { return v.AppServices }).(GetFirewallFilteringRuleAppServiceArrayOutput)
}

// (Boolean)
func (o LookupFirewallFilteringRuleResultOutput) DefaultRule() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupFirewallFilteringRuleResult) bool { return v.DefaultRule }).(pulumi.BoolOutput)
}

// (Optional) Apply to any number of departments When not used it implies `Any` to apply the rule to all departments.
func (o LookupFirewallFilteringRuleResultOutput) Departments() GetFirewallFilteringRuleDepartmentArrayOutput {
	return o.ApplyT(func(v LookupFirewallFilteringRuleResult) []GetFirewallFilteringRuleDepartment { return v.Departments }).(GetFirewallFilteringRuleDepartmentArrayOutput)
}

// (Optional) Enter additional notes or information. The description cannot exceed 10,240 characters.
func (o LookupFirewallFilteringRuleResultOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupFirewallFilteringRuleResult) *string { return v.Description }).(pulumi.StringPtrOutput)
}

// ** - (Optional) -  IP addresses and fully qualified domain names (FQDNs), if the domain has multiple destination IP addresses or if its IP addresses may change. For IP addresses, you can enter individual IP addresses, subnets, or address ranges. If adding multiple items, hit Enter after each entry.
func (o LookupFirewallFilteringRuleResultOutput) DestAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupFirewallFilteringRuleResult) []string { return v.DestAddresses }).(pulumi.StringArrayOutput)
}

// ** - (Optional) Identify destinations based on the location of a server, select Any to apply the rule to all countries or select the countries to which you want to control traffic.
func (o LookupFirewallFilteringRuleResultOutput) DestCountries() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupFirewallFilteringRuleResult) []string { return v.DestCountries }).(pulumi.StringArrayOutput)
}

// ** - (Optional) identify destinations based on the URL category of the domain, select Any to apply the rule to all categories or select the specific categories you want to control.
func (o LookupFirewallFilteringRuleResultOutput) DestIpCategories() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupFirewallFilteringRuleResult) []string { return v.DestIpCategories }).(pulumi.StringArrayOutput)
}

// ** - (Optional) Any number of destination IP address groups that you want to control with this rule.
func (o LookupFirewallFilteringRuleResultOutput) DestIpGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupFirewallFilteringRuleResult) []string { return v.DestIpGroups }).(pulumi.StringArrayOutput)
}

// (Boolean)
func (o LookupFirewallFilteringRuleResultOutput) EnableFullLogging() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupFirewallFilteringRuleResult) bool { return v.EnableFullLogging }).(pulumi.BoolOutput)
}

// (Optional) You can manually select up to `8` groups. When not used it implies `Any` to apply the rule to all groups.
func (o LookupFirewallFilteringRuleResultOutput) Groups() GetFirewallFilteringRuleGroupArrayOutput {
	return o.ApplyT(func(v LookupFirewallFilteringRuleResult) []GetFirewallFilteringRuleGroup { return v.Groups }).(GetFirewallFilteringRuleGroupArrayOutput)
}

// (Number) The ID of this resource.
func (o LookupFirewallFilteringRuleResultOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v LookupFirewallFilteringRuleResult) int { return v.Id }).(pulumi.IntOutput)
}

// Labels that are applicable to the rule.
func (o LookupFirewallFilteringRuleResultOutput) Labels() GetFirewallFilteringRuleLabelArrayOutput {
	return o.ApplyT(func(v LookupFirewallFilteringRuleResult) []GetFirewallFilteringRuleLabel { return v.Labels }).(GetFirewallFilteringRuleLabelArrayOutput)
}

func (o LookupFirewallFilteringRuleResultOutput) LastModifiedBies() GetFirewallFilteringRuleLastModifiedByArrayOutput {
	return o.ApplyT(func(v LookupFirewallFilteringRuleResult) []GetFirewallFilteringRuleLastModifiedBy {
		return v.LastModifiedBies
	}).(GetFirewallFilteringRuleLastModifiedByArrayOutput)
}

// (Number)
func (o LookupFirewallFilteringRuleResultOutput) LastModifiedTime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupFirewallFilteringRuleResult) *int { return v.LastModifiedTime }).(pulumi.IntPtrOutput)
}

// (Optional) You can manually select up to `32` location groups. When not used it implies `Any` to apply the rule to all location groups.
func (o LookupFirewallFilteringRuleResultOutput) LocationGroups() GetFirewallFilteringRuleLocationGroupArrayOutput {
	return o.ApplyT(func(v LookupFirewallFilteringRuleResult) []GetFirewallFilteringRuleLocationGroup {
		return v.LocationGroups
	}).(GetFirewallFilteringRuleLocationGroupArrayOutput)
}

// (Optional) You can manually select up to `8` locations. When not used it implies `Any` to apply the rule to all groups.
func (o LookupFirewallFilteringRuleResultOutput) Locations() GetFirewallFilteringRuleLocationArrayOutput {
	return o.ApplyT(func(v LookupFirewallFilteringRuleResult) []GetFirewallFilteringRuleLocation { return v.Locations }).(GetFirewallFilteringRuleLocationArrayOutput)
}

// (String) The configured name of the entity
func (o LookupFirewallFilteringRuleResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupFirewallFilteringRuleResult) string { return v.Name }).(pulumi.StringOutput)
}

// (Optional) Any number of application groups that you want to control with this rule. The service provides predefined applications that you can group, but not modify
func (o LookupFirewallFilteringRuleResultOutput) NwApplicationGroups() GetFirewallFilteringRuleNwApplicationGroupArrayOutput {
	return o.ApplyT(func(v LookupFirewallFilteringRuleResult) []GetFirewallFilteringRuleNwApplicationGroup {
		return v.NwApplicationGroups
	}).(GetFirewallFilteringRuleNwApplicationGroupArrayOutput)
}

// (Optional) When not used it applies the rule to all applications. The service provides predefined applications, which you can group, but not modify.
func (o LookupFirewallFilteringRuleResultOutput) NwApplications() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupFirewallFilteringRuleResult) []string { return v.NwApplications }).(pulumi.StringArrayOutput)
}

// (Optional) Any number of predefined or custom network service groups to which the rule applies.
func (o LookupFirewallFilteringRuleResultOutput) NwServiceGroups() GetFirewallFilteringRuleNwServiceGroupArrayOutput {
	return o.ApplyT(func(v LookupFirewallFilteringRuleResult) []GetFirewallFilteringRuleNwServiceGroup {
		return v.NwServiceGroups
	}).(GetFirewallFilteringRuleNwServiceGroupArrayOutput)
}

// (Optional) When not used it applies the rule to all network services or you can select specific network services. The Zscaler firewall has predefined services and you can configure up to `1,024` additional custom services.
func (o LookupFirewallFilteringRuleResultOutput) NwServices() GetFirewallFilteringRuleNwServiceArrayOutput {
	return o.ApplyT(func(v LookupFirewallFilteringRuleResult) []GetFirewallFilteringRuleNwService { return v.NwServices }).(GetFirewallFilteringRuleNwServiceArrayOutput)
}

// (Required) Policy rules are evaluated in ascending numerical order (Rule 1 before Rule 2, and so on), and the Rule Order reflects this rule's place in the order.
func (o LookupFirewallFilteringRuleResultOutput) Order() pulumi.IntOutput {
	return o.ApplyT(func(v LookupFirewallFilteringRuleResult) int { return v.Order }).(pulumi.IntOutput)
}

// (Boolean)
func (o LookupFirewallFilteringRuleResultOutput) Predefined() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupFirewallFilteringRuleResult) bool { return v.Predefined }).(pulumi.BoolOutput)
}

// (Optional) By default, the admin ranking is disabled. To use this feature, you must enable admin rank. The default value is `7`.
func (o LookupFirewallFilteringRuleResultOutput) Rank() pulumi.IntOutput {
	return o.ApplyT(func(v LookupFirewallFilteringRuleResult) int { return v.Rank }).(pulumi.IntOutput)
}

// (Optional) Any number of source IP address groups that you want to control with this rule.
func (o LookupFirewallFilteringRuleResultOutput) SrcIpGroups() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupFirewallFilteringRuleResult) []string { return v.SrcIpGroups }).(pulumi.StringArrayOutput)
}

// (Optional) You can enter individual IP addresses, subnets, or address ranges.
func (o LookupFirewallFilteringRuleResultOutput) SrcIps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupFirewallFilteringRuleResult) []string { return v.SrcIps }).(pulumi.StringArrayOutput)
}

// (Optional) An enabled rule is actively enforced. A disabled rule is not actively enforced but does not lose its place in the Rule Order. The service skips it and moves to the next rule.
func (o LookupFirewallFilteringRuleResultOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupFirewallFilteringRuleResult) *string { return v.State }).(pulumi.StringPtrOutput)
}

// (Optional) You can manually select up to `2` time intervals. When not used it implies `always` to apply the rule to all time intervals.
func (o LookupFirewallFilteringRuleResultOutput) TimeWindows() GetFirewallFilteringRuleTimeWindowArrayOutput {
	return o.ApplyT(func(v LookupFirewallFilteringRuleResult) []GetFirewallFilteringRuleTimeWindow { return v.TimeWindows }).(GetFirewallFilteringRuleTimeWindowArrayOutput)
}

// (Optional) You can manually select up to `4` general and/or special users. When not used it implies `Any` to apply the rule to all users.
func (o LookupFirewallFilteringRuleResultOutput) Users() GetFirewallFilteringRuleUserArrayOutput {
	return o.ApplyT(func(v LookupFirewallFilteringRuleResult) []GetFirewallFilteringRuleUser { return v.Users }).(GetFirewallFilteringRuleUserArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupFirewallFilteringRuleResultOutput{})
}
