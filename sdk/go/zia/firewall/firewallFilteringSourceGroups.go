// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package firewall

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The **zia_firewall_filtering_ip_source_groups** resource allows the creation and management of ZIA Cloud Firewall IP source groups in the Zscaler Internet Access. This resource can then be associated with a ZIA cloud firewall filtering rule.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/zscaler/pulumi-zia/sdk/go/zia/Firewall"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Firewall.NewFirewallFilteringSourceGroups(ctx, "example", &Firewall.FirewallFilteringSourceGroupsArgs{
//				Description: pulumi.String("Example"),
//				IpAddresses: pulumi.StringArray{
//					pulumi.String("192.168.100.1"),
//					pulumi.String("192.168.100.2"),
//					pulumi.String("192.168.100.3"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/zscaler/pulumi-zia/sdk/go/zia/Firewall"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Firewall.NewFirewallFilteringSourceGroups(ctx, "example", &Firewall.FirewallFilteringSourceGroupsArgs{
//				Description: pulumi.String("Example"),
//				IpAddresses: pulumi.StringArray{
//					pulumi.String("192.0.2.1-192.0.2.10"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//	"github.com/zscaler/pulumi-zia/sdk/go/zia/Firewall"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := Firewall.NewFirewallFilteringSourceGroups(ctx, "example", &Firewall.FirewallFilteringSourceGroupsArgs{
//				Description: pulumi.String("Example"),
//				IpAddresses: pulumi.StringArray{
//					pulumi.String("203.0.113.0/24"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type FirewallFilteringSourceGroups struct {
	pulumi.CustomResourceState

	// Description of the source IP group
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Source IP addresses to be added to the group. Enter any number of IP addresses. You can enter:
	// * An IP address (198.51.100.100)
	// * A range of IP addresses 192.0.2.1-192.0.2.10
	// * An IP address with a netmask 203.0.113.0/24
	IpAddresses     pulumi.StringArrayOutput `pulumi:"ipAddresses"`
	IpSourceGroupId pulumi.IntOutput         `pulumi:"ipSourceGroupId"`
	// Source IP group name
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewFirewallFilteringSourceGroups registers a new resource with the given unique name, arguments, and options.
func NewFirewallFilteringSourceGroups(ctx *pulumi.Context,
	name string, args *FirewallFilteringSourceGroupsArgs, opts ...pulumi.ResourceOption) (*FirewallFilteringSourceGroups, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.IpAddresses == nil {
		return nil, errors.New("invalid value for required argument 'IpAddresses'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource FirewallFilteringSourceGroups
	err := ctx.RegisterResource("zia:Firewall/firewallFilteringSourceGroups:FirewallFilteringSourceGroups", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFirewallFilteringSourceGroups gets an existing FirewallFilteringSourceGroups resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFirewallFilteringSourceGroups(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FirewallFilteringSourceGroupsState, opts ...pulumi.ResourceOption) (*FirewallFilteringSourceGroups, error) {
	var resource FirewallFilteringSourceGroups
	err := ctx.ReadResource("zia:Firewall/firewallFilteringSourceGroups:FirewallFilteringSourceGroups", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FirewallFilteringSourceGroups resources.
type firewallFilteringSourceGroupsState struct {
	// Description of the source IP group
	Description *string `pulumi:"description"`
	// Source IP addresses to be added to the group. Enter any number of IP addresses. You can enter:
	// * An IP address (198.51.100.100)
	// * A range of IP addresses 192.0.2.1-192.0.2.10
	// * An IP address with a netmask 203.0.113.0/24
	IpAddresses     []string `pulumi:"ipAddresses"`
	IpSourceGroupId *int     `pulumi:"ipSourceGroupId"`
	// Source IP group name
	Name *string `pulumi:"name"`
}

type FirewallFilteringSourceGroupsState struct {
	// Description of the source IP group
	Description pulumi.StringPtrInput
	// Source IP addresses to be added to the group. Enter any number of IP addresses. You can enter:
	// * An IP address (198.51.100.100)
	// * A range of IP addresses 192.0.2.1-192.0.2.10
	// * An IP address with a netmask 203.0.113.0/24
	IpAddresses     pulumi.StringArrayInput
	IpSourceGroupId pulumi.IntPtrInput
	// Source IP group name
	Name pulumi.StringPtrInput
}

func (FirewallFilteringSourceGroupsState) ElementType() reflect.Type {
	return reflect.TypeOf((*firewallFilteringSourceGroupsState)(nil)).Elem()
}

type firewallFilteringSourceGroupsArgs struct {
	// Description of the source IP group
	Description *string `pulumi:"description"`
	// Source IP addresses to be added to the group. Enter any number of IP addresses. You can enter:
	// * An IP address (198.51.100.100)
	// * A range of IP addresses 192.0.2.1-192.0.2.10
	// * An IP address with a netmask 203.0.113.0/24
	IpAddresses []string `pulumi:"ipAddresses"`
	// Source IP group name
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a FirewallFilteringSourceGroups resource.
type FirewallFilteringSourceGroupsArgs struct {
	// Description of the source IP group
	Description pulumi.StringPtrInput
	// Source IP addresses to be added to the group. Enter any number of IP addresses. You can enter:
	// * An IP address (198.51.100.100)
	// * A range of IP addresses 192.0.2.1-192.0.2.10
	// * An IP address with a netmask 203.0.113.0/24
	IpAddresses pulumi.StringArrayInput
	// Source IP group name
	Name pulumi.StringPtrInput
}

func (FirewallFilteringSourceGroupsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*firewallFilteringSourceGroupsArgs)(nil)).Elem()
}

type FirewallFilteringSourceGroupsInput interface {
	pulumi.Input

	ToFirewallFilteringSourceGroupsOutput() FirewallFilteringSourceGroupsOutput
	ToFirewallFilteringSourceGroupsOutputWithContext(ctx context.Context) FirewallFilteringSourceGroupsOutput
}

func (*FirewallFilteringSourceGroups) ElementType() reflect.Type {
	return reflect.TypeOf((**FirewallFilteringSourceGroups)(nil)).Elem()
}

func (i *FirewallFilteringSourceGroups) ToFirewallFilteringSourceGroupsOutput() FirewallFilteringSourceGroupsOutput {
	return i.ToFirewallFilteringSourceGroupsOutputWithContext(context.Background())
}

func (i *FirewallFilteringSourceGroups) ToFirewallFilteringSourceGroupsOutputWithContext(ctx context.Context) FirewallFilteringSourceGroupsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallFilteringSourceGroupsOutput)
}

// FirewallFilteringSourceGroupsArrayInput is an input type that accepts FirewallFilteringSourceGroupsArray and FirewallFilteringSourceGroupsArrayOutput values.
// You can construct a concrete instance of `FirewallFilteringSourceGroupsArrayInput` via:
//
//	FirewallFilteringSourceGroupsArray{ FirewallFilteringSourceGroupsArgs{...} }
type FirewallFilteringSourceGroupsArrayInput interface {
	pulumi.Input

	ToFirewallFilteringSourceGroupsArrayOutput() FirewallFilteringSourceGroupsArrayOutput
	ToFirewallFilteringSourceGroupsArrayOutputWithContext(context.Context) FirewallFilteringSourceGroupsArrayOutput
}

type FirewallFilteringSourceGroupsArray []FirewallFilteringSourceGroupsInput

func (FirewallFilteringSourceGroupsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FirewallFilteringSourceGroups)(nil)).Elem()
}

func (i FirewallFilteringSourceGroupsArray) ToFirewallFilteringSourceGroupsArrayOutput() FirewallFilteringSourceGroupsArrayOutput {
	return i.ToFirewallFilteringSourceGroupsArrayOutputWithContext(context.Background())
}

func (i FirewallFilteringSourceGroupsArray) ToFirewallFilteringSourceGroupsArrayOutputWithContext(ctx context.Context) FirewallFilteringSourceGroupsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallFilteringSourceGroupsArrayOutput)
}

// FirewallFilteringSourceGroupsMapInput is an input type that accepts FirewallFilteringSourceGroupsMap and FirewallFilteringSourceGroupsMapOutput values.
// You can construct a concrete instance of `FirewallFilteringSourceGroupsMapInput` via:
//
//	FirewallFilteringSourceGroupsMap{ "key": FirewallFilteringSourceGroupsArgs{...} }
type FirewallFilteringSourceGroupsMapInput interface {
	pulumi.Input

	ToFirewallFilteringSourceGroupsMapOutput() FirewallFilteringSourceGroupsMapOutput
	ToFirewallFilteringSourceGroupsMapOutputWithContext(context.Context) FirewallFilteringSourceGroupsMapOutput
}

type FirewallFilteringSourceGroupsMap map[string]FirewallFilteringSourceGroupsInput

func (FirewallFilteringSourceGroupsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FirewallFilteringSourceGroups)(nil)).Elem()
}

func (i FirewallFilteringSourceGroupsMap) ToFirewallFilteringSourceGroupsMapOutput() FirewallFilteringSourceGroupsMapOutput {
	return i.ToFirewallFilteringSourceGroupsMapOutputWithContext(context.Background())
}

func (i FirewallFilteringSourceGroupsMap) ToFirewallFilteringSourceGroupsMapOutputWithContext(ctx context.Context) FirewallFilteringSourceGroupsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FirewallFilteringSourceGroupsMapOutput)
}

type FirewallFilteringSourceGroupsOutput struct{ *pulumi.OutputState }

func (FirewallFilteringSourceGroupsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FirewallFilteringSourceGroups)(nil)).Elem()
}

func (o FirewallFilteringSourceGroupsOutput) ToFirewallFilteringSourceGroupsOutput() FirewallFilteringSourceGroupsOutput {
	return o
}

func (o FirewallFilteringSourceGroupsOutput) ToFirewallFilteringSourceGroupsOutputWithContext(ctx context.Context) FirewallFilteringSourceGroupsOutput {
	return o
}

// Description of the source IP group
func (o FirewallFilteringSourceGroupsOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FirewallFilteringSourceGroups) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Source IP addresses to be added to the group. Enter any number of IP addresses. You can enter:
// * An IP address (198.51.100.100)
// * A range of IP addresses 192.0.2.1-192.0.2.10
// * An IP address with a netmask 203.0.113.0/24
func (o FirewallFilteringSourceGroupsOutput) IpAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FirewallFilteringSourceGroups) pulumi.StringArrayOutput { return v.IpAddresses }).(pulumi.StringArrayOutput)
}

func (o FirewallFilteringSourceGroupsOutput) IpSourceGroupId() pulumi.IntOutput {
	return o.ApplyT(func(v *FirewallFilteringSourceGroups) pulumi.IntOutput { return v.IpSourceGroupId }).(pulumi.IntOutput)
}

// Source IP group name
func (o FirewallFilteringSourceGroupsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *FirewallFilteringSourceGroups) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type FirewallFilteringSourceGroupsArrayOutput struct{ *pulumi.OutputState }

func (FirewallFilteringSourceGroupsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FirewallFilteringSourceGroups)(nil)).Elem()
}

func (o FirewallFilteringSourceGroupsArrayOutput) ToFirewallFilteringSourceGroupsArrayOutput() FirewallFilteringSourceGroupsArrayOutput {
	return o
}

func (o FirewallFilteringSourceGroupsArrayOutput) ToFirewallFilteringSourceGroupsArrayOutputWithContext(ctx context.Context) FirewallFilteringSourceGroupsArrayOutput {
	return o
}

func (o FirewallFilteringSourceGroupsArrayOutput) Index(i pulumi.IntInput) FirewallFilteringSourceGroupsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FirewallFilteringSourceGroups {
		return vs[0].([]*FirewallFilteringSourceGroups)[vs[1].(int)]
	}).(FirewallFilteringSourceGroupsOutput)
}

type FirewallFilteringSourceGroupsMapOutput struct{ *pulumi.OutputState }

func (FirewallFilteringSourceGroupsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FirewallFilteringSourceGroups)(nil)).Elem()
}

func (o FirewallFilteringSourceGroupsMapOutput) ToFirewallFilteringSourceGroupsMapOutput() FirewallFilteringSourceGroupsMapOutput {
	return o
}

func (o FirewallFilteringSourceGroupsMapOutput) ToFirewallFilteringSourceGroupsMapOutputWithContext(ctx context.Context) FirewallFilteringSourceGroupsMapOutput {
	return o
}

func (o FirewallFilteringSourceGroupsMapOutput) MapIndex(k pulumi.StringInput) FirewallFilteringSourceGroupsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FirewallFilteringSourceGroups {
		return vs[0].(map[string]*FirewallFilteringSourceGroups)[vs[1].(string)]
	}).(FirewallFilteringSourceGroupsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallFilteringSourceGroupsInput)(nil)).Elem(), &FirewallFilteringSourceGroups{})
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallFilteringSourceGroupsArrayInput)(nil)).Elem(), FirewallFilteringSourceGroupsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FirewallFilteringSourceGroupsMapInput)(nil)).Elem(), FirewallFilteringSourceGroupsMap{})
	pulumi.RegisterOutputType(FirewallFilteringSourceGroupsOutput{})
	pulumi.RegisterOutputType(FirewallFilteringSourceGroupsArrayOutput{})
	pulumi.RegisterOutputType(FirewallFilteringSourceGroupsMapOutput{})
}
