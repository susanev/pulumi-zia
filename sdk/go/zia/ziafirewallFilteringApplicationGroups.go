// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package zia

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The **zia_firewall_filtering_network_application_groups** resource allows the creation and management of ZIA Cloud Firewall IP source groups in the Zscaler Internet Access. This resource can then be associated with a ZIA cloud firewall filtering rule.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-zia/sdk/go/zia"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := zia.NewZIAFirewallFilteringApplicationGroups(ctx, "example", &zia.ZIAFirewallFilteringApplicationGroupsArgs{
//				Description: pulumi.String("Example"),
//				NetworkApplications: pulumi.StringArray{
//					pulumi.String("LDAP"),
//					pulumi.String("LDAPS"),
//					pulumi.String("SRVLOC"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type ZIAFirewallFilteringApplicationGroups struct {
	pulumi.CustomResourceState

	AppId pulumi.IntOutput `pulumi:"appId"`
	// Description of the network application group
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Network application group name
	Name pulumi.StringOutput `pulumi:"name"`
	// Any number of applications to be added to the group
	// * Refer to the Zscaler API Swagger for the complete list of applications [ZIA API Guide](https://help.zscaler.com/zia/firewall-policies#/networkApplicationGroups-get)
	NetworkApplications pulumi.StringArrayOutput `pulumi:"networkApplications"`
}

// NewZIAFirewallFilteringApplicationGroups registers a new resource with the given unique name, arguments, and options.
func NewZIAFirewallFilteringApplicationGroups(ctx *pulumi.Context,
	name string, args *ZIAFirewallFilteringApplicationGroupsArgs, opts ...pulumi.ResourceOption) (*ZIAFirewallFilteringApplicationGroups, error) {
	if args == nil {
		args = &ZIAFirewallFilteringApplicationGroupsArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource ZIAFirewallFilteringApplicationGroups
	err := ctx.RegisterResource("zia:index/zIAFirewallFilteringApplicationGroups:ZIAFirewallFilteringApplicationGroups", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetZIAFirewallFilteringApplicationGroups gets an existing ZIAFirewallFilteringApplicationGroups resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetZIAFirewallFilteringApplicationGroups(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ZIAFirewallFilteringApplicationGroupsState, opts ...pulumi.ResourceOption) (*ZIAFirewallFilteringApplicationGroups, error) {
	var resource ZIAFirewallFilteringApplicationGroups
	err := ctx.ReadResource("zia:index/zIAFirewallFilteringApplicationGroups:ZIAFirewallFilteringApplicationGroups", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ZIAFirewallFilteringApplicationGroups resources.
type ziafirewallFilteringApplicationGroupsState struct {
	AppId *int `pulumi:"appId"`
	// Description of the network application group
	Description *string `pulumi:"description"`
	// Network application group name
	Name *string `pulumi:"name"`
	// Any number of applications to be added to the group
	// * Refer to the Zscaler API Swagger for the complete list of applications [ZIA API Guide](https://help.zscaler.com/zia/firewall-policies#/networkApplicationGroups-get)
	NetworkApplications []string `pulumi:"networkApplications"`
}

type ZIAFirewallFilteringApplicationGroupsState struct {
	AppId pulumi.IntPtrInput
	// Description of the network application group
	Description pulumi.StringPtrInput
	// Network application group name
	Name pulumi.StringPtrInput
	// Any number of applications to be added to the group
	// * Refer to the Zscaler API Swagger for the complete list of applications [ZIA API Guide](https://help.zscaler.com/zia/firewall-policies#/networkApplicationGroups-get)
	NetworkApplications pulumi.StringArrayInput
}

func (ZIAFirewallFilteringApplicationGroupsState) ElementType() reflect.Type {
	return reflect.TypeOf((*ziafirewallFilteringApplicationGroupsState)(nil)).Elem()
}

type ziafirewallFilteringApplicationGroupsArgs struct {
	// Description of the network application group
	Description *string `pulumi:"description"`
	// Network application group name
	Name *string `pulumi:"name"`
	// Any number of applications to be added to the group
	// * Refer to the Zscaler API Swagger for the complete list of applications [ZIA API Guide](https://help.zscaler.com/zia/firewall-policies#/networkApplicationGroups-get)
	NetworkApplications []string `pulumi:"networkApplications"`
}

// The set of arguments for constructing a ZIAFirewallFilteringApplicationGroups resource.
type ZIAFirewallFilteringApplicationGroupsArgs struct {
	// Description of the network application group
	Description pulumi.StringPtrInput
	// Network application group name
	Name pulumi.StringPtrInput
	// Any number of applications to be added to the group
	// * Refer to the Zscaler API Swagger for the complete list of applications [ZIA API Guide](https://help.zscaler.com/zia/firewall-policies#/networkApplicationGroups-get)
	NetworkApplications pulumi.StringArrayInput
}

func (ZIAFirewallFilteringApplicationGroupsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ziafirewallFilteringApplicationGroupsArgs)(nil)).Elem()
}

type ZIAFirewallFilteringApplicationGroupsInput interface {
	pulumi.Input

	ToZIAFirewallFilteringApplicationGroupsOutput() ZIAFirewallFilteringApplicationGroupsOutput
	ToZIAFirewallFilteringApplicationGroupsOutputWithContext(ctx context.Context) ZIAFirewallFilteringApplicationGroupsOutput
}

func (*ZIAFirewallFilteringApplicationGroups) ElementType() reflect.Type {
	return reflect.TypeOf((**ZIAFirewallFilteringApplicationGroups)(nil)).Elem()
}

func (i *ZIAFirewallFilteringApplicationGroups) ToZIAFirewallFilteringApplicationGroupsOutput() ZIAFirewallFilteringApplicationGroupsOutput {
	return i.ToZIAFirewallFilteringApplicationGroupsOutputWithContext(context.Background())
}

func (i *ZIAFirewallFilteringApplicationGroups) ToZIAFirewallFilteringApplicationGroupsOutputWithContext(ctx context.Context) ZIAFirewallFilteringApplicationGroupsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZIAFirewallFilteringApplicationGroupsOutput)
}

// ZIAFirewallFilteringApplicationGroupsArrayInput is an input type that accepts ZIAFirewallFilteringApplicationGroupsArray and ZIAFirewallFilteringApplicationGroupsArrayOutput values.
// You can construct a concrete instance of `ZIAFirewallFilteringApplicationGroupsArrayInput` via:
//
//	ZIAFirewallFilteringApplicationGroupsArray{ ZIAFirewallFilteringApplicationGroupsArgs{...} }
type ZIAFirewallFilteringApplicationGroupsArrayInput interface {
	pulumi.Input

	ToZIAFirewallFilteringApplicationGroupsArrayOutput() ZIAFirewallFilteringApplicationGroupsArrayOutput
	ToZIAFirewallFilteringApplicationGroupsArrayOutputWithContext(context.Context) ZIAFirewallFilteringApplicationGroupsArrayOutput
}

type ZIAFirewallFilteringApplicationGroupsArray []ZIAFirewallFilteringApplicationGroupsInput

func (ZIAFirewallFilteringApplicationGroupsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ZIAFirewallFilteringApplicationGroups)(nil)).Elem()
}

func (i ZIAFirewallFilteringApplicationGroupsArray) ToZIAFirewallFilteringApplicationGroupsArrayOutput() ZIAFirewallFilteringApplicationGroupsArrayOutput {
	return i.ToZIAFirewallFilteringApplicationGroupsArrayOutputWithContext(context.Background())
}

func (i ZIAFirewallFilteringApplicationGroupsArray) ToZIAFirewallFilteringApplicationGroupsArrayOutputWithContext(ctx context.Context) ZIAFirewallFilteringApplicationGroupsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZIAFirewallFilteringApplicationGroupsArrayOutput)
}

// ZIAFirewallFilteringApplicationGroupsMapInput is an input type that accepts ZIAFirewallFilteringApplicationGroupsMap and ZIAFirewallFilteringApplicationGroupsMapOutput values.
// You can construct a concrete instance of `ZIAFirewallFilteringApplicationGroupsMapInput` via:
//
//	ZIAFirewallFilteringApplicationGroupsMap{ "key": ZIAFirewallFilteringApplicationGroupsArgs{...} }
type ZIAFirewallFilteringApplicationGroupsMapInput interface {
	pulumi.Input

	ToZIAFirewallFilteringApplicationGroupsMapOutput() ZIAFirewallFilteringApplicationGroupsMapOutput
	ToZIAFirewallFilteringApplicationGroupsMapOutputWithContext(context.Context) ZIAFirewallFilteringApplicationGroupsMapOutput
}

type ZIAFirewallFilteringApplicationGroupsMap map[string]ZIAFirewallFilteringApplicationGroupsInput

func (ZIAFirewallFilteringApplicationGroupsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ZIAFirewallFilteringApplicationGroups)(nil)).Elem()
}

func (i ZIAFirewallFilteringApplicationGroupsMap) ToZIAFirewallFilteringApplicationGroupsMapOutput() ZIAFirewallFilteringApplicationGroupsMapOutput {
	return i.ToZIAFirewallFilteringApplicationGroupsMapOutputWithContext(context.Background())
}

func (i ZIAFirewallFilteringApplicationGroupsMap) ToZIAFirewallFilteringApplicationGroupsMapOutputWithContext(ctx context.Context) ZIAFirewallFilteringApplicationGroupsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZIAFirewallFilteringApplicationGroupsMapOutput)
}

type ZIAFirewallFilteringApplicationGroupsOutput struct{ *pulumi.OutputState }

func (ZIAFirewallFilteringApplicationGroupsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ZIAFirewallFilteringApplicationGroups)(nil)).Elem()
}

func (o ZIAFirewallFilteringApplicationGroupsOutput) ToZIAFirewallFilteringApplicationGroupsOutput() ZIAFirewallFilteringApplicationGroupsOutput {
	return o
}

func (o ZIAFirewallFilteringApplicationGroupsOutput) ToZIAFirewallFilteringApplicationGroupsOutputWithContext(ctx context.Context) ZIAFirewallFilteringApplicationGroupsOutput {
	return o
}

func (o ZIAFirewallFilteringApplicationGroupsOutput) AppId() pulumi.IntOutput {
	return o.ApplyT(func(v *ZIAFirewallFilteringApplicationGroups) pulumi.IntOutput { return v.AppId }).(pulumi.IntOutput)
}

// Description of the network application group
func (o ZIAFirewallFilteringApplicationGroupsOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ZIAFirewallFilteringApplicationGroups) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Network application group name
func (o ZIAFirewallFilteringApplicationGroupsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ZIAFirewallFilteringApplicationGroups) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Any number of applications to be added to the group
// * Refer to the Zscaler API Swagger for the complete list of applications [ZIA API Guide](https://help.zscaler.com/zia/firewall-policies#/networkApplicationGroups-get)
func (o ZIAFirewallFilteringApplicationGroupsOutput) NetworkApplications() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ZIAFirewallFilteringApplicationGroups) pulumi.StringArrayOutput { return v.NetworkApplications }).(pulumi.StringArrayOutput)
}

type ZIAFirewallFilteringApplicationGroupsArrayOutput struct{ *pulumi.OutputState }

func (ZIAFirewallFilteringApplicationGroupsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ZIAFirewallFilteringApplicationGroups)(nil)).Elem()
}

func (o ZIAFirewallFilteringApplicationGroupsArrayOutput) ToZIAFirewallFilteringApplicationGroupsArrayOutput() ZIAFirewallFilteringApplicationGroupsArrayOutput {
	return o
}

func (o ZIAFirewallFilteringApplicationGroupsArrayOutput) ToZIAFirewallFilteringApplicationGroupsArrayOutputWithContext(ctx context.Context) ZIAFirewallFilteringApplicationGroupsArrayOutput {
	return o
}

func (o ZIAFirewallFilteringApplicationGroupsArrayOutput) Index(i pulumi.IntInput) ZIAFirewallFilteringApplicationGroupsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ZIAFirewallFilteringApplicationGroups {
		return vs[0].([]*ZIAFirewallFilteringApplicationGroups)[vs[1].(int)]
	}).(ZIAFirewallFilteringApplicationGroupsOutput)
}

type ZIAFirewallFilteringApplicationGroupsMapOutput struct{ *pulumi.OutputState }

func (ZIAFirewallFilteringApplicationGroupsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ZIAFirewallFilteringApplicationGroups)(nil)).Elem()
}

func (o ZIAFirewallFilteringApplicationGroupsMapOutput) ToZIAFirewallFilteringApplicationGroupsMapOutput() ZIAFirewallFilteringApplicationGroupsMapOutput {
	return o
}

func (o ZIAFirewallFilteringApplicationGroupsMapOutput) ToZIAFirewallFilteringApplicationGroupsMapOutputWithContext(ctx context.Context) ZIAFirewallFilteringApplicationGroupsMapOutput {
	return o
}

func (o ZIAFirewallFilteringApplicationGroupsMapOutput) MapIndex(k pulumi.StringInput) ZIAFirewallFilteringApplicationGroupsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ZIAFirewallFilteringApplicationGroups {
		return vs[0].(map[string]*ZIAFirewallFilteringApplicationGroups)[vs[1].(string)]
	}).(ZIAFirewallFilteringApplicationGroupsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ZIAFirewallFilteringApplicationGroupsInput)(nil)).Elem(), &ZIAFirewallFilteringApplicationGroups{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZIAFirewallFilteringApplicationGroupsArrayInput)(nil)).Elem(), ZIAFirewallFilteringApplicationGroupsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZIAFirewallFilteringApplicationGroupsMapInput)(nil)).Elem(), ZIAFirewallFilteringApplicationGroupsMap{})
	pulumi.RegisterOutputType(ZIAFirewallFilteringApplicationGroupsOutput{})
	pulumi.RegisterOutputType(ZIAFirewallFilteringApplicationGroupsArrayOutput{})
	pulumi.RegisterOutputType(ZIAFirewallFilteringApplicationGroupsMapOutput{})
}
