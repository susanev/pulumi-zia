// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package zia

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The **zia_dlp_web_rules** resource allows the creation and management of ZIA DLP Web Rules in the Zscaler Internet Access cloud or via the API.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-zia/sdk/go/zia"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := zia.NewZIADLPWebRules(ctx, "test", &zia.ZIADLPWebRulesArgs{
//				Action: pulumi.String("ALLOW"),
//				CloudApplications: pulumi.StringArray{
//					pulumi.String("ZENDESK"),
//					pulumi.String("LUCKY_ORANGE"),
//					pulumi.String("MICROSOFT_POWERAPPS"),
//					pulumi.String("MICROSOFTLIVEMEETING"),
//				},
//				Description: pulumi.String("Test"),
//				FileTypes:   pulumi.StringArray{},
//				MatchOnly:   pulumi.Bool(false),
//				MinSize:     pulumi.Int(20),
//				OcrEnabled:  pulumi.Bool(false),
//				Order:       pulumi.Int(1),
//				Protocols: pulumi.StringArray{
//					pulumi.String("HTTPS_RULE"),
//					pulumi.String("HTTP_RULE"),
//				},
//				Rank:                     pulumi.Int(7),
//				State:                    pulumi.String("ENABLED"),
//				WithoutContentInspection: pulumi.Bool(false),
//				ZscalerIncidentReciever:  pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type ZIADLPWebRules struct {
	pulumi.CustomResourceState

	// The access privilege for this DLP policy rule based on the admin's state. The supported values are:
	AccessControl pulumi.StringOutput `pulumi:"accessControl"`
	// The action taken when traffic matches the DLP policy rule criteria. The supported values are:
	Action pulumi.StringOutput `pulumi:"action"`
	// The auditor to which the DLP policy rule must be applied.
	Auditor ZIADLPWebRulesAuditorOutput `pulumi:"auditor"`
	// The list of cloud applications to which the DLP policy rule must be applied. For the complete list of supported cloud applications refer to the  [ZIA API documentation](https://help.zscaler.com/zia/data-loss-prevention#/webDlpRules-post)
	CloudApplications pulumi.StringArrayOutput `pulumi:"cloudApplications"`
	// The name-ID pairs of the departments that are excluded from the DLP policy rule.
	Departments ZIADLPWebRulesDepartmentsOutput `pulumi:"departments"`
	// The description of the DLP policy rule.
	Description pulumi.StringOutput `pulumi:"description"`
	// The list of DLP engines to which the DLP policy rule must be applied.
	DlpEngines ZIADLPWebRulesDlpEnginesOutput `pulumi:"dlpEngines"`
	// The name-ID pairs of the groups that are excluded from the DLP policy rule. Maximum of up to `256` departments.
	ExcludedDepartments ZIADLPWebRulesExcludedDepartmentsOutput `pulumi:"excludedDepartments"`
	// The name-ID pairs of the groups that are excluded from the DLP policy rule. Maximum of up to `256` groups.
	ExcludedGroups ZIADLPWebRulesExcludedGroupsOutput `pulumi:"excludedGroups"`
	// The name-ID pairs of the users that are excluded from the DLP policy rule. Maximum of up to `256` users.
	ExcludedUsers ZIADLPWebRulesExcludedUsersOutput `pulumi:"excludedUsers"`
	// The email address of an external auditor to whom DLP email notifications are sent.
	ExternalAuditorEmail pulumi.StringOutput `pulumi:"externalAuditorEmail"`
	// The list of file types to which the DLP policy rule must be applied. For the complete list of supported file types refer to the  [ZIA API documentation](https://help.zscaler.com/zia/data-loss-prevention#/webDlpRules-post)
	FileTypes pulumi.StringArrayOutput `pulumi:"fileTypes"`
	// The Name-ID pairs of groups to which the DLP policy rule must be applied. Maximum of up to `8` groups. When not used it implies `Any` to apply the rule to all groups.
	Groups ZIADLPWebRulesGroupsOutput `pulumi:"groups"`
	// The DLP server, using ICAP, to which the transaction content is forwarded.
	IcapServer ZIADLPWebRulesIcapServerOutput `pulumi:"icapServer"`
	// The Name-ID pairs of rule labels associated to the DLP policy rule.
	Labels ZIADLPWebRulesLabelsOutput `pulumi:"labels"`
	// The Name-ID pairs of locations groups to which the DLP policy rule must be applied. Maximum of up to `32` location groups. When not used it implies `Any` to apply the rule to all location groups.
	LocationGroups ZIADLPWebRulesLocationGroupsOutput `pulumi:"locationGroups"`
	// The Name-ID pairs of locations to which the DLP policy rule must be applied. Maximum of up to `8` locations. When not used it implies `Any` to apply the rule to all locations.
	Locations ZIADLPWebRulesLocationsOutput `pulumi:"locations"`
	// The match only criteria for DLP engines.
	MatchOnly pulumi.BoolOutput `pulumi:"matchOnly"`
	// The minimum file size (in KB) used for evaluation of the DLP policy rule.
	MinSize pulumi.IntOutput `pulumi:"minSize"`
	// The DLP policy rule name.
	Name pulumi.StringOutput `pulumi:"name"`
	// The template used for DLP notification emails.
	NotificationTemplate ZIADLPWebRulesNotificationTemplateOutput `pulumi:"notificationTemplate"`
	// Enables or disables image file scanning.
	OcrEnabled pulumi.BoolOutput `pulumi:"ocrEnabled"`
	// The rule order of execution for the DLP policy rule with respect to other rules.
	Order pulumi.IntOutput `pulumi:"order"`
	// The protocol criteria specified for the DLP policy rule.
	Protocols pulumi.StringArrayOutput `pulumi:"protocols"`
	// Admin rank of the admin who creates this rule
	Rank   pulumi.IntPtrOutput `pulumi:"rank"`
	RuleId pulumi.IntOutput    `pulumi:"ruleId"`
	// Enables or disables the DLP policy rule.. The supported values are:
	State pulumi.StringOutput `pulumi:"state"`
	// The Name-ID pairs of time windows to which the DLP policy rule must be applied. Maximum of up to `2` time intervals. When not used it implies `always` to apply the rule to all time intervals.
	TimeWindows ZIADLPWebRulesTimeWindowsOutput `pulumi:"timeWindows"`
	// The list of URL categories to which the DLP policy rule must be applied.
	UrlCategories ZIADLPWebRulesUrlCategoriesOutput `pulumi:"urlCategories"`
	// The Name-ID pairs of users to which the DLP policy rule must be applied. Maximum of up to `4` users. When not used it implies `Any` to apply the rule to all users.
	Users ZIADLPWebRulesUsersOutput `pulumi:"users"`
	// Indicates a DLP policy rule without content inspection, when the value is set to true.
	WithoutContentInspection pulumi.BoolOutput `pulumi:"withoutContentInspection"`
	// Indicates whether a Zscaler Incident Receiver is associated to the DLP policy rule.
	ZscalerIncidentReciever pulumi.BoolOutput `pulumi:"zscalerIncidentReciever"`
}

// NewZIADLPWebRules registers a new resource with the given unique name, arguments, and options.
func NewZIADLPWebRules(ctx *pulumi.Context,
	name string, args *ZIADLPWebRulesArgs, opts ...pulumi.ResourceOption) (*ZIADLPWebRules, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Order == nil {
		return nil, errors.New("invalid value for required argument 'Order'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource ZIADLPWebRules
	err := ctx.RegisterResource("zia:index/zIADLPWebRules:ZIADLPWebRules", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetZIADLPWebRules gets an existing ZIADLPWebRules resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetZIADLPWebRules(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ZIADLPWebRulesState, opts ...pulumi.ResourceOption) (*ZIADLPWebRules, error) {
	var resource ZIADLPWebRules
	err := ctx.ReadResource("zia:index/zIADLPWebRules:ZIADLPWebRules", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ZIADLPWebRules resources.
type ziadlpwebRulesState struct {
	// The access privilege for this DLP policy rule based on the admin's state. The supported values are:
	AccessControl *string `pulumi:"accessControl"`
	// The action taken when traffic matches the DLP policy rule criteria. The supported values are:
	Action *string `pulumi:"action"`
	// The auditor to which the DLP policy rule must be applied.
	Auditor *ZIADLPWebRulesAuditor `pulumi:"auditor"`
	// The list of cloud applications to which the DLP policy rule must be applied. For the complete list of supported cloud applications refer to the  [ZIA API documentation](https://help.zscaler.com/zia/data-loss-prevention#/webDlpRules-post)
	CloudApplications []string `pulumi:"cloudApplications"`
	// The name-ID pairs of the departments that are excluded from the DLP policy rule.
	Departments *ZIADLPWebRulesDepartments `pulumi:"departments"`
	// The description of the DLP policy rule.
	Description *string `pulumi:"description"`
	// The list of DLP engines to which the DLP policy rule must be applied.
	DlpEngines *ZIADLPWebRulesDlpEngines `pulumi:"dlpEngines"`
	// The name-ID pairs of the groups that are excluded from the DLP policy rule. Maximum of up to `256` departments.
	ExcludedDepartments *ZIADLPWebRulesExcludedDepartments `pulumi:"excludedDepartments"`
	// The name-ID pairs of the groups that are excluded from the DLP policy rule. Maximum of up to `256` groups.
	ExcludedGroups *ZIADLPWebRulesExcludedGroups `pulumi:"excludedGroups"`
	// The name-ID pairs of the users that are excluded from the DLP policy rule. Maximum of up to `256` users.
	ExcludedUsers *ZIADLPWebRulesExcludedUsers `pulumi:"excludedUsers"`
	// The email address of an external auditor to whom DLP email notifications are sent.
	ExternalAuditorEmail *string `pulumi:"externalAuditorEmail"`
	// The list of file types to which the DLP policy rule must be applied. For the complete list of supported file types refer to the  [ZIA API documentation](https://help.zscaler.com/zia/data-loss-prevention#/webDlpRules-post)
	FileTypes []string `pulumi:"fileTypes"`
	// The Name-ID pairs of groups to which the DLP policy rule must be applied. Maximum of up to `8` groups. When not used it implies `Any` to apply the rule to all groups.
	Groups *ZIADLPWebRulesGroups `pulumi:"groups"`
	// The DLP server, using ICAP, to which the transaction content is forwarded.
	IcapServer *ZIADLPWebRulesIcapServer `pulumi:"icapServer"`
	// The Name-ID pairs of rule labels associated to the DLP policy rule.
	Labels *ZIADLPWebRulesLabels `pulumi:"labels"`
	// The Name-ID pairs of locations groups to which the DLP policy rule must be applied. Maximum of up to `32` location groups. When not used it implies `Any` to apply the rule to all location groups.
	LocationGroups *ZIADLPWebRulesLocationGroups `pulumi:"locationGroups"`
	// The Name-ID pairs of locations to which the DLP policy rule must be applied. Maximum of up to `8` locations. When not used it implies `Any` to apply the rule to all locations.
	Locations *ZIADLPWebRulesLocations `pulumi:"locations"`
	// The match only criteria for DLP engines.
	MatchOnly *bool `pulumi:"matchOnly"`
	// The minimum file size (in KB) used for evaluation of the DLP policy rule.
	MinSize *int `pulumi:"minSize"`
	// The DLP policy rule name.
	Name *string `pulumi:"name"`
	// The template used for DLP notification emails.
	NotificationTemplate *ZIADLPWebRulesNotificationTemplate `pulumi:"notificationTemplate"`
	// Enables or disables image file scanning.
	OcrEnabled *bool `pulumi:"ocrEnabled"`
	// The rule order of execution for the DLP policy rule with respect to other rules.
	Order *int `pulumi:"order"`
	// The protocol criteria specified for the DLP policy rule.
	Protocols []string `pulumi:"protocols"`
	// Admin rank of the admin who creates this rule
	Rank   *int `pulumi:"rank"`
	RuleId *int `pulumi:"ruleId"`
	// Enables or disables the DLP policy rule.. The supported values are:
	State *string `pulumi:"state"`
	// The Name-ID pairs of time windows to which the DLP policy rule must be applied. Maximum of up to `2` time intervals. When not used it implies `always` to apply the rule to all time intervals.
	TimeWindows *ZIADLPWebRulesTimeWindows `pulumi:"timeWindows"`
	// The list of URL categories to which the DLP policy rule must be applied.
	UrlCategories *ZIADLPWebRulesUrlCategories `pulumi:"urlCategories"`
	// The Name-ID pairs of users to which the DLP policy rule must be applied. Maximum of up to `4` users. When not used it implies `Any` to apply the rule to all users.
	Users *ZIADLPWebRulesUsers `pulumi:"users"`
	// Indicates a DLP policy rule without content inspection, when the value is set to true.
	WithoutContentInspection *bool `pulumi:"withoutContentInspection"`
	// Indicates whether a Zscaler Incident Receiver is associated to the DLP policy rule.
	ZscalerIncidentReciever *bool `pulumi:"zscalerIncidentReciever"`
}

type ZIADLPWebRulesState struct {
	// The access privilege for this DLP policy rule based on the admin's state. The supported values are:
	AccessControl pulumi.StringPtrInput
	// The action taken when traffic matches the DLP policy rule criteria. The supported values are:
	Action pulumi.StringPtrInput
	// The auditor to which the DLP policy rule must be applied.
	Auditor ZIADLPWebRulesAuditorPtrInput
	// The list of cloud applications to which the DLP policy rule must be applied. For the complete list of supported cloud applications refer to the  [ZIA API documentation](https://help.zscaler.com/zia/data-loss-prevention#/webDlpRules-post)
	CloudApplications pulumi.StringArrayInput
	// The name-ID pairs of the departments that are excluded from the DLP policy rule.
	Departments ZIADLPWebRulesDepartmentsPtrInput
	// The description of the DLP policy rule.
	Description pulumi.StringPtrInput
	// The list of DLP engines to which the DLP policy rule must be applied.
	DlpEngines ZIADLPWebRulesDlpEnginesPtrInput
	// The name-ID pairs of the groups that are excluded from the DLP policy rule. Maximum of up to `256` departments.
	ExcludedDepartments ZIADLPWebRulesExcludedDepartmentsPtrInput
	// The name-ID pairs of the groups that are excluded from the DLP policy rule. Maximum of up to `256` groups.
	ExcludedGroups ZIADLPWebRulesExcludedGroupsPtrInput
	// The name-ID pairs of the users that are excluded from the DLP policy rule. Maximum of up to `256` users.
	ExcludedUsers ZIADLPWebRulesExcludedUsersPtrInput
	// The email address of an external auditor to whom DLP email notifications are sent.
	ExternalAuditorEmail pulumi.StringPtrInput
	// The list of file types to which the DLP policy rule must be applied. For the complete list of supported file types refer to the  [ZIA API documentation](https://help.zscaler.com/zia/data-loss-prevention#/webDlpRules-post)
	FileTypes pulumi.StringArrayInput
	// The Name-ID pairs of groups to which the DLP policy rule must be applied. Maximum of up to `8` groups. When not used it implies `Any` to apply the rule to all groups.
	Groups ZIADLPWebRulesGroupsPtrInput
	// The DLP server, using ICAP, to which the transaction content is forwarded.
	IcapServer ZIADLPWebRulesIcapServerPtrInput
	// The Name-ID pairs of rule labels associated to the DLP policy rule.
	Labels ZIADLPWebRulesLabelsPtrInput
	// The Name-ID pairs of locations groups to which the DLP policy rule must be applied. Maximum of up to `32` location groups. When not used it implies `Any` to apply the rule to all location groups.
	LocationGroups ZIADLPWebRulesLocationGroupsPtrInput
	// The Name-ID pairs of locations to which the DLP policy rule must be applied. Maximum of up to `8` locations. When not used it implies `Any` to apply the rule to all locations.
	Locations ZIADLPWebRulesLocationsPtrInput
	// The match only criteria for DLP engines.
	MatchOnly pulumi.BoolPtrInput
	// The minimum file size (in KB) used for evaluation of the DLP policy rule.
	MinSize pulumi.IntPtrInput
	// The DLP policy rule name.
	Name pulumi.StringPtrInput
	// The template used for DLP notification emails.
	NotificationTemplate ZIADLPWebRulesNotificationTemplatePtrInput
	// Enables or disables image file scanning.
	OcrEnabled pulumi.BoolPtrInput
	// The rule order of execution for the DLP policy rule with respect to other rules.
	Order pulumi.IntPtrInput
	// The protocol criteria specified for the DLP policy rule.
	Protocols pulumi.StringArrayInput
	// Admin rank of the admin who creates this rule
	Rank   pulumi.IntPtrInput
	RuleId pulumi.IntPtrInput
	// Enables or disables the DLP policy rule.. The supported values are:
	State pulumi.StringPtrInput
	// The Name-ID pairs of time windows to which the DLP policy rule must be applied. Maximum of up to `2` time intervals. When not used it implies `always` to apply the rule to all time intervals.
	TimeWindows ZIADLPWebRulesTimeWindowsPtrInput
	// The list of URL categories to which the DLP policy rule must be applied.
	UrlCategories ZIADLPWebRulesUrlCategoriesPtrInput
	// The Name-ID pairs of users to which the DLP policy rule must be applied. Maximum of up to `4` users. When not used it implies `Any` to apply the rule to all users.
	Users ZIADLPWebRulesUsersPtrInput
	// Indicates a DLP policy rule without content inspection, when the value is set to true.
	WithoutContentInspection pulumi.BoolPtrInput
	// Indicates whether a Zscaler Incident Receiver is associated to the DLP policy rule.
	ZscalerIncidentReciever pulumi.BoolPtrInput
}

func (ZIADLPWebRulesState) ElementType() reflect.Type {
	return reflect.TypeOf((*ziadlpwebRulesState)(nil)).Elem()
}

type ziadlpwebRulesArgs struct {
	// The access privilege for this DLP policy rule based on the admin's state. The supported values are:
	AccessControl *string `pulumi:"accessControl"`
	// The action taken when traffic matches the DLP policy rule criteria. The supported values are:
	Action *string `pulumi:"action"`
	// The auditor to which the DLP policy rule must be applied.
	Auditor *ZIADLPWebRulesAuditor `pulumi:"auditor"`
	// The list of cloud applications to which the DLP policy rule must be applied. For the complete list of supported cloud applications refer to the  [ZIA API documentation](https://help.zscaler.com/zia/data-loss-prevention#/webDlpRules-post)
	CloudApplications []string `pulumi:"cloudApplications"`
	// The name-ID pairs of the departments that are excluded from the DLP policy rule.
	Departments *ZIADLPWebRulesDepartments `pulumi:"departments"`
	// The description of the DLP policy rule.
	Description *string `pulumi:"description"`
	// The list of DLP engines to which the DLP policy rule must be applied.
	DlpEngines *ZIADLPWebRulesDlpEngines `pulumi:"dlpEngines"`
	// The name-ID pairs of the groups that are excluded from the DLP policy rule. Maximum of up to `256` departments.
	ExcludedDepartments *ZIADLPWebRulesExcludedDepartments `pulumi:"excludedDepartments"`
	// The name-ID pairs of the groups that are excluded from the DLP policy rule. Maximum of up to `256` groups.
	ExcludedGroups *ZIADLPWebRulesExcludedGroups `pulumi:"excludedGroups"`
	// The name-ID pairs of the users that are excluded from the DLP policy rule. Maximum of up to `256` users.
	ExcludedUsers *ZIADLPWebRulesExcludedUsers `pulumi:"excludedUsers"`
	// The email address of an external auditor to whom DLP email notifications are sent.
	ExternalAuditorEmail *string `pulumi:"externalAuditorEmail"`
	// The list of file types to which the DLP policy rule must be applied. For the complete list of supported file types refer to the  [ZIA API documentation](https://help.zscaler.com/zia/data-loss-prevention#/webDlpRules-post)
	FileTypes []string `pulumi:"fileTypes"`
	// The Name-ID pairs of groups to which the DLP policy rule must be applied. Maximum of up to `8` groups. When not used it implies `Any` to apply the rule to all groups.
	Groups *ZIADLPWebRulesGroups `pulumi:"groups"`
	// The DLP server, using ICAP, to which the transaction content is forwarded.
	IcapServer *ZIADLPWebRulesIcapServer `pulumi:"icapServer"`
	// The Name-ID pairs of rule labels associated to the DLP policy rule.
	Labels *ZIADLPWebRulesLabels `pulumi:"labels"`
	// The Name-ID pairs of locations groups to which the DLP policy rule must be applied. Maximum of up to `32` location groups. When not used it implies `Any` to apply the rule to all location groups.
	LocationGroups *ZIADLPWebRulesLocationGroups `pulumi:"locationGroups"`
	// The Name-ID pairs of locations to which the DLP policy rule must be applied. Maximum of up to `8` locations. When not used it implies `Any` to apply the rule to all locations.
	Locations *ZIADLPWebRulesLocations `pulumi:"locations"`
	// The match only criteria for DLP engines.
	MatchOnly *bool `pulumi:"matchOnly"`
	// The minimum file size (in KB) used for evaluation of the DLP policy rule.
	MinSize *int `pulumi:"minSize"`
	// The DLP policy rule name.
	Name *string `pulumi:"name"`
	// The template used for DLP notification emails.
	NotificationTemplate *ZIADLPWebRulesNotificationTemplate `pulumi:"notificationTemplate"`
	// Enables or disables image file scanning.
	OcrEnabled *bool `pulumi:"ocrEnabled"`
	// The rule order of execution for the DLP policy rule with respect to other rules.
	Order int `pulumi:"order"`
	// The protocol criteria specified for the DLP policy rule.
	Protocols []string `pulumi:"protocols"`
	// Admin rank of the admin who creates this rule
	Rank *int `pulumi:"rank"`
	// Enables or disables the DLP policy rule.. The supported values are:
	State *string `pulumi:"state"`
	// The Name-ID pairs of time windows to which the DLP policy rule must be applied. Maximum of up to `2` time intervals. When not used it implies `always` to apply the rule to all time intervals.
	TimeWindows *ZIADLPWebRulesTimeWindows `pulumi:"timeWindows"`
	// The list of URL categories to which the DLP policy rule must be applied.
	UrlCategories *ZIADLPWebRulesUrlCategories `pulumi:"urlCategories"`
	// The Name-ID pairs of users to which the DLP policy rule must be applied. Maximum of up to `4` users. When not used it implies `Any` to apply the rule to all users.
	Users *ZIADLPWebRulesUsers `pulumi:"users"`
	// Indicates a DLP policy rule without content inspection, when the value is set to true.
	WithoutContentInspection *bool `pulumi:"withoutContentInspection"`
	// Indicates whether a Zscaler Incident Receiver is associated to the DLP policy rule.
	ZscalerIncidentReciever *bool `pulumi:"zscalerIncidentReciever"`
}

// The set of arguments for constructing a ZIADLPWebRules resource.
type ZIADLPWebRulesArgs struct {
	// The access privilege for this DLP policy rule based on the admin's state. The supported values are:
	AccessControl pulumi.StringPtrInput
	// The action taken when traffic matches the DLP policy rule criteria. The supported values are:
	Action pulumi.StringPtrInput
	// The auditor to which the DLP policy rule must be applied.
	Auditor ZIADLPWebRulesAuditorPtrInput
	// The list of cloud applications to which the DLP policy rule must be applied. For the complete list of supported cloud applications refer to the  [ZIA API documentation](https://help.zscaler.com/zia/data-loss-prevention#/webDlpRules-post)
	CloudApplications pulumi.StringArrayInput
	// The name-ID pairs of the departments that are excluded from the DLP policy rule.
	Departments ZIADLPWebRulesDepartmentsPtrInput
	// The description of the DLP policy rule.
	Description pulumi.StringPtrInput
	// The list of DLP engines to which the DLP policy rule must be applied.
	DlpEngines ZIADLPWebRulesDlpEnginesPtrInput
	// The name-ID pairs of the groups that are excluded from the DLP policy rule. Maximum of up to `256` departments.
	ExcludedDepartments ZIADLPWebRulesExcludedDepartmentsPtrInput
	// The name-ID pairs of the groups that are excluded from the DLP policy rule. Maximum of up to `256` groups.
	ExcludedGroups ZIADLPWebRulesExcludedGroupsPtrInput
	// The name-ID pairs of the users that are excluded from the DLP policy rule. Maximum of up to `256` users.
	ExcludedUsers ZIADLPWebRulesExcludedUsersPtrInput
	// The email address of an external auditor to whom DLP email notifications are sent.
	ExternalAuditorEmail pulumi.StringPtrInput
	// The list of file types to which the DLP policy rule must be applied. For the complete list of supported file types refer to the  [ZIA API documentation](https://help.zscaler.com/zia/data-loss-prevention#/webDlpRules-post)
	FileTypes pulumi.StringArrayInput
	// The Name-ID pairs of groups to which the DLP policy rule must be applied. Maximum of up to `8` groups. When not used it implies `Any` to apply the rule to all groups.
	Groups ZIADLPWebRulesGroupsPtrInput
	// The DLP server, using ICAP, to which the transaction content is forwarded.
	IcapServer ZIADLPWebRulesIcapServerPtrInput
	// The Name-ID pairs of rule labels associated to the DLP policy rule.
	Labels ZIADLPWebRulesLabelsPtrInput
	// The Name-ID pairs of locations groups to which the DLP policy rule must be applied. Maximum of up to `32` location groups. When not used it implies `Any` to apply the rule to all location groups.
	LocationGroups ZIADLPWebRulesLocationGroupsPtrInput
	// The Name-ID pairs of locations to which the DLP policy rule must be applied. Maximum of up to `8` locations. When not used it implies `Any` to apply the rule to all locations.
	Locations ZIADLPWebRulesLocationsPtrInput
	// The match only criteria for DLP engines.
	MatchOnly pulumi.BoolPtrInput
	// The minimum file size (in KB) used for evaluation of the DLP policy rule.
	MinSize pulumi.IntPtrInput
	// The DLP policy rule name.
	Name pulumi.StringPtrInput
	// The template used for DLP notification emails.
	NotificationTemplate ZIADLPWebRulesNotificationTemplatePtrInput
	// Enables or disables image file scanning.
	OcrEnabled pulumi.BoolPtrInput
	// The rule order of execution for the DLP policy rule with respect to other rules.
	Order pulumi.IntInput
	// The protocol criteria specified for the DLP policy rule.
	Protocols pulumi.StringArrayInput
	// Admin rank of the admin who creates this rule
	Rank pulumi.IntPtrInput
	// Enables or disables the DLP policy rule.. The supported values are:
	State pulumi.StringPtrInput
	// The Name-ID pairs of time windows to which the DLP policy rule must be applied. Maximum of up to `2` time intervals. When not used it implies `always` to apply the rule to all time intervals.
	TimeWindows ZIADLPWebRulesTimeWindowsPtrInput
	// The list of URL categories to which the DLP policy rule must be applied.
	UrlCategories ZIADLPWebRulesUrlCategoriesPtrInput
	// The Name-ID pairs of users to which the DLP policy rule must be applied. Maximum of up to `4` users. When not used it implies `Any` to apply the rule to all users.
	Users ZIADLPWebRulesUsersPtrInput
	// Indicates a DLP policy rule without content inspection, when the value is set to true.
	WithoutContentInspection pulumi.BoolPtrInput
	// Indicates whether a Zscaler Incident Receiver is associated to the DLP policy rule.
	ZscalerIncidentReciever pulumi.BoolPtrInput
}

func (ZIADLPWebRulesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ziadlpwebRulesArgs)(nil)).Elem()
}

type ZIADLPWebRulesInput interface {
	pulumi.Input

	ToZIADLPWebRulesOutput() ZIADLPWebRulesOutput
	ToZIADLPWebRulesOutputWithContext(ctx context.Context) ZIADLPWebRulesOutput
}

func (*ZIADLPWebRules) ElementType() reflect.Type {
	return reflect.TypeOf((**ZIADLPWebRules)(nil)).Elem()
}

func (i *ZIADLPWebRules) ToZIADLPWebRulesOutput() ZIADLPWebRulesOutput {
	return i.ToZIADLPWebRulesOutputWithContext(context.Background())
}

func (i *ZIADLPWebRules) ToZIADLPWebRulesOutputWithContext(ctx context.Context) ZIADLPWebRulesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZIADLPWebRulesOutput)
}

// ZIADLPWebRulesArrayInput is an input type that accepts ZIADLPWebRulesArray and ZIADLPWebRulesArrayOutput values.
// You can construct a concrete instance of `ZIADLPWebRulesArrayInput` via:
//
//	ZIADLPWebRulesArray{ ZIADLPWebRulesArgs{...} }
type ZIADLPWebRulesArrayInput interface {
	pulumi.Input

	ToZIADLPWebRulesArrayOutput() ZIADLPWebRulesArrayOutput
	ToZIADLPWebRulesArrayOutputWithContext(context.Context) ZIADLPWebRulesArrayOutput
}

type ZIADLPWebRulesArray []ZIADLPWebRulesInput

func (ZIADLPWebRulesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ZIADLPWebRules)(nil)).Elem()
}

func (i ZIADLPWebRulesArray) ToZIADLPWebRulesArrayOutput() ZIADLPWebRulesArrayOutput {
	return i.ToZIADLPWebRulesArrayOutputWithContext(context.Background())
}

func (i ZIADLPWebRulesArray) ToZIADLPWebRulesArrayOutputWithContext(ctx context.Context) ZIADLPWebRulesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZIADLPWebRulesArrayOutput)
}

// ZIADLPWebRulesMapInput is an input type that accepts ZIADLPWebRulesMap and ZIADLPWebRulesMapOutput values.
// You can construct a concrete instance of `ZIADLPWebRulesMapInput` via:
//
//	ZIADLPWebRulesMap{ "key": ZIADLPWebRulesArgs{...} }
type ZIADLPWebRulesMapInput interface {
	pulumi.Input

	ToZIADLPWebRulesMapOutput() ZIADLPWebRulesMapOutput
	ToZIADLPWebRulesMapOutputWithContext(context.Context) ZIADLPWebRulesMapOutput
}

type ZIADLPWebRulesMap map[string]ZIADLPWebRulesInput

func (ZIADLPWebRulesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ZIADLPWebRules)(nil)).Elem()
}

func (i ZIADLPWebRulesMap) ToZIADLPWebRulesMapOutput() ZIADLPWebRulesMapOutput {
	return i.ToZIADLPWebRulesMapOutputWithContext(context.Background())
}

func (i ZIADLPWebRulesMap) ToZIADLPWebRulesMapOutputWithContext(ctx context.Context) ZIADLPWebRulesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZIADLPWebRulesMapOutput)
}

type ZIADLPWebRulesOutput struct{ *pulumi.OutputState }

func (ZIADLPWebRulesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ZIADLPWebRules)(nil)).Elem()
}

func (o ZIADLPWebRulesOutput) ToZIADLPWebRulesOutput() ZIADLPWebRulesOutput {
	return o
}

func (o ZIADLPWebRulesOutput) ToZIADLPWebRulesOutputWithContext(ctx context.Context) ZIADLPWebRulesOutput {
	return o
}

// The access privilege for this DLP policy rule based on the admin's state. The supported values are:
func (o ZIADLPWebRulesOutput) AccessControl() pulumi.StringOutput {
	return o.ApplyT(func(v *ZIADLPWebRules) pulumi.StringOutput { return v.AccessControl }).(pulumi.StringOutput)
}

// The action taken when traffic matches the DLP policy rule criteria. The supported values are:
func (o ZIADLPWebRulesOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v *ZIADLPWebRules) pulumi.StringOutput { return v.Action }).(pulumi.StringOutput)
}

// The auditor to which the DLP policy rule must be applied.
func (o ZIADLPWebRulesOutput) Auditor() ZIADLPWebRulesAuditorOutput {
	return o.ApplyT(func(v *ZIADLPWebRules) ZIADLPWebRulesAuditorOutput { return v.Auditor }).(ZIADLPWebRulesAuditorOutput)
}

// The list of cloud applications to which the DLP policy rule must be applied. For the complete list of supported cloud applications refer to the  [ZIA API documentation](https://help.zscaler.com/zia/data-loss-prevention#/webDlpRules-post)
func (o ZIADLPWebRulesOutput) CloudApplications() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ZIADLPWebRules) pulumi.StringArrayOutput { return v.CloudApplications }).(pulumi.StringArrayOutput)
}

// The name-ID pairs of the departments that are excluded from the DLP policy rule.
func (o ZIADLPWebRulesOutput) Departments() ZIADLPWebRulesDepartmentsOutput {
	return o.ApplyT(func(v *ZIADLPWebRules) ZIADLPWebRulesDepartmentsOutput { return v.Departments }).(ZIADLPWebRulesDepartmentsOutput)
}

// The description of the DLP policy rule.
func (o ZIADLPWebRulesOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *ZIADLPWebRules) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// The list of DLP engines to which the DLP policy rule must be applied.
func (o ZIADLPWebRulesOutput) DlpEngines() ZIADLPWebRulesDlpEnginesOutput {
	return o.ApplyT(func(v *ZIADLPWebRules) ZIADLPWebRulesDlpEnginesOutput { return v.DlpEngines }).(ZIADLPWebRulesDlpEnginesOutput)
}

// The name-ID pairs of the groups that are excluded from the DLP policy rule. Maximum of up to `256` departments.
func (o ZIADLPWebRulesOutput) ExcludedDepartments() ZIADLPWebRulesExcludedDepartmentsOutput {
	return o.ApplyT(func(v *ZIADLPWebRules) ZIADLPWebRulesExcludedDepartmentsOutput { return v.ExcludedDepartments }).(ZIADLPWebRulesExcludedDepartmentsOutput)
}

// The name-ID pairs of the groups that are excluded from the DLP policy rule. Maximum of up to `256` groups.
func (o ZIADLPWebRulesOutput) ExcludedGroups() ZIADLPWebRulesExcludedGroupsOutput {
	return o.ApplyT(func(v *ZIADLPWebRules) ZIADLPWebRulesExcludedGroupsOutput { return v.ExcludedGroups }).(ZIADLPWebRulesExcludedGroupsOutput)
}

// The name-ID pairs of the users that are excluded from the DLP policy rule. Maximum of up to `256` users.
func (o ZIADLPWebRulesOutput) ExcludedUsers() ZIADLPWebRulesExcludedUsersOutput {
	return o.ApplyT(func(v *ZIADLPWebRules) ZIADLPWebRulesExcludedUsersOutput { return v.ExcludedUsers }).(ZIADLPWebRulesExcludedUsersOutput)
}

// The email address of an external auditor to whom DLP email notifications are sent.
func (o ZIADLPWebRulesOutput) ExternalAuditorEmail() pulumi.StringOutput {
	return o.ApplyT(func(v *ZIADLPWebRules) pulumi.StringOutput { return v.ExternalAuditorEmail }).(pulumi.StringOutput)
}

// The list of file types to which the DLP policy rule must be applied. For the complete list of supported file types refer to the  [ZIA API documentation](https://help.zscaler.com/zia/data-loss-prevention#/webDlpRules-post)
func (o ZIADLPWebRulesOutput) FileTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ZIADLPWebRules) pulumi.StringArrayOutput { return v.FileTypes }).(pulumi.StringArrayOutput)
}

// The Name-ID pairs of groups to which the DLP policy rule must be applied. Maximum of up to `8` groups. When not used it implies `Any` to apply the rule to all groups.
func (o ZIADLPWebRulesOutput) Groups() ZIADLPWebRulesGroupsOutput {
	return o.ApplyT(func(v *ZIADLPWebRules) ZIADLPWebRulesGroupsOutput { return v.Groups }).(ZIADLPWebRulesGroupsOutput)
}

// The DLP server, using ICAP, to which the transaction content is forwarded.
func (o ZIADLPWebRulesOutput) IcapServer() ZIADLPWebRulesIcapServerOutput {
	return o.ApplyT(func(v *ZIADLPWebRules) ZIADLPWebRulesIcapServerOutput { return v.IcapServer }).(ZIADLPWebRulesIcapServerOutput)
}

// The Name-ID pairs of rule labels associated to the DLP policy rule.
func (o ZIADLPWebRulesOutput) Labels() ZIADLPWebRulesLabelsOutput {
	return o.ApplyT(func(v *ZIADLPWebRules) ZIADLPWebRulesLabelsOutput { return v.Labels }).(ZIADLPWebRulesLabelsOutput)
}

// The Name-ID pairs of locations groups to which the DLP policy rule must be applied. Maximum of up to `32` location groups. When not used it implies `Any` to apply the rule to all location groups.
func (o ZIADLPWebRulesOutput) LocationGroups() ZIADLPWebRulesLocationGroupsOutput {
	return o.ApplyT(func(v *ZIADLPWebRules) ZIADLPWebRulesLocationGroupsOutput { return v.LocationGroups }).(ZIADLPWebRulesLocationGroupsOutput)
}

// The Name-ID pairs of locations to which the DLP policy rule must be applied. Maximum of up to `8` locations. When not used it implies `Any` to apply the rule to all locations.
func (o ZIADLPWebRulesOutput) Locations() ZIADLPWebRulesLocationsOutput {
	return o.ApplyT(func(v *ZIADLPWebRules) ZIADLPWebRulesLocationsOutput { return v.Locations }).(ZIADLPWebRulesLocationsOutput)
}

// The match only criteria for DLP engines.
func (o ZIADLPWebRulesOutput) MatchOnly() pulumi.BoolOutput {
	return o.ApplyT(func(v *ZIADLPWebRules) pulumi.BoolOutput { return v.MatchOnly }).(pulumi.BoolOutput)
}

// The minimum file size (in KB) used for evaluation of the DLP policy rule.
func (o ZIADLPWebRulesOutput) MinSize() pulumi.IntOutput {
	return o.ApplyT(func(v *ZIADLPWebRules) pulumi.IntOutput { return v.MinSize }).(pulumi.IntOutput)
}

// The DLP policy rule name.
func (o ZIADLPWebRulesOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ZIADLPWebRules) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The template used for DLP notification emails.
func (o ZIADLPWebRulesOutput) NotificationTemplate() ZIADLPWebRulesNotificationTemplateOutput {
	return o.ApplyT(func(v *ZIADLPWebRules) ZIADLPWebRulesNotificationTemplateOutput { return v.NotificationTemplate }).(ZIADLPWebRulesNotificationTemplateOutput)
}

// Enables or disables image file scanning.
func (o ZIADLPWebRulesOutput) OcrEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *ZIADLPWebRules) pulumi.BoolOutput { return v.OcrEnabled }).(pulumi.BoolOutput)
}

// The rule order of execution for the DLP policy rule with respect to other rules.
func (o ZIADLPWebRulesOutput) Order() pulumi.IntOutput {
	return o.ApplyT(func(v *ZIADLPWebRules) pulumi.IntOutput { return v.Order }).(pulumi.IntOutput)
}

// The protocol criteria specified for the DLP policy rule.
func (o ZIADLPWebRulesOutput) Protocols() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ZIADLPWebRules) pulumi.StringArrayOutput { return v.Protocols }).(pulumi.StringArrayOutput)
}

// Admin rank of the admin who creates this rule
func (o ZIADLPWebRulesOutput) Rank() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ZIADLPWebRules) pulumi.IntPtrOutput { return v.Rank }).(pulumi.IntPtrOutput)
}

func (o ZIADLPWebRulesOutput) RuleId() pulumi.IntOutput {
	return o.ApplyT(func(v *ZIADLPWebRules) pulumi.IntOutput { return v.RuleId }).(pulumi.IntOutput)
}

// Enables or disables the DLP policy rule.. The supported values are:
func (o ZIADLPWebRulesOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *ZIADLPWebRules) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// The Name-ID pairs of time windows to which the DLP policy rule must be applied. Maximum of up to `2` time intervals. When not used it implies `always` to apply the rule to all time intervals.
func (o ZIADLPWebRulesOutput) TimeWindows() ZIADLPWebRulesTimeWindowsOutput {
	return o.ApplyT(func(v *ZIADLPWebRules) ZIADLPWebRulesTimeWindowsOutput { return v.TimeWindows }).(ZIADLPWebRulesTimeWindowsOutput)
}

// The list of URL categories to which the DLP policy rule must be applied.
func (o ZIADLPWebRulesOutput) UrlCategories() ZIADLPWebRulesUrlCategoriesOutput {
	return o.ApplyT(func(v *ZIADLPWebRules) ZIADLPWebRulesUrlCategoriesOutput { return v.UrlCategories }).(ZIADLPWebRulesUrlCategoriesOutput)
}

// The Name-ID pairs of users to which the DLP policy rule must be applied. Maximum of up to `4` users. When not used it implies `Any` to apply the rule to all users.
func (o ZIADLPWebRulesOutput) Users() ZIADLPWebRulesUsersOutput {
	return o.ApplyT(func(v *ZIADLPWebRules) ZIADLPWebRulesUsersOutput { return v.Users }).(ZIADLPWebRulesUsersOutput)
}

// Indicates a DLP policy rule without content inspection, when the value is set to true.
func (o ZIADLPWebRulesOutput) WithoutContentInspection() pulumi.BoolOutput {
	return o.ApplyT(func(v *ZIADLPWebRules) pulumi.BoolOutput { return v.WithoutContentInspection }).(pulumi.BoolOutput)
}

// Indicates whether a Zscaler Incident Receiver is associated to the DLP policy rule.
func (o ZIADLPWebRulesOutput) ZscalerIncidentReciever() pulumi.BoolOutput {
	return o.ApplyT(func(v *ZIADLPWebRules) pulumi.BoolOutput { return v.ZscalerIncidentReciever }).(pulumi.BoolOutput)
}

type ZIADLPWebRulesArrayOutput struct{ *pulumi.OutputState }

func (ZIADLPWebRulesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ZIADLPWebRules)(nil)).Elem()
}

func (o ZIADLPWebRulesArrayOutput) ToZIADLPWebRulesArrayOutput() ZIADLPWebRulesArrayOutput {
	return o
}

func (o ZIADLPWebRulesArrayOutput) ToZIADLPWebRulesArrayOutputWithContext(ctx context.Context) ZIADLPWebRulesArrayOutput {
	return o
}

func (o ZIADLPWebRulesArrayOutput) Index(i pulumi.IntInput) ZIADLPWebRulesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ZIADLPWebRules {
		return vs[0].([]*ZIADLPWebRules)[vs[1].(int)]
	}).(ZIADLPWebRulesOutput)
}

type ZIADLPWebRulesMapOutput struct{ *pulumi.OutputState }

func (ZIADLPWebRulesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ZIADLPWebRules)(nil)).Elem()
}

func (o ZIADLPWebRulesMapOutput) ToZIADLPWebRulesMapOutput() ZIADLPWebRulesMapOutput {
	return o
}

func (o ZIADLPWebRulesMapOutput) ToZIADLPWebRulesMapOutputWithContext(ctx context.Context) ZIADLPWebRulesMapOutput {
	return o
}

func (o ZIADLPWebRulesMapOutput) MapIndex(k pulumi.StringInput) ZIADLPWebRulesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ZIADLPWebRules {
		return vs[0].(map[string]*ZIADLPWebRules)[vs[1].(string)]
	}).(ZIADLPWebRulesOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ZIADLPWebRulesInput)(nil)).Elem(), &ZIADLPWebRules{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZIADLPWebRulesArrayInput)(nil)).Elem(), ZIADLPWebRulesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZIADLPWebRulesMapInput)(nil)).Elem(), ZIADLPWebRulesMap{})
	pulumi.RegisterOutputType(ZIADLPWebRulesOutput{})
	pulumi.RegisterOutputType(ZIADLPWebRulesArrayOutput{})
	pulumi.RegisterOutputType(ZIADLPWebRulesMapOutput{})
}
