// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package zia

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The **zia_url_filtering_rules** resource creates and manages a URL filtering rules within the Zscaler Internet Access cloud.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-zia/sdk/go/zia"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := zia.NewZIAURLFilteringRules(ctx, "blockStreaming", &zia.ZIAURLFilteringRulesArgs{
//				Action:      pulumi.String("BLOCK"),
//				Description: pulumi.String("Block Video Streaming."),
//				DeviceTrustLevels: pulumi.StringArray{
//					pulumi.String("UNKNOWN_DEVICETRUSTLEVEL"),
//					pulumi.String("LOW_TRUST"),
//					pulumi.String("MEDIUM_TRUST"),
//					pulumi.String("HIGH_TRUST"),
//				},
//				Order: pulumi.Int(2),
//				Protocols: pulumi.StringArray{
//					pulumi.String("ANY_RULE"),
//				},
//				RequestMethods: pulumi.StringArray{
//					pulumi.String("CONNECT"),
//					pulumi.String("DELETE"),
//					pulumi.String("GET"),
//					pulumi.String("HEAD"),
//					pulumi.String("OPTIONS"),
//					pulumi.String("OTHER"),
//					pulumi.String("POST"),
//					pulumi.String("PUT"),
//					pulumi.String("TRACE"),
//				},
//				State: pulumi.String("ENABLED"),
//				UrlCategories: pulumi.StringArray{
//					pulumi.String("ANY"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type ZIAURLFilteringRules struct {
	pulumi.CustomResourceState

	// Action taken when traffic matches rule criteria. Supported values: `ANY`, `NONE`, `BLOCK`, `CAUTION`, `ALLOW`, `ICAP_RESPONSE`
	Action pulumi.StringPtrOutput `pulumi:"action"`
	// When set to true, a `BLOCK` action triggered by the rule could be overridden. If true and both overrideGroup and overrideUsers are not set, the `BLOCK` triggered by this rule could be overridden for any users. If block)Override is not set, `BLOCK` action cannot be overridden.
	BlockOverride pulumi.BoolOutput `pulumi:"blockOverride"`
	// If set to true, the CIPA Compliance rule is enabled
	Ciparule pulumi.BoolOutput `pulumi:"ciparule"`
	// The departments to which the Firewall Filtering policy rule applies
	Departments ZIAURLFilteringRulesDepartmentsOutput `pulumi:"departments"`
	// Additional information about the rule
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// list of device groups
	DeviceGroups ZIAURLFilteringRulesDeviceGroupsOutput `pulumi:"deviceGroups"`
	// List of device trust levels for which the rule must be applied. This field is applicable for devices that are managed using Zscaler Client Connector. The trust levels are assigned to the devices based on your posture configurations in the Zscaler Client Connector Portal. If no value is set, this field is ignored during the policy evaluation. Supported values: `ANY`, `UNKNOWN_DEVICETRUSTLEVEL`, `LOW_TRUST`, `MEDIUM_TRUST`, `HIGH_TRUST`
	DeviceTrustLevels pulumi.StringArrayOutput `pulumi:"deviceTrustLevels"`
	// list of devices
	Devices ZIAURLFilteringRulesDevicesOutput `pulumi:"devices"`
	// URL of end user notification page to be displayed when the rule is matched. Not applicable if either 'overrideUsers' or 'overrideGroups' is specified.
	EndUserNotificationUrl pulumi.StringPtrOutput `pulumi:"endUserNotificationUrl"`
	// Enforce a set a validity time period for the URL Filtering rule.
	EnforceTimeValidity pulumi.BoolOutput `pulumi:"enforceTimeValidity"`
	// The groups to which the Firewall Filtering policy rule applies
	Groups ZIAURLFilteringRulesGroupsOutput `pulumi:"groups"`
	// list of labels
	Labels ZIAURLFilteringRulesLabelsOutput `pulumi:"labels"`
	// Who modified the rule last
	LastModifiedBies ZIAURLFilteringRulesLastModifiedByArrayOutput `pulumi:"lastModifiedBies"`
	// When the rule was last modified
	LastModifiedTime pulumi.IntPtrOutput `pulumi:"lastModifiedTime"`
	// The location groups to which the Firewall Filtering policy rule applies
	LocationGroups ZIAURLFilteringRulesLocationGroupsOutput `pulumi:"locationGroups"`
	// The locations to which the Firewall Filtering policy rule applies
	Locations ZIAURLFilteringRulesLocationsOutput `pulumi:"locations"`
	// Name of the Firewall Filtering policy rule
	Name pulumi.StringOutput `pulumi:"name"`
	// Order of execution of rule with respect to other URL Filtering rules
	Order pulumi.IntOutput `pulumi:"order"`
	// Name-ID pairs of users for which this rule can be overridden. Applicable only if blockOverride is set to `true`, action is `BLOCK` and overrideGroups is not set.If this overrideUsers is not set, `BLOCK` action can be overridden for any group.
	OverrideGroups ZIAURLFilteringRulesOverrideGroupsOutput `pulumi:"overrideGroups"`
	// Name-ID pairs of users for which this rule can be overridden. Applicable only if blockOverride is set to `true`, action is `BLOCK` and overrideGroups is not set.If this overrideUsers is not set, `BLOCK` action can be overridden for any user.
	OverrideUsers ZIAURLFilteringRulesOverrideUsersOutput `pulumi:"overrideUsers"`
	// Protocol criteria. Supported values: `SMRULEF_ZPA_BROKERS_RULE`, `ANY_RULE`, `TCP_RULE`, `UDP_RULE`, `DOHTTPS_RULE`, `TUNNELSSL_RULE`, `HTTP_PROXY`, `FOHTTP_RULE`, `FTP_RULE`, `HTTPS_RULE`, `HTTP_RULE`, `SSL_RULE`, `TUNNEL_RULE`.
	Protocols pulumi.StringArrayOutput `pulumi:"protocols"`
	// Admin rank of the admin who creates this rule
	Rank pulumi.IntPtrOutput `pulumi:"rank"`
	// Request method for which the rule must be applied. If not set, rule will be applied to all methods
	RequestMethods pulumi.StringArrayOutput `pulumi:"requestMethods"`
	// URL Filtering Rule ID
	RuleId pulumi.IntOutput `pulumi:"ruleId"`
	// Size quota in KB beyond which the URL Filtering rule is applied. If not set, no quota is enforced. If a policy rule action is set to `BLOCK`, this field is not applicable.
	SizeQuota pulumi.IntPtrOutput `pulumi:"sizeQuota"`
	// Rule State
	State pulumi.StringPtrOutput `pulumi:"state"`
	// Time quota in minutes, after which the URL Filtering rule is applied. If not set, no quota is enforced. If a policy rule action is set to `BLOCK`, this field is not applicable.
	TimeQuota pulumi.IntPtrOutput `pulumi:"timeQuota"`
	// The time interval in which the Firewall Filtering policy rule applies
	TimeWindows ZIAURLFilteringRulesTimeWindowsOutput `pulumi:"timeWindows"`
	// List of URL categories for which rule must be applied
	UrlCategories  pulumi.StringArrayOutput `pulumi:"urlCategories"`
	UserAgentTypes pulumi.StringArrayOutput `pulumi:"userAgentTypes"`
	// The users to which the Firewall Filtering policy rule applies
	Users ZIAURLFilteringRulesUsersOutput `pulumi:"users"`
	// If `enforceTimeValidity` is set to true, the URL Filtering rule will cease to be valid on this end date and time.
	ValidityEndTime pulumi.IntPtrOutput `pulumi:"validityEndTime"`
	// If enforceTimeValidity is set to true, the URL Filtering rule will be valid starting on this date and time.
	ValidityStartTime pulumi.IntPtrOutput `pulumi:"validityStartTime"`
	// If `enforceTimeValidity` is set to true, the URL Filtering rule date and time will be valid based on this time zone ID.
	ValidityTimeZoneId pulumi.StringPtrOutput `pulumi:"validityTimeZoneId"`
}

// NewZIAURLFilteringRules registers a new resource with the given unique name, arguments, and options.
func NewZIAURLFilteringRules(ctx *pulumi.Context,
	name string, args *ZIAURLFilteringRulesArgs, opts ...pulumi.ResourceOption) (*ZIAURLFilteringRules, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Order == nil {
		return nil, errors.New("invalid value for required argument 'Order'")
	}
	if args.Protocols == nil {
		return nil, errors.New("invalid value for required argument 'Protocols'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource ZIAURLFilteringRules
	err := ctx.RegisterResource("zia:index/zIAURLFilteringRules:ZIAURLFilteringRules", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetZIAURLFilteringRules gets an existing ZIAURLFilteringRules resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetZIAURLFilteringRules(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ZIAURLFilteringRulesState, opts ...pulumi.ResourceOption) (*ZIAURLFilteringRules, error) {
	var resource ZIAURLFilteringRules
	err := ctx.ReadResource("zia:index/zIAURLFilteringRules:ZIAURLFilteringRules", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ZIAURLFilteringRules resources.
type ziaurlfilteringRulesState struct {
	// Action taken when traffic matches rule criteria. Supported values: `ANY`, `NONE`, `BLOCK`, `CAUTION`, `ALLOW`, `ICAP_RESPONSE`
	Action *string `pulumi:"action"`
	// When set to true, a `BLOCK` action triggered by the rule could be overridden. If true and both overrideGroup and overrideUsers are not set, the `BLOCK` triggered by this rule could be overridden for any users. If block)Override is not set, `BLOCK` action cannot be overridden.
	BlockOverride *bool `pulumi:"blockOverride"`
	// If set to true, the CIPA Compliance rule is enabled
	Ciparule *bool `pulumi:"ciparule"`
	// The departments to which the Firewall Filtering policy rule applies
	Departments *ZIAURLFilteringRulesDepartments `pulumi:"departments"`
	// Additional information about the rule
	Description *string `pulumi:"description"`
	// list of device groups
	DeviceGroups *ZIAURLFilteringRulesDeviceGroups `pulumi:"deviceGroups"`
	// List of device trust levels for which the rule must be applied. This field is applicable for devices that are managed using Zscaler Client Connector. The trust levels are assigned to the devices based on your posture configurations in the Zscaler Client Connector Portal. If no value is set, this field is ignored during the policy evaluation. Supported values: `ANY`, `UNKNOWN_DEVICETRUSTLEVEL`, `LOW_TRUST`, `MEDIUM_TRUST`, `HIGH_TRUST`
	DeviceTrustLevels []string `pulumi:"deviceTrustLevels"`
	// list of devices
	Devices *ZIAURLFilteringRulesDevices `pulumi:"devices"`
	// URL of end user notification page to be displayed when the rule is matched. Not applicable if either 'overrideUsers' or 'overrideGroups' is specified.
	EndUserNotificationUrl *string `pulumi:"endUserNotificationUrl"`
	// Enforce a set a validity time period for the URL Filtering rule.
	EnforceTimeValidity *bool `pulumi:"enforceTimeValidity"`
	// The groups to which the Firewall Filtering policy rule applies
	Groups *ZIAURLFilteringRulesGroups `pulumi:"groups"`
	// list of labels
	Labels *ZIAURLFilteringRulesLabels `pulumi:"labels"`
	// Who modified the rule last
	LastModifiedBies []ZIAURLFilteringRulesLastModifiedBy `pulumi:"lastModifiedBies"`
	// When the rule was last modified
	LastModifiedTime *int `pulumi:"lastModifiedTime"`
	// The location groups to which the Firewall Filtering policy rule applies
	LocationGroups *ZIAURLFilteringRulesLocationGroups `pulumi:"locationGroups"`
	// The locations to which the Firewall Filtering policy rule applies
	Locations *ZIAURLFilteringRulesLocations `pulumi:"locations"`
	// Name of the Firewall Filtering policy rule
	Name *string `pulumi:"name"`
	// Order of execution of rule with respect to other URL Filtering rules
	Order *int `pulumi:"order"`
	// Name-ID pairs of users for which this rule can be overridden. Applicable only if blockOverride is set to `true`, action is `BLOCK` and overrideGroups is not set.If this overrideUsers is not set, `BLOCK` action can be overridden for any group.
	OverrideGroups *ZIAURLFilteringRulesOverrideGroups `pulumi:"overrideGroups"`
	// Name-ID pairs of users for which this rule can be overridden. Applicable only if blockOverride is set to `true`, action is `BLOCK` and overrideGroups is not set.If this overrideUsers is not set, `BLOCK` action can be overridden for any user.
	OverrideUsers *ZIAURLFilteringRulesOverrideUsers `pulumi:"overrideUsers"`
	// Protocol criteria. Supported values: `SMRULEF_ZPA_BROKERS_RULE`, `ANY_RULE`, `TCP_RULE`, `UDP_RULE`, `DOHTTPS_RULE`, `TUNNELSSL_RULE`, `HTTP_PROXY`, `FOHTTP_RULE`, `FTP_RULE`, `HTTPS_RULE`, `HTTP_RULE`, `SSL_RULE`, `TUNNEL_RULE`.
	Protocols []string `pulumi:"protocols"`
	// Admin rank of the admin who creates this rule
	Rank *int `pulumi:"rank"`
	// Request method for which the rule must be applied. If not set, rule will be applied to all methods
	RequestMethods []string `pulumi:"requestMethods"`
	// URL Filtering Rule ID
	RuleId *int `pulumi:"ruleId"`
	// Size quota in KB beyond which the URL Filtering rule is applied. If not set, no quota is enforced. If a policy rule action is set to `BLOCK`, this field is not applicable.
	SizeQuota *int `pulumi:"sizeQuota"`
	// Rule State
	State *string `pulumi:"state"`
	// Time quota in minutes, after which the URL Filtering rule is applied. If not set, no quota is enforced. If a policy rule action is set to `BLOCK`, this field is not applicable.
	TimeQuota *int `pulumi:"timeQuota"`
	// The time interval in which the Firewall Filtering policy rule applies
	TimeWindows *ZIAURLFilteringRulesTimeWindows `pulumi:"timeWindows"`
	// List of URL categories for which rule must be applied
	UrlCategories  []string `pulumi:"urlCategories"`
	UserAgentTypes []string `pulumi:"userAgentTypes"`
	// The users to which the Firewall Filtering policy rule applies
	Users *ZIAURLFilteringRulesUsers `pulumi:"users"`
	// If `enforceTimeValidity` is set to true, the URL Filtering rule will cease to be valid on this end date and time.
	ValidityEndTime *int `pulumi:"validityEndTime"`
	// If enforceTimeValidity is set to true, the URL Filtering rule will be valid starting on this date and time.
	ValidityStartTime *int `pulumi:"validityStartTime"`
	// If `enforceTimeValidity` is set to true, the URL Filtering rule date and time will be valid based on this time zone ID.
	ValidityTimeZoneId *string `pulumi:"validityTimeZoneId"`
}

type ZIAURLFilteringRulesState struct {
	// Action taken when traffic matches rule criteria. Supported values: `ANY`, `NONE`, `BLOCK`, `CAUTION`, `ALLOW`, `ICAP_RESPONSE`
	Action pulumi.StringPtrInput
	// When set to true, a `BLOCK` action triggered by the rule could be overridden. If true and both overrideGroup and overrideUsers are not set, the `BLOCK` triggered by this rule could be overridden for any users. If block)Override is not set, `BLOCK` action cannot be overridden.
	BlockOverride pulumi.BoolPtrInput
	// If set to true, the CIPA Compliance rule is enabled
	Ciparule pulumi.BoolPtrInput
	// The departments to which the Firewall Filtering policy rule applies
	Departments ZIAURLFilteringRulesDepartmentsPtrInput
	// Additional information about the rule
	Description pulumi.StringPtrInput
	// list of device groups
	DeviceGroups ZIAURLFilteringRulesDeviceGroupsPtrInput
	// List of device trust levels for which the rule must be applied. This field is applicable for devices that are managed using Zscaler Client Connector. The trust levels are assigned to the devices based on your posture configurations in the Zscaler Client Connector Portal. If no value is set, this field is ignored during the policy evaluation. Supported values: `ANY`, `UNKNOWN_DEVICETRUSTLEVEL`, `LOW_TRUST`, `MEDIUM_TRUST`, `HIGH_TRUST`
	DeviceTrustLevels pulumi.StringArrayInput
	// list of devices
	Devices ZIAURLFilteringRulesDevicesPtrInput
	// URL of end user notification page to be displayed when the rule is matched. Not applicable if either 'overrideUsers' or 'overrideGroups' is specified.
	EndUserNotificationUrl pulumi.StringPtrInput
	// Enforce a set a validity time period for the URL Filtering rule.
	EnforceTimeValidity pulumi.BoolPtrInput
	// The groups to which the Firewall Filtering policy rule applies
	Groups ZIAURLFilteringRulesGroupsPtrInput
	// list of labels
	Labels ZIAURLFilteringRulesLabelsPtrInput
	// Who modified the rule last
	LastModifiedBies ZIAURLFilteringRulesLastModifiedByArrayInput
	// When the rule was last modified
	LastModifiedTime pulumi.IntPtrInput
	// The location groups to which the Firewall Filtering policy rule applies
	LocationGroups ZIAURLFilteringRulesLocationGroupsPtrInput
	// The locations to which the Firewall Filtering policy rule applies
	Locations ZIAURLFilteringRulesLocationsPtrInput
	// Name of the Firewall Filtering policy rule
	Name pulumi.StringPtrInput
	// Order of execution of rule with respect to other URL Filtering rules
	Order pulumi.IntPtrInput
	// Name-ID pairs of users for which this rule can be overridden. Applicable only if blockOverride is set to `true`, action is `BLOCK` and overrideGroups is not set.If this overrideUsers is not set, `BLOCK` action can be overridden for any group.
	OverrideGroups ZIAURLFilteringRulesOverrideGroupsPtrInput
	// Name-ID pairs of users for which this rule can be overridden. Applicable only if blockOverride is set to `true`, action is `BLOCK` and overrideGroups is not set.If this overrideUsers is not set, `BLOCK` action can be overridden for any user.
	OverrideUsers ZIAURLFilteringRulesOverrideUsersPtrInput
	// Protocol criteria. Supported values: `SMRULEF_ZPA_BROKERS_RULE`, `ANY_RULE`, `TCP_RULE`, `UDP_RULE`, `DOHTTPS_RULE`, `TUNNELSSL_RULE`, `HTTP_PROXY`, `FOHTTP_RULE`, `FTP_RULE`, `HTTPS_RULE`, `HTTP_RULE`, `SSL_RULE`, `TUNNEL_RULE`.
	Protocols pulumi.StringArrayInput
	// Admin rank of the admin who creates this rule
	Rank pulumi.IntPtrInput
	// Request method for which the rule must be applied. If not set, rule will be applied to all methods
	RequestMethods pulumi.StringArrayInput
	// URL Filtering Rule ID
	RuleId pulumi.IntPtrInput
	// Size quota in KB beyond which the URL Filtering rule is applied. If not set, no quota is enforced. If a policy rule action is set to `BLOCK`, this field is not applicable.
	SizeQuota pulumi.IntPtrInput
	// Rule State
	State pulumi.StringPtrInput
	// Time quota in minutes, after which the URL Filtering rule is applied. If not set, no quota is enforced. If a policy rule action is set to `BLOCK`, this field is not applicable.
	TimeQuota pulumi.IntPtrInput
	// The time interval in which the Firewall Filtering policy rule applies
	TimeWindows ZIAURLFilteringRulesTimeWindowsPtrInput
	// List of URL categories for which rule must be applied
	UrlCategories  pulumi.StringArrayInput
	UserAgentTypes pulumi.StringArrayInput
	// The users to which the Firewall Filtering policy rule applies
	Users ZIAURLFilteringRulesUsersPtrInput
	// If `enforceTimeValidity` is set to true, the URL Filtering rule will cease to be valid on this end date and time.
	ValidityEndTime pulumi.IntPtrInput
	// If enforceTimeValidity is set to true, the URL Filtering rule will be valid starting on this date and time.
	ValidityStartTime pulumi.IntPtrInput
	// If `enforceTimeValidity` is set to true, the URL Filtering rule date and time will be valid based on this time zone ID.
	ValidityTimeZoneId pulumi.StringPtrInput
}

func (ZIAURLFilteringRulesState) ElementType() reflect.Type {
	return reflect.TypeOf((*ziaurlfilteringRulesState)(nil)).Elem()
}

type ziaurlfilteringRulesArgs struct {
	// Action taken when traffic matches rule criteria. Supported values: `ANY`, `NONE`, `BLOCK`, `CAUTION`, `ALLOW`, `ICAP_RESPONSE`
	Action *string `pulumi:"action"`
	// When set to true, a `BLOCK` action triggered by the rule could be overridden. If true and both overrideGroup and overrideUsers are not set, the `BLOCK` triggered by this rule could be overridden for any users. If block)Override is not set, `BLOCK` action cannot be overridden.
	BlockOverride *bool `pulumi:"blockOverride"`
	// If set to true, the CIPA Compliance rule is enabled
	Ciparule *bool `pulumi:"ciparule"`
	// The departments to which the Firewall Filtering policy rule applies
	Departments *ZIAURLFilteringRulesDepartments `pulumi:"departments"`
	// Additional information about the rule
	Description *string `pulumi:"description"`
	// list of device groups
	DeviceGroups *ZIAURLFilteringRulesDeviceGroups `pulumi:"deviceGroups"`
	// List of device trust levels for which the rule must be applied. This field is applicable for devices that are managed using Zscaler Client Connector. The trust levels are assigned to the devices based on your posture configurations in the Zscaler Client Connector Portal. If no value is set, this field is ignored during the policy evaluation. Supported values: `ANY`, `UNKNOWN_DEVICETRUSTLEVEL`, `LOW_TRUST`, `MEDIUM_TRUST`, `HIGH_TRUST`
	DeviceTrustLevels []string `pulumi:"deviceTrustLevels"`
	// list of devices
	Devices *ZIAURLFilteringRulesDevices `pulumi:"devices"`
	// URL of end user notification page to be displayed when the rule is matched. Not applicable if either 'overrideUsers' or 'overrideGroups' is specified.
	EndUserNotificationUrl *string `pulumi:"endUserNotificationUrl"`
	// Enforce a set a validity time period for the URL Filtering rule.
	EnforceTimeValidity *bool `pulumi:"enforceTimeValidity"`
	// The groups to which the Firewall Filtering policy rule applies
	Groups *ZIAURLFilteringRulesGroups `pulumi:"groups"`
	// list of labels
	Labels *ZIAURLFilteringRulesLabels `pulumi:"labels"`
	// Who modified the rule last
	LastModifiedBies []ZIAURLFilteringRulesLastModifiedBy `pulumi:"lastModifiedBies"`
	// When the rule was last modified
	LastModifiedTime *int `pulumi:"lastModifiedTime"`
	// The location groups to which the Firewall Filtering policy rule applies
	LocationGroups *ZIAURLFilteringRulesLocationGroups `pulumi:"locationGroups"`
	// The locations to which the Firewall Filtering policy rule applies
	Locations *ZIAURLFilteringRulesLocations `pulumi:"locations"`
	// Name of the Firewall Filtering policy rule
	Name *string `pulumi:"name"`
	// Order of execution of rule with respect to other URL Filtering rules
	Order int `pulumi:"order"`
	// Name-ID pairs of users for which this rule can be overridden. Applicable only if blockOverride is set to `true`, action is `BLOCK` and overrideGroups is not set.If this overrideUsers is not set, `BLOCK` action can be overridden for any group.
	OverrideGroups *ZIAURLFilteringRulesOverrideGroups `pulumi:"overrideGroups"`
	// Name-ID pairs of users for which this rule can be overridden. Applicable only if blockOverride is set to `true`, action is `BLOCK` and overrideGroups is not set.If this overrideUsers is not set, `BLOCK` action can be overridden for any user.
	OverrideUsers *ZIAURLFilteringRulesOverrideUsers `pulumi:"overrideUsers"`
	// Protocol criteria. Supported values: `SMRULEF_ZPA_BROKERS_RULE`, `ANY_RULE`, `TCP_RULE`, `UDP_RULE`, `DOHTTPS_RULE`, `TUNNELSSL_RULE`, `HTTP_PROXY`, `FOHTTP_RULE`, `FTP_RULE`, `HTTPS_RULE`, `HTTP_RULE`, `SSL_RULE`, `TUNNEL_RULE`.
	Protocols []string `pulumi:"protocols"`
	// Admin rank of the admin who creates this rule
	Rank *int `pulumi:"rank"`
	// Request method for which the rule must be applied. If not set, rule will be applied to all methods
	RequestMethods []string `pulumi:"requestMethods"`
	// Size quota in KB beyond which the URL Filtering rule is applied. If not set, no quota is enforced. If a policy rule action is set to `BLOCK`, this field is not applicable.
	SizeQuota *int `pulumi:"sizeQuota"`
	// Rule State
	State *string `pulumi:"state"`
	// Time quota in minutes, after which the URL Filtering rule is applied. If not set, no quota is enforced. If a policy rule action is set to `BLOCK`, this field is not applicable.
	TimeQuota *int `pulumi:"timeQuota"`
	// The time interval in which the Firewall Filtering policy rule applies
	TimeWindows *ZIAURLFilteringRulesTimeWindows `pulumi:"timeWindows"`
	// List of URL categories for which rule must be applied
	UrlCategories  []string `pulumi:"urlCategories"`
	UserAgentTypes []string `pulumi:"userAgentTypes"`
	// The users to which the Firewall Filtering policy rule applies
	Users *ZIAURLFilteringRulesUsers `pulumi:"users"`
	// If `enforceTimeValidity` is set to true, the URL Filtering rule will cease to be valid on this end date and time.
	ValidityEndTime *int `pulumi:"validityEndTime"`
	// If enforceTimeValidity is set to true, the URL Filtering rule will be valid starting on this date and time.
	ValidityStartTime *int `pulumi:"validityStartTime"`
	// If `enforceTimeValidity` is set to true, the URL Filtering rule date and time will be valid based on this time zone ID.
	ValidityTimeZoneId *string `pulumi:"validityTimeZoneId"`
}

// The set of arguments for constructing a ZIAURLFilteringRules resource.
type ZIAURLFilteringRulesArgs struct {
	// Action taken when traffic matches rule criteria. Supported values: `ANY`, `NONE`, `BLOCK`, `CAUTION`, `ALLOW`, `ICAP_RESPONSE`
	Action pulumi.StringPtrInput
	// When set to true, a `BLOCK` action triggered by the rule could be overridden. If true and both overrideGroup and overrideUsers are not set, the `BLOCK` triggered by this rule could be overridden for any users. If block)Override is not set, `BLOCK` action cannot be overridden.
	BlockOverride pulumi.BoolPtrInput
	// If set to true, the CIPA Compliance rule is enabled
	Ciparule pulumi.BoolPtrInput
	// The departments to which the Firewall Filtering policy rule applies
	Departments ZIAURLFilteringRulesDepartmentsPtrInput
	// Additional information about the rule
	Description pulumi.StringPtrInput
	// list of device groups
	DeviceGroups ZIAURLFilteringRulesDeviceGroupsPtrInput
	// List of device trust levels for which the rule must be applied. This field is applicable for devices that are managed using Zscaler Client Connector. The trust levels are assigned to the devices based on your posture configurations in the Zscaler Client Connector Portal. If no value is set, this field is ignored during the policy evaluation. Supported values: `ANY`, `UNKNOWN_DEVICETRUSTLEVEL`, `LOW_TRUST`, `MEDIUM_TRUST`, `HIGH_TRUST`
	DeviceTrustLevels pulumi.StringArrayInput
	// list of devices
	Devices ZIAURLFilteringRulesDevicesPtrInput
	// URL of end user notification page to be displayed when the rule is matched. Not applicable if either 'overrideUsers' or 'overrideGroups' is specified.
	EndUserNotificationUrl pulumi.StringPtrInput
	// Enforce a set a validity time period for the URL Filtering rule.
	EnforceTimeValidity pulumi.BoolPtrInput
	// The groups to which the Firewall Filtering policy rule applies
	Groups ZIAURLFilteringRulesGroupsPtrInput
	// list of labels
	Labels ZIAURLFilteringRulesLabelsPtrInput
	// Who modified the rule last
	LastModifiedBies ZIAURLFilteringRulesLastModifiedByArrayInput
	// When the rule was last modified
	LastModifiedTime pulumi.IntPtrInput
	// The location groups to which the Firewall Filtering policy rule applies
	LocationGroups ZIAURLFilteringRulesLocationGroupsPtrInput
	// The locations to which the Firewall Filtering policy rule applies
	Locations ZIAURLFilteringRulesLocationsPtrInput
	// Name of the Firewall Filtering policy rule
	Name pulumi.StringPtrInput
	// Order of execution of rule with respect to other URL Filtering rules
	Order pulumi.IntInput
	// Name-ID pairs of users for which this rule can be overridden. Applicable only if blockOverride is set to `true`, action is `BLOCK` and overrideGroups is not set.If this overrideUsers is not set, `BLOCK` action can be overridden for any group.
	OverrideGroups ZIAURLFilteringRulesOverrideGroupsPtrInput
	// Name-ID pairs of users for which this rule can be overridden. Applicable only if blockOverride is set to `true`, action is `BLOCK` and overrideGroups is not set.If this overrideUsers is not set, `BLOCK` action can be overridden for any user.
	OverrideUsers ZIAURLFilteringRulesOverrideUsersPtrInput
	// Protocol criteria. Supported values: `SMRULEF_ZPA_BROKERS_RULE`, `ANY_RULE`, `TCP_RULE`, `UDP_RULE`, `DOHTTPS_RULE`, `TUNNELSSL_RULE`, `HTTP_PROXY`, `FOHTTP_RULE`, `FTP_RULE`, `HTTPS_RULE`, `HTTP_RULE`, `SSL_RULE`, `TUNNEL_RULE`.
	Protocols pulumi.StringArrayInput
	// Admin rank of the admin who creates this rule
	Rank pulumi.IntPtrInput
	// Request method for which the rule must be applied. If not set, rule will be applied to all methods
	RequestMethods pulumi.StringArrayInput
	// Size quota in KB beyond which the URL Filtering rule is applied. If not set, no quota is enforced. If a policy rule action is set to `BLOCK`, this field is not applicable.
	SizeQuota pulumi.IntPtrInput
	// Rule State
	State pulumi.StringPtrInput
	// Time quota in minutes, after which the URL Filtering rule is applied. If not set, no quota is enforced. If a policy rule action is set to `BLOCK`, this field is not applicable.
	TimeQuota pulumi.IntPtrInput
	// The time interval in which the Firewall Filtering policy rule applies
	TimeWindows ZIAURLFilteringRulesTimeWindowsPtrInput
	// List of URL categories for which rule must be applied
	UrlCategories  pulumi.StringArrayInput
	UserAgentTypes pulumi.StringArrayInput
	// The users to which the Firewall Filtering policy rule applies
	Users ZIAURLFilteringRulesUsersPtrInput
	// If `enforceTimeValidity` is set to true, the URL Filtering rule will cease to be valid on this end date and time.
	ValidityEndTime pulumi.IntPtrInput
	// If enforceTimeValidity is set to true, the URL Filtering rule will be valid starting on this date and time.
	ValidityStartTime pulumi.IntPtrInput
	// If `enforceTimeValidity` is set to true, the URL Filtering rule date and time will be valid based on this time zone ID.
	ValidityTimeZoneId pulumi.StringPtrInput
}

func (ZIAURLFilteringRulesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ziaurlfilteringRulesArgs)(nil)).Elem()
}

type ZIAURLFilteringRulesInput interface {
	pulumi.Input

	ToZIAURLFilteringRulesOutput() ZIAURLFilteringRulesOutput
	ToZIAURLFilteringRulesOutputWithContext(ctx context.Context) ZIAURLFilteringRulesOutput
}

func (*ZIAURLFilteringRules) ElementType() reflect.Type {
	return reflect.TypeOf((**ZIAURLFilteringRules)(nil)).Elem()
}

func (i *ZIAURLFilteringRules) ToZIAURLFilteringRulesOutput() ZIAURLFilteringRulesOutput {
	return i.ToZIAURLFilteringRulesOutputWithContext(context.Background())
}

func (i *ZIAURLFilteringRules) ToZIAURLFilteringRulesOutputWithContext(ctx context.Context) ZIAURLFilteringRulesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZIAURLFilteringRulesOutput)
}

// ZIAURLFilteringRulesArrayInput is an input type that accepts ZIAURLFilteringRulesArray and ZIAURLFilteringRulesArrayOutput values.
// You can construct a concrete instance of `ZIAURLFilteringRulesArrayInput` via:
//
//	ZIAURLFilteringRulesArray{ ZIAURLFilteringRulesArgs{...} }
type ZIAURLFilteringRulesArrayInput interface {
	pulumi.Input

	ToZIAURLFilteringRulesArrayOutput() ZIAURLFilteringRulesArrayOutput
	ToZIAURLFilteringRulesArrayOutputWithContext(context.Context) ZIAURLFilteringRulesArrayOutput
}

type ZIAURLFilteringRulesArray []ZIAURLFilteringRulesInput

func (ZIAURLFilteringRulesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ZIAURLFilteringRules)(nil)).Elem()
}

func (i ZIAURLFilteringRulesArray) ToZIAURLFilteringRulesArrayOutput() ZIAURLFilteringRulesArrayOutput {
	return i.ToZIAURLFilteringRulesArrayOutputWithContext(context.Background())
}

func (i ZIAURLFilteringRulesArray) ToZIAURLFilteringRulesArrayOutputWithContext(ctx context.Context) ZIAURLFilteringRulesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZIAURLFilteringRulesArrayOutput)
}

// ZIAURLFilteringRulesMapInput is an input type that accepts ZIAURLFilteringRulesMap and ZIAURLFilteringRulesMapOutput values.
// You can construct a concrete instance of `ZIAURLFilteringRulesMapInput` via:
//
//	ZIAURLFilteringRulesMap{ "key": ZIAURLFilteringRulesArgs{...} }
type ZIAURLFilteringRulesMapInput interface {
	pulumi.Input

	ToZIAURLFilteringRulesMapOutput() ZIAURLFilteringRulesMapOutput
	ToZIAURLFilteringRulesMapOutputWithContext(context.Context) ZIAURLFilteringRulesMapOutput
}

type ZIAURLFilteringRulesMap map[string]ZIAURLFilteringRulesInput

func (ZIAURLFilteringRulesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ZIAURLFilteringRules)(nil)).Elem()
}

func (i ZIAURLFilteringRulesMap) ToZIAURLFilteringRulesMapOutput() ZIAURLFilteringRulesMapOutput {
	return i.ToZIAURLFilteringRulesMapOutputWithContext(context.Background())
}

func (i ZIAURLFilteringRulesMap) ToZIAURLFilteringRulesMapOutputWithContext(ctx context.Context) ZIAURLFilteringRulesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZIAURLFilteringRulesMapOutput)
}

type ZIAURLFilteringRulesOutput struct{ *pulumi.OutputState }

func (ZIAURLFilteringRulesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ZIAURLFilteringRules)(nil)).Elem()
}

func (o ZIAURLFilteringRulesOutput) ToZIAURLFilteringRulesOutput() ZIAURLFilteringRulesOutput {
	return o
}

func (o ZIAURLFilteringRulesOutput) ToZIAURLFilteringRulesOutputWithContext(ctx context.Context) ZIAURLFilteringRulesOutput {
	return o
}

// Action taken when traffic matches rule criteria. Supported values: `ANY`, `NONE`, `BLOCK`, `CAUTION`, `ALLOW`, `ICAP_RESPONSE`
func (o ZIAURLFilteringRulesOutput) Action() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ZIAURLFilteringRules) pulumi.StringPtrOutput { return v.Action }).(pulumi.StringPtrOutput)
}

// When set to true, a `BLOCK` action triggered by the rule could be overridden. If true and both overrideGroup and overrideUsers are not set, the `BLOCK` triggered by this rule could be overridden for any users. If block)Override is not set, `BLOCK` action cannot be overridden.
func (o ZIAURLFilteringRulesOutput) BlockOverride() pulumi.BoolOutput {
	return o.ApplyT(func(v *ZIAURLFilteringRules) pulumi.BoolOutput { return v.BlockOverride }).(pulumi.BoolOutput)
}

// If set to true, the CIPA Compliance rule is enabled
func (o ZIAURLFilteringRulesOutput) Ciparule() pulumi.BoolOutput {
	return o.ApplyT(func(v *ZIAURLFilteringRules) pulumi.BoolOutput { return v.Ciparule }).(pulumi.BoolOutput)
}

// The departments to which the Firewall Filtering policy rule applies
func (o ZIAURLFilteringRulesOutput) Departments() ZIAURLFilteringRulesDepartmentsOutput {
	return o.ApplyT(func(v *ZIAURLFilteringRules) ZIAURLFilteringRulesDepartmentsOutput { return v.Departments }).(ZIAURLFilteringRulesDepartmentsOutput)
}

// Additional information about the rule
func (o ZIAURLFilteringRulesOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ZIAURLFilteringRules) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// list of device groups
func (o ZIAURLFilteringRulesOutput) DeviceGroups() ZIAURLFilteringRulesDeviceGroupsOutput {
	return o.ApplyT(func(v *ZIAURLFilteringRules) ZIAURLFilteringRulesDeviceGroupsOutput { return v.DeviceGroups }).(ZIAURLFilteringRulesDeviceGroupsOutput)
}

// List of device trust levels for which the rule must be applied. This field is applicable for devices that are managed using Zscaler Client Connector. The trust levels are assigned to the devices based on your posture configurations in the Zscaler Client Connector Portal. If no value is set, this field is ignored during the policy evaluation. Supported values: `ANY`, `UNKNOWN_DEVICETRUSTLEVEL`, `LOW_TRUST`, `MEDIUM_TRUST`, `HIGH_TRUST`
func (o ZIAURLFilteringRulesOutput) DeviceTrustLevels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ZIAURLFilteringRules) pulumi.StringArrayOutput { return v.DeviceTrustLevels }).(pulumi.StringArrayOutput)
}

// list of devices
func (o ZIAURLFilteringRulesOutput) Devices() ZIAURLFilteringRulesDevicesOutput {
	return o.ApplyT(func(v *ZIAURLFilteringRules) ZIAURLFilteringRulesDevicesOutput { return v.Devices }).(ZIAURLFilteringRulesDevicesOutput)
}

// URL of end user notification page to be displayed when the rule is matched. Not applicable if either 'overrideUsers' or 'overrideGroups' is specified.
func (o ZIAURLFilteringRulesOutput) EndUserNotificationUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ZIAURLFilteringRules) pulumi.StringPtrOutput { return v.EndUserNotificationUrl }).(pulumi.StringPtrOutput)
}

// Enforce a set a validity time period for the URL Filtering rule.
func (o ZIAURLFilteringRulesOutput) EnforceTimeValidity() pulumi.BoolOutput {
	return o.ApplyT(func(v *ZIAURLFilteringRules) pulumi.BoolOutput { return v.EnforceTimeValidity }).(pulumi.BoolOutput)
}

// The groups to which the Firewall Filtering policy rule applies
func (o ZIAURLFilteringRulesOutput) Groups() ZIAURLFilteringRulesGroupsOutput {
	return o.ApplyT(func(v *ZIAURLFilteringRules) ZIAURLFilteringRulesGroupsOutput { return v.Groups }).(ZIAURLFilteringRulesGroupsOutput)
}

// list of labels
func (o ZIAURLFilteringRulesOutput) Labels() ZIAURLFilteringRulesLabelsOutput {
	return o.ApplyT(func(v *ZIAURLFilteringRules) ZIAURLFilteringRulesLabelsOutput { return v.Labels }).(ZIAURLFilteringRulesLabelsOutput)
}

// Who modified the rule last
func (o ZIAURLFilteringRulesOutput) LastModifiedBies() ZIAURLFilteringRulesLastModifiedByArrayOutput {
	return o.ApplyT(func(v *ZIAURLFilteringRules) ZIAURLFilteringRulesLastModifiedByArrayOutput { return v.LastModifiedBies }).(ZIAURLFilteringRulesLastModifiedByArrayOutput)
}

// When the rule was last modified
func (o ZIAURLFilteringRulesOutput) LastModifiedTime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ZIAURLFilteringRules) pulumi.IntPtrOutput { return v.LastModifiedTime }).(pulumi.IntPtrOutput)
}

// The location groups to which the Firewall Filtering policy rule applies
func (o ZIAURLFilteringRulesOutput) LocationGroups() ZIAURLFilteringRulesLocationGroupsOutput {
	return o.ApplyT(func(v *ZIAURLFilteringRules) ZIAURLFilteringRulesLocationGroupsOutput { return v.LocationGroups }).(ZIAURLFilteringRulesLocationGroupsOutput)
}

// The locations to which the Firewall Filtering policy rule applies
func (o ZIAURLFilteringRulesOutput) Locations() ZIAURLFilteringRulesLocationsOutput {
	return o.ApplyT(func(v *ZIAURLFilteringRules) ZIAURLFilteringRulesLocationsOutput { return v.Locations }).(ZIAURLFilteringRulesLocationsOutput)
}

// Name of the Firewall Filtering policy rule
func (o ZIAURLFilteringRulesOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ZIAURLFilteringRules) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Order of execution of rule with respect to other URL Filtering rules
func (o ZIAURLFilteringRulesOutput) Order() pulumi.IntOutput {
	return o.ApplyT(func(v *ZIAURLFilteringRules) pulumi.IntOutput { return v.Order }).(pulumi.IntOutput)
}

// Name-ID pairs of users for which this rule can be overridden. Applicable only if blockOverride is set to `true`, action is `BLOCK` and overrideGroups is not set.If this overrideUsers is not set, `BLOCK` action can be overridden for any group.
func (o ZIAURLFilteringRulesOutput) OverrideGroups() ZIAURLFilteringRulesOverrideGroupsOutput {
	return o.ApplyT(func(v *ZIAURLFilteringRules) ZIAURLFilteringRulesOverrideGroupsOutput { return v.OverrideGroups }).(ZIAURLFilteringRulesOverrideGroupsOutput)
}

// Name-ID pairs of users for which this rule can be overridden. Applicable only if blockOverride is set to `true`, action is `BLOCK` and overrideGroups is not set.If this overrideUsers is not set, `BLOCK` action can be overridden for any user.
func (o ZIAURLFilteringRulesOutput) OverrideUsers() ZIAURLFilteringRulesOverrideUsersOutput {
	return o.ApplyT(func(v *ZIAURLFilteringRules) ZIAURLFilteringRulesOverrideUsersOutput { return v.OverrideUsers }).(ZIAURLFilteringRulesOverrideUsersOutput)
}

// Protocol criteria. Supported values: `SMRULEF_ZPA_BROKERS_RULE`, `ANY_RULE`, `TCP_RULE`, `UDP_RULE`, `DOHTTPS_RULE`, `TUNNELSSL_RULE`, `HTTP_PROXY`, `FOHTTP_RULE`, `FTP_RULE`, `HTTPS_RULE`, `HTTP_RULE`, `SSL_RULE`, `TUNNEL_RULE`.
func (o ZIAURLFilteringRulesOutput) Protocols() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ZIAURLFilteringRules) pulumi.StringArrayOutput { return v.Protocols }).(pulumi.StringArrayOutput)
}

// Admin rank of the admin who creates this rule
func (o ZIAURLFilteringRulesOutput) Rank() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ZIAURLFilteringRules) pulumi.IntPtrOutput { return v.Rank }).(pulumi.IntPtrOutput)
}

// Request method for which the rule must be applied. If not set, rule will be applied to all methods
func (o ZIAURLFilteringRulesOutput) RequestMethods() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ZIAURLFilteringRules) pulumi.StringArrayOutput { return v.RequestMethods }).(pulumi.StringArrayOutput)
}

// URL Filtering Rule ID
func (o ZIAURLFilteringRulesOutput) RuleId() pulumi.IntOutput {
	return o.ApplyT(func(v *ZIAURLFilteringRules) pulumi.IntOutput { return v.RuleId }).(pulumi.IntOutput)
}

// Size quota in KB beyond which the URL Filtering rule is applied. If not set, no quota is enforced. If a policy rule action is set to `BLOCK`, this field is not applicable.
func (o ZIAURLFilteringRulesOutput) SizeQuota() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ZIAURLFilteringRules) pulumi.IntPtrOutput { return v.SizeQuota }).(pulumi.IntPtrOutput)
}

// Rule State
func (o ZIAURLFilteringRulesOutput) State() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ZIAURLFilteringRules) pulumi.StringPtrOutput { return v.State }).(pulumi.StringPtrOutput)
}

// Time quota in minutes, after which the URL Filtering rule is applied. If not set, no quota is enforced. If a policy rule action is set to `BLOCK`, this field is not applicable.
func (o ZIAURLFilteringRulesOutput) TimeQuota() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ZIAURLFilteringRules) pulumi.IntPtrOutput { return v.TimeQuota }).(pulumi.IntPtrOutput)
}

// The time interval in which the Firewall Filtering policy rule applies
func (o ZIAURLFilteringRulesOutput) TimeWindows() ZIAURLFilteringRulesTimeWindowsOutput {
	return o.ApplyT(func(v *ZIAURLFilteringRules) ZIAURLFilteringRulesTimeWindowsOutput { return v.TimeWindows }).(ZIAURLFilteringRulesTimeWindowsOutput)
}

// List of URL categories for which rule must be applied
func (o ZIAURLFilteringRulesOutput) UrlCategories() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ZIAURLFilteringRules) pulumi.StringArrayOutput { return v.UrlCategories }).(pulumi.StringArrayOutput)
}

func (o ZIAURLFilteringRulesOutput) UserAgentTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ZIAURLFilteringRules) pulumi.StringArrayOutput { return v.UserAgentTypes }).(pulumi.StringArrayOutput)
}

// The users to which the Firewall Filtering policy rule applies
func (o ZIAURLFilteringRulesOutput) Users() ZIAURLFilteringRulesUsersOutput {
	return o.ApplyT(func(v *ZIAURLFilteringRules) ZIAURLFilteringRulesUsersOutput { return v.Users }).(ZIAURLFilteringRulesUsersOutput)
}

// If `enforceTimeValidity` is set to true, the URL Filtering rule will cease to be valid on this end date and time.
func (o ZIAURLFilteringRulesOutput) ValidityEndTime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ZIAURLFilteringRules) pulumi.IntPtrOutput { return v.ValidityEndTime }).(pulumi.IntPtrOutput)
}

// If enforceTimeValidity is set to true, the URL Filtering rule will be valid starting on this date and time.
func (o ZIAURLFilteringRulesOutput) ValidityStartTime() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ZIAURLFilteringRules) pulumi.IntPtrOutput { return v.ValidityStartTime }).(pulumi.IntPtrOutput)
}

// If `enforceTimeValidity` is set to true, the URL Filtering rule date and time will be valid based on this time zone ID.
func (o ZIAURLFilteringRulesOutput) ValidityTimeZoneId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ZIAURLFilteringRules) pulumi.StringPtrOutput { return v.ValidityTimeZoneId }).(pulumi.StringPtrOutput)
}

type ZIAURLFilteringRulesArrayOutput struct{ *pulumi.OutputState }

func (ZIAURLFilteringRulesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ZIAURLFilteringRules)(nil)).Elem()
}

func (o ZIAURLFilteringRulesArrayOutput) ToZIAURLFilteringRulesArrayOutput() ZIAURLFilteringRulesArrayOutput {
	return o
}

func (o ZIAURLFilteringRulesArrayOutput) ToZIAURLFilteringRulesArrayOutputWithContext(ctx context.Context) ZIAURLFilteringRulesArrayOutput {
	return o
}

func (o ZIAURLFilteringRulesArrayOutput) Index(i pulumi.IntInput) ZIAURLFilteringRulesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ZIAURLFilteringRules {
		return vs[0].([]*ZIAURLFilteringRules)[vs[1].(int)]
	}).(ZIAURLFilteringRulesOutput)
}

type ZIAURLFilteringRulesMapOutput struct{ *pulumi.OutputState }

func (ZIAURLFilteringRulesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ZIAURLFilteringRules)(nil)).Elem()
}

func (o ZIAURLFilteringRulesMapOutput) ToZIAURLFilteringRulesMapOutput() ZIAURLFilteringRulesMapOutput {
	return o
}

func (o ZIAURLFilteringRulesMapOutput) ToZIAURLFilteringRulesMapOutputWithContext(ctx context.Context) ZIAURLFilteringRulesMapOutput {
	return o
}

func (o ZIAURLFilteringRulesMapOutput) MapIndex(k pulumi.StringInput) ZIAURLFilteringRulesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ZIAURLFilteringRules {
		return vs[0].(map[string]*ZIAURLFilteringRules)[vs[1].(string)]
	}).(ZIAURLFilteringRulesOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ZIAURLFilteringRulesInput)(nil)).Elem(), &ZIAURLFilteringRules{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZIAURLFilteringRulesArrayInput)(nil)).Elem(), ZIAURLFilteringRulesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZIAURLFilteringRulesMapInput)(nil)).Elem(), ZIAURLFilteringRulesMap{})
	pulumi.RegisterOutputType(ZIAURLFilteringRulesOutput{})
	pulumi.RegisterOutputType(ZIAURLFilteringRulesArrayOutput{})
	pulumi.RegisterOutputType(ZIAURLFilteringRulesMapOutput{})
}
