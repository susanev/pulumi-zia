// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package zia

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ZIASecuritySettings struct {
	pulumi.CustomResourceState

	// URLs on the denylist for your organization. Allow up to 25000 URLs.
	BlacklistUrls pulumi.StringArrayOutput `pulumi:"blacklistUrls"`
	// Allowlist URLs whose contents will not be scanned. Allows up to 255 URLs.
	WhitelistUrls pulumi.StringArrayOutput `pulumi:"whitelistUrls"`
}

// NewZIASecuritySettings registers a new resource with the given unique name, arguments, and options.
func NewZIASecuritySettings(ctx *pulumi.Context,
	name string, args *ZIASecuritySettingsArgs, opts ...pulumi.ResourceOption) (*ZIASecuritySettings, error) {
	if args == nil {
		args = &ZIASecuritySettingsArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource ZIASecuritySettings
	err := ctx.RegisterResource("zia:index/zIASecuritySettings:ZIASecuritySettings", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetZIASecuritySettings gets an existing ZIASecuritySettings resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetZIASecuritySettings(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ZIASecuritySettingsState, opts ...pulumi.ResourceOption) (*ZIASecuritySettings, error) {
	var resource ZIASecuritySettings
	err := ctx.ReadResource("zia:index/zIASecuritySettings:ZIASecuritySettings", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ZIASecuritySettings resources.
type ziasecuritySettingsState struct {
	// URLs on the denylist for your organization. Allow up to 25000 URLs.
	BlacklistUrls []string `pulumi:"blacklistUrls"`
	// Allowlist URLs whose contents will not be scanned. Allows up to 255 URLs.
	WhitelistUrls []string `pulumi:"whitelistUrls"`
}

type ZIASecuritySettingsState struct {
	// URLs on the denylist for your organization. Allow up to 25000 URLs.
	BlacklistUrls pulumi.StringArrayInput
	// Allowlist URLs whose contents will not be scanned. Allows up to 255 URLs.
	WhitelistUrls pulumi.StringArrayInput
}

func (ZIASecuritySettingsState) ElementType() reflect.Type {
	return reflect.TypeOf((*ziasecuritySettingsState)(nil)).Elem()
}

type ziasecuritySettingsArgs struct {
	// URLs on the denylist for your organization. Allow up to 25000 URLs.
	BlacklistUrls []string `pulumi:"blacklistUrls"`
	// Allowlist URLs whose contents will not be scanned. Allows up to 255 URLs.
	WhitelistUrls []string `pulumi:"whitelistUrls"`
}

// The set of arguments for constructing a ZIASecuritySettings resource.
type ZIASecuritySettingsArgs struct {
	// URLs on the denylist for your organization. Allow up to 25000 URLs.
	BlacklistUrls pulumi.StringArrayInput
	// Allowlist URLs whose contents will not be scanned. Allows up to 255 URLs.
	WhitelistUrls pulumi.StringArrayInput
}

func (ZIASecuritySettingsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ziasecuritySettingsArgs)(nil)).Elem()
}

type ZIASecuritySettingsInput interface {
	pulumi.Input

	ToZIASecuritySettingsOutput() ZIASecuritySettingsOutput
	ToZIASecuritySettingsOutputWithContext(ctx context.Context) ZIASecuritySettingsOutput
}

func (*ZIASecuritySettings) ElementType() reflect.Type {
	return reflect.TypeOf((**ZIASecuritySettings)(nil)).Elem()
}

func (i *ZIASecuritySettings) ToZIASecuritySettingsOutput() ZIASecuritySettingsOutput {
	return i.ToZIASecuritySettingsOutputWithContext(context.Background())
}

func (i *ZIASecuritySettings) ToZIASecuritySettingsOutputWithContext(ctx context.Context) ZIASecuritySettingsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZIASecuritySettingsOutput)
}

// ZIASecuritySettingsArrayInput is an input type that accepts ZIASecuritySettingsArray and ZIASecuritySettingsArrayOutput values.
// You can construct a concrete instance of `ZIASecuritySettingsArrayInput` via:
//
//	ZIASecuritySettingsArray{ ZIASecuritySettingsArgs{...} }
type ZIASecuritySettingsArrayInput interface {
	pulumi.Input

	ToZIASecuritySettingsArrayOutput() ZIASecuritySettingsArrayOutput
	ToZIASecuritySettingsArrayOutputWithContext(context.Context) ZIASecuritySettingsArrayOutput
}

type ZIASecuritySettingsArray []ZIASecuritySettingsInput

func (ZIASecuritySettingsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ZIASecuritySettings)(nil)).Elem()
}

func (i ZIASecuritySettingsArray) ToZIASecuritySettingsArrayOutput() ZIASecuritySettingsArrayOutput {
	return i.ToZIASecuritySettingsArrayOutputWithContext(context.Background())
}

func (i ZIASecuritySettingsArray) ToZIASecuritySettingsArrayOutputWithContext(ctx context.Context) ZIASecuritySettingsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZIASecuritySettingsArrayOutput)
}

// ZIASecuritySettingsMapInput is an input type that accepts ZIASecuritySettingsMap and ZIASecuritySettingsMapOutput values.
// You can construct a concrete instance of `ZIASecuritySettingsMapInput` via:
//
//	ZIASecuritySettingsMap{ "key": ZIASecuritySettingsArgs{...} }
type ZIASecuritySettingsMapInput interface {
	pulumi.Input

	ToZIASecuritySettingsMapOutput() ZIASecuritySettingsMapOutput
	ToZIASecuritySettingsMapOutputWithContext(context.Context) ZIASecuritySettingsMapOutput
}

type ZIASecuritySettingsMap map[string]ZIASecuritySettingsInput

func (ZIASecuritySettingsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ZIASecuritySettings)(nil)).Elem()
}

func (i ZIASecuritySettingsMap) ToZIASecuritySettingsMapOutput() ZIASecuritySettingsMapOutput {
	return i.ToZIASecuritySettingsMapOutputWithContext(context.Background())
}

func (i ZIASecuritySettingsMap) ToZIASecuritySettingsMapOutputWithContext(ctx context.Context) ZIASecuritySettingsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZIASecuritySettingsMapOutput)
}

type ZIASecuritySettingsOutput struct{ *pulumi.OutputState }

func (ZIASecuritySettingsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ZIASecuritySettings)(nil)).Elem()
}

func (o ZIASecuritySettingsOutput) ToZIASecuritySettingsOutput() ZIASecuritySettingsOutput {
	return o
}

func (o ZIASecuritySettingsOutput) ToZIASecuritySettingsOutputWithContext(ctx context.Context) ZIASecuritySettingsOutput {
	return o
}

// URLs on the denylist for your organization. Allow up to 25000 URLs.
func (o ZIASecuritySettingsOutput) BlacklistUrls() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ZIASecuritySettings) pulumi.StringArrayOutput { return v.BlacklistUrls }).(pulumi.StringArrayOutput)
}

// Allowlist URLs whose contents will not be scanned. Allows up to 255 URLs.
func (o ZIASecuritySettingsOutput) WhitelistUrls() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ZIASecuritySettings) pulumi.StringArrayOutput { return v.WhitelistUrls }).(pulumi.StringArrayOutput)
}

type ZIASecuritySettingsArrayOutput struct{ *pulumi.OutputState }

func (ZIASecuritySettingsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ZIASecuritySettings)(nil)).Elem()
}

func (o ZIASecuritySettingsArrayOutput) ToZIASecuritySettingsArrayOutput() ZIASecuritySettingsArrayOutput {
	return o
}

func (o ZIASecuritySettingsArrayOutput) ToZIASecuritySettingsArrayOutputWithContext(ctx context.Context) ZIASecuritySettingsArrayOutput {
	return o
}

func (o ZIASecuritySettingsArrayOutput) Index(i pulumi.IntInput) ZIASecuritySettingsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ZIASecuritySettings {
		return vs[0].([]*ZIASecuritySettings)[vs[1].(int)]
	}).(ZIASecuritySettingsOutput)
}

type ZIASecuritySettingsMapOutput struct{ *pulumi.OutputState }

func (ZIASecuritySettingsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ZIASecuritySettings)(nil)).Elem()
}

func (o ZIASecuritySettingsMapOutput) ToZIASecuritySettingsMapOutput() ZIASecuritySettingsMapOutput {
	return o
}

func (o ZIASecuritySettingsMapOutput) ToZIASecuritySettingsMapOutputWithContext(ctx context.Context) ZIASecuritySettingsMapOutput {
	return o
}

func (o ZIASecuritySettingsMapOutput) MapIndex(k pulumi.StringInput) ZIASecuritySettingsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ZIASecuritySettings {
		return vs[0].(map[string]*ZIASecuritySettings)[vs[1].(string)]
	}).(ZIASecuritySettingsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ZIASecuritySettingsInput)(nil)).Elem(), &ZIASecuritySettings{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZIASecuritySettingsArrayInput)(nil)).Elem(), ZIASecuritySettingsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZIASecuritySettingsMapInput)(nil)).Elem(), ZIASecuritySettingsMap{})
	pulumi.RegisterOutputType(ZIASecuritySettingsOutput{})
	pulumi.RegisterOutputType(ZIASecuritySettingsArrayOutput{})
	pulumi.RegisterOutputType(ZIASecuritySettingsMapOutput{})
}
