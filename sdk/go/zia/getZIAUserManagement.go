// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package zia

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use the **zia_user_management** data source to get information about a user account that may have been created in the Zscaler Internet Access portal or via API. This data source can then be associated with a ZIA cloud firewall filtering rule, and URL filtering rules.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-zia/sdk/go/zia"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := zia.LookupZIAUserManagement(ctx, &zia.LookupZIAUserManagementArgs{
//				Name: pulumi.StringRef("Adam Ashcroft"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupZIAUserManagement(ctx *pulumi.Context, args *LookupZIAUserManagementArgs, opts ...pulumi.InvokeOption) (*LookupZIAUserManagementResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv LookupZIAUserManagementResult
	err := ctx.Invoke("zia:index/getZIAUserManagement:getZIAUserManagement", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getZIAUserManagement.
type LookupZIAUserManagementArgs struct {
	// The ID of the time window resource.
	Id *int `pulumi:"id"`
	// User name. This appears when choosing users for policies.
	Name *string `pulumi:"name"`
}

// A collection of values returned by getZIAUserManagement.
type LookupZIAUserManagementResult struct {
	// (Optional) True if this user is an Admin user. readOnly: `true` default: `false`
	AdminUser bool `pulumi:"adminUser"`
	// (String) Additional information about the group
	Comments string `pulumi:"comments"`
	// (Required) Department a user belongs to
	Departments []GetZIAUserManagementDepartment `pulumi:"departments"`
	// (Required) User email consists of a user name and domain name. It does not have to be a valid email address, but it must be unique and its domain must belong to the organization
	Email string `pulumi:"email"`
	// (Required) List of Groups a user belongs to. Groups are used in policies.
	Groups []GetZIAUserManagementGroup `pulumi:"groups"`
	// (Number) Unique identfier for the group
	Id        *int   `pulumi:"id"`
	IsAuditor string `pulumi:"isAuditor"`
	// (String) Group name
	Name *string `pulumi:"name"`
	// (String) Temporary Authentication Email. If you enabled one-time tokens or links, enter the email address to which the Zscaler service sends the tokens or links. If this is empty, the service will send the email to the User email.
	TempAuthEmail string `pulumi:"tempAuthEmail"`
	// (String) User type. Provided only if this user is not an end user. The supported types are:
	Type string `pulumi:"type"`
}

func LookupZIAUserManagementOutput(ctx *pulumi.Context, args LookupZIAUserManagementOutputArgs, opts ...pulumi.InvokeOption) LookupZIAUserManagementResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupZIAUserManagementResult, error) {
			args := v.(LookupZIAUserManagementArgs)
			r, err := LookupZIAUserManagement(ctx, &args, opts...)
			var s LookupZIAUserManagementResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupZIAUserManagementResultOutput)
}

// A collection of arguments for invoking getZIAUserManagement.
type LookupZIAUserManagementOutputArgs struct {
	// The ID of the time window resource.
	Id pulumi.IntPtrInput `pulumi:"id"`
	// User name. This appears when choosing users for policies.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (LookupZIAUserManagementOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupZIAUserManagementArgs)(nil)).Elem()
}

// A collection of values returned by getZIAUserManagement.
type LookupZIAUserManagementResultOutput struct{ *pulumi.OutputState }

func (LookupZIAUserManagementResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupZIAUserManagementResult)(nil)).Elem()
}

func (o LookupZIAUserManagementResultOutput) ToLookupZIAUserManagementResultOutput() LookupZIAUserManagementResultOutput {
	return o
}

func (o LookupZIAUserManagementResultOutput) ToLookupZIAUserManagementResultOutputWithContext(ctx context.Context) LookupZIAUserManagementResultOutput {
	return o
}

// (Optional) True if this user is an Admin user. readOnly: `true` default: `false`
func (o LookupZIAUserManagementResultOutput) AdminUser() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupZIAUserManagementResult) bool { return v.AdminUser }).(pulumi.BoolOutput)
}

// (String) Additional information about the group
func (o LookupZIAUserManagementResultOutput) Comments() pulumi.StringOutput {
	return o.ApplyT(func(v LookupZIAUserManagementResult) string { return v.Comments }).(pulumi.StringOutput)
}

// (Required) Department a user belongs to
func (o LookupZIAUserManagementResultOutput) Departments() GetZIAUserManagementDepartmentArrayOutput {
	return o.ApplyT(func(v LookupZIAUserManagementResult) []GetZIAUserManagementDepartment { return v.Departments }).(GetZIAUserManagementDepartmentArrayOutput)
}

// (Required) User email consists of a user name and domain name. It does not have to be a valid email address, but it must be unique and its domain must belong to the organization
func (o LookupZIAUserManagementResultOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v LookupZIAUserManagementResult) string { return v.Email }).(pulumi.StringOutput)
}

// (Required) List of Groups a user belongs to. Groups are used in policies.
func (o LookupZIAUserManagementResultOutput) Groups() GetZIAUserManagementGroupArrayOutput {
	return o.ApplyT(func(v LookupZIAUserManagementResult) []GetZIAUserManagementGroup { return v.Groups }).(GetZIAUserManagementGroupArrayOutput)
}

// (Number) Unique identfier for the group
func (o LookupZIAUserManagementResultOutput) Id() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupZIAUserManagementResult) *int { return v.Id }).(pulumi.IntPtrOutput)
}

func (o LookupZIAUserManagementResultOutput) IsAuditor() pulumi.StringOutput {
	return o.ApplyT(func(v LookupZIAUserManagementResult) string { return v.IsAuditor }).(pulumi.StringOutput)
}

// (String) Group name
func (o LookupZIAUserManagementResultOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupZIAUserManagementResult) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// (String) Temporary Authentication Email. If you enabled one-time tokens or links, enter the email address to which the Zscaler service sends the tokens or links. If this is empty, the service will send the email to the User email.
func (o LookupZIAUserManagementResultOutput) TempAuthEmail() pulumi.StringOutput {
	return o.ApplyT(func(v LookupZIAUserManagementResult) string { return v.TempAuthEmail }).(pulumi.StringOutput)
}

// (String) User type. Provided only if this user is not an end user. The supported types are:
func (o LookupZIAUserManagementResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupZIAUserManagementResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupZIAUserManagementResultOutput{})
}
