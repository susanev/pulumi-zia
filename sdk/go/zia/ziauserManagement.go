// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package zia

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The **zia_user_management** resource allows the creation and management of local user account in the Zscaler Internet Access cloud. The user account resource can then be associated with several different types of resource within the ZIA tenant.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-zia/sdk/go/zia"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			normalInternet, err := zia.GetZIAGroupManagement(ctx, &zia.GetZIAGroupManagementArgs{
//				Name: pulumi.StringRef("Normal_Internet"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			engineering, err := zia.GetZIADepartmentManagement(ctx, &zia.GetZIADepartmentManagementArgs{
//				Name: pulumi.StringRef("Engineering"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = zia.NewZIAUserManagement(ctx, "johnAshcroft", &zia.ZIAUserManagementArgs{
//				Email:    pulumi.String("john.ashcroft@acme.com"),
//				Password: pulumi.String("P@ssw0rd123*"),
//				Groups: &zia.ZIAUserManagementGroupsArgs{
//					Ids: *pulumi.Int(normalInternet.Id),
//				},
//				Department: &zia.ZIAUserManagementDepartmentArgs{
//					Id: *pulumi.Int(engineering.Id),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ## Optional
//
// The following attributes are supported:
//
// * `comments` - (Optional) Additional information about this user.
// * `tempAuthEmail` - (Optional) Temporary Authentication Email. If you enabled one-time tokens or links, enter the email address to which the Zscaler service sends the tokens or links. If this is empty, the service will send the email to the User email.
type ZIAUserManagement struct {
	pulumi.CustomResourceState

	// Additional information about this user.
	Comments pulumi.StringPtrOutput `pulumi:"comments"`
	// Department a user belongs to
	Department ZIAUserManagementDepartmentPtrOutput `pulumi:"department"`
	// User email consists of a user name and domain name. It does not have to be a valid email address, but it must be unique and its domain must belong to the organization.
	Email pulumi.StringOutput `pulumi:"email"`
	// List of Groups a user belongs to. Groups are used in policies.
	Groups ZIAUserManagementGroupsOutput `pulumi:"groups"`
	// User name. This appears when choosing users for policies.
	Name pulumi.StringOutput `pulumi:"name"`
	// User's password. Applicable only when authentication type is Hosted DB. Password strength must follow what is defined in the auth settings.
	Password pulumi.StringOutput `pulumi:"password"`
	// Temporary Authentication Email. If you enabled one-time tokens or links, enter the email address to which the Zscaler
	// service sends the tokens or links. If this is empty, the service will send the email to the User email.
	TempAuthEmail pulumi.StringPtrOutput `pulumi:"tempAuthEmail"`
	UserId        pulumi.IntOutput       `pulumi:"userId"`
}

// NewZIAUserManagement registers a new resource with the given unique name, arguments, and options.
func NewZIAUserManagement(ctx *pulumi.Context,
	name string, args *ZIAUserManagementArgs, opts ...pulumi.ResourceOption) (*ZIAUserManagement, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Email == nil {
		return nil, errors.New("invalid value for required argument 'Email'")
	}
	if args.Password == nil {
		return nil, errors.New("invalid value for required argument 'Password'")
	}
	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
	})
	opts = append(opts, secrets)
	opts = pkgResourceDefaultOpts(opts)
	var resource ZIAUserManagement
	err := ctx.RegisterResource("zia:index/zIAUserManagement:ZIAUserManagement", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetZIAUserManagement gets an existing ZIAUserManagement resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetZIAUserManagement(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ZIAUserManagementState, opts ...pulumi.ResourceOption) (*ZIAUserManagement, error) {
	var resource ZIAUserManagement
	err := ctx.ReadResource("zia:index/zIAUserManagement:ZIAUserManagement", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ZIAUserManagement resources.
type ziauserManagementState struct {
	// Additional information about this user.
	Comments *string `pulumi:"comments"`
	// Department a user belongs to
	Department *ZIAUserManagementDepartment `pulumi:"department"`
	// User email consists of a user name and domain name. It does not have to be a valid email address, but it must be unique and its domain must belong to the organization.
	Email *string `pulumi:"email"`
	// List of Groups a user belongs to. Groups are used in policies.
	Groups *ZIAUserManagementGroups `pulumi:"groups"`
	// User name. This appears when choosing users for policies.
	Name *string `pulumi:"name"`
	// User's password. Applicable only when authentication type is Hosted DB. Password strength must follow what is defined in the auth settings.
	Password *string `pulumi:"password"`
	// Temporary Authentication Email. If you enabled one-time tokens or links, enter the email address to which the Zscaler
	// service sends the tokens or links. If this is empty, the service will send the email to the User email.
	TempAuthEmail *string `pulumi:"tempAuthEmail"`
	UserId        *int    `pulumi:"userId"`
}

type ZIAUserManagementState struct {
	// Additional information about this user.
	Comments pulumi.StringPtrInput
	// Department a user belongs to
	Department ZIAUserManagementDepartmentPtrInput
	// User email consists of a user name and domain name. It does not have to be a valid email address, but it must be unique and its domain must belong to the organization.
	Email pulumi.StringPtrInput
	// List of Groups a user belongs to. Groups are used in policies.
	Groups ZIAUserManagementGroupsPtrInput
	// User name. This appears when choosing users for policies.
	Name pulumi.StringPtrInput
	// User's password. Applicable only when authentication type is Hosted DB. Password strength must follow what is defined in the auth settings.
	Password pulumi.StringPtrInput
	// Temporary Authentication Email. If you enabled one-time tokens or links, enter the email address to which the Zscaler
	// service sends the tokens or links. If this is empty, the service will send the email to the User email.
	TempAuthEmail pulumi.StringPtrInput
	UserId        pulumi.IntPtrInput
}

func (ZIAUserManagementState) ElementType() reflect.Type {
	return reflect.TypeOf((*ziauserManagementState)(nil)).Elem()
}

type ziauserManagementArgs struct {
	// Additional information about this user.
	Comments *string `pulumi:"comments"`
	// Department a user belongs to
	Department *ZIAUserManagementDepartment `pulumi:"department"`
	// User email consists of a user name and domain name. It does not have to be a valid email address, but it must be unique and its domain must belong to the organization.
	Email string `pulumi:"email"`
	// List of Groups a user belongs to. Groups are used in policies.
	Groups *ZIAUserManagementGroups `pulumi:"groups"`
	// User name. This appears when choosing users for policies.
	Name *string `pulumi:"name"`
	// User's password. Applicable only when authentication type is Hosted DB. Password strength must follow what is defined in the auth settings.
	Password string `pulumi:"password"`
	// Temporary Authentication Email. If you enabled one-time tokens or links, enter the email address to which the Zscaler
	// service sends the tokens or links. If this is empty, the service will send the email to the User email.
	TempAuthEmail *string `pulumi:"tempAuthEmail"`
}

// The set of arguments for constructing a ZIAUserManagement resource.
type ZIAUserManagementArgs struct {
	// Additional information about this user.
	Comments pulumi.StringPtrInput
	// Department a user belongs to
	Department ZIAUserManagementDepartmentPtrInput
	// User email consists of a user name and domain name. It does not have to be a valid email address, but it must be unique and its domain must belong to the organization.
	Email pulumi.StringInput
	// List of Groups a user belongs to. Groups are used in policies.
	Groups ZIAUserManagementGroupsPtrInput
	// User name. This appears when choosing users for policies.
	Name pulumi.StringPtrInput
	// User's password. Applicable only when authentication type is Hosted DB. Password strength must follow what is defined in the auth settings.
	Password pulumi.StringInput
	// Temporary Authentication Email. If you enabled one-time tokens or links, enter the email address to which the Zscaler
	// service sends the tokens or links. If this is empty, the service will send the email to the User email.
	TempAuthEmail pulumi.StringPtrInput
}

func (ZIAUserManagementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ziauserManagementArgs)(nil)).Elem()
}

type ZIAUserManagementInput interface {
	pulumi.Input

	ToZIAUserManagementOutput() ZIAUserManagementOutput
	ToZIAUserManagementOutputWithContext(ctx context.Context) ZIAUserManagementOutput
}

func (*ZIAUserManagement) ElementType() reflect.Type {
	return reflect.TypeOf((**ZIAUserManagement)(nil)).Elem()
}

func (i *ZIAUserManagement) ToZIAUserManagementOutput() ZIAUserManagementOutput {
	return i.ToZIAUserManagementOutputWithContext(context.Background())
}

func (i *ZIAUserManagement) ToZIAUserManagementOutputWithContext(ctx context.Context) ZIAUserManagementOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZIAUserManagementOutput)
}

// ZIAUserManagementArrayInput is an input type that accepts ZIAUserManagementArray and ZIAUserManagementArrayOutput values.
// You can construct a concrete instance of `ZIAUserManagementArrayInput` via:
//
//	ZIAUserManagementArray{ ZIAUserManagementArgs{...} }
type ZIAUserManagementArrayInput interface {
	pulumi.Input

	ToZIAUserManagementArrayOutput() ZIAUserManagementArrayOutput
	ToZIAUserManagementArrayOutputWithContext(context.Context) ZIAUserManagementArrayOutput
}

type ZIAUserManagementArray []ZIAUserManagementInput

func (ZIAUserManagementArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ZIAUserManagement)(nil)).Elem()
}

func (i ZIAUserManagementArray) ToZIAUserManagementArrayOutput() ZIAUserManagementArrayOutput {
	return i.ToZIAUserManagementArrayOutputWithContext(context.Background())
}

func (i ZIAUserManagementArray) ToZIAUserManagementArrayOutputWithContext(ctx context.Context) ZIAUserManagementArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZIAUserManagementArrayOutput)
}

// ZIAUserManagementMapInput is an input type that accepts ZIAUserManagementMap and ZIAUserManagementMapOutput values.
// You can construct a concrete instance of `ZIAUserManagementMapInput` via:
//
//	ZIAUserManagementMap{ "key": ZIAUserManagementArgs{...} }
type ZIAUserManagementMapInput interface {
	pulumi.Input

	ToZIAUserManagementMapOutput() ZIAUserManagementMapOutput
	ToZIAUserManagementMapOutputWithContext(context.Context) ZIAUserManagementMapOutput
}

type ZIAUserManagementMap map[string]ZIAUserManagementInput

func (ZIAUserManagementMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ZIAUserManagement)(nil)).Elem()
}

func (i ZIAUserManagementMap) ToZIAUserManagementMapOutput() ZIAUserManagementMapOutput {
	return i.ToZIAUserManagementMapOutputWithContext(context.Background())
}

func (i ZIAUserManagementMap) ToZIAUserManagementMapOutputWithContext(ctx context.Context) ZIAUserManagementMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZIAUserManagementMapOutput)
}

type ZIAUserManagementOutput struct{ *pulumi.OutputState }

func (ZIAUserManagementOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ZIAUserManagement)(nil)).Elem()
}

func (o ZIAUserManagementOutput) ToZIAUserManagementOutput() ZIAUserManagementOutput {
	return o
}

func (o ZIAUserManagementOutput) ToZIAUserManagementOutputWithContext(ctx context.Context) ZIAUserManagementOutput {
	return o
}

// Additional information about this user.
func (o ZIAUserManagementOutput) Comments() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ZIAUserManagement) pulumi.StringPtrOutput { return v.Comments }).(pulumi.StringPtrOutput)
}

// Department a user belongs to
func (o ZIAUserManagementOutput) Department() ZIAUserManagementDepartmentPtrOutput {
	return o.ApplyT(func(v *ZIAUserManagement) ZIAUserManagementDepartmentPtrOutput { return v.Department }).(ZIAUserManagementDepartmentPtrOutput)
}

// User email consists of a user name and domain name. It does not have to be a valid email address, but it must be unique and its domain must belong to the organization.
func (o ZIAUserManagementOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v *ZIAUserManagement) pulumi.StringOutput { return v.Email }).(pulumi.StringOutput)
}

// List of Groups a user belongs to. Groups are used in policies.
func (o ZIAUserManagementOutput) Groups() ZIAUserManagementGroupsOutput {
	return o.ApplyT(func(v *ZIAUserManagement) ZIAUserManagementGroupsOutput { return v.Groups }).(ZIAUserManagementGroupsOutput)
}

// User name. This appears when choosing users for policies.
func (o ZIAUserManagementOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ZIAUserManagement) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// User's password. Applicable only when authentication type is Hosted DB. Password strength must follow what is defined in the auth settings.
func (o ZIAUserManagementOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v *ZIAUserManagement) pulumi.StringOutput { return v.Password }).(pulumi.StringOutput)
}

// Temporary Authentication Email. If you enabled one-time tokens or links, enter the email address to which the Zscaler
// service sends the tokens or links. If this is empty, the service will send the email to the User email.
func (o ZIAUserManagementOutput) TempAuthEmail() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ZIAUserManagement) pulumi.StringPtrOutput { return v.TempAuthEmail }).(pulumi.StringPtrOutput)
}

func (o ZIAUserManagementOutput) UserId() pulumi.IntOutput {
	return o.ApplyT(func(v *ZIAUserManagement) pulumi.IntOutput { return v.UserId }).(pulumi.IntOutput)
}

type ZIAUserManagementArrayOutput struct{ *pulumi.OutputState }

func (ZIAUserManagementArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ZIAUserManagement)(nil)).Elem()
}

func (o ZIAUserManagementArrayOutput) ToZIAUserManagementArrayOutput() ZIAUserManagementArrayOutput {
	return o
}

func (o ZIAUserManagementArrayOutput) ToZIAUserManagementArrayOutputWithContext(ctx context.Context) ZIAUserManagementArrayOutput {
	return o
}

func (o ZIAUserManagementArrayOutput) Index(i pulumi.IntInput) ZIAUserManagementOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ZIAUserManagement {
		return vs[0].([]*ZIAUserManagement)[vs[1].(int)]
	}).(ZIAUserManagementOutput)
}

type ZIAUserManagementMapOutput struct{ *pulumi.OutputState }

func (ZIAUserManagementMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ZIAUserManagement)(nil)).Elem()
}

func (o ZIAUserManagementMapOutput) ToZIAUserManagementMapOutput() ZIAUserManagementMapOutput {
	return o
}

func (o ZIAUserManagementMapOutput) ToZIAUserManagementMapOutputWithContext(ctx context.Context) ZIAUserManagementMapOutput {
	return o
}

func (o ZIAUserManagementMapOutput) MapIndex(k pulumi.StringInput) ZIAUserManagementOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ZIAUserManagement {
		return vs[0].(map[string]*ZIAUserManagement)[vs[1].(string)]
	}).(ZIAUserManagementOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ZIAUserManagementInput)(nil)).Elem(), &ZIAUserManagement{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZIAUserManagementArrayInput)(nil)).Elem(), ZIAUserManagementArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZIAUserManagementMapInput)(nil)).Elem(), ZIAUserManagementMap{})
	pulumi.RegisterOutputType(ZIAUserManagementOutput{})
	pulumi.RegisterOutputType(ZIAUserManagementArrayOutput{})
	pulumi.RegisterOutputType(ZIAUserManagementMapOutput{})
}
