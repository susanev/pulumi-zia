// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package zia

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use the **zia_devices** data source to get information about a device in the Zscaler Internet Access cloud or via the API. This data source can then be associated with resources such as: URL Filtering Rules
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-zia/sdk/go/zia"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := zia.GetZIADevices(ctx, &zia.GetZIADevicesArgs{
//				Name: pulumi.StringRef("administrator"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func GetZIADevices(ctx *pulumi.Context, args *GetZIADevicesArgs, opts ...pulumi.InvokeOption) (*GetZIADevicesResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv GetZIADevicesResult
	err := ctx.Invoke("zia:index/getZIADevices:getZIADevices", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getZIADevices.
type GetZIADevicesArgs struct {
	// (String) The device group type. i.e ``ZCC_OS``, ``NON_ZCC``, ``CBI``
	DeviceGroupType *string `pulumi:"deviceGroupType"`
	// (String) The device model.
	DeviceModel *string `pulumi:"deviceModel"`
	// The name of the devices to be exported.
	Name *string `pulumi:"name"`
	// (String) The operating system (OS). ``ANY``, ``OTHER_OS``, ``IOS``, ``ANDROID_OS``, ``WINDOWS_OS``, ``MAC_OS``, ``LINUX``
	OsType *string `pulumi:"osType"`
	// (String) The operating system version.
	OsVersion *string `pulumi:"osVersion"`
	// (String) The device owner's user name.
	OwnerName *string `pulumi:"ownerName"`
}

// A collection of values returned by getZIADevices.
type GetZIADevicesResult struct {
	// (String) The device's description.
	Description string `pulumi:"description"`
	// (String) The device group type. i.e ``ZCC_OS``, ``NON_ZCC``, ``CBI``
	DeviceGroupType string `pulumi:"deviceGroupType"`
	// (String) The device model.
	DeviceModel string `pulumi:"deviceModel"`
	// (String) The unique identifer for the device group.
	Id int `pulumi:"id"`
	// (String) The device name.
	Name string `pulumi:"name"`
	// (String) The operating system (OS). ``ANY``, ``OTHER_OS``, ``IOS``, ``ANDROID_OS``, ``WINDOWS_OS``, ``MAC_OS``, ``LINUX``
	OsType string `pulumi:"osType"`
	// (String) The operating system version.
	OsVersion string `pulumi:"osVersion"`
	// (String) The device owner's user name.
	OwnerName string `pulumi:"ownerName"`
	// (int) The unique identifier of the device owner (i.e., user).
	OwnerUserId int `pulumi:"ownerUserId"`
}

func GetZIADevicesOutput(ctx *pulumi.Context, args GetZIADevicesOutputArgs, opts ...pulumi.InvokeOption) GetZIADevicesResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetZIADevicesResult, error) {
			args := v.(GetZIADevicesArgs)
			r, err := GetZIADevices(ctx, &args, opts...)
			var s GetZIADevicesResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetZIADevicesResultOutput)
}

// A collection of arguments for invoking getZIADevices.
type GetZIADevicesOutputArgs struct {
	// (String) The device group type. i.e ``ZCC_OS``, ``NON_ZCC``, ``CBI``
	DeviceGroupType pulumi.StringPtrInput `pulumi:"deviceGroupType"`
	// (String) The device model.
	DeviceModel pulumi.StringPtrInput `pulumi:"deviceModel"`
	// The name of the devices to be exported.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// (String) The operating system (OS). ``ANY``, ``OTHER_OS``, ``IOS``, ``ANDROID_OS``, ``WINDOWS_OS``, ``MAC_OS``, ``LINUX``
	OsType pulumi.StringPtrInput `pulumi:"osType"`
	// (String) The operating system version.
	OsVersion pulumi.StringPtrInput `pulumi:"osVersion"`
	// (String) The device owner's user name.
	OwnerName pulumi.StringPtrInput `pulumi:"ownerName"`
}

func (GetZIADevicesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetZIADevicesArgs)(nil)).Elem()
}

// A collection of values returned by getZIADevices.
type GetZIADevicesResultOutput struct{ *pulumi.OutputState }

func (GetZIADevicesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetZIADevicesResult)(nil)).Elem()
}

func (o GetZIADevicesResultOutput) ToGetZIADevicesResultOutput() GetZIADevicesResultOutput {
	return o
}

func (o GetZIADevicesResultOutput) ToGetZIADevicesResultOutputWithContext(ctx context.Context) GetZIADevicesResultOutput {
	return o
}

// (String) The device's description.
func (o GetZIADevicesResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetZIADevicesResult) string { return v.Description }).(pulumi.StringOutput)
}

// (String) The device group type. i.e “ZCC_OS“, “NON_ZCC“, “CBI“
func (o GetZIADevicesResultOutput) DeviceGroupType() pulumi.StringOutput {
	return o.ApplyT(func(v GetZIADevicesResult) string { return v.DeviceGroupType }).(pulumi.StringOutput)
}

// (String) The device model.
func (o GetZIADevicesResultOutput) DeviceModel() pulumi.StringOutput {
	return o.ApplyT(func(v GetZIADevicesResult) string { return v.DeviceModel }).(pulumi.StringOutput)
}

// (String) The unique identifer for the device group.
func (o GetZIADevicesResultOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v GetZIADevicesResult) int { return v.Id }).(pulumi.IntOutput)
}

// (String) The device name.
func (o GetZIADevicesResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetZIADevicesResult) string { return v.Name }).(pulumi.StringOutput)
}

// (String) The operating system (OS). “ANY“, “OTHER_OS“, “IOS“, “ANDROID_OS“, “WINDOWS_OS“, “MAC_OS“, “LINUX“
func (o GetZIADevicesResultOutput) OsType() pulumi.StringOutput {
	return o.ApplyT(func(v GetZIADevicesResult) string { return v.OsType }).(pulumi.StringOutput)
}

// (String) The operating system version.
func (o GetZIADevicesResultOutput) OsVersion() pulumi.StringOutput {
	return o.ApplyT(func(v GetZIADevicesResult) string { return v.OsVersion }).(pulumi.StringOutput)
}

// (String) The device owner's user name.
func (o GetZIADevicesResultOutput) OwnerName() pulumi.StringOutput {
	return o.ApplyT(func(v GetZIADevicesResult) string { return v.OwnerName }).(pulumi.StringOutput)
}

// (int) The unique identifier of the device owner (i.e., user).
func (o GetZIADevicesResultOutput) OwnerUserId() pulumi.IntOutput {
	return o.ApplyT(func(v GetZIADevicesResult) int { return v.OwnerUserId }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(GetZIADevicesResultOutput{})
}
