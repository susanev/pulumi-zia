// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package zia

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The **zia_admin_users** resource allows the creation and management of ZIA admin user account created in the Zscaler Internet Access cloud or via the API.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"fmt"
//
//	"github.com/pulumi/pulumi-zia/sdk/go/zia"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			superAdmin, err := zia.GetZIAAdminRoles(ctx, &zia.GetZIAAdminRolesArgs{
//				Name: pulumi.StringRef("Super Admin"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			engineering, err := zia.GetZIADepartmentManagement(ctx, &zia.GetZIADepartmentManagementArgs{
//				Name: pulumi.StringRef("Engineering"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = zia.NewZIAAdminUsers(ctx, "johnSmith", &zia.ZIAAdminUsersArgs{
//				LoginName:                   pulumi.String("john.smith@acme.com"),
//				UserName:                    pulumi.String("John Smith"),
//				Email:                       pulumi.String("john.smith@acme.com"),
//				IsPasswordLoginAllowed:      pulumi.Bool(true),
//				Password:                    pulumi.String(fmt.Sprintf("AeQ9E5w8B$")),
//				IsSecurityReportCommEnabled: pulumi.Bool(true),
//				IsServiceUpdateCommEnabled:  pulumi.Bool(true),
//				IsProductUpdateCommEnabled:  pulumi.Bool(true),
//				Comments:                    pulumi.String("Administrator User"),
//				Roles: zia.ZIAAdminUsersRoleArray{
//					&zia.ZIAAdminUsersRoleArgs{
//						Id: *pulumi.Int(superAdmin.Id),
//					},
//				},
//				AdminScopes: zia.ZIAAdminUsersAdminScopeArray{
//					&zia.ZIAAdminUsersAdminScopeArgs{
//						Type: pulumi.String("DEPARTMENT"),
//						ScopeEntities: &zia.ZIAAdminUsersAdminScopeScopeEntitiesArgs{
//							Ids: pulumi.IntArray{
//								*pulumi.Int(engineering.Id),
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type ZIAAdminUsers struct {
	pulumi.CustomResourceState

	AdminId pulumi.IntOutput `pulumi:"adminId"`
	// The admin's scope. A scope is required for admins, but not applicable to auditors. This attribute is subject to change.
	AdminScopes ZIAAdminUsersAdminScopeArrayOutput `pulumi:"adminScopes"`
	// Additional information about the admin or auditor.
	Comments pulumi.StringPtrOutput `pulumi:"comments"`
	// Indicates whether or not the admin account is disabled.
	Disabled pulumi.BoolOutput `pulumi:"disabled"`
	// Admin or auditor's email address.
	Email pulumi.StringOutput `pulumi:"email"`
	// Indicates whether the user is an auditor. This attribute is subject to change.
	IsAuditor pulumi.BoolOutput `pulumi:"isAuditor"`
	// Indicates whether or not Executive Insights App access is enabled for the admin.
	IsExecMobileAppEnabled pulumi.BoolOutput `pulumi:"isExecMobileAppEnabled"`
	// Indicates whether or not the admin can be edited or deleted.
	IsNonEditable pulumi.BoolOutput `pulumi:"isNonEditable"`
	// Indicates whether or not an admin's password has expired.
	IsPasswordExpired pulumi.BoolOutput `pulumi:"isPasswordExpired"`
	// The default is true when SAML Authentication is disabled. When SAML Authentication is enabled, this can be set to false in order to force the admin to login via SSO only.
	IsPasswordLoginAllowed pulumi.BoolOutput `pulumi:"isPasswordLoginAllowed"`
	// Communication setting for Product Update.
	IsProductUpdateCommEnabled pulumi.BoolOutput `pulumi:"isProductUpdateCommEnabled"`
	// Communication for Security Report is enabled.
	IsSecurityReportCommEnabled pulumi.BoolOutput `pulumi:"isSecurityReportCommEnabled"`
	// Communication setting for Service Update.
	IsServiceUpdateCommEnabled pulumi.BoolOutput `pulumi:"isServiceUpdateCommEnabled"`
	// The email address of the admin user to be exported.
	LoginName pulumi.StringOutput `pulumi:"loginName"`
	// The username of the admin user to be exported.
	Password pulumi.StringPtrOutput `pulumi:"password"`
	// Role of the admin. This is not required for an auditor.
	Roles ZIAAdminUsersRoleArrayOutput `pulumi:"roles"`
	// The username of the admin user to be exported.
	Username pulumi.StringOutput `pulumi:"username"`
}

// NewZIAAdminUsers registers a new resource with the given unique name, arguments, and options.
func NewZIAAdminUsers(ctx *pulumi.Context,
	name string, args *ZIAAdminUsersArgs, opts ...pulumi.ResourceOption) (*ZIAAdminUsers, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Email == nil {
		return nil, errors.New("invalid value for required argument 'Email'")
	}
	if args.LoginName == nil {
		return nil, errors.New("invalid value for required argument 'LoginName'")
	}
	if args.Username == nil {
		return nil, errors.New("invalid value for required argument 'Username'")
	}
	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
	})
	opts = append(opts, secrets)
	opts = pkgResourceDefaultOpts(opts)
	var resource ZIAAdminUsers
	err := ctx.RegisterResource("zia:index/zIAAdminUsers:ZIAAdminUsers", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetZIAAdminUsers gets an existing ZIAAdminUsers resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetZIAAdminUsers(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ZIAAdminUsersState, opts ...pulumi.ResourceOption) (*ZIAAdminUsers, error) {
	var resource ZIAAdminUsers
	err := ctx.ReadResource("zia:index/zIAAdminUsers:ZIAAdminUsers", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ZIAAdminUsers resources.
type ziaadminUsersState struct {
	AdminId *int `pulumi:"adminId"`
	// The admin's scope. A scope is required for admins, but not applicable to auditors. This attribute is subject to change.
	AdminScopes []ZIAAdminUsersAdminScope `pulumi:"adminScopes"`
	// Additional information about the admin or auditor.
	Comments *string `pulumi:"comments"`
	// Indicates whether or not the admin account is disabled.
	Disabled *bool `pulumi:"disabled"`
	// Admin or auditor's email address.
	Email *string `pulumi:"email"`
	// Indicates whether the user is an auditor. This attribute is subject to change.
	IsAuditor *bool `pulumi:"isAuditor"`
	// Indicates whether or not Executive Insights App access is enabled for the admin.
	IsExecMobileAppEnabled *bool `pulumi:"isExecMobileAppEnabled"`
	// Indicates whether or not the admin can be edited or deleted.
	IsNonEditable *bool `pulumi:"isNonEditable"`
	// Indicates whether or not an admin's password has expired.
	IsPasswordExpired *bool `pulumi:"isPasswordExpired"`
	// The default is true when SAML Authentication is disabled. When SAML Authentication is enabled, this can be set to false in order to force the admin to login via SSO only.
	IsPasswordLoginAllowed *bool `pulumi:"isPasswordLoginAllowed"`
	// Communication setting for Product Update.
	IsProductUpdateCommEnabled *bool `pulumi:"isProductUpdateCommEnabled"`
	// Communication for Security Report is enabled.
	IsSecurityReportCommEnabled *bool `pulumi:"isSecurityReportCommEnabled"`
	// Communication setting for Service Update.
	IsServiceUpdateCommEnabled *bool `pulumi:"isServiceUpdateCommEnabled"`
	// The email address of the admin user to be exported.
	LoginName *string `pulumi:"loginName"`
	// The username of the admin user to be exported.
	Password *string `pulumi:"password"`
	// Role of the admin. This is not required for an auditor.
	Roles []ZIAAdminUsersRole `pulumi:"roles"`
	// The username of the admin user to be exported.
	Username *string `pulumi:"username"`
}

type ZIAAdminUsersState struct {
	AdminId pulumi.IntPtrInput
	// The admin's scope. A scope is required for admins, but not applicable to auditors. This attribute is subject to change.
	AdminScopes ZIAAdminUsersAdminScopeArrayInput
	// Additional information about the admin or auditor.
	Comments pulumi.StringPtrInput
	// Indicates whether or not the admin account is disabled.
	Disabled pulumi.BoolPtrInput
	// Admin or auditor's email address.
	Email pulumi.StringPtrInput
	// Indicates whether the user is an auditor. This attribute is subject to change.
	IsAuditor pulumi.BoolPtrInput
	// Indicates whether or not Executive Insights App access is enabled for the admin.
	IsExecMobileAppEnabled pulumi.BoolPtrInput
	// Indicates whether or not the admin can be edited or deleted.
	IsNonEditable pulumi.BoolPtrInput
	// Indicates whether or not an admin's password has expired.
	IsPasswordExpired pulumi.BoolPtrInput
	// The default is true when SAML Authentication is disabled. When SAML Authentication is enabled, this can be set to false in order to force the admin to login via SSO only.
	IsPasswordLoginAllowed pulumi.BoolPtrInput
	// Communication setting for Product Update.
	IsProductUpdateCommEnabled pulumi.BoolPtrInput
	// Communication for Security Report is enabled.
	IsSecurityReportCommEnabled pulumi.BoolPtrInput
	// Communication setting for Service Update.
	IsServiceUpdateCommEnabled pulumi.BoolPtrInput
	// The email address of the admin user to be exported.
	LoginName pulumi.StringPtrInput
	// The username of the admin user to be exported.
	Password pulumi.StringPtrInput
	// Role of the admin. This is not required for an auditor.
	Roles ZIAAdminUsersRoleArrayInput
	// The username of the admin user to be exported.
	Username pulumi.StringPtrInput
}

func (ZIAAdminUsersState) ElementType() reflect.Type {
	return reflect.TypeOf((*ziaadminUsersState)(nil)).Elem()
}

type ziaadminUsersArgs struct {
	// The admin's scope. A scope is required for admins, but not applicable to auditors. This attribute is subject to change.
	AdminScopes []ZIAAdminUsersAdminScope `pulumi:"adminScopes"`
	// Additional information about the admin or auditor.
	Comments *string `pulumi:"comments"`
	// Indicates whether or not the admin account is disabled.
	Disabled *bool `pulumi:"disabled"`
	// Admin or auditor's email address.
	Email string `pulumi:"email"`
	// Indicates whether the user is an auditor. This attribute is subject to change.
	IsAuditor *bool `pulumi:"isAuditor"`
	// Indicates whether or not Executive Insights App access is enabled for the admin.
	IsExecMobileAppEnabled *bool `pulumi:"isExecMobileAppEnabled"`
	// Indicates whether or not the admin can be edited or deleted.
	IsNonEditable *bool `pulumi:"isNonEditable"`
	// Indicates whether or not an admin's password has expired.
	IsPasswordExpired *bool `pulumi:"isPasswordExpired"`
	// The default is true when SAML Authentication is disabled. When SAML Authentication is enabled, this can be set to false in order to force the admin to login via SSO only.
	IsPasswordLoginAllowed *bool `pulumi:"isPasswordLoginAllowed"`
	// Communication setting for Product Update.
	IsProductUpdateCommEnabled *bool `pulumi:"isProductUpdateCommEnabled"`
	// Communication for Security Report is enabled.
	IsSecurityReportCommEnabled *bool `pulumi:"isSecurityReportCommEnabled"`
	// Communication setting for Service Update.
	IsServiceUpdateCommEnabled *bool `pulumi:"isServiceUpdateCommEnabled"`
	// The email address of the admin user to be exported.
	LoginName string `pulumi:"loginName"`
	// The username of the admin user to be exported.
	Password *string `pulumi:"password"`
	// Role of the admin. This is not required for an auditor.
	Roles []ZIAAdminUsersRole `pulumi:"roles"`
	// The username of the admin user to be exported.
	Username string `pulumi:"username"`
}

// The set of arguments for constructing a ZIAAdminUsers resource.
type ZIAAdminUsersArgs struct {
	// The admin's scope. A scope is required for admins, but not applicable to auditors. This attribute is subject to change.
	AdminScopes ZIAAdminUsersAdminScopeArrayInput
	// Additional information about the admin or auditor.
	Comments pulumi.StringPtrInput
	// Indicates whether or not the admin account is disabled.
	Disabled pulumi.BoolPtrInput
	// Admin or auditor's email address.
	Email pulumi.StringInput
	// Indicates whether the user is an auditor. This attribute is subject to change.
	IsAuditor pulumi.BoolPtrInput
	// Indicates whether or not Executive Insights App access is enabled for the admin.
	IsExecMobileAppEnabled pulumi.BoolPtrInput
	// Indicates whether or not the admin can be edited or deleted.
	IsNonEditable pulumi.BoolPtrInput
	// Indicates whether or not an admin's password has expired.
	IsPasswordExpired pulumi.BoolPtrInput
	// The default is true when SAML Authentication is disabled. When SAML Authentication is enabled, this can be set to false in order to force the admin to login via SSO only.
	IsPasswordLoginAllowed pulumi.BoolPtrInput
	// Communication setting for Product Update.
	IsProductUpdateCommEnabled pulumi.BoolPtrInput
	// Communication for Security Report is enabled.
	IsSecurityReportCommEnabled pulumi.BoolPtrInput
	// Communication setting for Service Update.
	IsServiceUpdateCommEnabled pulumi.BoolPtrInput
	// The email address of the admin user to be exported.
	LoginName pulumi.StringInput
	// The username of the admin user to be exported.
	Password pulumi.StringPtrInput
	// Role of the admin. This is not required for an auditor.
	Roles ZIAAdminUsersRoleArrayInput
	// The username of the admin user to be exported.
	Username pulumi.StringInput
}

func (ZIAAdminUsersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ziaadminUsersArgs)(nil)).Elem()
}

type ZIAAdminUsersInput interface {
	pulumi.Input

	ToZIAAdminUsersOutput() ZIAAdminUsersOutput
	ToZIAAdminUsersOutputWithContext(ctx context.Context) ZIAAdminUsersOutput
}

func (*ZIAAdminUsers) ElementType() reflect.Type {
	return reflect.TypeOf((**ZIAAdminUsers)(nil)).Elem()
}

func (i *ZIAAdminUsers) ToZIAAdminUsersOutput() ZIAAdminUsersOutput {
	return i.ToZIAAdminUsersOutputWithContext(context.Background())
}

func (i *ZIAAdminUsers) ToZIAAdminUsersOutputWithContext(ctx context.Context) ZIAAdminUsersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZIAAdminUsersOutput)
}

// ZIAAdminUsersArrayInput is an input type that accepts ZIAAdminUsersArray and ZIAAdminUsersArrayOutput values.
// You can construct a concrete instance of `ZIAAdminUsersArrayInput` via:
//
//	ZIAAdminUsersArray{ ZIAAdminUsersArgs{...} }
type ZIAAdminUsersArrayInput interface {
	pulumi.Input

	ToZIAAdminUsersArrayOutput() ZIAAdminUsersArrayOutput
	ToZIAAdminUsersArrayOutputWithContext(context.Context) ZIAAdminUsersArrayOutput
}

type ZIAAdminUsersArray []ZIAAdminUsersInput

func (ZIAAdminUsersArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ZIAAdminUsers)(nil)).Elem()
}

func (i ZIAAdminUsersArray) ToZIAAdminUsersArrayOutput() ZIAAdminUsersArrayOutput {
	return i.ToZIAAdminUsersArrayOutputWithContext(context.Background())
}

func (i ZIAAdminUsersArray) ToZIAAdminUsersArrayOutputWithContext(ctx context.Context) ZIAAdminUsersArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZIAAdminUsersArrayOutput)
}

// ZIAAdminUsersMapInput is an input type that accepts ZIAAdminUsersMap and ZIAAdminUsersMapOutput values.
// You can construct a concrete instance of `ZIAAdminUsersMapInput` via:
//
//	ZIAAdminUsersMap{ "key": ZIAAdminUsersArgs{...} }
type ZIAAdminUsersMapInput interface {
	pulumi.Input

	ToZIAAdminUsersMapOutput() ZIAAdminUsersMapOutput
	ToZIAAdminUsersMapOutputWithContext(context.Context) ZIAAdminUsersMapOutput
}

type ZIAAdminUsersMap map[string]ZIAAdminUsersInput

func (ZIAAdminUsersMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ZIAAdminUsers)(nil)).Elem()
}

func (i ZIAAdminUsersMap) ToZIAAdminUsersMapOutput() ZIAAdminUsersMapOutput {
	return i.ToZIAAdminUsersMapOutputWithContext(context.Background())
}

func (i ZIAAdminUsersMap) ToZIAAdminUsersMapOutputWithContext(ctx context.Context) ZIAAdminUsersMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZIAAdminUsersMapOutput)
}

type ZIAAdminUsersOutput struct{ *pulumi.OutputState }

func (ZIAAdminUsersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ZIAAdminUsers)(nil)).Elem()
}

func (o ZIAAdminUsersOutput) ToZIAAdminUsersOutput() ZIAAdminUsersOutput {
	return o
}

func (o ZIAAdminUsersOutput) ToZIAAdminUsersOutputWithContext(ctx context.Context) ZIAAdminUsersOutput {
	return o
}

func (o ZIAAdminUsersOutput) AdminId() pulumi.IntOutput {
	return o.ApplyT(func(v *ZIAAdminUsers) pulumi.IntOutput { return v.AdminId }).(pulumi.IntOutput)
}

// The admin's scope. A scope is required for admins, but not applicable to auditors. This attribute is subject to change.
func (o ZIAAdminUsersOutput) AdminScopes() ZIAAdminUsersAdminScopeArrayOutput {
	return o.ApplyT(func(v *ZIAAdminUsers) ZIAAdminUsersAdminScopeArrayOutput { return v.AdminScopes }).(ZIAAdminUsersAdminScopeArrayOutput)
}

// Additional information about the admin or auditor.
func (o ZIAAdminUsersOutput) Comments() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ZIAAdminUsers) pulumi.StringPtrOutput { return v.Comments }).(pulumi.StringPtrOutput)
}

// Indicates whether or not the admin account is disabled.
func (o ZIAAdminUsersOutput) Disabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *ZIAAdminUsers) pulumi.BoolOutput { return v.Disabled }).(pulumi.BoolOutput)
}

// Admin or auditor's email address.
func (o ZIAAdminUsersOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v *ZIAAdminUsers) pulumi.StringOutput { return v.Email }).(pulumi.StringOutput)
}

// Indicates whether the user is an auditor. This attribute is subject to change.
func (o ZIAAdminUsersOutput) IsAuditor() pulumi.BoolOutput {
	return o.ApplyT(func(v *ZIAAdminUsers) pulumi.BoolOutput { return v.IsAuditor }).(pulumi.BoolOutput)
}

// Indicates whether or not Executive Insights App access is enabled for the admin.
func (o ZIAAdminUsersOutput) IsExecMobileAppEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *ZIAAdminUsers) pulumi.BoolOutput { return v.IsExecMobileAppEnabled }).(pulumi.BoolOutput)
}

// Indicates whether or not the admin can be edited or deleted.
func (o ZIAAdminUsersOutput) IsNonEditable() pulumi.BoolOutput {
	return o.ApplyT(func(v *ZIAAdminUsers) pulumi.BoolOutput { return v.IsNonEditable }).(pulumi.BoolOutput)
}

// Indicates whether or not an admin's password has expired.
func (o ZIAAdminUsersOutput) IsPasswordExpired() pulumi.BoolOutput {
	return o.ApplyT(func(v *ZIAAdminUsers) pulumi.BoolOutput { return v.IsPasswordExpired }).(pulumi.BoolOutput)
}

// The default is true when SAML Authentication is disabled. When SAML Authentication is enabled, this can be set to false in order to force the admin to login via SSO only.
func (o ZIAAdminUsersOutput) IsPasswordLoginAllowed() pulumi.BoolOutput {
	return o.ApplyT(func(v *ZIAAdminUsers) pulumi.BoolOutput { return v.IsPasswordLoginAllowed }).(pulumi.BoolOutput)
}

// Communication setting for Product Update.
func (o ZIAAdminUsersOutput) IsProductUpdateCommEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *ZIAAdminUsers) pulumi.BoolOutput { return v.IsProductUpdateCommEnabled }).(pulumi.BoolOutput)
}

// Communication for Security Report is enabled.
func (o ZIAAdminUsersOutput) IsSecurityReportCommEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *ZIAAdminUsers) pulumi.BoolOutput { return v.IsSecurityReportCommEnabled }).(pulumi.BoolOutput)
}

// Communication setting for Service Update.
func (o ZIAAdminUsersOutput) IsServiceUpdateCommEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *ZIAAdminUsers) pulumi.BoolOutput { return v.IsServiceUpdateCommEnabled }).(pulumi.BoolOutput)
}

// The email address of the admin user to be exported.
func (o ZIAAdminUsersOutput) LoginName() pulumi.StringOutput {
	return o.ApplyT(func(v *ZIAAdminUsers) pulumi.StringOutput { return v.LoginName }).(pulumi.StringOutput)
}

// The username of the admin user to be exported.
func (o ZIAAdminUsersOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ZIAAdminUsers) pulumi.StringPtrOutput { return v.Password }).(pulumi.StringPtrOutput)
}

// Role of the admin. This is not required for an auditor.
func (o ZIAAdminUsersOutput) Roles() ZIAAdminUsersRoleArrayOutput {
	return o.ApplyT(func(v *ZIAAdminUsers) ZIAAdminUsersRoleArrayOutput { return v.Roles }).(ZIAAdminUsersRoleArrayOutput)
}

// The username of the admin user to be exported.
func (o ZIAAdminUsersOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v *ZIAAdminUsers) pulumi.StringOutput { return v.Username }).(pulumi.StringOutput)
}

type ZIAAdminUsersArrayOutput struct{ *pulumi.OutputState }

func (ZIAAdminUsersArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ZIAAdminUsers)(nil)).Elem()
}

func (o ZIAAdminUsersArrayOutput) ToZIAAdminUsersArrayOutput() ZIAAdminUsersArrayOutput {
	return o
}

func (o ZIAAdminUsersArrayOutput) ToZIAAdminUsersArrayOutputWithContext(ctx context.Context) ZIAAdminUsersArrayOutput {
	return o
}

func (o ZIAAdminUsersArrayOutput) Index(i pulumi.IntInput) ZIAAdminUsersOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ZIAAdminUsers {
		return vs[0].([]*ZIAAdminUsers)[vs[1].(int)]
	}).(ZIAAdminUsersOutput)
}

type ZIAAdminUsersMapOutput struct{ *pulumi.OutputState }

func (ZIAAdminUsersMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ZIAAdminUsers)(nil)).Elem()
}

func (o ZIAAdminUsersMapOutput) ToZIAAdminUsersMapOutput() ZIAAdminUsersMapOutput {
	return o
}

func (o ZIAAdminUsersMapOutput) ToZIAAdminUsersMapOutputWithContext(ctx context.Context) ZIAAdminUsersMapOutput {
	return o
}

func (o ZIAAdminUsersMapOutput) MapIndex(k pulumi.StringInput) ZIAAdminUsersOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ZIAAdminUsers {
		return vs[0].(map[string]*ZIAAdminUsers)[vs[1].(string)]
	}).(ZIAAdminUsersOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ZIAAdminUsersInput)(nil)).Elem(), &ZIAAdminUsers{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZIAAdminUsersArrayInput)(nil)).Elem(), ZIAAdminUsersArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZIAAdminUsersMapInput)(nil)).Elem(), ZIAAdminUsersMap{})
	pulumi.RegisterOutputType(ZIAAdminUsersOutput{})
	pulumi.RegisterOutputType(ZIAAdminUsersArrayOutput{})
	pulumi.RegisterOutputType(ZIAAdminUsersMapOutput{})
}
