// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package zia

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The **zia_traffic_forwarding_gre_tunnel** resource allows the creation and management of GRE tunnel configuration in the Zscaler Internet Access (ZIA) portal.
//
// > **Note:** The provider automatically query the Zscaler cloud for the primary and secondary destination datacenter and virtual IP address (VIP) of the GRE tunnel. The parameter can be overriden if needed by setting the parameters: `primaryDestVip` and `secondaryDestVip`.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-zia/sdk/go/zia"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleZIATrafficForwardingStaticIP, err := zia.NewZIATrafficForwardingStaticIP(ctx, "exampleZIATrafficForwardingStaticIP", &zia.ZIATrafficForwardingStaticIPArgs{
//				IpAddress:   pulumi.String("1.1.1.1"),
//				RoutableIp:  pulumi.Bool(true),
//				Comment:     pulumi.String("Example"),
//				GeoOverride: pulumi.Bool(true),
//				Latitude:    pulumi.Float64(37.418171),
//				Longitude:   -121.95314,
//			})
//			if err != nil {
//				return err
//			}
//			_, err = zia.NewZIATrafficForwardingGRETunnel(ctx, "exampleZIATrafficForwardingGRETunnel", &zia.ZIATrafficForwardingGRETunnelArgs{
//				SourceIp:      exampleZIATrafficForwardingStaticIP.IpAddress,
//				Comment:       pulumi.String("Example"),
//				WithinCountry: pulumi.Bool(true),
//				CountryCode:   pulumi.String("US"),
//				IpUnnumbered:  pulumi.Bool(false),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				exampleZIATrafficForwardingStaticIP,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// > **Note:** The provider will automatically query and set the Zscaler cloud for the next available `/29` internal IP range to be used in a numbered GRE tunnel.
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-zia/sdk/go/zia"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			example, err := zia.NewZIATrafficForwardingStaticIP(ctx, "example", &zia.ZIATrafficForwardingStaticIPArgs{
//				IpAddress:   pulumi.String("1.1.1.1"),
//				RoutableIp:  pulumi.Bool(true),
//				Comment:     pulumi.String("Example"),
//				GeoOverride: pulumi.Bool(true),
//				Latitude:    pulumi.Float64(37.418171),
//				Longitude:   -121.95314,
//			})
//			if err != nil {
//				return err
//			}
//			_, err = zia.NewZIATrafficForwardingGRETunnel(ctx, "telusHomeInternet01Gre01", &zia.ZIATrafficForwardingGRETunnelArgs{
//				SourceIp:      example.IpAddress,
//				Comment:       pulumi.String("Example"),
//				WithinCountry: pulumi.Bool(true),
//				CountryCode:   pulumi.String("CA"),
//				IpUnnumbered:  pulumi.Bool(true),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				example,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type ZIATrafficForwardingGRETunnel struct {
	pulumi.CustomResourceState

	// Additional information about this GRE tunnel
	Comment pulumi.StringPtrOutput `pulumi:"comment"`
	// When withinCountry is enabled, you must set this to the country code.
	CountryCode pulumi.StringOutput `pulumi:"countryCode"`
	// The start of the internal IP address in /29 CIDR range. Automatically set by the provider if `ipUnnumbered` is set to `false`.
	InternalIpRange pulumi.StringOutput `pulumi:"internalIpRange"`
	// This is required to support the automated SD-WAN provisioning of GRE tunnels, when set to true greTunIp and greTunId are set to null
	IpUnnumbered         pulumi.BoolOutput                                      `pulumi:"ipUnnumbered"`
	LastModificationTime pulumi.IntOutput                                       `pulumi:"lastModificationTime"`
	LastModifiedBies     ZIATrafficForwardingGRETunnelLastModifiedByArrayOutput `pulumi:"lastModifiedBies"`
	// **` (Optional) The primary destination data center and virtual IP address (VIP) of the GRE tunnel.
	PrimaryDestVips ZIATrafficForwardingGRETunnelPrimaryDestVipArrayOutput `pulumi:"primaryDestVips"`
	// The secondary destination data center and virtual IP address (VIP) of the GRE tunnel.
	SecondaryDestVips ZIATrafficForwardingGRETunnelSecondaryDestVipArrayOutput `pulumi:"secondaryDestVips"`
	// The source IP address of the GRE tunnel. This is typically a static IP address in the organization or SD-WAN. This IP address must be provisioned within the Zscaler service using the /staticIP endpoint.
	SourceIp pulumi.StringOutput `pulumi:"sourceIp"`
	// The ID of the GRE tunnel.
	TunnelId pulumi.IntOutput `pulumi:"tunnelId"`
	// Restrict the data center virtual IP addresses (VIPs) only to those within the same country as the source IP address
	WithinCountry pulumi.BoolOutput `pulumi:"withinCountry"`
}

// NewZIATrafficForwardingGRETunnel registers a new resource with the given unique name, arguments, and options.
func NewZIATrafficForwardingGRETunnel(ctx *pulumi.Context,
	name string, args *ZIATrafficForwardingGRETunnelArgs, opts ...pulumi.ResourceOption) (*ZIATrafficForwardingGRETunnel, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.SourceIp == nil {
		return nil, errors.New("invalid value for required argument 'SourceIp'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource ZIATrafficForwardingGRETunnel
	err := ctx.RegisterResource("zia:index/zIATrafficForwardingGRETunnel:ZIATrafficForwardingGRETunnel", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetZIATrafficForwardingGRETunnel gets an existing ZIATrafficForwardingGRETunnel resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetZIATrafficForwardingGRETunnel(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ZIATrafficForwardingGRETunnelState, opts ...pulumi.ResourceOption) (*ZIATrafficForwardingGRETunnel, error) {
	var resource ZIATrafficForwardingGRETunnel
	err := ctx.ReadResource("zia:index/zIATrafficForwardingGRETunnel:ZIATrafficForwardingGRETunnel", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ZIATrafficForwardingGRETunnel resources.
type ziatrafficForwardingGRETunnelState struct {
	// Additional information about this GRE tunnel
	Comment *string `pulumi:"comment"`
	// When withinCountry is enabled, you must set this to the country code.
	CountryCode *string `pulumi:"countryCode"`
	// The start of the internal IP address in /29 CIDR range. Automatically set by the provider if `ipUnnumbered` is set to `false`.
	InternalIpRange *string `pulumi:"internalIpRange"`
	// This is required to support the automated SD-WAN provisioning of GRE tunnels, when set to true greTunIp and greTunId are set to null
	IpUnnumbered         *bool                                         `pulumi:"ipUnnumbered"`
	LastModificationTime *int                                          `pulumi:"lastModificationTime"`
	LastModifiedBies     []ZIATrafficForwardingGRETunnelLastModifiedBy `pulumi:"lastModifiedBies"`
	// **` (Optional) The primary destination data center and virtual IP address (VIP) of the GRE tunnel.
	PrimaryDestVips []ZIATrafficForwardingGRETunnelPrimaryDestVip `pulumi:"primaryDestVips"`
	// The secondary destination data center and virtual IP address (VIP) of the GRE tunnel.
	SecondaryDestVips []ZIATrafficForwardingGRETunnelSecondaryDestVip `pulumi:"secondaryDestVips"`
	// The source IP address of the GRE tunnel. This is typically a static IP address in the organization or SD-WAN. This IP address must be provisioned within the Zscaler service using the /staticIP endpoint.
	SourceIp *string `pulumi:"sourceIp"`
	// The ID of the GRE tunnel.
	TunnelId *int `pulumi:"tunnelId"`
	// Restrict the data center virtual IP addresses (VIPs) only to those within the same country as the source IP address
	WithinCountry *bool `pulumi:"withinCountry"`
}

type ZIATrafficForwardingGRETunnelState struct {
	// Additional information about this GRE tunnel
	Comment pulumi.StringPtrInput
	// When withinCountry is enabled, you must set this to the country code.
	CountryCode pulumi.StringPtrInput
	// The start of the internal IP address in /29 CIDR range. Automatically set by the provider if `ipUnnumbered` is set to `false`.
	InternalIpRange pulumi.StringPtrInput
	// This is required to support the automated SD-WAN provisioning of GRE tunnels, when set to true greTunIp and greTunId are set to null
	IpUnnumbered         pulumi.BoolPtrInput
	LastModificationTime pulumi.IntPtrInput
	LastModifiedBies     ZIATrafficForwardingGRETunnelLastModifiedByArrayInput
	// **` (Optional) The primary destination data center and virtual IP address (VIP) of the GRE tunnel.
	PrimaryDestVips ZIATrafficForwardingGRETunnelPrimaryDestVipArrayInput
	// The secondary destination data center and virtual IP address (VIP) of the GRE tunnel.
	SecondaryDestVips ZIATrafficForwardingGRETunnelSecondaryDestVipArrayInput
	// The source IP address of the GRE tunnel. This is typically a static IP address in the organization or SD-WAN. This IP address must be provisioned within the Zscaler service using the /staticIP endpoint.
	SourceIp pulumi.StringPtrInput
	// The ID of the GRE tunnel.
	TunnelId pulumi.IntPtrInput
	// Restrict the data center virtual IP addresses (VIPs) only to those within the same country as the source IP address
	WithinCountry pulumi.BoolPtrInput
}

func (ZIATrafficForwardingGRETunnelState) ElementType() reflect.Type {
	return reflect.TypeOf((*ziatrafficForwardingGRETunnelState)(nil)).Elem()
}

type ziatrafficForwardingGRETunnelArgs struct {
	// Additional information about this GRE tunnel
	Comment *string `pulumi:"comment"`
	// When withinCountry is enabled, you must set this to the country code.
	CountryCode *string `pulumi:"countryCode"`
	// The start of the internal IP address in /29 CIDR range. Automatically set by the provider if `ipUnnumbered` is set to `false`.
	InternalIpRange *string `pulumi:"internalIpRange"`
	// This is required to support the automated SD-WAN provisioning of GRE tunnels, when set to true greTunIp and greTunId are set to null
	IpUnnumbered *bool `pulumi:"ipUnnumbered"`
	// **` (Optional) The primary destination data center and virtual IP address (VIP) of the GRE tunnel.
	PrimaryDestVips []ZIATrafficForwardingGRETunnelPrimaryDestVip `pulumi:"primaryDestVips"`
	// The secondary destination data center and virtual IP address (VIP) of the GRE tunnel.
	SecondaryDestVips []ZIATrafficForwardingGRETunnelSecondaryDestVip `pulumi:"secondaryDestVips"`
	// The source IP address of the GRE tunnel. This is typically a static IP address in the organization or SD-WAN. This IP address must be provisioned within the Zscaler service using the /staticIP endpoint.
	SourceIp string `pulumi:"sourceIp"`
	// Restrict the data center virtual IP addresses (VIPs) only to those within the same country as the source IP address
	WithinCountry *bool `pulumi:"withinCountry"`
}

// The set of arguments for constructing a ZIATrafficForwardingGRETunnel resource.
type ZIATrafficForwardingGRETunnelArgs struct {
	// Additional information about this GRE tunnel
	Comment pulumi.StringPtrInput
	// When withinCountry is enabled, you must set this to the country code.
	CountryCode pulumi.StringPtrInput
	// The start of the internal IP address in /29 CIDR range. Automatically set by the provider if `ipUnnumbered` is set to `false`.
	InternalIpRange pulumi.StringPtrInput
	// This is required to support the automated SD-WAN provisioning of GRE tunnels, when set to true greTunIp and greTunId are set to null
	IpUnnumbered pulumi.BoolPtrInput
	// **` (Optional) The primary destination data center and virtual IP address (VIP) of the GRE tunnel.
	PrimaryDestVips ZIATrafficForwardingGRETunnelPrimaryDestVipArrayInput
	// The secondary destination data center and virtual IP address (VIP) of the GRE tunnel.
	SecondaryDestVips ZIATrafficForwardingGRETunnelSecondaryDestVipArrayInput
	// The source IP address of the GRE tunnel. This is typically a static IP address in the organization or SD-WAN. This IP address must be provisioned within the Zscaler service using the /staticIP endpoint.
	SourceIp pulumi.StringInput
	// Restrict the data center virtual IP addresses (VIPs) only to those within the same country as the source IP address
	WithinCountry pulumi.BoolPtrInput
}

func (ZIATrafficForwardingGRETunnelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ziatrafficForwardingGRETunnelArgs)(nil)).Elem()
}

type ZIATrafficForwardingGRETunnelInput interface {
	pulumi.Input

	ToZIATrafficForwardingGRETunnelOutput() ZIATrafficForwardingGRETunnelOutput
	ToZIATrafficForwardingGRETunnelOutputWithContext(ctx context.Context) ZIATrafficForwardingGRETunnelOutput
}

func (*ZIATrafficForwardingGRETunnel) ElementType() reflect.Type {
	return reflect.TypeOf((**ZIATrafficForwardingGRETunnel)(nil)).Elem()
}

func (i *ZIATrafficForwardingGRETunnel) ToZIATrafficForwardingGRETunnelOutput() ZIATrafficForwardingGRETunnelOutput {
	return i.ToZIATrafficForwardingGRETunnelOutputWithContext(context.Background())
}

func (i *ZIATrafficForwardingGRETunnel) ToZIATrafficForwardingGRETunnelOutputWithContext(ctx context.Context) ZIATrafficForwardingGRETunnelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZIATrafficForwardingGRETunnelOutput)
}

// ZIATrafficForwardingGRETunnelArrayInput is an input type that accepts ZIATrafficForwardingGRETunnelArray and ZIATrafficForwardingGRETunnelArrayOutput values.
// You can construct a concrete instance of `ZIATrafficForwardingGRETunnelArrayInput` via:
//
//	ZIATrafficForwardingGRETunnelArray{ ZIATrafficForwardingGRETunnelArgs{...} }
type ZIATrafficForwardingGRETunnelArrayInput interface {
	pulumi.Input

	ToZIATrafficForwardingGRETunnelArrayOutput() ZIATrafficForwardingGRETunnelArrayOutput
	ToZIATrafficForwardingGRETunnelArrayOutputWithContext(context.Context) ZIATrafficForwardingGRETunnelArrayOutput
}

type ZIATrafficForwardingGRETunnelArray []ZIATrafficForwardingGRETunnelInput

func (ZIATrafficForwardingGRETunnelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ZIATrafficForwardingGRETunnel)(nil)).Elem()
}

func (i ZIATrafficForwardingGRETunnelArray) ToZIATrafficForwardingGRETunnelArrayOutput() ZIATrafficForwardingGRETunnelArrayOutput {
	return i.ToZIATrafficForwardingGRETunnelArrayOutputWithContext(context.Background())
}

func (i ZIATrafficForwardingGRETunnelArray) ToZIATrafficForwardingGRETunnelArrayOutputWithContext(ctx context.Context) ZIATrafficForwardingGRETunnelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZIATrafficForwardingGRETunnelArrayOutput)
}

// ZIATrafficForwardingGRETunnelMapInput is an input type that accepts ZIATrafficForwardingGRETunnelMap and ZIATrafficForwardingGRETunnelMapOutput values.
// You can construct a concrete instance of `ZIATrafficForwardingGRETunnelMapInput` via:
//
//	ZIATrafficForwardingGRETunnelMap{ "key": ZIATrafficForwardingGRETunnelArgs{...} }
type ZIATrafficForwardingGRETunnelMapInput interface {
	pulumi.Input

	ToZIATrafficForwardingGRETunnelMapOutput() ZIATrafficForwardingGRETunnelMapOutput
	ToZIATrafficForwardingGRETunnelMapOutputWithContext(context.Context) ZIATrafficForwardingGRETunnelMapOutput
}

type ZIATrafficForwardingGRETunnelMap map[string]ZIATrafficForwardingGRETunnelInput

func (ZIATrafficForwardingGRETunnelMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ZIATrafficForwardingGRETunnel)(nil)).Elem()
}

func (i ZIATrafficForwardingGRETunnelMap) ToZIATrafficForwardingGRETunnelMapOutput() ZIATrafficForwardingGRETunnelMapOutput {
	return i.ToZIATrafficForwardingGRETunnelMapOutputWithContext(context.Background())
}

func (i ZIATrafficForwardingGRETunnelMap) ToZIATrafficForwardingGRETunnelMapOutputWithContext(ctx context.Context) ZIATrafficForwardingGRETunnelMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZIATrafficForwardingGRETunnelMapOutput)
}

type ZIATrafficForwardingGRETunnelOutput struct{ *pulumi.OutputState }

func (ZIATrafficForwardingGRETunnelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ZIATrafficForwardingGRETunnel)(nil)).Elem()
}

func (o ZIATrafficForwardingGRETunnelOutput) ToZIATrafficForwardingGRETunnelOutput() ZIATrafficForwardingGRETunnelOutput {
	return o
}

func (o ZIATrafficForwardingGRETunnelOutput) ToZIATrafficForwardingGRETunnelOutputWithContext(ctx context.Context) ZIATrafficForwardingGRETunnelOutput {
	return o
}

// Additional information about this GRE tunnel
func (o ZIATrafficForwardingGRETunnelOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ZIATrafficForwardingGRETunnel) pulumi.StringPtrOutput { return v.Comment }).(pulumi.StringPtrOutput)
}

// When withinCountry is enabled, you must set this to the country code.
func (o ZIATrafficForwardingGRETunnelOutput) CountryCode() pulumi.StringOutput {
	return o.ApplyT(func(v *ZIATrafficForwardingGRETunnel) pulumi.StringOutput { return v.CountryCode }).(pulumi.StringOutput)
}

// The start of the internal IP address in /29 CIDR range. Automatically set by the provider if `ipUnnumbered` is set to `false`.
func (o ZIATrafficForwardingGRETunnelOutput) InternalIpRange() pulumi.StringOutput {
	return o.ApplyT(func(v *ZIATrafficForwardingGRETunnel) pulumi.StringOutput { return v.InternalIpRange }).(pulumi.StringOutput)
}

// This is required to support the automated SD-WAN provisioning of GRE tunnels, when set to true greTunIp and greTunId are set to null
func (o ZIATrafficForwardingGRETunnelOutput) IpUnnumbered() pulumi.BoolOutput {
	return o.ApplyT(func(v *ZIATrafficForwardingGRETunnel) pulumi.BoolOutput { return v.IpUnnumbered }).(pulumi.BoolOutput)
}

func (o ZIATrafficForwardingGRETunnelOutput) LastModificationTime() pulumi.IntOutput {
	return o.ApplyT(func(v *ZIATrafficForwardingGRETunnel) pulumi.IntOutput { return v.LastModificationTime }).(pulumi.IntOutput)
}

func (o ZIATrafficForwardingGRETunnelOutput) LastModifiedBies() ZIATrafficForwardingGRETunnelLastModifiedByArrayOutput {
	return o.ApplyT(func(v *ZIATrafficForwardingGRETunnel) ZIATrafficForwardingGRETunnelLastModifiedByArrayOutput {
		return v.LastModifiedBies
	}).(ZIATrafficForwardingGRETunnelLastModifiedByArrayOutput)
}

// **` (Optional) The primary destination data center and virtual IP address (VIP) of the GRE tunnel.
func (o ZIATrafficForwardingGRETunnelOutput) PrimaryDestVips() ZIATrafficForwardingGRETunnelPrimaryDestVipArrayOutput {
	return o.ApplyT(func(v *ZIATrafficForwardingGRETunnel) ZIATrafficForwardingGRETunnelPrimaryDestVipArrayOutput {
		return v.PrimaryDestVips
	}).(ZIATrafficForwardingGRETunnelPrimaryDestVipArrayOutput)
}

// The secondary destination data center and virtual IP address (VIP) of the GRE tunnel.
func (o ZIATrafficForwardingGRETunnelOutput) SecondaryDestVips() ZIATrafficForwardingGRETunnelSecondaryDestVipArrayOutput {
	return o.ApplyT(func(v *ZIATrafficForwardingGRETunnel) ZIATrafficForwardingGRETunnelSecondaryDestVipArrayOutput {
		return v.SecondaryDestVips
	}).(ZIATrafficForwardingGRETunnelSecondaryDestVipArrayOutput)
}

// The source IP address of the GRE tunnel. This is typically a static IP address in the organization or SD-WAN. This IP address must be provisioned within the Zscaler service using the /staticIP endpoint.
func (o ZIATrafficForwardingGRETunnelOutput) SourceIp() pulumi.StringOutput {
	return o.ApplyT(func(v *ZIATrafficForwardingGRETunnel) pulumi.StringOutput { return v.SourceIp }).(pulumi.StringOutput)
}

// The ID of the GRE tunnel.
func (o ZIATrafficForwardingGRETunnelOutput) TunnelId() pulumi.IntOutput {
	return o.ApplyT(func(v *ZIATrafficForwardingGRETunnel) pulumi.IntOutput { return v.TunnelId }).(pulumi.IntOutput)
}

// Restrict the data center virtual IP addresses (VIPs) only to those within the same country as the source IP address
func (o ZIATrafficForwardingGRETunnelOutput) WithinCountry() pulumi.BoolOutput {
	return o.ApplyT(func(v *ZIATrafficForwardingGRETunnel) pulumi.BoolOutput { return v.WithinCountry }).(pulumi.BoolOutput)
}

type ZIATrafficForwardingGRETunnelArrayOutput struct{ *pulumi.OutputState }

func (ZIATrafficForwardingGRETunnelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ZIATrafficForwardingGRETunnel)(nil)).Elem()
}

func (o ZIATrafficForwardingGRETunnelArrayOutput) ToZIATrafficForwardingGRETunnelArrayOutput() ZIATrafficForwardingGRETunnelArrayOutput {
	return o
}

func (o ZIATrafficForwardingGRETunnelArrayOutput) ToZIATrafficForwardingGRETunnelArrayOutputWithContext(ctx context.Context) ZIATrafficForwardingGRETunnelArrayOutput {
	return o
}

func (o ZIATrafficForwardingGRETunnelArrayOutput) Index(i pulumi.IntInput) ZIATrafficForwardingGRETunnelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ZIATrafficForwardingGRETunnel {
		return vs[0].([]*ZIATrafficForwardingGRETunnel)[vs[1].(int)]
	}).(ZIATrafficForwardingGRETunnelOutput)
}

type ZIATrafficForwardingGRETunnelMapOutput struct{ *pulumi.OutputState }

func (ZIATrafficForwardingGRETunnelMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ZIATrafficForwardingGRETunnel)(nil)).Elem()
}

func (o ZIATrafficForwardingGRETunnelMapOutput) ToZIATrafficForwardingGRETunnelMapOutput() ZIATrafficForwardingGRETunnelMapOutput {
	return o
}

func (o ZIATrafficForwardingGRETunnelMapOutput) ToZIATrafficForwardingGRETunnelMapOutputWithContext(ctx context.Context) ZIATrafficForwardingGRETunnelMapOutput {
	return o
}

func (o ZIATrafficForwardingGRETunnelMapOutput) MapIndex(k pulumi.StringInput) ZIATrafficForwardingGRETunnelOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ZIATrafficForwardingGRETunnel {
		return vs[0].(map[string]*ZIATrafficForwardingGRETunnel)[vs[1].(string)]
	}).(ZIATrafficForwardingGRETunnelOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ZIATrafficForwardingGRETunnelInput)(nil)).Elem(), &ZIATrafficForwardingGRETunnel{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZIATrafficForwardingGRETunnelArrayInput)(nil)).Elem(), ZIATrafficForwardingGRETunnelArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZIATrafficForwardingGRETunnelMapInput)(nil)).Elem(), ZIATrafficForwardingGRETunnelMap{})
	pulumi.RegisterOutputType(ZIATrafficForwardingGRETunnelOutput{})
	pulumi.RegisterOutputType(ZIATrafficForwardingGRETunnelArrayOutput{})
	pulumi.RegisterOutputType(ZIATrafficForwardingGRETunnelMapOutput{})
}
