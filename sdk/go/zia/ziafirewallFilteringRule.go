// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package zia

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The **zia_firewall_filtering_rule** resource allows the creation and management of ZIA Cloud Firewall filtering rules in the Zscaler Internet Access.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-zia/sdk/go/zia"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			zscalerProxyNwServices, err := zia.LookupZIAFirewallFilteringNetworkServices(ctx, &zia.LookupZIAFirewallFilteringNetworkServicesArgs{
//				Name: pulumi.StringRef("ZSCALER_PROXY_NW_SERVICES"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			engineering, err := zia.GetZIADepartmentManagement(ctx, &zia.GetZIADepartmentManagementArgs{
//				Name: pulumi.StringRef("Engineering"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			normalInternet, err := zia.GetZIAGroupManagement(ctx, &zia.GetZIAGroupManagementArgs{
//				Name: pulumi.StringRef("Normal_Internet"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			workHours, err := zia.GetZIATimeWindow(ctx, &zia.GetZIATimeWindowArgs{
//				Name: pulumi.StringRef("Work hours"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			_, err = zia.NewZIAFirewallFilteringRule(ctx, "example", &zia.ZIAFirewallFilteringRuleArgs{
//				Description:       pulumi.String("Example"),
//				Action:            pulumi.String("ALLOW"),
//				State:             pulumi.String("ENABLED"),
//				Order:             pulumi.Int(1),
//				EnableFullLogging: pulumi.Bool(true),
//				NwServices: &zia.ZIAFirewallFilteringRuleNwServicesArgs{
//					Ids: pulumi.IntArray{
//						*pulumi.Int(zscalerProxyNwServices.Id),
//					},
//				},
//				Departments: &zia.ZIAFirewallFilteringRuleDepartmentsArgs{
//					Ids: pulumi.IntArray{
//						*pulumi.Int(engineering.Id),
//					},
//				},
//				Groups: &zia.ZIAFirewallFilteringRuleGroupsArgs{
//					Ids: pulumi.IntArray{
//						*pulumi.Int(normalInternet.Id),
//					},
//				},
//				TimeWindows: &zia.ZIAFirewallFilteringRuleTimeWindowsArgs{
//					Ids: pulumi.IntArray{
//						*pulumi.Int(workHours.Id),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type ZIAFirewallFilteringRule struct {
	pulumi.CustomResourceState

	AccessControl pulumi.StringOutput `pulumi:"accessControl"`
	// Choose the action of the service when packets match the rule. The following actions are accepted: `ALLOW`, `BLOCK_DROP`, `BLOCK_RESET`, `BLOCK_ICMP`, `EVAL_NWAPP`
	Action pulumi.StringOutput `pulumi:"action"`
	// Application service groups on which this rule is applied
	AppServiceGroups ZIAFirewallFilteringRuleAppServiceGroupsOutput `pulumi:"appServiceGroups"`
	// Application services on which this rule is applied
	AppServices ZIAFirewallFilteringRuleAppServicesOutput `pulumi:"appServices"`
	// If set to true, the default rule is applied
	DefaultRule pulumi.BoolOutput `pulumi:"defaultRule"`
	// Apply to any number of departments When not used it implies `Any` to apply the rule to all departments.
	Departments ZIAFirewallFilteringRuleDepartmentsOutput `pulumi:"departments"`
	// Enter additional notes or information. The description cannot exceed 10,240 characters.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// ** - (Optional) -  IP addresses and fully qualified domain names (FQDNs), if the domain has multiple destination IP addresses or if its IP addresses may change. For IP addresses, you can enter individual IP addresses, subnets, or address ranges. If adding multiple items, hit Enter after each entry.
	DestAddresses pulumi.StringArrayOutput `pulumi:"destAddresses"`
	// ** - (Optional) Identify destinations based on the location of a server, select Any to apply the rule to all countries or select the countries to which you want to control traffic.
	DestCountries pulumi.StringArrayOutput `pulumi:"destCountries"`
	// ** - (Optional) identify destinations based on the URL category of the domain, select Any to apply the rule to all categories or select the specific categories you want to control.
	DestIpCategories pulumi.StringArrayOutput `pulumi:"destIpCategories"`
	// ** - (Optional) Any number of destination IP address groups that you want to control with this rule.
	DestIpGroups      ZIAFirewallFilteringRuleDestIpGroupsOutput `pulumi:"destIpGroups"`
	EnableFullLogging pulumi.BoolPtrOutput                       `pulumi:"enableFullLogging"`
	// You can manually select up to `8` groups. When not used it implies `Any` to apply the rule to all groups.
	Groups ZIAFirewallFilteringRuleGroupsOutput `pulumi:"groups"`
	// Labels that are applicable to the rule.
	Labels           ZIAFirewallFilteringRuleLabelsOutput              `pulumi:"labels"`
	LastModifiedBies ZIAFirewallFilteringRuleLastModifiedByArrayOutput `pulumi:"lastModifiedBies"`
	LastModifiedTime pulumi.IntOutput                                  `pulumi:"lastModifiedTime"`
	// You can manually select up to `32` location groups. When not used it implies `Any` to apply the rule to all location groups.
	LocationGroups ZIAFirewallFilteringRuleLocationGroupsOutput `pulumi:"locationGroups"`
	// You can manually select up to `8` locations. When not used it implies `Any` to apply the rule to all groups.
	Locations ZIAFirewallFilteringRuleLocationsOutput `pulumi:"locations"`
	// Name of the network service group
	Name pulumi.StringOutput `pulumi:"name"`
	// Any number of application groups that you want to control with this rule. The service provides predefined applications that you can group, but not modify
	NwApplicationGroups ZIAFirewallFilteringRuleNwApplicationGroupsOutput `pulumi:"nwApplicationGroups"`
	// When not used it applies the rule to all applications. The service provides predefined applications, which you can group, but not modify.
	NwApplications pulumi.StringArrayOutput `pulumi:"nwApplications"`
	// Any number of predefined or custom network service groups to which the rule applies.
	NwServiceGroups ZIAFirewallFilteringRuleNwServiceGroupsOutput `pulumi:"nwServiceGroups"`
	// When not used it applies the rule to all network services or you can select specific network services. The Zscaler firewall has predefined services and you can configure up to `1,024` additional custom services.
	NwServices ZIAFirewallFilteringRuleNwServicesOutput `pulumi:"nwServices"`
	// Policy rules are evaluated in ascending numerical order (Rule 1 before Rule 2, and so on), and the Rule Order reflects this rule's place in the order.
	Order pulumi.IntOutput `pulumi:"order"`
	// If set to true, a predefined rule is applied
	Predefined pulumi.BoolOutput `pulumi:"predefined"`
	// By default, the admin ranking is disabled. To use this feature, you must enable admin rank. The default value is `7`.
	Rank   pulumi.IntOutput `pulumi:"rank"`
	RuleId pulumi.IntOutput `pulumi:"ruleId"`
	// Any number of source IP address groups that you want to control with this rule.
	SrcIpGroups ZIAFirewallFilteringRuleSrcIpGroupsOutput `pulumi:"srcIpGroups"`
	// You can enter individual IP addresses, subnets, or address ranges.
	SrcIps pulumi.StringArrayOutput `pulumi:"srcIps"`
	// An enabled rule is actively enforced. A disabled rule is not actively enforced but does not lose its place in the Rule Order. The service skips it and moves to the next rule.
	State pulumi.StringOutput `pulumi:"state"`
	// You can manually select up to `2` time intervals. When not used it implies `always` to apply the rule to all time intervals.
	TimeWindows ZIAFirewallFilteringRuleTimeWindowsOutput `pulumi:"timeWindows"`
	// You can manually select up to `4` general and/or special users. When not used it implies `Any` to apply the rule to all users.
	Users ZIAFirewallFilteringRuleUsersOutput `pulumi:"users"`
}

// NewZIAFirewallFilteringRule registers a new resource with the given unique name, arguments, and options.
func NewZIAFirewallFilteringRule(ctx *pulumi.Context,
	name string, args *ZIAFirewallFilteringRuleArgs, opts ...pulumi.ResourceOption) (*ZIAFirewallFilteringRule, error) {
	if args == nil {
		args = &ZIAFirewallFilteringRuleArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource ZIAFirewallFilteringRule
	err := ctx.RegisterResource("zia:index/zIAFirewallFilteringRule:ZIAFirewallFilteringRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetZIAFirewallFilteringRule gets an existing ZIAFirewallFilteringRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetZIAFirewallFilteringRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ZIAFirewallFilteringRuleState, opts ...pulumi.ResourceOption) (*ZIAFirewallFilteringRule, error) {
	var resource ZIAFirewallFilteringRule
	err := ctx.ReadResource("zia:index/zIAFirewallFilteringRule:ZIAFirewallFilteringRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ZIAFirewallFilteringRule resources.
type ziafirewallFilteringRuleState struct {
	AccessControl *string `pulumi:"accessControl"`
	// Choose the action of the service when packets match the rule. The following actions are accepted: `ALLOW`, `BLOCK_DROP`, `BLOCK_RESET`, `BLOCK_ICMP`, `EVAL_NWAPP`
	Action *string `pulumi:"action"`
	// Application service groups on which this rule is applied
	AppServiceGroups *ZIAFirewallFilteringRuleAppServiceGroups `pulumi:"appServiceGroups"`
	// Application services on which this rule is applied
	AppServices *ZIAFirewallFilteringRuleAppServices `pulumi:"appServices"`
	// If set to true, the default rule is applied
	DefaultRule *bool `pulumi:"defaultRule"`
	// Apply to any number of departments When not used it implies `Any` to apply the rule to all departments.
	Departments *ZIAFirewallFilteringRuleDepartments `pulumi:"departments"`
	// Enter additional notes or information. The description cannot exceed 10,240 characters.
	Description *string `pulumi:"description"`
	// ** - (Optional) -  IP addresses and fully qualified domain names (FQDNs), if the domain has multiple destination IP addresses or if its IP addresses may change. For IP addresses, you can enter individual IP addresses, subnets, or address ranges. If adding multiple items, hit Enter after each entry.
	DestAddresses []string `pulumi:"destAddresses"`
	// ** - (Optional) Identify destinations based on the location of a server, select Any to apply the rule to all countries or select the countries to which you want to control traffic.
	DestCountries []string `pulumi:"destCountries"`
	// ** - (Optional) identify destinations based on the URL category of the domain, select Any to apply the rule to all categories or select the specific categories you want to control.
	DestIpCategories []string `pulumi:"destIpCategories"`
	// ** - (Optional) Any number of destination IP address groups that you want to control with this rule.
	DestIpGroups      *ZIAFirewallFilteringRuleDestIpGroups `pulumi:"destIpGroups"`
	EnableFullLogging *bool                                 `pulumi:"enableFullLogging"`
	// You can manually select up to `8` groups. When not used it implies `Any` to apply the rule to all groups.
	Groups *ZIAFirewallFilteringRuleGroups `pulumi:"groups"`
	// Labels that are applicable to the rule.
	Labels           *ZIAFirewallFilteringRuleLabels          `pulumi:"labels"`
	LastModifiedBies []ZIAFirewallFilteringRuleLastModifiedBy `pulumi:"lastModifiedBies"`
	LastModifiedTime *int                                     `pulumi:"lastModifiedTime"`
	// You can manually select up to `32` location groups. When not used it implies `Any` to apply the rule to all location groups.
	LocationGroups *ZIAFirewallFilteringRuleLocationGroups `pulumi:"locationGroups"`
	// You can manually select up to `8` locations. When not used it implies `Any` to apply the rule to all groups.
	Locations *ZIAFirewallFilteringRuleLocations `pulumi:"locations"`
	// Name of the network service group
	Name *string `pulumi:"name"`
	// Any number of application groups that you want to control with this rule. The service provides predefined applications that you can group, but not modify
	NwApplicationGroups *ZIAFirewallFilteringRuleNwApplicationGroups `pulumi:"nwApplicationGroups"`
	// When not used it applies the rule to all applications. The service provides predefined applications, which you can group, but not modify.
	NwApplications []string `pulumi:"nwApplications"`
	// Any number of predefined or custom network service groups to which the rule applies.
	NwServiceGroups *ZIAFirewallFilteringRuleNwServiceGroups `pulumi:"nwServiceGroups"`
	// When not used it applies the rule to all network services or you can select specific network services. The Zscaler firewall has predefined services and you can configure up to `1,024` additional custom services.
	NwServices *ZIAFirewallFilteringRuleNwServices `pulumi:"nwServices"`
	// Policy rules are evaluated in ascending numerical order (Rule 1 before Rule 2, and so on), and the Rule Order reflects this rule's place in the order.
	Order *int `pulumi:"order"`
	// If set to true, a predefined rule is applied
	Predefined *bool `pulumi:"predefined"`
	// By default, the admin ranking is disabled. To use this feature, you must enable admin rank. The default value is `7`.
	Rank   *int `pulumi:"rank"`
	RuleId *int `pulumi:"ruleId"`
	// Any number of source IP address groups that you want to control with this rule.
	SrcIpGroups *ZIAFirewallFilteringRuleSrcIpGroups `pulumi:"srcIpGroups"`
	// You can enter individual IP addresses, subnets, or address ranges.
	SrcIps []string `pulumi:"srcIps"`
	// An enabled rule is actively enforced. A disabled rule is not actively enforced but does not lose its place in the Rule Order. The service skips it and moves to the next rule.
	State *string `pulumi:"state"`
	// You can manually select up to `2` time intervals. When not used it implies `always` to apply the rule to all time intervals.
	TimeWindows *ZIAFirewallFilteringRuleTimeWindows `pulumi:"timeWindows"`
	// You can manually select up to `4` general and/or special users. When not used it implies `Any` to apply the rule to all users.
	Users *ZIAFirewallFilteringRuleUsers `pulumi:"users"`
}

type ZIAFirewallFilteringRuleState struct {
	AccessControl pulumi.StringPtrInput
	// Choose the action of the service when packets match the rule. The following actions are accepted: `ALLOW`, `BLOCK_DROP`, `BLOCK_RESET`, `BLOCK_ICMP`, `EVAL_NWAPP`
	Action pulumi.StringPtrInput
	// Application service groups on which this rule is applied
	AppServiceGroups ZIAFirewallFilteringRuleAppServiceGroupsPtrInput
	// Application services on which this rule is applied
	AppServices ZIAFirewallFilteringRuleAppServicesPtrInput
	// If set to true, the default rule is applied
	DefaultRule pulumi.BoolPtrInput
	// Apply to any number of departments When not used it implies `Any` to apply the rule to all departments.
	Departments ZIAFirewallFilteringRuleDepartmentsPtrInput
	// Enter additional notes or information. The description cannot exceed 10,240 characters.
	Description pulumi.StringPtrInput
	// ** - (Optional) -  IP addresses and fully qualified domain names (FQDNs), if the domain has multiple destination IP addresses or if its IP addresses may change. For IP addresses, you can enter individual IP addresses, subnets, or address ranges. If adding multiple items, hit Enter after each entry.
	DestAddresses pulumi.StringArrayInput
	// ** - (Optional) Identify destinations based on the location of a server, select Any to apply the rule to all countries or select the countries to which you want to control traffic.
	DestCountries pulumi.StringArrayInput
	// ** - (Optional) identify destinations based on the URL category of the domain, select Any to apply the rule to all categories or select the specific categories you want to control.
	DestIpCategories pulumi.StringArrayInput
	// ** - (Optional) Any number of destination IP address groups that you want to control with this rule.
	DestIpGroups      ZIAFirewallFilteringRuleDestIpGroupsPtrInput
	EnableFullLogging pulumi.BoolPtrInput
	// You can manually select up to `8` groups. When not used it implies `Any` to apply the rule to all groups.
	Groups ZIAFirewallFilteringRuleGroupsPtrInput
	// Labels that are applicable to the rule.
	Labels           ZIAFirewallFilteringRuleLabelsPtrInput
	LastModifiedBies ZIAFirewallFilteringRuleLastModifiedByArrayInput
	LastModifiedTime pulumi.IntPtrInput
	// You can manually select up to `32` location groups. When not used it implies `Any` to apply the rule to all location groups.
	LocationGroups ZIAFirewallFilteringRuleLocationGroupsPtrInput
	// You can manually select up to `8` locations. When not used it implies `Any` to apply the rule to all groups.
	Locations ZIAFirewallFilteringRuleLocationsPtrInput
	// Name of the network service group
	Name pulumi.StringPtrInput
	// Any number of application groups that you want to control with this rule. The service provides predefined applications that you can group, but not modify
	NwApplicationGroups ZIAFirewallFilteringRuleNwApplicationGroupsPtrInput
	// When not used it applies the rule to all applications. The service provides predefined applications, which you can group, but not modify.
	NwApplications pulumi.StringArrayInput
	// Any number of predefined or custom network service groups to which the rule applies.
	NwServiceGroups ZIAFirewallFilteringRuleNwServiceGroupsPtrInput
	// When not used it applies the rule to all network services or you can select specific network services. The Zscaler firewall has predefined services and you can configure up to `1,024` additional custom services.
	NwServices ZIAFirewallFilteringRuleNwServicesPtrInput
	// Policy rules are evaluated in ascending numerical order (Rule 1 before Rule 2, and so on), and the Rule Order reflects this rule's place in the order.
	Order pulumi.IntPtrInput
	// If set to true, a predefined rule is applied
	Predefined pulumi.BoolPtrInput
	// By default, the admin ranking is disabled. To use this feature, you must enable admin rank. The default value is `7`.
	Rank   pulumi.IntPtrInput
	RuleId pulumi.IntPtrInput
	// Any number of source IP address groups that you want to control with this rule.
	SrcIpGroups ZIAFirewallFilteringRuleSrcIpGroupsPtrInput
	// You can enter individual IP addresses, subnets, or address ranges.
	SrcIps pulumi.StringArrayInput
	// An enabled rule is actively enforced. A disabled rule is not actively enforced but does not lose its place in the Rule Order. The service skips it and moves to the next rule.
	State pulumi.StringPtrInput
	// You can manually select up to `2` time intervals. When not used it implies `always` to apply the rule to all time intervals.
	TimeWindows ZIAFirewallFilteringRuleTimeWindowsPtrInput
	// You can manually select up to `4` general and/or special users. When not used it implies `Any` to apply the rule to all users.
	Users ZIAFirewallFilteringRuleUsersPtrInput
}

func (ZIAFirewallFilteringRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*ziafirewallFilteringRuleState)(nil)).Elem()
}

type ziafirewallFilteringRuleArgs struct {
	AccessControl *string `pulumi:"accessControl"`
	// Choose the action of the service when packets match the rule. The following actions are accepted: `ALLOW`, `BLOCK_DROP`, `BLOCK_RESET`, `BLOCK_ICMP`, `EVAL_NWAPP`
	Action *string `pulumi:"action"`
	// Application service groups on which this rule is applied
	AppServiceGroups *ZIAFirewallFilteringRuleAppServiceGroups `pulumi:"appServiceGroups"`
	// Application services on which this rule is applied
	AppServices *ZIAFirewallFilteringRuleAppServices `pulumi:"appServices"`
	// If set to true, the default rule is applied
	DefaultRule *bool `pulumi:"defaultRule"`
	// Apply to any number of departments When not used it implies `Any` to apply the rule to all departments.
	Departments *ZIAFirewallFilteringRuleDepartments `pulumi:"departments"`
	// Enter additional notes or information. The description cannot exceed 10,240 characters.
	Description *string `pulumi:"description"`
	// ** - (Optional) -  IP addresses and fully qualified domain names (FQDNs), if the domain has multiple destination IP addresses or if its IP addresses may change. For IP addresses, you can enter individual IP addresses, subnets, or address ranges. If adding multiple items, hit Enter after each entry.
	DestAddresses []string `pulumi:"destAddresses"`
	// ** - (Optional) Identify destinations based on the location of a server, select Any to apply the rule to all countries or select the countries to which you want to control traffic.
	DestCountries []string `pulumi:"destCountries"`
	// ** - (Optional) identify destinations based on the URL category of the domain, select Any to apply the rule to all categories or select the specific categories you want to control.
	DestIpCategories []string `pulumi:"destIpCategories"`
	// ** - (Optional) Any number of destination IP address groups that you want to control with this rule.
	DestIpGroups      *ZIAFirewallFilteringRuleDestIpGroups `pulumi:"destIpGroups"`
	EnableFullLogging *bool                                 `pulumi:"enableFullLogging"`
	// You can manually select up to `8` groups. When not used it implies `Any` to apply the rule to all groups.
	Groups *ZIAFirewallFilteringRuleGroups `pulumi:"groups"`
	// Labels that are applicable to the rule.
	Labels           *ZIAFirewallFilteringRuleLabels          `pulumi:"labels"`
	LastModifiedBies []ZIAFirewallFilteringRuleLastModifiedBy `pulumi:"lastModifiedBies"`
	LastModifiedTime *int                                     `pulumi:"lastModifiedTime"`
	// You can manually select up to `32` location groups. When not used it implies `Any` to apply the rule to all location groups.
	LocationGroups *ZIAFirewallFilteringRuleLocationGroups `pulumi:"locationGroups"`
	// You can manually select up to `8` locations. When not used it implies `Any` to apply the rule to all groups.
	Locations *ZIAFirewallFilteringRuleLocations `pulumi:"locations"`
	// Name of the network service group
	Name *string `pulumi:"name"`
	// Any number of application groups that you want to control with this rule. The service provides predefined applications that you can group, but not modify
	NwApplicationGroups *ZIAFirewallFilteringRuleNwApplicationGroups `pulumi:"nwApplicationGroups"`
	// When not used it applies the rule to all applications. The service provides predefined applications, which you can group, but not modify.
	NwApplications []string `pulumi:"nwApplications"`
	// Any number of predefined or custom network service groups to which the rule applies.
	NwServiceGroups *ZIAFirewallFilteringRuleNwServiceGroups `pulumi:"nwServiceGroups"`
	// When not used it applies the rule to all network services or you can select specific network services. The Zscaler firewall has predefined services and you can configure up to `1,024` additional custom services.
	NwServices *ZIAFirewallFilteringRuleNwServices `pulumi:"nwServices"`
	// Policy rules are evaluated in ascending numerical order (Rule 1 before Rule 2, and so on), and the Rule Order reflects this rule's place in the order.
	Order *int `pulumi:"order"`
	// If set to true, a predefined rule is applied
	Predefined *bool `pulumi:"predefined"`
	// By default, the admin ranking is disabled. To use this feature, you must enable admin rank. The default value is `7`.
	Rank *int `pulumi:"rank"`
	// Any number of source IP address groups that you want to control with this rule.
	SrcIpGroups *ZIAFirewallFilteringRuleSrcIpGroups `pulumi:"srcIpGroups"`
	// You can enter individual IP addresses, subnets, or address ranges.
	SrcIps []string `pulumi:"srcIps"`
	// An enabled rule is actively enforced. A disabled rule is not actively enforced but does not lose its place in the Rule Order. The service skips it and moves to the next rule.
	State *string `pulumi:"state"`
	// You can manually select up to `2` time intervals. When not used it implies `always` to apply the rule to all time intervals.
	TimeWindows *ZIAFirewallFilteringRuleTimeWindows `pulumi:"timeWindows"`
	// You can manually select up to `4` general and/or special users. When not used it implies `Any` to apply the rule to all users.
	Users *ZIAFirewallFilteringRuleUsers `pulumi:"users"`
}

// The set of arguments for constructing a ZIAFirewallFilteringRule resource.
type ZIAFirewallFilteringRuleArgs struct {
	AccessControl pulumi.StringPtrInput
	// Choose the action of the service when packets match the rule. The following actions are accepted: `ALLOW`, `BLOCK_DROP`, `BLOCK_RESET`, `BLOCK_ICMP`, `EVAL_NWAPP`
	Action pulumi.StringPtrInput
	// Application service groups on which this rule is applied
	AppServiceGroups ZIAFirewallFilteringRuleAppServiceGroupsPtrInput
	// Application services on which this rule is applied
	AppServices ZIAFirewallFilteringRuleAppServicesPtrInput
	// If set to true, the default rule is applied
	DefaultRule pulumi.BoolPtrInput
	// Apply to any number of departments When not used it implies `Any` to apply the rule to all departments.
	Departments ZIAFirewallFilteringRuleDepartmentsPtrInput
	// Enter additional notes or information. The description cannot exceed 10,240 characters.
	Description pulumi.StringPtrInput
	// ** - (Optional) -  IP addresses and fully qualified domain names (FQDNs), if the domain has multiple destination IP addresses or if its IP addresses may change. For IP addresses, you can enter individual IP addresses, subnets, or address ranges. If adding multiple items, hit Enter after each entry.
	DestAddresses pulumi.StringArrayInput
	// ** - (Optional) Identify destinations based on the location of a server, select Any to apply the rule to all countries or select the countries to which you want to control traffic.
	DestCountries pulumi.StringArrayInput
	// ** - (Optional) identify destinations based on the URL category of the domain, select Any to apply the rule to all categories or select the specific categories you want to control.
	DestIpCategories pulumi.StringArrayInput
	// ** - (Optional) Any number of destination IP address groups that you want to control with this rule.
	DestIpGroups      ZIAFirewallFilteringRuleDestIpGroupsPtrInput
	EnableFullLogging pulumi.BoolPtrInput
	// You can manually select up to `8` groups. When not used it implies `Any` to apply the rule to all groups.
	Groups ZIAFirewallFilteringRuleGroupsPtrInput
	// Labels that are applicable to the rule.
	Labels           ZIAFirewallFilteringRuleLabelsPtrInput
	LastModifiedBies ZIAFirewallFilteringRuleLastModifiedByArrayInput
	LastModifiedTime pulumi.IntPtrInput
	// You can manually select up to `32` location groups. When not used it implies `Any` to apply the rule to all location groups.
	LocationGroups ZIAFirewallFilteringRuleLocationGroupsPtrInput
	// You can manually select up to `8` locations. When not used it implies `Any` to apply the rule to all groups.
	Locations ZIAFirewallFilteringRuleLocationsPtrInput
	// Name of the network service group
	Name pulumi.StringPtrInput
	// Any number of application groups that you want to control with this rule. The service provides predefined applications that you can group, but not modify
	NwApplicationGroups ZIAFirewallFilteringRuleNwApplicationGroupsPtrInput
	// When not used it applies the rule to all applications. The service provides predefined applications, which you can group, but not modify.
	NwApplications pulumi.StringArrayInput
	// Any number of predefined or custom network service groups to which the rule applies.
	NwServiceGroups ZIAFirewallFilteringRuleNwServiceGroupsPtrInput
	// When not used it applies the rule to all network services or you can select specific network services. The Zscaler firewall has predefined services and you can configure up to `1,024` additional custom services.
	NwServices ZIAFirewallFilteringRuleNwServicesPtrInput
	// Policy rules are evaluated in ascending numerical order (Rule 1 before Rule 2, and so on), and the Rule Order reflects this rule's place in the order.
	Order pulumi.IntPtrInput
	// If set to true, a predefined rule is applied
	Predefined pulumi.BoolPtrInput
	// By default, the admin ranking is disabled. To use this feature, you must enable admin rank. The default value is `7`.
	Rank pulumi.IntPtrInput
	// Any number of source IP address groups that you want to control with this rule.
	SrcIpGroups ZIAFirewallFilteringRuleSrcIpGroupsPtrInput
	// You can enter individual IP addresses, subnets, or address ranges.
	SrcIps pulumi.StringArrayInput
	// An enabled rule is actively enforced. A disabled rule is not actively enforced but does not lose its place in the Rule Order. The service skips it and moves to the next rule.
	State pulumi.StringPtrInput
	// You can manually select up to `2` time intervals. When not used it implies `always` to apply the rule to all time intervals.
	TimeWindows ZIAFirewallFilteringRuleTimeWindowsPtrInput
	// You can manually select up to `4` general and/or special users. When not used it implies `Any` to apply the rule to all users.
	Users ZIAFirewallFilteringRuleUsersPtrInput
}

func (ZIAFirewallFilteringRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ziafirewallFilteringRuleArgs)(nil)).Elem()
}

type ZIAFirewallFilteringRuleInput interface {
	pulumi.Input

	ToZIAFirewallFilteringRuleOutput() ZIAFirewallFilteringRuleOutput
	ToZIAFirewallFilteringRuleOutputWithContext(ctx context.Context) ZIAFirewallFilteringRuleOutput
}

func (*ZIAFirewallFilteringRule) ElementType() reflect.Type {
	return reflect.TypeOf((**ZIAFirewallFilteringRule)(nil)).Elem()
}

func (i *ZIAFirewallFilteringRule) ToZIAFirewallFilteringRuleOutput() ZIAFirewallFilteringRuleOutput {
	return i.ToZIAFirewallFilteringRuleOutputWithContext(context.Background())
}

func (i *ZIAFirewallFilteringRule) ToZIAFirewallFilteringRuleOutputWithContext(ctx context.Context) ZIAFirewallFilteringRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZIAFirewallFilteringRuleOutput)
}

// ZIAFirewallFilteringRuleArrayInput is an input type that accepts ZIAFirewallFilteringRuleArray and ZIAFirewallFilteringRuleArrayOutput values.
// You can construct a concrete instance of `ZIAFirewallFilteringRuleArrayInput` via:
//
//	ZIAFirewallFilteringRuleArray{ ZIAFirewallFilteringRuleArgs{...} }
type ZIAFirewallFilteringRuleArrayInput interface {
	pulumi.Input

	ToZIAFirewallFilteringRuleArrayOutput() ZIAFirewallFilteringRuleArrayOutput
	ToZIAFirewallFilteringRuleArrayOutputWithContext(context.Context) ZIAFirewallFilteringRuleArrayOutput
}

type ZIAFirewallFilteringRuleArray []ZIAFirewallFilteringRuleInput

func (ZIAFirewallFilteringRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ZIAFirewallFilteringRule)(nil)).Elem()
}

func (i ZIAFirewallFilteringRuleArray) ToZIAFirewallFilteringRuleArrayOutput() ZIAFirewallFilteringRuleArrayOutput {
	return i.ToZIAFirewallFilteringRuleArrayOutputWithContext(context.Background())
}

func (i ZIAFirewallFilteringRuleArray) ToZIAFirewallFilteringRuleArrayOutputWithContext(ctx context.Context) ZIAFirewallFilteringRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZIAFirewallFilteringRuleArrayOutput)
}

// ZIAFirewallFilteringRuleMapInput is an input type that accepts ZIAFirewallFilteringRuleMap and ZIAFirewallFilteringRuleMapOutput values.
// You can construct a concrete instance of `ZIAFirewallFilteringRuleMapInput` via:
//
//	ZIAFirewallFilteringRuleMap{ "key": ZIAFirewallFilteringRuleArgs{...} }
type ZIAFirewallFilteringRuleMapInput interface {
	pulumi.Input

	ToZIAFirewallFilteringRuleMapOutput() ZIAFirewallFilteringRuleMapOutput
	ToZIAFirewallFilteringRuleMapOutputWithContext(context.Context) ZIAFirewallFilteringRuleMapOutput
}

type ZIAFirewallFilteringRuleMap map[string]ZIAFirewallFilteringRuleInput

func (ZIAFirewallFilteringRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ZIAFirewallFilteringRule)(nil)).Elem()
}

func (i ZIAFirewallFilteringRuleMap) ToZIAFirewallFilteringRuleMapOutput() ZIAFirewallFilteringRuleMapOutput {
	return i.ToZIAFirewallFilteringRuleMapOutputWithContext(context.Background())
}

func (i ZIAFirewallFilteringRuleMap) ToZIAFirewallFilteringRuleMapOutputWithContext(ctx context.Context) ZIAFirewallFilteringRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZIAFirewallFilteringRuleMapOutput)
}

type ZIAFirewallFilteringRuleOutput struct{ *pulumi.OutputState }

func (ZIAFirewallFilteringRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ZIAFirewallFilteringRule)(nil)).Elem()
}

func (o ZIAFirewallFilteringRuleOutput) ToZIAFirewallFilteringRuleOutput() ZIAFirewallFilteringRuleOutput {
	return o
}

func (o ZIAFirewallFilteringRuleOutput) ToZIAFirewallFilteringRuleOutputWithContext(ctx context.Context) ZIAFirewallFilteringRuleOutput {
	return o
}

func (o ZIAFirewallFilteringRuleOutput) AccessControl() pulumi.StringOutput {
	return o.ApplyT(func(v *ZIAFirewallFilteringRule) pulumi.StringOutput { return v.AccessControl }).(pulumi.StringOutput)
}

// Choose the action of the service when packets match the rule. The following actions are accepted: `ALLOW`, `BLOCK_DROP`, `BLOCK_RESET`, `BLOCK_ICMP`, `EVAL_NWAPP`
func (o ZIAFirewallFilteringRuleOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func(v *ZIAFirewallFilteringRule) pulumi.StringOutput { return v.Action }).(pulumi.StringOutput)
}

// Application service groups on which this rule is applied
func (o ZIAFirewallFilteringRuleOutput) AppServiceGroups() ZIAFirewallFilteringRuleAppServiceGroupsOutput {
	return o.ApplyT(func(v *ZIAFirewallFilteringRule) ZIAFirewallFilteringRuleAppServiceGroupsOutput {
		return v.AppServiceGroups
	}).(ZIAFirewallFilteringRuleAppServiceGroupsOutput)
}

// Application services on which this rule is applied
func (o ZIAFirewallFilteringRuleOutput) AppServices() ZIAFirewallFilteringRuleAppServicesOutput {
	return o.ApplyT(func(v *ZIAFirewallFilteringRule) ZIAFirewallFilteringRuleAppServicesOutput { return v.AppServices }).(ZIAFirewallFilteringRuleAppServicesOutput)
}

// If set to true, the default rule is applied
func (o ZIAFirewallFilteringRuleOutput) DefaultRule() pulumi.BoolOutput {
	return o.ApplyT(func(v *ZIAFirewallFilteringRule) pulumi.BoolOutput { return v.DefaultRule }).(pulumi.BoolOutput)
}

// Apply to any number of departments When not used it implies `Any` to apply the rule to all departments.
func (o ZIAFirewallFilteringRuleOutput) Departments() ZIAFirewallFilteringRuleDepartmentsOutput {
	return o.ApplyT(func(v *ZIAFirewallFilteringRule) ZIAFirewallFilteringRuleDepartmentsOutput { return v.Departments }).(ZIAFirewallFilteringRuleDepartmentsOutput)
}

// Enter additional notes or information. The description cannot exceed 10,240 characters.
func (o ZIAFirewallFilteringRuleOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ZIAFirewallFilteringRule) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// ** - (Optional) -  IP addresses and fully qualified domain names (FQDNs), if the domain has multiple destination IP addresses or if its IP addresses may change. For IP addresses, you can enter individual IP addresses, subnets, or address ranges. If adding multiple items, hit Enter after each entry.
func (o ZIAFirewallFilteringRuleOutput) DestAddresses() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ZIAFirewallFilteringRule) pulumi.StringArrayOutput { return v.DestAddresses }).(pulumi.StringArrayOutput)
}

// ** - (Optional) Identify destinations based on the location of a server, select Any to apply the rule to all countries or select the countries to which you want to control traffic.
func (o ZIAFirewallFilteringRuleOutput) DestCountries() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ZIAFirewallFilteringRule) pulumi.StringArrayOutput { return v.DestCountries }).(pulumi.StringArrayOutput)
}

// ** - (Optional) identify destinations based on the URL category of the domain, select Any to apply the rule to all categories or select the specific categories you want to control.
func (o ZIAFirewallFilteringRuleOutput) DestIpCategories() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ZIAFirewallFilteringRule) pulumi.StringArrayOutput { return v.DestIpCategories }).(pulumi.StringArrayOutput)
}

// ** - (Optional) Any number of destination IP address groups that you want to control with this rule.
func (o ZIAFirewallFilteringRuleOutput) DestIpGroups() ZIAFirewallFilteringRuleDestIpGroupsOutput {
	return o.ApplyT(func(v *ZIAFirewallFilteringRule) ZIAFirewallFilteringRuleDestIpGroupsOutput { return v.DestIpGroups }).(ZIAFirewallFilteringRuleDestIpGroupsOutput)
}

func (o ZIAFirewallFilteringRuleOutput) EnableFullLogging() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ZIAFirewallFilteringRule) pulumi.BoolPtrOutput { return v.EnableFullLogging }).(pulumi.BoolPtrOutput)
}

// You can manually select up to `8` groups. When not used it implies `Any` to apply the rule to all groups.
func (o ZIAFirewallFilteringRuleOutput) Groups() ZIAFirewallFilteringRuleGroupsOutput {
	return o.ApplyT(func(v *ZIAFirewallFilteringRule) ZIAFirewallFilteringRuleGroupsOutput { return v.Groups }).(ZIAFirewallFilteringRuleGroupsOutput)
}

// Labels that are applicable to the rule.
func (o ZIAFirewallFilteringRuleOutput) Labels() ZIAFirewallFilteringRuleLabelsOutput {
	return o.ApplyT(func(v *ZIAFirewallFilteringRule) ZIAFirewallFilteringRuleLabelsOutput { return v.Labels }).(ZIAFirewallFilteringRuleLabelsOutput)
}

func (o ZIAFirewallFilteringRuleOutput) LastModifiedBies() ZIAFirewallFilteringRuleLastModifiedByArrayOutput {
	return o.ApplyT(func(v *ZIAFirewallFilteringRule) ZIAFirewallFilteringRuleLastModifiedByArrayOutput {
		return v.LastModifiedBies
	}).(ZIAFirewallFilteringRuleLastModifiedByArrayOutput)
}

func (o ZIAFirewallFilteringRuleOutput) LastModifiedTime() pulumi.IntOutput {
	return o.ApplyT(func(v *ZIAFirewallFilteringRule) pulumi.IntOutput { return v.LastModifiedTime }).(pulumi.IntOutput)
}

// You can manually select up to `32` location groups. When not used it implies `Any` to apply the rule to all location groups.
func (o ZIAFirewallFilteringRuleOutput) LocationGroups() ZIAFirewallFilteringRuleLocationGroupsOutput {
	return o.ApplyT(func(v *ZIAFirewallFilteringRule) ZIAFirewallFilteringRuleLocationGroupsOutput {
		return v.LocationGroups
	}).(ZIAFirewallFilteringRuleLocationGroupsOutput)
}

// You can manually select up to `8` locations. When not used it implies `Any` to apply the rule to all groups.
func (o ZIAFirewallFilteringRuleOutput) Locations() ZIAFirewallFilteringRuleLocationsOutput {
	return o.ApplyT(func(v *ZIAFirewallFilteringRule) ZIAFirewallFilteringRuleLocationsOutput { return v.Locations }).(ZIAFirewallFilteringRuleLocationsOutput)
}

// Name of the network service group
func (o ZIAFirewallFilteringRuleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ZIAFirewallFilteringRule) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Any number of application groups that you want to control with this rule. The service provides predefined applications that you can group, but not modify
func (o ZIAFirewallFilteringRuleOutput) NwApplicationGroups() ZIAFirewallFilteringRuleNwApplicationGroupsOutput {
	return o.ApplyT(func(v *ZIAFirewallFilteringRule) ZIAFirewallFilteringRuleNwApplicationGroupsOutput {
		return v.NwApplicationGroups
	}).(ZIAFirewallFilteringRuleNwApplicationGroupsOutput)
}

// When not used it applies the rule to all applications. The service provides predefined applications, which you can group, but not modify.
func (o ZIAFirewallFilteringRuleOutput) NwApplications() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ZIAFirewallFilteringRule) pulumi.StringArrayOutput { return v.NwApplications }).(pulumi.StringArrayOutput)
}

// Any number of predefined or custom network service groups to which the rule applies.
func (o ZIAFirewallFilteringRuleOutput) NwServiceGroups() ZIAFirewallFilteringRuleNwServiceGroupsOutput {
	return o.ApplyT(func(v *ZIAFirewallFilteringRule) ZIAFirewallFilteringRuleNwServiceGroupsOutput {
		return v.NwServiceGroups
	}).(ZIAFirewallFilteringRuleNwServiceGroupsOutput)
}

// When not used it applies the rule to all network services or you can select specific network services. The Zscaler firewall has predefined services and you can configure up to `1,024` additional custom services.
func (o ZIAFirewallFilteringRuleOutput) NwServices() ZIAFirewallFilteringRuleNwServicesOutput {
	return o.ApplyT(func(v *ZIAFirewallFilteringRule) ZIAFirewallFilteringRuleNwServicesOutput { return v.NwServices }).(ZIAFirewallFilteringRuleNwServicesOutput)
}

// Policy rules are evaluated in ascending numerical order (Rule 1 before Rule 2, and so on), and the Rule Order reflects this rule's place in the order.
func (o ZIAFirewallFilteringRuleOutput) Order() pulumi.IntOutput {
	return o.ApplyT(func(v *ZIAFirewallFilteringRule) pulumi.IntOutput { return v.Order }).(pulumi.IntOutput)
}

// If set to true, a predefined rule is applied
func (o ZIAFirewallFilteringRuleOutput) Predefined() pulumi.BoolOutput {
	return o.ApplyT(func(v *ZIAFirewallFilteringRule) pulumi.BoolOutput { return v.Predefined }).(pulumi.BoolOutput)
}

// By default, the admin ranking is disabled. To use this feature, you must enable admin rank. The default value is `7`.
func (o ZIAFirewallFilteringRuleOutput) Rank() pulumi.IntOutput {
	return o.ApplyT(func(v *ZIAFirewallFilteringRule) pulumi.IntOutput { return v.Rank }).(pulumi.IntOutput)
}

func (o ZIAFirewallFilteringRuleOutput) RuleId() pulumi.IntOutput {
	return o.ApplyT(func(v *ZIAFirewallFilteringRule) pulumi.IntOutput { return v.RuleId }).(pulumi.IntOutput)
}

// Any number of source IP address groups that you want to control with this rule.
func (o ZIAFirewallFilteringRuleOutput) SrcIpGroups() ZIAFirewallFilteringRuleSrcIpGroupsOutput {
	return o.ApplyT(func(v *ZIAFirewallFilteringRule) ZIAFirewallFilteringRuleSrcIpGroupsOutput { return v.SrcIpGroups }).(ZIAFirewallFilteringRuleSrcIpGroupsOutput)
}

// You can enter individual IP addresses, subnets, or address ranges.
func (o ZIAFirewallFilteringRuleOutput) SrcIps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ZIAFirewallFilteringRule) pulumi.StringArrayOutput { return v.SrcIps }).(pulumi.StringArrayOutput)
}

// An enabled rule is actively enforced. A disabled rule is not actively enforced but does not lose its place in the Rule Order. The service skips it and moves to the next rule.
func (o ZIAFirewallFilteringRuleOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *ZIAFirewallFilteringRule) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// You can manually select up to `2` time intervals. When not used it implies `always` to apply the rule to all time intervals.
func (o ZIAFirewallFilteringRuleOutput) TimeWindows() ZIAFirewallFilteringRuleTimeWindowsOutput {
	return o.ApplyT(func(v *ZIAFirewallFilteringRule) ZIAFirewallFilteringRuleTimeWindowsOutput { return v.TimeWindows }).(ZIAFirewallFilteringRuleTimeWindowsOutput)
}

// You can manually select up to `4` general and/or special users. When not used it implies `Any` to apply the rule to all users.
func (o ZIAFirewallFilteringRuleOutput) Users() ZIAFirewallFilteringRuleUsersOutput {
	return o.ApplyT(func(v *ZIAFirewallFilteringRule) ZIAFirewallFilteringRuleUsersOutput { return v.Users }).(ZIAFirewallFilteringRuleUsersOutput)
}

type ZIAFirewallFilteringRuleArrayOutput struct{ *pulumi.OutputState }

func (ZIAFirewallFilteringRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ZIAFirewallFilteringRule)(nil)).Elem()
}

func (o ZIAFirewallFilteringRuleArrayOutput) ToZIAFirewallFilteringRuleArrayOutput() ZIAFirewallFilteringRuleArrayOutput {
	return o
}

func (o ZIAFirewallFilteringRuleArrayOutput) ToZIAFirewallFilteringRuleArrayOutputWithContext(ctx context.Context) ZIAFirewallFilteringRuleArrayOutput {
	return o
}

func (o ZIAFirewallFilteringRuleArrayOutput) Index(i pulumi.IntInput) ZIAFirewallFilteringRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ZIAFirewallFilteringRule {
		return vs[0].([]*ZIAFirewallFilteringRule)[vs[1].(int)]
	}).(ZIAFirewallFilteringRuleOutput)
}

type ZIAFirewallFilteringRuleMapOutput struct{ *pulumi.OutputState }

func (ZIAFirewallFilteringRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ZIAFirewallFilteringRule)(nil)).Elem()
}

func (o ZIAFirewallFilteringRuleMapOutput) ToZIAFirewallFilteringRuleMapOutput() ZIAFirewallFilteringRuleMapOutput {
	return o
}

func (o ZIAFirewallFilteringRuleMapOutput) ToZIAFirewallFilteringRuleMapOutputWithContext(ctx context.Context) ZIAFirewallFilteringRuleMapOutput {
	return o
}

func (o ZIAFirewallFilteringRuleMapOutput) MapIndex(k pulumi.StringInput) ZIAFirewallFilteringRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ZIAFirewallFilteringRule {
		return vs[0].(map[string]*ZIAFirewallFilteringRule)[vs[1].(string)]
	}).(ZIAFirewallFilteringRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ZIAFirewallFilteringRuleInput)(nil)).Elem(), &ZIAFirewallFilteringRule{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZIAFirewallFilteringRuleArrayInput)(nil)).Elem(), ZIAFirewallFilteringRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZIAFirewallFilteringRuleMapInput)(nil)).Elem(), ZIAFirewallFilteringRuleMap{})
	pulumi.RegisterOutputType(ZIAFirewallFilteringRuleOutput{})
	pulumi.RegisterOutputType(ZIAFirewallFilteringRuleArrayOutput{})
	pulumi.RegisterOutputType(ZIAFirewallFilteringRuleMapOutput{})
}
