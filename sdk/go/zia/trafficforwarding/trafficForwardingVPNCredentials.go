// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package trafficforwarding

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The **zia_traffic_forwarding_vpn_credentials** creates and manages VPN credentials that can be associated to locations. VPN is one way to route traffic from customer locations to the cloud. Site-to-site IPSec VPN credentials can be identified by the cloud through one of the following methods:
//
// * Common Name (CN) of IPSec Certificate
// * VPN User FQDN - requires VPN_SITE_TO_SITE subscription
// * VPN IP Address - requires VPN_SITE_TO_SITE subscription
// * Extended Authentication (XAUTH) or hosted mobile UserID - requires VPN_MOBILE subscription
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/zscaler/pulumi-zia/sdk/go/zia/TrafficForwarding"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := TrafficForwarding.NewTrafficForwardingVPNCredentials(ctx, "example", &TrafficForwarding.TrafficForwardingVPNCredentialsArgs{
//				Comments:     pulumi.String("Example"),
//				Fqdn:         pulumi.String("sjc-1-37@acme.com"),
//				PreSharedKey: pulumi.String("newPassword123!"),
//				Type:         pulumi.String("UFQDN"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ```go
// package main
//
// import (
//
//	"github.com/zscaler/pulumi-zia/sdk/go/zia/TrafficForwarding"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleTrafficForwardingStaticIP, err := TrafficForwarding.NewTrafficForwardingStaticIP(ctx, "exampleTrafficForwardingStaticIP", &TrafficForwarding.TrafficForwardingStaticIPArgs{
//				IpAddress:   pulumi.String("1.1.1.1"),
//				RoutableIp:  pulumi.Bool(true),
//				Comment:     pulumi.String("Example"),
//				GeoOverride: pulumi.Bool(true),
//				Latitude:    -36.848461,
//				Longitude:   pulumi.Float64(174.763336),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = TrafficForwarding.NewTrafficForwardingVPNCredentials(ctx, "exampleTrafficForwardingVPNCredentials", &TrafficForwarding.TrafficForwardingVPNCredentialsArgs{
//				Type:         pulumi.String("IP"),
//				IpAddress:    exampleTrafficForwardingStaticIP.IpAddress,
//				Comments:     pulumi.String("Example"),
//				PreSharedKey: pulumi.String("newPassword123!"),
//			}, pulumi.DependsOn([]pulumi.Resource{
//				exampleTrafficForwardingStaticIP,
//			}))
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// > **NOTE** For VPN Credentials of Type `IP` a static IP resource must be created first.
//
// ## Import
//
// Static IP resources can be imported by using `<STATIC IP ID>` or `<IP ADDRESS>`as the import ID.
//
// ```sh
//
//	$ pulumi import zia:TrafficForwarding/trafficForwardingVPNCredentials:TrafficForwardingVPNCredentials example <static_ip_id>
//
// ```
//
//	or
//
// ```sh
//
//	$ pulumi import zia:TrafficForwarding/trafficForwardingVPNCredentials:TrafficForwardingVPNCredentials example <ip_address>
//
// ```
type TrafficForwardingVPNCredentials struct {
	pulumi.CustomResourceState

	// Additional information about this VPN credential.
	Comments pulumi.StringPtrOutput `pulumi:"comments"`
	// Fully Qualified Domain Name. Applicable only to `UFQDN` or `XAUTH` (or `HOSTED_MOBILE_USERS`) auth type.
	Fqdn pulumi.StringPtrOutput `pulumi:"fqdn"`
	// IP Address for the VON credentials. The parameter becomes required if `type = IP`
	IpAddress pulumi.StringPtrOutput `pulumi:"ipAddress"`
	// Pre-shared key. This is a required field for UFQDN and IP auth type.
	PreSharedKey pulumi.StringPtrOutput `pulumi:"preSharedKey"`
	// VPN authentication type (i.e., how the VPN credential is sent to the server). It is not modifiable after VpnCredential is created. The supported values are: `UFQDN` and `IP`
	Type           pulumi.StringPtrOutput `pulumi:"type"`
	VpnCredentalId pulumi.IntOutput       `pulumi:"vpnCredentalId"`
}

// NewTrafficForwardingVPNCredentials registers a new resource with the given unique name, arguments, and options.
func NewTrafficForwardingVPNCredentials(ctx *pulumi.Context,
	name string, args *TrafficForwardingVPNCredentialsArgs, opts ...pulumi.ResourceOption) (*TrafficForwardingVPNCredentials, error) {
	if args == nil {
		args = &TrafficForwardingVPNCredentialsArgs{}
	}

	if args.PreSharedKey != nil {
		args.PreSharedKey = pulumi.ToSecret(args.PreSharedKey).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"preSharedKey",
	})
	opts = append(opts, secrets)
	opts = pkgResourceDefaultOpts(opts)
	var resource TrafficForwardingVPNCredentials
	err := ctx.RegisterResource("zia:TrafficForwarding/trafficForwardingVPNCredentials:TrafficForwardingVPNCredentials", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTrafficForwardingVPNCredentials gets an existing TrafficForwardingVPNCredentials resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTrafficForwardingVPNCredentials(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TrafficForwardingVPNCredentialsState, opts ...pulumi.ResourceOption) (*TrafficForwardingVPNCredentials, error) {
	var resource TrafficForwardingVPNCredentials
	err := ctx.ReadResource("zia:TrafficForwarding/trafficForwardingVPNCredentials:TrafficForwardingVPNCredentials", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering TrafficForwardingVPNCredentials resources.
type trafficForwardingVPNCredentialsState struct {
	// Additional information about this VPN credential.
	Comments *string `pulumi:"comments"`
	// Fully Qualified Domain Name. Applicable only to `UFQDN` or `XAUTH` (or `HOSTED_MOBILE_USERS`) auth type.
	Fqdn *string `pulumi:"fqdn"`
	// IP Address for the VON credentials. The parameter becomes required if `type = IP`
	IpAddress *string `pulumi:"ipAddress"`
	// Pre-shared key. This is a required field for UFQDN and IP auth type.
	PreSharedKey *string `pulumi:"preSharedKey"`
	// VPN authentication type (i.e., how the VPN credential is sent to the server). It is not modifiable after VpnCredential is created. The supported values are: `UFQDN` and `IP`
	Type           *string `pulumi:"type"`
	VpnCredentalId *int    `pulumi:"vpnCredentalId"`
}

type TrafficForwardingVPNCredentialsState struct {
	// Additional information about this VPN credential.
	Comments pulumi.StringPtrInput
	// Fully Qualified Domain Name. Applicable only to `UFQDN` or `XAUTH` (or `HOSTED_MOBILE_USERS`) auth type.
	Fqdn pulumi.StringPtrInput
	// IP Address for the VON credentials. The parameter becomes required if `type = IP`
	IpAddress pulumi.StringPtrInput
	// Pre-shared key. This is a required field for UFQDN and IP auth type.
	PreSharedKey pulumi.StringPtrInput
	// VPN authentication type (i.e., how the VPN credential is sent to the server). It is not modifiable after VpnCredential is created. The supported values are: `UFQDN` and `IP`
	Type           pulumi.StringPtrInput
	VpnCredentalId pulumi.IntPtrInput
}

func (TrafficForwardingVPNCredentialsState) ElementType() reflect.Type {
	return reflect.TypeOf((*trafficForwardingVPNCredentialsState)(nil)).Elem()
}

type trafficForwardingVPNCredentialsArgs struct {
	// Additional information about this VPN credential.
	Comments *string `pulumi:"comments"`
	// Fully Qualified Domain Name. Applicable only to `UFQDN` or `XAUTH` (or `HOSTED_MOBILE_USERS`) auth type.
	Fqdn *string `pulumi:"fqdn"`
	// IP Address for the VON credentials. The parameter becomes required if `type = IP`
	IpAddress *string `pulumi:"ipAddress"`
	// Pre-shared key. This is a required field for UFQDN and IP auth type.
	PreSharedKey *string `pulumi:"preSharedKey"`
	// VPN authentication type (i.e., how the VPN credential is sent to the server). It is not modifiable after VpnCredential is created. The supported values are: `UFQDN` and `IP`
	Type *string `pulumi:"type"`
}

// The set of arguments for constructing a TrafficForwardingVPNCredentials resource.
type TrafficForwardingVPNCredentialsArgs struct {
	// Additional information about this VPN credential.
	Comments pulumi.StringPtrInput
	// Fully Qualified Domain Name. Applicable only to `UFQDN` or `XAUTH` (or `HOSTED_MOBILE_USERS`) auth type.
	Fqdn pulumi.StringPtrInput
	// IP Address for the VON credentials. The parameter becomes required if `type = IP`
	IpAddress pulumi.StringPtrInput
	// Pre-shared key. This is a required field for UFQDN and IP auth type.
	PreSharedKey pulumi.StringPtrInput
	// VPN authentication type (i.e., how the VPN credential is sent to the server). It is not modifiable after VpnCredential is created. The supported values are: `UFQDN` and `IP`
	Type pulumi.StringPtrInput
}

func (TrafficForwardingVPNCredentialsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*trafficForwardingVPNCredentialsArgs)(nil)).Elem()
}

type TrafficForwardingVPNCredentialsInput interface {
	pulumi.Input

	ToTrafficForwardingVPNCredentialsOutput() TrafficForwardingVPNCredentialsOutput
	ToTrafficForwardingVPNCredentialsOutputWithContext(ctx context.Context) TrafficForwardingVPNCredentialsOutput
}

func (*TrafficForwardingVPNCredentials) ElementType() reflect.Type {
	return reflect.TypeOf((**TrafficForwardingVPNCredentials)(nil)).Elem()
}

func (i *TrafficForwardingVPNCredentials) ToTrafficForwardingVPNCredentialsOutput() TrafficForwardingVPNCredentialsOutput {
	return i.ToTrafficForwardingVPNCredentialsOutputWithContext(context.Background())
}

func (i *TrafficForwardingVPNCredentials) ToTrafficForwardingVPNCredentialsOutputWithContext(ctx context.Context) TrafficForwardingVPNCredentialsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrafficForwardingVPNCredentialsOutput)
}

// TrafficForwardingVPNCredentialsArrayInput is an input type that accepts TrafficForwardingVPNCredentialsArray and TrafficForwardingVPNCredentialsArrayOutput values.
// You can construct a concrete instance of `TrafficForwardingVPNCredentialsArrayInput` via:
//
//	TrafficForwardingVPNCredentialsArray{ TrafficForwardingVPNCredentialsArgs{...} }
type TrafficForwardingVPNCredentialsArrayInput interface {
	pulumi.Input

	ToTrafficForwardingVPNCredentialsArrayOutput() TrafficForwardingVPNCredentialsArrayOutput
	ToTrafficForwardingVPNCredentialsArrayOutputWithContext(context.Context) TrafficForwardingVPNCredentialsArrayOutput
}

type TrafficForwardingVPNCredentialsArray []TrafficForwardingVPNCredentialsInput

func (TrafficForwardingVPNCredentialsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TrafficForwardingVPNCredentials)(nil)).Elem()
}

func (i TrafficForwardingVPNCredentialsArray) ToTrafficForwardingVPNCredentialsArrayOutput() TrafficForwardingVPNCredentialsArrayOutput {
	return i.ToTrafficForwardingVPNCredentialsArrayOutputWithContext(context.Background())
}

func (i TrafficForwardingVPNCredentialsArray) ToTrafficForwardingVPNCredentialsArrayOutputWithContext(ctx context.Context) TrafficForwardingVPNCredentialsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrafficForwardingVPNCredentialsArrayOutput)
}

// TrafficForwardingVPNCredentialsMapInput is an input type that accepts TrafficForwardingVPNCredentialsMap and TrafficForwardingVPNCredentialsMapOutput values.
// You can construct a concrete instance of `TrafficForwardingVPNCredentialsMapInput` via:
//
//	TrafficForwardingVPNCredentialsMap{ "key": TrafficForwardingVPNCredentialsArgs{...} }
type TrafficForwardingVPNCredentialsMapInput interface {
	pulumi.Input

	ToTrafficForwardingVPNCredentialsMapOutput() TrafficForwardingVPNCredentialsMapOutput
	ToTrafficForwardingVPNCredentialsMapOutputWithContext(context.Context) TrafficForwardingVPNCredentialsMapOutput
}

type TrafficForwardingVPNCredentialsMap map[string]TrafficForwardingVPNCredentialsInput

func (TrafficForwardingVPNCredentialsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TrafficForwardingVPNCredentials)(nil)).Elem()
}

func (i TrafficForwardingVPNCredentialsMap) ToTrafficForwardingVPNCredentialsMapOutput() TrafficForwardingVPNCredentialsMapOutput {
	return i.ToTrafficForwardingVPNCredentialsMapOutputWithContext(context.Background())
}

func (i TrafficForwardingVPNCredentialsMap) ToTrafficForwardingVPNCredentialsMapOutputWithContext(ctx context.Context) TrafficForwardingVPNCredentialsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TrafficForwardingVPNCredentialsMapOutput)
}

type TrafficForwardingVPNCredentialsOutput struct{ *pulumi.OutputState }

func (TrafficForwardingVPNCredentialsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**TrafficForwardingVPNCredentials)(nil)).Elem()
}

func (o TrafficForwardingVPNCredentialsOutput) ToTrafficForwardingVPNCredentialsOutput() TrafficForwardingVPNCredentialsOutput {
	return o
}

func (o TrafficForwardingVPNCredentialsOutput) ToTrafficForwardingVPNCredentialsOutputWithContext(ctx context.Context) TrafficForwardingVPNCredentialsOutput {
	return o
}

// Additional information about this VPN credential.
func (o TrafficForwardingVPNCredentialsOutput) Comments() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TrafficForwardingVPNCredentials) pulumi.StringPtrOutput { return v.Comments }).(pulumi.StringPtrOutput)
}

// Fully Qualified Domain Name. Applicable only to `UFQDN` or `XAUTH` (or `HOSTED_MOBILE_USERS`) auth type.
func (o TrafficForwardingVPNCredentialsOutput) Fqdn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TrafficForwardingVPNCredentials) pulumi.StringPtrOutput { return v.Fqdn }).(pulumi.StringPtrOutput)
}

// IP Address for the VON credentials. The parameter becomes required if `type = IP`
func (o TrafficForwardingVPNCredentialsOutput) IpAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TrafficForwardingVPNCredentials) pulumi.StringPtrOutput { return v.IpAddress }).(pulumi.StringPtrOutput)
}

// Pre-shared key. This is a required field for UFQDN and IP auth type.
func (o TrafficForwardingVPNCredentialsOutput) PreSharedKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TrafficForwardingVPNCredentials) pulumi.StringPtrOutput { return v.PreSharedKey }).(pulumi.StringPtrOutput)
}

// VPN authentication type (i.e., how the VPN credential is sent to the server). It is not modifiable after VpnCredential is created. The supported values are: `UFQDN` and `IP`
func (o TrafficForwardingVPNCredentialsOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *TrafficForwardingVPNCredentials) pulumi.StringPtrOutput { return v.Type }).(pulumi.StringPtrOutput)
}

func (o TrafficForwardingVPNCredentialsOutput) VpnCredentalId() pulumi.IntOutput {
	return o.ApplyT(func(v *TrafficForwardingVPNCredentials) pulumi.IntOutput { return v.VpnCredentalId }).(pulumi.IntOutput)
}

type TrafficForwardingVPNCredentialsArrayOutput struct{ *pulumi.OutputState }

func (TrafficForwardingVPNCredentialsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*TrafficForwardingVPNCredentials)(nil)).Elem()
}

func (o TrafficForwardingVPNCredentialsArrayOutput) ToTrafficForwardingVPNCredentialsArrayOutput() TrafficForwardingVPNCredentialsArrayOutput {
	return o
}

func (o TrafficForwardingVPNCredentialsArrayOutput) ToTrafficForwardingVPNCredentialsArrayOutputWithContext(ctx context.Context) TrafficForwardingVPNCredentialsArrayOutput {
	return o
}

func (o TrafficForwardingVPNCredentialsArrayOutput) Index(i pulumi.IntInput) TrafficForwardingVPNCredentialsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *TrafficForwardingVPNCredentials {
		return vs[0].([]*TrafficForwardingVPNCredentials)[vs[1].(int)]
	}).(TrafficForwardingVPNCredentialsOutput)
}

type TrafficForwardingVPNCredentialsMapOutput struct{ *pulumi.OutputState }

func (TrafficForwardingVPNCredentialsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*TrafficForwardingVPNCredentials)(nil)).Elem()
}

func (o TrafficForwardingVPNCredentialsMapOutput) ToTrafficForwardingVPNCredentialsMapOutput() TrafficForwardingVPNCredentialsMapOutput {
	return o
}

func (o TrafficForwardingVPNCredentialsMapOutput) ToTrafficForwardingVPNCredentialsMapOutputWithContext(ctx context.Context) TrafficForwardingVPNCredentialsMapOutput {
	return o
}

func (o TrafficForwardingVPNCredentialsMapOutput) MapIndex(k pulumi.StringInput) TrafficForwardingVPNCredentialsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *TrafficForwardingVPNCredentials {
		return vs[0].(map[string]*TrafficForwardingVPNCredentials)[vs[1].(string)]
	}).(TrafficForwardingVPNCredentialsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TrafficForwardingVPNCredentialsInput)(nil)).Elem(), &TrafficForwardingVPNCredentials{})
	pulumi.RegisterInputType(reflect.TypeOf((*TrafficForwardingVPNCredentialsArrayInput)(nil)).Elem(), TrafficForwardingVPNCredentialsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TrafficForwardingVPNCredentialsMapInput)(nil)).Elem(), TrafficForwardingVPNCredentialsMap{})
	pulumi.RegisterOutputType(TrafficForwardingVPNCredentialsOutput{})
	pulumi.RegisterOutputType(TrafficForwardingVPNCredentialsArrayOutput{})
	pulumi.RegisterOutputType(TrafficForwardingVPNCredentialsMapOutput{})
}
