// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package zia

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The **zia_firewall_filtering_network_service** resource allows the creation and management of ZIA Cloud Firewall IP network services in the Zscaler Internet Access. This resource can then be associated with a ZIA cloud firewall filtering rule and network service group resources.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-zia/sdk/go/zia"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := zia.NewZIAFirewallFilteringNetworkServices(ctx, "example", &zia.ZIAFirewallFilteringNetworkServicesArgs{
//				Description: pulumi.String("example"),
//				DestTcpPorts: zia.ZIAFirewallFilteringNetworkServicesDestTcpPortArray{
//					&zia.ZIAFirewallFilteringNetworkServicesDestTcpPortArgs{
//						Start: pulumi.Int(5000),
//					},
//					&zia.ZIAFirewallFilteringNetworkServicesDestTcpPortArgs{
//						Start: pulumi.Int(5001),
//					},
//					&zia.ZIAFirewallFilteringNetworkServicesDestTcpPortArgs{
//						End:   pulumi.Int(5005),
//						Start: pulumi.Int(5003),
//					},
//				},
//				SrcTcpPorts: zia.ZIAFirewallFilteringNetworkServicesSrcTcpPortArray{
//					&zia.ZIAFirewallFilteringNetworkServicesSrcTcpPortArgs{
//						Start: pulumi.Int(5000),
//					},
//					&zia.ZIAFirewallFilteringNetworkServicesSrcTcpPortArgs{
//						Start: pulumi.Int(5001),
//					},
//					&zia.ZIAFirewallFilteringNetworkServicesSrcTcpPortArgs{
//						End:   pulumi.Int(5005),
//						Start: pulumi.Int(5002),
//					},
//				},
//				Type: pulumi.String("CUSTOM"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
type ZIAFirewallFilteringNetworkServices struct {
	pulumi.CustomResourceState

	// Description of the service
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The TCP destination port number (example: 50) or port number range (example: 1000-1050), if any, that is used by the network service.
	DestTcpPorts ZIAFirewallFilteringNetworkServicesDestTcpPortArrayOutput `pulumi:"destTcpPorts"`
	// The UDP source port number (example: 50) or port number range (example: 1000-1050), if any, that is used by the network service.
	DestUdpPorts ZIAFirewallFilteringNetworkServicesDestUdpPortArrayOutput `pulumi:"destUdpPorts"`
	// (Optional
	IsNameL10nTag pulumi.BoolPtrOutput `pulumi:"isNameL10nTag"`
	// Name of the service
	Name             pulumi.StringOutput `pulumi:"name"`
	NetworkServiceId pulumi.IntOutput    `pulumi:"networkServiceId"`
	// The TCP source port number (example: 50) or port number range (example: 1000-1050), if any, that is used by the network service
	SrcTcpPorts ZIAFirewallFilteringNetworkServicesSrcTcpPortArrayOutput `pulumi:"srcTcpPorts"`
	// The UDP source port number (example: 50) or port number range (example: 1000-1050), if any, that is used by the network service.
	SrcUdpPorts ZIAFirewallFilteringNetworkServicesSrcUdpPortArrayOutput `pulumi:"srcUdpPorts"`
	// The following values are supported: `"ICMP_ANY`, `"UDP_ANY"`, `"TCP_ANY"`, `"OTHER_NETWORK_SERVICE"`, `"DNS"`, `"NETBIOS"`, `"FTP"`, `"GNUTELLA"`, `"H_323"`, `"HTTP"`, `"HTTPS"`, `"IKE"`, `"IMAP"`, `"ILS"`, `"IKE_NAT"`, `"IRC"`, `"LDAP"`, `"QUIC"`, `"TDS"`, `"NETMEETING"`, `"NFS"`, `"NTP"`, `"SIP"`, `"SNMP"`, `"SMB"`, `"SMTP"`, `"SSH"`, `"SYSLOG"`, `"TELNET"`, `"TRACEROUTE"`, `"POP3"`, `"PPTP"`, `"RADIUS"`, `"REAL_MEDIA"`, `"RTSP"`, `"VNC"`, `"WHOIS"`, `"KERBEROS_SEC"`, `"TACACS"`, `"SNMPTRAP"`, `"NMAP"`, `"RSYNC"`, `"L2TP"`, `"HTTP_PROXY"`, `"PC_ANYWHERE"`, `"MSN"`, `"ECHO"`, `"AIM"`, `"IDENT"`, `"YMSG"`, `"SCCP"`, `"MGCP_UA"`, `"MGCP_CA"`, `"VDO_LIVE"`, `"OPENVPN"`, `"TFTP"`, `"FTPS_IMPLICIT"`, `"ZSCALER_PROXY_NW_SERVICES"`, `"GRE_PROTOCOL"`, `"ESP_PROTOCOL"`, `"DHCP"`
	Tag pulumi.StringOutput `pulumi:"tag"`
	// Supported values: `STANDARD`, `PREDEFINED`, `CUSTOM`
	Type pulumi.StringPtrOutput `pulumi:"type"`
}

// NewZIAFirewallFilteringNetworkServices registers a new resource with the given unique name, arguments, and options.
func NewZIAFirewallFilteringNetworkServices(ctx *pulumi.Context,
	name string, args *ZIAFirewallFilteringNetworkServicesArgs, opts ...pulumi.ResourceOption) (*ZIAFirewallFilteringNetworkServices, error) {
	if args == nil {
		args = &ZIAFirewallFilteringNetworkServicesArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource ZIAFirewallFilteringNetworkServices
	err := ctx.RegisterResource("zia:index/zIAFirewallFilteringNetworkServices:ZIAFirewallFilteringNetworkServices", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetZIAFirewallFilteringNetworkServices gets an existing ZIAFirewallFilteringNetworkServices resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetZIAFirewallFilteringNetworkServices(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ZIAFirewallFilteringNetworkServicesState, opts ...pulumi.ResourceOption) (*ZIAFirewallFilteringNetworkServices, error) {
	var resource ZIAFirewallFilteringNetworkServices
	err := ctx.ReadResource("zia:index/zIAFirewallFilteringNetworkServices:ZIAFirewallFilteringNetworkServices", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ZIAFirewallFilteringNetworkServices resources.
type ziafirewallFilteringNetworkServicesState struct {
	// Description of the service
	Description *string `pulumi:"description"`
	// The TCP destination port number (example: 50) or port number range (example: 1000-1050), if any, that is used by the network service.
	DestTcpPorts []ZIAFirewallFilteringNetworkServicesDestTcpPort `pulumi:"destTcpPorts"`
	// The UDP source port number (example: 50) or port number range (example: 1000-1050), if any, that is used by the network service.
	DestUdpPorts []ZIAFirewallFilteringNetworkServicesDestUdpPort `pulumi:"destUdpPorts"`
	// (Optional
	IsNameL10nTag *bool `pulumi:"isNameL10nTag"`
	// Name of the service
	Name             *string `pulumi:"name"`
	NetworkServiceId *int    `pulumi:"networkServiceId"`
	// The TCP source port number (example: 50) or port number range (example: 1000-1050), if any, that is used by the network service
	SrcTcpPorts []ZIAFirewallFilteringNetworkServicesSrcTcpPort `pulumi:"srcTcpPorts"`
	// The UDP source port number (example: 50) or port number range (example: 1000-1050), if any, that is used by the network service.
	SrcUdpPorts []ZIAFirewallFilteringNetworkServicesSrcUdpPort `pulumi:"srcUdpPorts"`
	// The following values are supported: `"ICMP_ANY`, `"UDP_ANY"`, `"TCP_ANY"`, `"OTHER_NETWORK_SERVICE"`, `"DNS"`, `"NETBIOS"`, `"FTP"`, `"GNUTELLA"`, `"H_323"`, `"HTTP"`, `"HTTPS"`, `"IKE"`, `"IMAP"`, `"ILS"`, `"IKE_NAT"`, `"IRC"`, `"LDAP"`, `"QUIC"`, `"TDS"`, `"NETMEETING"`, `"NFS"`, `"NTP"`, `"SIP"`, `"SNMP"`, `"SMB"`, `"SMTP"`, `"SSH"`, `"SYSLOG"`, `"TELNET"`, `"TRACEROUTE"`, `"POP3"`, `"PPTP"`, `"RADIUS"`, `"REAL_MEDIA"`, `"RTSP"`, `"VNC"`, `"WHOIS"`, `"KERBEROS_SEC"`, `"TACACS"`, `"SNMPTRAP"`, `"NMAP"`, `"RSYNC"`, `"L2TP"`, `"HTTP_PROXY"`, `"PC_ANYWHERE"`, `"MSN"`, `"ECHO"`, `"AIM"`, `"IDENT"`, `"YMSG"`, `"SCCP"`, `"MGCP_UA"`, `"MGCP_CA"`, `"VDO_LIVE"`, `"OPENVPN"`, `"TFTP"`, `"FTPS_IMPLICIT"`, `"ZSCALER_PROXY_NW_SERVICES"`, `"GRE_PROTOCOL"`, `"ESP_PROTOCOL"`, `"DHCP"`
	Tag *string `pulumi:"tag"`
	// Supported values: `STANDARD`, `PREDEFINED`, `CUSTOM`
	Type *string `pulumi:"type"`
}

type ZIAFirewallFilteringNetworkServicesState struct {
	// Description of the service
	Description pulumi.StringPtrInput
	// The TCP destination port number (example: 50) or port number range (example: 1000-1050), if any, that is used by the network service.
	DestTcpPorts ZIAFirewallFilteringNetworkServicesDestTcpPortArrayInput
	// The UDP source port number (example: 50) or port number range (example: 1000-1050), if any, that is used by the network service.
	DestUdpPorts ZIAFirewallFilteringNetworkServicesDestUdpPortArrayInput
	// (Optional
	IsNameL10nTag pulumi.BoolPtrInput
	// Name of the service
	Name             pulumi.StringPtrInput
	NetworkServiceId pulumi.IntPtrInput
	// The TCP source port number (example: 50) or port number range (example: 1000-1050), if any, that is used by the network service
	SrcTcpPorts ZIAFirewallFilteringNetworkServicesSrcTcpPortArrayInput
	// The UDP source port number (example: 50) or port number range (example: 1000-1050), if any, that is used by the network service.
	SrcUdpPorts ZIAFirewallFilteringNetworkServicesSrcUdpPortArrayInput
	// The following values are supported: `"ICMP_ANY`, `"UDP_ANY"`, `"TCP_ANY"`, `"OTHER_NETWORK_SERVICE"`, `"DNS"`, `"NETBIOS"`, `"FTP"`, `"GNUTELLA"`, `"H_323"`, `"HTTP"`, `"HTTPS"`, `"IKE"`, `"IMAP"`, `"ILS"`, `"IKE_NAT"`, `"IRC"`, `"LDAP"`, `"QUIC"`, `"TDS"`, `"NETMEETING"`, `"NFS"`, `"NTP"`, `"SIP"`, `"SNMP"`, `"SMB"`, `"SMTP"`, `"SSH"`, `"SYSLOG"`, `"TELNET"`, `"TRACEROUTE"`, `"POP3"`, `"PPTP"`, `"RADIUS"`, `"REAL_MEDIA"`, `"RTSP"`, `"VNC"`, `"WHOIS"`, `"KERBEROS_SEC"`, `"TACACS"`, `"SNMPTRAP"`, `"NMAP"`, `"RSYNC"`, `"L2TP"`, `"HTTP_PROXY"`, `"PC_ANYWHERE"`, `"MSN"`, `"ECHO"`, `"AIM"`, `"IDENT"`, `"YMSG"`, `"SCCP"`, `"MGCP_UA"`, `"MGCP_CA"`, `"VDO_LIVE"`, `"OPENVPN"`, `"TFTP"`, `"FTPS_IMPLICIT"`, `"ZSCALER_PROXY_NW_SERVICES"`, `"GRE_PROTOCOL"`, `"ESP_PROTOCOL"`, `"DHCP"`
	Tag pulumi.StringPtrInput
	// Supported values: `STANDARD`, `PREDEFINED`, `CUSTOM`
	Type pulumi.StringPtrInput
}

func (ZIAFirewallFilteringNetworkServicesState) ElementType() reflect.Type {
	return reflect.TypeOf((*ziafirewallFilteringNetworkServicesState)(nil)).Elem()
}

type ziafirewallFilteringNetworkServicesArgs struct {
	// Description of the service
	Description *string `pulumi:"description"`
	// The TCP destination port number (example: 50) or port number range (example: 1000-1050), if any, that is used by the network service.
	DestTcpPorts []ZIAFirewallFilteringNetworkServicesDestTcpPort `pulumi:"destTcpPorts"`
	// The UDP source port number (example: 50) or port number range (example: 1000-1050), if any, that is used by the network service.
	DestUdpPorts []ZIAFirewallFilteringNetworkServicesDestUdpPort `pulumi:"destUdpPorts"`
	// (Optional
	IsNameL10nTag *bool `pulumi:"isNameL10nTag"`
	// Name of the service
	Name *string `pulumi:"name"`
	// The TCP source port number (example: 50) or port number range (example: 1000-1050), if any, that is used by the network service
	SrcTcpPorts []ZIAFirewallFilteringNetworkServicesSrcTcpPort `pulumi:"srcTcpPorts"`
	// The UDP source port number (example: 50) or port number range (example: 1000-1050), if any, that is used by the network service.
	SrcUdpPorts []ZIAFirewallFilteringNetworkServicesSrcUdpPort `pulumi:"srcUdpPorts"`
	// The following values are supported: `"ICMP_ANY`, `"UDP_ANY"`, `"TCP_ANY"`, `"OTHER_NETWORK_SERVICE"`, `"DNS"`, `"NETBIOS"`, `"FTP"`, `"GNUTELLA"`, `"H_323"`, `"HTTP"`, `"HTTPS"`, `"IKE"`, `"IMAP"`, `"ILS"`, `"IKE_NAT"`, `"IRC"`, `"LDAP"`, `"QUIC"`, `"TDS"`, `"NETMEETING"`, `"NFS"`, `"NTP"`, `"SIP"`, `"SNMP"`, `"SMB"`, `"SMTP"`, `"SSH"`, `"SYSLOG"`, `"TELNET"`, `"TRACEROUTE"`, `"POP3"`, `"PPTP"`, `"RADIUS"`, `"REAL_MEDIA"`, `"RTSP"`, `"VNC"`, `"WHOIS"`, `"KERBEROS_SEC"`, `"TACACS"`, `"SNMPTRAP"`, `"NMAP"`, `"RSYNC"`, `"L2TP"`, `"HTTP_PROXY"`, `"PC_ANYWHERE"`, `"MSN"`, `"ECHO"`, `"AIM"`, `"IDENT"`, `"YMSG"`, `"SCCP"`, `"MGCP_UA"`, `"MGCP_CA"`, `"VDO_LIVE"`, `"OPENVPN"`, `"TFTP"`, `"FTPS_IMPLICIT"`, `"ZSCALER_PROXY_NW_SERVICES"`, `"GRE_PROTOCOL"`, `"ESP_PROTOCOL"`, `"DHCP"`
	Tag *string `pulumi:"tag"`
	// Supported values: `STANDARD`, `PREDEFINED`, `CUSTOM`
	Type *string `pulumi:"type"`
}

// The set of arguments for constructing a ZIAFirewallFilteringNetworkServices resource.
type ZIAFirewallFilteringNetworkServicesArgs struct {
	// Description of the service
	Description pulumi.StringPtrInput
	// The TCP destination port number (example: 50) or port number range (example: 1000-1050), if any, that is used by the network service.
	DestTcpPorts ZIAFirewallFilteringNetworkServicesDestTcpPortArrayInput
	// The UDP source port number (example: 50) or port number range (example: 1000-1050), if any, that is used by the network service.
	DestUdpPorts ZIAFirewallFilteringNetworkServicesDestUdpPortArrayInput
	// (Optional
	IsNameL10nTag pulumi.BoolPtrInput
	// Name of the service
	Name pulumi.StringPtrInput
	// The TCP source port number (example: 50) or port number range (example: 1000-1050), if any, that is used by the network service
	SrcTcpPorts ZIAFirewallFilteringNetworkServicesSrcTcpPortArrayInput
	// The UDP source port number (example: 50) or port number range (example: 1000-1050), if any, that is used by the network service.
	SrcUdpPorts ZIAFirewallFilteringNetworkServicesSrcUdpPortArrayInput
	// The following values are supported: `"ICMP_ANY`, `"UDP_ANY"`, `"TCP_ANY"`, `"OTHER_NETWORK_SERVICE"`, `"DNS"`, `"NETBIOS"`, `"FTP"`, `"GNUTELLA"`, `"H_323"`, `"HTTP"`, `"HTTPS"`, `"IKE"`, `"IMAP"`, `"ILS"`, `"IKE_NAT"`, `"IRC"`, `"LDAP"`, `"QUIC"`, `"TDS"`, `"NETMEETING"`, `"NFS"`, `"NTP"`, `"SIP"`, `"SNMP"`, `"SMB"`, `"SMTP"`, `"SSH"`, `"SYSLOG"`, `"TELNET"`, `"TRACEROUTE"`, `"POP3"`, `"PPTP"`, `"RADIUS"`, `"REAL_MEDIA"`, `"RTSP"`, `"VNC"`, `"WHOIS"`, `"KERBEROS_SEC"`, `"TACACS"`, `"SNMPTRAP"`, `"NMAP"`, `"RSYNC"`, `"L2TP"`, `"HTTP_PROXY"`, `"PC_ANYWHERE"`, `"MSN"`, `"ECHO"`, `"AIM"`, `"IDENT"`, `"YMSG"`, `"SCCP"`, `"MGCP_UA"`, `"MGCP_CA"`, `"VDO_LIVE"`, `"OPENVPN"`, `"TFTP"`, `"FTPS_IMPLICIT"`, `"ZSCALER_PROXY_NW_SERVICES"`, `"GRE_PROTOCOL"`, `"ESP_PROTOCOL"`, `"DHCP"`
	Tag pulumi.StringPtrInput
	// Supported values: `STANDARD`, `PREDEFINED`, `CUSTOM`
	Type pulumi.StringPtrInput
}

func (ZIAFirewallFilteringNetworkServicesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ziafirewallFilteringNetworkServicesArgs)(nil)).Elem()
}

type ZIAFirewallFilteringNetworkServicesInput interface {
	pulumi.Input

	ToZIAFirewallFilteringNetworkServicesOutput() ZIAFirewallFilteringNetworkServicesOutput
	ToZIAFirewallFilteringNetworkServicesOutputWithContext(ctx context.Context) ZIAFirewallFilteringNetworkServicesOutput
}

func (*ZIAFirewallFilteringNetworkServices) ElementType() reflect.Type {
	return reflect.TypeOf((**ZIAFirewallFilteringNetworkServices)(nil)).Elem()
}

func (i *ZIAFirewallFilteringNetworkServices) ToZIAFirewallFilteringNetworkServicesOutput() ZIAFirewallFilteringNetworkServicesOutput {
	return i.ToZIAFirewallFilteringNetworkServicesOutputWithContext(context.Background())
}

func (i *ZIAFirewallFilteringNetworkServices) ToZIAFirewallFilteringNetworkServicesOutputWithContext(ctx context.Context) ZIAFirewallFilteringNetworkServicesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZIAFirewallFilteringNetworkServicesOutput)
}

// ZIAFirewallFilteringNetworkServicesArrayInput is an input type that accepts ZIAFirewallFilteringNetworkServicesArray and ZIAFirewallFilteringNetworkServicesArrayOutput values.
// You can construct a concrete instance of `ZIAFirewallFilteringNetworkServicesArrayInput` via:
//
//	ZIAFirewallFilteringNetworkServicesArray{ ZIAFirewallFilteringNetworkServicesArgs{...} }
type ZIAFirewallFilteringNetworkServicesArrayInput interface {
	pulumi.Input

	ToZIAFirewallFilteringNetworkServicesArrayOutput() ZIAFirewallFilteringNetworkServicesArrayOutput
	ToZIAFirewallFilteringNetworkServicesArrayOutputWithContext(context.Context) ZIAFirewallFilteringNetworkServicesArrayOutput
}

type ZIAFirewallFilteringNetworkServicesArray []ZIAFirewallFilteringNetworkServicesInput

func (ZIAFirewallFilteringNetworkServicesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ZIAFirewallFilteringNetworkServices)(nil)).Elem()
}

func (i ZIAFirewallFilteringNetworkServicesArray) ToZIAFirewallFilteringNetworkServicesArrayOutput() ZIAFirewallFilteringNetworkServicesArrayOutput {
	return i.ToZIAFirewallFilteringNetworkServicesArrayOutputWithContext(context.Background())
}

func (i ZIAFirewallFilteringNetworkServicesArray) ToZIAFirewallFilteringNetworkServicesArrayOutputWithContext(ctx context.Context) ZIAFirewallFilteringNetworkServicesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZIAFirewallFilteringNetworkServicesArrayOutput)
}

// ZIAFirewallFilteringNetworkServicesMapInput is an input type that accepts ZIAFirewallFilteringNetworkServicesMap and ZIAFirewallFilteringNetworkServicesMapOutput values.
// You can construct a concrete instance of `ZIAFirewallFilteringNetworkServicesMapInput` via:
//
//	ZIAFirewallFilteringNetworkServicesMap{ "key": ZIAFirewallFilteringNetworkServicesArgs{...} }
type ZIAFirewallFilteringNetworkServicesMapInput interface {
	pulumi.Input

	ToZIAFirewallFilteringNetworkServicesMapOutput() ZIAFirewallFilteringNetworkServicesMapOutput
	ToZIAFirewallFilteringNetworkServicesMapOutputWithContext(context.Context) ZIAFirewallFilteringNetworkServicesMapOutput
}

type ZIAFirewallFilteringNetworkServicesMap map[string]ZIAFirewallFilteringNetworkServicesInput

func (ZIAFirewallFilteringNetworkServicesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ZIAFirewallFilteringNetworkServices)(nil)).Elem()
}

func (i ZIAFirewallFilteringNetworkServicesMap) ToZIAFirewallFilteringNetworkServicesMapOutput() ZIAFirewallFilteringNetworkServicesMapOutput {
	return i.ToZIAFirewallFilteringNetworkServicesMapOutputWithContext(context.Background())
}

func (i ZIAFirewallFilteringNetworkServicesMap) ToZIAFirewallFilteringNetworkServicesMapOutputWithContext(ctx context.Context) ZIAFirewallFilteringNetworkServicesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ZIAFirewallFilteringNetworkServicesMapOutput)
}

type ZIAFirewallFilteringNetworkServicesOutput struct{ *pulumi.OutputState }

func (ZIAFirewallFilteringNetworkServicesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ZIAFirewallFilteringNetworkServices)(nil)).Elem()
}

func (o ZIAFirewallFilteringNetworkServicesOutput) ToZIAFirewallFilteringNetworkServicesOutput() ZIAFirewallFilteringNetworkServicesOutput {
	return o
}

func (o ZIAFirewallFilteringNetworkServicesOutput) ToZIAFirewallFilteringNetworkServicesOutputWithContext(ctx context.Context) ZIAFirewallFilteringNetworkServicesOutput {
	return o
}

// Description of the service
func (o ZIAFirewallFilteringNetworkServicesOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ZIAFirewallFilteringNetworkServices) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The TCP destination port number (example: 50) or port number range (example: 1000-1050), if any, that is used by the network service.
func (o ZIAFirewallFilteringNetworkServicesOutput) DestTcpPorts() ZIAFirewallFilteringNetworkServicesDestTcpPortArrayOutput {
	return o.ApplyT(func(v *ZIAFirewallFilteringNetworkServices) ZIAFirewallFilteringNetworkServicesDestTcpPortArrayOutput {
		return v.DestTcpPorts
	}).(ZIAFirewallFilteringNetworkServicesDestTcpPortArrayOutput)
}

// The UDP source port number (example: 50) or port number range (example: 1000-1050), if any, that is used by the network service.
func (o ZIAFirewallFilteringNetworkServicesOutput) DestUdpPorts() ZIAFirewallFilteringNetworkServicesDestUdpPortArrayOutput {
	return o.ApplyT(func(v *ZIAFirewallFilteringNetworkServices) ZIAFirewallFilteringNetworkServicesDestUdpPortArrayOutput {
		return v.DestUdpPorts
	}).(ZIAFirewallFilteringNetworkServicesDestUdpPortArrayOutput)
}

// (Optional
func (o ZIAFirewallFilteringNetworkServicesOutput) IsNameL10nTag() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ZIAFirewallFilteringNetworkServices) pulumi.BoolPtrOutput { return v.IsNameL10nTag }).(pulumi.BoolPtrOutput)
}

// Name of the service
func (o ZIAFirewallFilteringNetworkServicesOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ZIAFirewallFilteringNetworkServices) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o ZIAFirewallFilteringNetworkServicesOutput) NetworkServiceId() pulumi.IntOutput {
	return o.ApplyT(func(v *ZIAFirewallFilteringNetworkServices) pulumi.IntOutput { return v.NetworkServiceId }).(pulumi.IntOutput)
}

// The TCP source port number (example: 50) or port number range (example: 1000-1050), if any, that is used by the network service
func (o ZIAFirewallFilteringNetworkServicesOutput) SrcTcpPorts() ZIAFirewallFilteringNetworkServicesSrcTcpPortArrayOutput {
	return o.ApplyT(func(v *ZIAFirewallFilteringNetworkServices) ZIAFirewallFilteringNetworkServicesSrcTcpPortArrayOutput {
		return v.SrcTcpPorts
	}).(ZIAFirewallFilteringNetworkServicesSrcTcpPortArrayOutput)
}

// The UDP source port number (example: 50) or port number range (example: 1000-1050), if any, that is used by the network service.
func (o ZIAFirewallFilteringNetworkServicesOutput) SrcUdpPorts() ZIAFirewallFilteringNetworkServicesSrcUdpPortArrayOutput {
	return o.ApplyT(func(v *ZIAFirewallFilteringNetworkServices) ZIAFirewallFilteringNetworkServicesSrcUdpPortArrayOutput {
		return v.SrcUdpPorts
	}).(ZIAFirewallFilteringNetworkServicesSrcUdpPortArrayOutput)
}

// The following values are supported: `"ICMP_ANY`, `"UDP_ANY"`, `"TCP_ANY"`, `"OTHER_NETWORK_SERVICE"`, `"DNS"`, `"NETBIOS"`, `"FTP"`, `"GNUTELLA"`, `"H_323"`, `"HTTP"`, `"HTTPS"`, `"IKE"`, `"IMAP"`, `"ILS"`, `"IKE_NAT"`, `"IRC"`, `"LDAP"`, `"QUIC"`, `"TDS"`, `"NETMEETING"`, `"NFS"`, `"NTP"`, `"SIP"`, `"SNMP"`, `"SMB"`, `"SMTP"`, `"SSH"`, `"SYSLOG"`, `"TELNET"`, `"TRACEROUTE"`, `"POP3"`, `"PPTP"`, `"RADIUS"`, `"REAL_MEDIA"`, `"RTSP"`, `"VNC"`, `"WHOIS"`, `"KERBEROS_SEC"`, `"TACACS"`, `"SNMPTRAP"`, `"NMAP"`, `"RSYNC"`, `"L2TP"`, `"HTTP_PROXY"`, `"PC_ANYWHERE"`, `"MSN"`, `"ECHO"`, `"AIM"`, `"IDENT"`, `"YMSG"`, `"SCCP"`, `"MGCP_UA"`, `"MGCP_CA"`, `"VDO_LIVE"`, `"OPENVPN"`, `"TFTP"`, `"FTPS_IMPLICIT"`, `"ZSCALER_PROXY_NW_SERVICES"`, `"GRE_PROTOCOL"`, `"ESP_PROTOCOL"`, `"DHCP"`
func (o ZIAFirewallFilteringNetworkServicesOutput) Tag() pulumi.StringOutput {
	return o.ApplyT(func(v *ZIAFirewallFilteringNetworkServices) pulumi.StringOutput { return v.Tag }).(pulumi.StringOutput)
}

// Supported values: `STANDARD`, `PREDEFINED`, `CUSTOM`
func (o ZIAFirewallFilteringNetworkServicesOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ZIAFirewallFilteringNetworkServices) pulumi.StringPtrOutput { return v.Type }).(pulumi.StringPtrOutput)
}

type ZIAFirewallFilteringNetworkServicesArrayOutput struct{ *pulumi.OutputState }

func (ZIAFirewallFilteringNetworkServicesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ZIAFirewallFilteringNetworkServices)(nil)).Elem()
}

func (o ZIAFirewallFilteringNetworkServicesArrayOutput) ToZIAFirewallFilteringNetworkServicesArrayOutput() ZIAFirewallFilteringNetworkServicesArrayOutput {
	return o
}

func (o ZIAFirewallFilteringNetworkServicesArrayOutput) ToZIAFirewallFilteringNetworkServicesArrayOutputWithContext(ctx context.Context) ZIAFirewallFilteringNetworkServicesArrayOutput {
	return o
}

func (o ZIAFirewallFilteringNetworkServicesArrayOutput) Index(i pulumi.IntInput) ZIAFirewallFilteringNetworkServicesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ZIAFirewallFilteringNetworkServices {
		return vs[0].([]*ZIAFirewallFilteringNetworkServices)[vs[1].(int)]
	}).(ZIAFirewallFilteringNetworkServicesOutput)
}

type ZIAFirewallFilteringNetworkServicesMapOutput struct{ *pulumi.OutputState }

func (ZIAFirewallFilteringNetworkServicesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ZIAFirewallFilteringNetworkServices)(nil)).Elem()
}

func (o ZIAFirewallFilteringNetworkServicesMapOutput) ToZIAFirewallFilteringNetworkServicesMapOutput() ZIAFirewallFilteringNetworkServicesMapOutput {
	return o
}

func (o ZIAFirewallFilteringNetworkServicesMapOutput) ToZIAFirewallFilteringNetworkServicesMapOutputWithContext(ctx context.Context) ZIAFirewallFilteringNetworkServicesMapOutput {
	return o
}

func (o ZIAFirewallFilteringNetworkServicesMapOutput) MapIndex(k pulumi.StringInput) ZIAFirewallFilteringNetworkServicesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ZIAFirewallFilteringNetworkServices {
		return vs[0].(map[string]*ZIAFirewallFilteringNetworkServices)[vs[1].(string)]
	}).(ZIAFirewallFilteringNetworkServicesOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ZIAFirewallFilteringNetworkServicesInput)(nil)).Elem(), &ZIAFirewallFilteringNetworkServices{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZIAFirewallFilteringNetworkServicesArrayInput)(nil)).Elem(), ZIAFirewallFilteringNetworkServicesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ZIAFirewallFilteringNetworkServicesMapInput)(nil)).Elem(), ZIAFirewallFilteringNetworkServicesMap{})
	pulumi.RegisterOutputType(ZIAFirewallFilteringNetworkServicesOutput{})
	pulumi.RegisterOutputType(ZIAFirewallFilteringNetworkServicesArrayOutput{})
	pulumi.RegisterOutputType(ZIAFirewallFilteringNetworkServicesMapOutput{})
}
