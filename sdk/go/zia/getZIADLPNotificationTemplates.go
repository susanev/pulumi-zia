// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package zia

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Use the **zia_dlp_notification_templates** data source to get information about a ZIA DLP Notification Templates in the Zscaler Internet Access cloud or via the API.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-zia/sdk/go/zia"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := zia.LookupZIADLPNotificationTemplates(ctx, &zia.LookupZIADLPNotificationTemplatesArgs{
//				Name: pulumi.StringRef("DLP Auditor Template Test"),
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupZIADLPNotificationTemplates(ctx *pulumi.Context, args *LookupZIADLPNotificationTemplatesArgs, opts ...pulumi.InvokeOption) (*LookupZIADLPNotificationTemplatesResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv LookupZIADLPNotificationTemplatesResult
	err := ctx.Invoke("zia:index/getZIADLPNotificationTemplates:getZIADLPNotificationTemplates", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getZIADLPNotificationTemplates.
type LookupZIADLPNotificationTemplatesArgs struct {
	// The unique identifier for a DLP notification template.
	Id *int `pulumi:"id"`
	// The DLP policy rule name.
	Name *string `pulumi:"name"`
}

// A collection of values returned by getZIADLPNotificationTemplates.
type LookupZIADLPNotificationTemplatesResult struct {
	AttachContent    bool   `pulumi:"attachContent"`
	HtmlMessage      string `pulumi:"htmlMessage"`
	Id               int    `pulumi:"id"`
	Name             string `pulumi:"name"`
	PlainTestMessage string `pulumi:"plainTestMessage"`
	Subject          string `pulumi:"subject"`
	TlsEnabled       bool   `pulumi:"tlsEnabled"`
}

func LookupZIADLPNotificationTemplatesOutput(ctx *pulumi.Context, args LookupZIADLPNotificationTemplatesOutputArgs, opts ...pulumi.InvokeOption) LookupZIADLPNotificationTemplatesResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupZIADLPNotificationTemplatesResult, error) {
			args := v.(LookupZIADLPNotificationTemplatesArgs)
			r, err := LookupZIADLPNotificationTemplates(ctx, &args, opts...)
			var s LookupZIADLPNotificationTemplatesResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupZIADLPNotificationTemplatesResultOutput)
}

// A collection of arguments for invoking getZIADLPNotificationTemplates.
type LookupZIADLPNotificationTemplatesOutputArgs struct {
	// The unique identifier for a DLP notification template.
	Id pulumi.IntPtrInput `pulumi:"id"`
	// The DLP policy rule name.
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (LookupZIADLPNotificationTemplatesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupZIADLPNotificationTemplatesArgs)(nil)).Elem()
}

// A collection of values returned by getZIADLPNotificationTemplates.
type LookupZIADLPNotificationTemplatesResultOutput struct{ *pulumi.OutputState }

func (LookupZIADLPNotificationTemplatesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupZIADLPNotificationTemplatesResult)(nil)).Elem()
}

func (o LookupZIADLPNotificationTemplatesResultOutput) ToLookupZIADLPNotificationTemplatesResultOutput() LookupZIADLPNotificationTemplatesResultOutput {
	return o
}

func (o LookupZIADLPNotificationTemplatesResultOutput) ToLookupZIADLPNotificationTemplatesResultOutputWithContext(ctx context.Context) LookupZIADLPNotificationTemplatesResultOutput {
	return o
}

func (o LookupZIADLPNotificationTemplatesResultOutput) AttachContent() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupZIADLPNotificationTemplatesResult) bool { return v.AttachContent }).(pulumi.BoolOutput)
}

func (o LookupZIADLPNotificationTemplatesResultOutput) HtmlMessage() pulumi.StringOutput {
	return o.ApplyT(func(v LookupZIADLPNotificationTemplatesResult) string { return v.HtmlMessage }).(pulumi.StringOutput)
}

func (o LookupZIADLPNotificationTemplatesResultOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v LookupZIADLPNotificationTemplatesResult) int { return v.Id }).(pulumi.IntOutput)
}

func (o LookupZIADLPNotificationTemplatesResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupZIADLPNotificationTemplatesResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupZIADLPNotificationTemplatesResultOutput) PlainTestMessage() pulumi.StringOutput {
	return o.ApplyT(func(v LookupZIADLPNotificationTemplatesResult) string { return v.PlainTestMessage }).(pulumi.StringOutput)
}

func (o LookupZIADLPNotificationTemplatesResultOutput) Subject() pulumi.StringOutput {
	return o.ApplyT(func(v LookupZIADLPNotificationTemplatesResult) string { return v.Subject }).(pulumi.StringOutput)
}

func (o LookupZIADLPNotificationTemplatesResultOutput) TlsEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupZIADLPNotificationTemplatesResult) bool { return v.TlsEnabled }).(pulumi.BoolOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupZIADLPNotificationTemplatesResultOutput{})
}
